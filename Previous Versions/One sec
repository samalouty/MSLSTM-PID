{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7d144882",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T12:08:43.022324Z",
     "iopub.status.busy": "2025-05-01T12:08:43.022011Z",
     "iopub.status.idle": "2025-05-01T12:08:53.602006Z",
     "shell.execute_reply": "2025-05-01T12:08:53.600850Z"
    },
    "papermill": {
     "duration": 10.591986,
     "end_time": "2025-05-01T12:08:53.603744",
     "exception": false,
     "start_time": "2025-05-01T12:08:43.011758",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cloning into 'PIE'...\r\n",
      "remote: Enumerating objects: 178, done.\u001b[K\r\n",
      "remote: Counting objects: 100% (93/93), done.\u001b[K\r\n",
      "remote: Compressing objects: 100% (74/74), done.\u001b[K\r\n",
      "remote: Total 178 (delta 32), reused 75 (delta 17), pack-reused 85 (from 1)\u001b[K\r\n",
      "Receiving objects: 100% (178/178), 144.63 MiB | 19.63 MiB/s, done.\r\n",
      "Resolving deltas: 100% (73/73), done.\r\n",
      "Updating files: 100% (41/41), done.\r\n",
      "unzip:  cannot find or open /content/PIE/annotations/annotations.zip, /content/PIE/annotations/annotations.zip.zip or /content/PIE/annotations/annotations.zip.ZIP.\r\n",
      "unzip:  cannot find or open /content/PIE/annotations/annotations_vehicle.zip, /content/PIE/annotations/annotations_vehicle.zip.zip or /content/PIE/annotations/annotations_vehicle.zip.ZIP.\r\n"
     ]
    }
   ],
   "source": [
    "!git clone https://github.com/aras62/PIE.git\n",
    "!unzip /content/PIE/annotations/annotations.zip -d /content/PIE\n",
    "!unzip /content/PIE/annotations/annotations_vehicle.zip -d /content/PIE\n",
    "# !git clone https://github.com/hustvl/YOLOP.git\n",
    "!mkdir /kaggle/working/PIE/content"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "62249f5e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T12:08:53.623739Z",
     "iopub.status.busy": "2025-05-01T12:08:53.623383Z",
     "iopub.status.idle": "2025-05-01T12:08:58.918338Z",
     "shell.execute_reply": "2025-05-01T12:08:58.917377Z"
    },
    "papermill": {
     "duration": 5.306433,
     "end_time": "2025-05-01T12:08:58.919973",
     "exception": false,
     "start_time": "2025-05-01T12:08:53.613540",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.0/1.0 MB\u001b[0m \u001b[31m38.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h"
     ]
    }
   ],
   "source": [
    "!pip install -q ultralytics opencv-python-headless "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b14e4bfb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T12:08:58.940068Z",
     "iopub.status.busy": "2025-05-01T12:08:58.939787Z",
     "iopub.status.idle": "2025-05-01T12:08:58.945722Z",
     "shell.execute_reply": "2025-05-01T12:08:58.945018Z"
    },
    "papermill": {
     "duration": 0.017266,
     "end_time": "2025-05-01T12:08:58.946851",
     "exception": false,
     "start_time": "2025-05-01T12:08:58.929585",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import os\n",
    "# import pickle\n",
    "# import sys\n",
    "# import numpy as np\n",
    "# from tqdm.notebook import tqdm\n",
    "# import random\n",
    "\n",
    "# print(\"--- PIE Database Cache Verification Script ---\")\n",
    "\n",
    "# # --- Configuration ---\n",
    "# # <<< --- SET THIS TO THE LOCATION OF YOUR GENERATED CACHE --- >>>\n",
    "# PKL_FILE_PATH = \"/kaggle/working/PIE/data_cache/pie_database.pkl\"\n",
    "# # <<< --- END CONFIGURATION --- >>>\n",
    "\n",
    "# # Define expected top-level keys (these are the set IDs)\n",
    "# EXPECTED_SETS = {'set01', 'set02', 'set03', 'set04', 'set05', 'set06'}\n",
    "\n",
    "# # Define expected keys within each video dictionary\n",
    "# EXPECTED_VIDEO_KEYS = {'num_frames', 'width', 'height',\n",
    "#                        'ped_annotations', 'traffic_annotations', 'vehicle_annotations'}\n",
    "\n",
    "# # Define expected keys within each pedestrian annotation dictionary\n",
    "# EXPECTED_PED_KEYS = {'frames', 'bbox', 'occlusion', 'behavior', 'attributes'}\n",
    "# EXPECTED_PED_BEHAVIOR_KEYS = {'gesture', 'look', 'action', 'cross'}\n",
    "# # Attributes can vary, so we won't check all exhaustively here, but check presence\n",
    "\n",
    "# # Define expected keys within vehicle (ego) frame dictionary (sample)\n",
    "# EXPECTED_EGO_FRAME_KEYS = {'OBD_speed', 'GPS_speed', 'accX', 'accY', 'accZ',\n",
    "#                            'gyroX', 'gyroY', 'gyroZ', 'heading_angle', 'latitude',\n",
    "#                            'longitude', 'pitch', 'roll', 'yaw'}\n",
    "\n",
    "\n",
    "# # --- Verification Parameters ---\n",
    "# MAX_FRAMES_TO_CHECK_PER_VIDEO = 50 # Limit checks per video for speed\n",
    "# MAX_PEDS_TO_CHECK_PER_VIDEO = 20  # Limit checks per video for speed\n",
    "# MAX_TRAFFIC_OBJS_TO_CHECK_PER_VIDEO = 20 # Limit checks\n",
    "# PRINT_SAMPLE_COUNT = 3 # How many sample data lines to print\n",
    "\n",
    "# # --- Counters and Flags ---\n",
    "# errors_found = 0\n",
    "# warnings_found = 0\n",
    "# checked_sets = 0\n",
    "# checked_videos = 0\n",
    "# checked_peds = 0\n",
    "# checked_ped_frames = 0\n",
    "# checked_ego_frames = 0\n",
    "\n",
    "# # --- Helper Function for Reporting ---\n",
    "# def report_error(message):\n",
    "#     global errors_found\n",
    "#     print(f\"  ERROR: {message}\")\n",
    "#     errors_found += 1\n",
    "\n",
    "# def report_warning(message):\n",
    "#     global warnings_found\n",
    "#     print(f\"  Warning: {message}\")\n",
    "#     warnings_found += 1\n",
    "\n",
    "# # --- 1. Load the PKL File ---\n",
    "# print(f\"\\n[1] Loading PKL file: {PKL_FILE_PATH}\")\n",
    "# if not os.path.exists(PKL_FILE_PATH):\n",
    "#     print(f\"  ERROR: PKL file not found at the specified path.\")\n",
    "#     exit()\n",
    "\n",
    "# try:\n",
    "#     with open(PKL_FILE_PATH, 'rb') as f:\n",
    "#         pie_database = pickle.load(f)\n",
    "#     print(\"  -> PKL file loaded successfully.\")\n",
    "# except Exception as e:\n",
    "#     print(f\"  ERROR: Failed to load PKL file: {e}\")\n",
    "#     exit()\n",
    "\n",
    "# # --- 2. Basic Structure Checks ---\n",
    "# print(f\"\\n[2] Checking Top-Level Structure...\")\n",
    "# if not isinstance(pie_database, dict):\n",
    "#     report_error(f\"Loaded data is not a dictionary (Type: {type(pie_database)}).\")\n",
    "#     exit()\n",
    "# print(f\"  -> Top level is a dictionary: OK\")\n",
    "\n",
    "# found_sets = set(pie_database.keys())\n",
    "# if found_sets != EXPECTED_SETS:\n",
    "#     report_warning(f\"Set keys mismatch. Found: {found_sets}, Expected: {EXPECTED_SETS}\")\n",
    "# else:\n",
    "#     print(f\"  -> Found expected set keys: OK\")\n",
    "# checked_sets = len(found_sets)\n",
    "\n",
    "# # --- 3. Detailed Content Checks ---\n",
    "# print(f\"\\n[3] Checking Set/Video/Annotation Structures...\")\n",
    "\n",
    "# sample_data_to_print = []\n",
    "\n",
    "# for set_id in tqdm(found_sets, desc=\"Checking Sets\"):\n",
    "#     if not isinstance(pie_database[set_id], dict):\n",
    "#         report_error(f\"Data for set '{set_id}' is not a dictionary.\")\n",
    "#         continue\n",
    "\n",
    "#     video_ids = list(pie_database[set_id].keys())\n",
    "#     checked_videos += len(video_ids)\n",
    "\n",
    "#     for video_id in tqdm(video_ids, desc=f\"Videos in {set_id}\", leave=False):\n",
    "#         video_data = pie_database[set_id][video_id]\n",
    "#         if not isinstance(video_data, dict):\n",
    "#             report_error(f\"Data for video '{set_id}/{video_id}' is not a dictionary.\")\n",
    "#             continue\n",
    "\n",
    "#         # Check video-level keys\n",
    "#         missing_vid_keys = EXPECTED_VIDEO_KEYS - set(video_data.keys())\n",
    "#         if missing_vid_keys:\n",
    "#             report_warning(f\"Video '{set_id}/{video_id}' missing keys: {missing_vid_keys}\")\n",
    "\n",
    "#         # Basic type checks for video keys\n",
    "#         img_width = video_data.get('width', -1)\n",
    "#         img_height = video_data.get('height', -1)\n",
    "#         if not isinstance(video_data.get('num_frames'), int): report_warning(f\"num_frames type mismatch in {set_id}/{video_id}\")\n",
    "#         if not isinstance(img_width, int): report_warning(f\"width type mismatch in {set_id}/{video_id}\")\n",
    "#         if not isinstance(img_height, int): report_warning(f\"height type mismatch in {set_id}/{video_id}\")\n",
    "#         if not isinstance(video_data.get('ped_annotations'), dict): report_error(f\"ped_annotations not a dict in {set_id}/{video_id}\"); continue # Stop checking peds for this video if structure wrong\n",
    "#         if not isinstance(video_data.get('traffic_annotations'), dict): report_warning(f\"traffic_annotations not a dict in {set_id}/{video_id}\")\n",
    "#         if not isinstance(video_data.get('vehicle_annotations'), dict): report_warning(f\"vehicle_annotations not a dict in {set_id}/{video_id}\")\n",
    "\n",
    "\n",
    "#         # --- Check Pedestrian Annotations ---\n",
    "#         ped_annotations = video_data.get('ped_annotations', {})\n",
    "#         ped_ids_to_check = list(ped_annotations.keys())\n",
    "#         random.shuffle(ped_ids_to_check) # Check a random subset\n",
    "\n",
    "#         for i, ped_id in enumerate(ped_ids_to_check):\n",
    "#             if i >= MAX_PEDS_TO_CHECK_PER_VIDEO: break # Limit checks\n",
    "#             checked_peds += 1\n",
    "#             ped_data = ped_annotations[ped_id]\n",
    "#             if not isinstance(ped_data, dict): report_error(f\"Data for ped '{ped_id}' in {set_id}/{video_id} is not a dict.\"); continue\n",
    "\n",
    "#             missing_ped_keys = EXPECTED_PED_KEYS - set(ped_data.keys())\n",
    "#             if missing_ped_keys: report_warning(f\"Ped '{ped_id}' in {set_id}/{video_id} missing keys: {missing_ped_keys}\")\n",
    "\n",
    "#             # Check structure of essential lists/dicts\n",
    "#             frames = ped_data.get('frames', [])\n",
    "#             bboxes = ped_data.get('bbox', [])\n",
    "#             occlusions = ped_data.get('occlusion', [])\n",
    "#             behavior = ped_data.get('behavior', {})\n",
    "#             attributes = ped_data.get('attributes', {})\n",
    "\n",
    "#             if not isinstance(frames, list): report_error(f\"Ped '{ped_id}' frames not a list.\"); continue\n",
    "#             if not isinstance(bboxes, list): report_error(f\"Ped '{ped_id}' bbox not a list.\"); continue\n",
    "#             if not isinstance(occlusions, list): report_error(f\"Ped '{ped_id}' occlusion not a list.\"); continue\n",
    "#             if not isinstance(behavior, dict): report_error(f\"Ped '{ped_id}' behavior not a dict.\"); continue\n",
    "#             if not isinstance(attributes, dict): report_warning(f\"Ped '{ped_id}' attributes not a dict.\"); continue # Attributes might be empty\n",
    "\n",
    "#             # Check list lengths consistency\n",
    "#             n_frames = len(frames)\n",
    "#             if n_frames == 0 and (len(bboxes) > 0 or len(occlusions) > 0): report_warning(f\"Ped '{ped_id}' has bboxes/occlusions but 0 frames listed.\")\n",
    "#             if len(bboxes) != n_frames: report_error(f\"Ped '{ped_id}' bbox length ({len(bboxes)}) != frames length ({n_frames}).\")\n",
    "#             if len(occlusions) != n_frames: report_error(f\"Ped '{ped_id}' occlusion length ({len(occlusions)}) != frames length ({n_frames}).\")\n",
    "\n",
    "#             missing_beh_keys = EXPECTED_PED_BEHAVIOR_KEYS - set(behavior.keys())\n",
    "#             if missing_beh_keys: report_warning(f\"Ped '{ped_id}' behavior missing keys: {missing_beh_keys}\")\n",
    "\n",
    "#             for beh_key, beh_list in behavior.items():\n",
    "#                 if not isinstance(beh_list, list): report_error(f\"Ped '{ped_id}' behavior '{beh_key}' not a list.\"); continue\n",
    "#                 if len(beh_list) != n_frames: report_error(f\"Ped '{ped_id}' behavior '{beh_key}' length ({len(beh_list)}) != frames length ({n_frames}).\")\n",
    "\n",
    "#             # Check sample frame content\n",
    "#             frames_to_check_in_ped = list(range(n_frames))\n",
    "#             random.shuffle(frames_to_check_in_ped)\n",
    "#             for k, frame_idx in enumerate(frames_to_check_in_ped):\n",
    "#                  if k >= MAX_FRAMES_TO_CHECK_PER_VIDEO: break\n",
    "#                  checked_ped_frames +=1\n",
    "#                  # Check frame number type\n",
    "#                  if not isinstance(frames[frame_idx], int): report_warning(f\"Ped '{ped_id}' frame value at index {frame_idx} not int.\")\n",
    "#                  # Check bbox format and range\n",
    "#                  if len(bboxes) > frame_idx:\n",
    "#                       bbox = bboxes[frame_idx]\n",
    "#                       if not isinstance(bbox, list) or len(bbox) != 4: report_error(f\"Ped '{ped_id}' frame {frames[frame_idx]} bbox invalid format: {bbox}\"); continue\n",
    "#                       try:\n",
    "#                            x1,y1,x2,y2 = map(float, bbox)\n",
    "#                            if img_width>0 and img_height>0 and not (0 <= x1 < x2 <= img_width and 0 <= y1 < y2 <= img_height): report_warning(f\"Ped '{ped_id}' frame {frames[frame_idx]} bbox out of bounds: {[int(x) for x in bbox]} vs {img_width}x{img_height}\")\n",
    "#                       except (ValueError, TypeError): report_error(f\"Ped '{ped_id}' frame {frames[frame_idx]} bbox contains non-numeric values: {bbox}\")\n",
    "#                  # Check occlusion value\n",
    "#                  if len(occlusions) > frame_idx:\n",
    "#                       occ = occlusions[frame_idx]\n",
    "#                       if not isinstance(occ, int) or occ not in [0, 1, 2]: report_warning(f\"Ped '{ped_id}' frame {frames[frame_idx]} invalid occlusion value: {occ}\")\n",
    "\n",
    "#                  # Add sample for printing later\n",
    "#                  if len(sample_data_to_print) < PRINT_SAMPLE_COUNT:\n",
    "#                       sample_data_to_print.append(f\" Sample Ped Data: Set={set_id}, Vid={video_id}, Ped={ped_id}, Frame={frames[frame_idx]}, BBox={bboxes[frame_idx] if len(bboxes) > frame_idx else 'N/A'}, Occ={occlusions[frame_idx] if len(occlusions) > frame_idx else 'N/A'}\")\n",
    "\n",
    "#         # --- Check Vehicle Annotations (Ego Data) ---\n",
    "#         vehicle_annotations = video_data.get('vehicle_annotations', {})\n",
    "#         ego_frames_to_check = list(vehicle_annotations.keys())\n",
    "#         random.shuffle(ego_frames_to_check)\n",
    "\n",
    "#         for k, frame_num in enumerate(ego_frames_to_check):\n",
    "#             if k >= MAX_FRAMES_TO_CHECK_PER_VIDEO: break # Limit checks\n",
    "#             checked_ego_frames += 1\n",
    "#             if not isinstance(frame_num, int): report_warning(f\"Ego data frame key '{frame_num}' in {set_id}/{video_id} is not int.\") ; continue\n",
    "#             ego_frame_data = vehicle_annotations[frame_num]\n",
    "#             if not isinstance(ego_frame_data, dict): report_error(f\"Ego data for frame {frame_num} in {set_id}/{video_id} is not dict.\"); continue\n",
    "\n",
    "#             missing_ego_keys = EXPECTED_EGO_FRAME_KEYS - set(ego_frame_data.keys())\n",
    "#             # Don't warn about every missing key, just check a few critical ones\n",
    "#             if 'OBD_speed' not in ego_frame_data and 'GPS_speed' not in ego_frame_data: report_warning(f\"Ego frame {frame_num} in {set_id}/{video_id} missing speed data.\")\n",
    "#             for key in EXPECTED_EGO_FRAME_KEYS:\n",
    "#                 if key in ego_frame_data and not isinstance(ego_frame_data[key], (float, int)): report_warning(f\"Ego frame {frame_num} key '{key}' value is not float/int (type: {type(ego_frame_data[key])})\")\n",
    "\n",
    "#             # Add sample for printing later\n",
    "#             if len(sample_data_to_print) < PRINT_SAMPLE_COUNT * 2 and k < 5: # Print a few ego samples too\n",
    "#                   sample_data_to_print.append(f\" Sample Ego Data: Set={set_id}, Vid={video_id}, Frame={frame_num}, Speed={ego_frame_data.get('OBD_speed', 'N/A'):.2f}, AccX={ego_frame_data.get('accX', 'N/A'):.2f}\")\n",
    "\n",
    "# # --- 4. Print Summary ---\n",
    "# print(f\"\\n[4] Verification Summary ---\")\n",
    "# print(f\"  - Checked {checked_sets} sets.\")\n",
    "# print(f\"  - Checked {checked_videos} videos.\")\n",
    "# print(f\"  - Checked {checked_peds} pedestrian tracks (sampled max {MAX_PEDS_TO_CHECK_PER_VIDEO} per video).\")\n",
    "# print(f\"  - Checked {checked_ped_frames} pedestrian frame entries (sampled max {MAX_FRAMES_TO_CHECK_PER_VIDEO} per ped).\")\n",
    "# print(f\"  - Checked {checked_ego_frames} ego data frame entries (sampled max {MAX_FRAMES_TO_CHECK_PER_VIDEO} per video).\")\n",
    "# print(f\"  - Total Errors Found: {errors_found}\")\n",
    "# print(f\"  - Total Warnings Found: {warnings_found}\")\n",
    "\n",
    "# if errors_found == 0:\n",
    "#     print(\"\\n  >>> Structure and basic content checks PASSED (with potential warnings). <<<\")\n",
    "# else:\n",
    "#     print(\"\\n  >>> ERRORS FOUND during structural/content checks. Review messages above. <<<\")\n",
    "\n",
    "# # --- 5. Print Sample Data ---\n",
    "# if sample_data_to_print:\n",
    "#     print(\"\\n[5] Sample Data Points ---\")\n",
    "#     for line in sample_data_to_print:\n",
    "#         print(line)\n",
    "\n",
    "# print(\"\\n--- Verification Script Finished ---\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1d49027f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T12:08:58.965775Z",
     "iopub.status.busy": "2025-05-01T12:08:58.965449Z",
     "iopub.status.idle": "2025-05-01T12:09:06.959910Z",
     "shell.execute_reply": "2025-05-01T12:09:06.958926Z"
    },
    "papermill": {
     "duration": 8.005811,
     "end_time": "2025-05-01T12:09:06.961605",
     "exception": false,
     "start_time": "2025-05-01T12:08:58.955794",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Creating new Ultralytics Settings v0.0.6 file ✅ \n",
      "View Ultralytics Settings with 'yolo settings' or at '/root/.config/Ultralytics/settings.json'\n",
      "Update Settings with 'yolo settings key=value', i.e. 'yolo settings runs_dir=path/to/dir'. For help see https://docs.ultralytics.com/quickstart/#ultralytics-settings.\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "import xml.etree.ElementTree as ET\n",
    "import os\n",
    "import numpy as np\n",
    "from sklearn.metrics import accuracy_score, precision_recall_fscore_support, roc_auc_score, confusion_matrix, ConfusionMatrixDisplay\n",
    "from tqdm.notebook import tqdm\n",
    "import random\n",
    "import math\n",
    "import zipfile\n",
    "import cv2\n",
    "from ultralytics import YOLO\n",
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "df2b1750",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T12:09:06.981300Z",
     "iopub.status.busy": "2025-05-01T12:09:06.980896Z",
     "iopub.status.idle": "2025-05-01T12:09:08.527643Z",
     "shell.execute_reply": "2025-05-01T12:09:08.526522Z"
    },
    "papermill": {
     "duration": 1.558399,
     "end_time": "2025-05-01T12:09:08.529441",
     "exception": false,
     "start_time": "2025-05-01T12:09:06.971042",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unzipped successfully.\n"
     ]
    }
   ],
   "source": [
    "zip_path = \"/kaggle/working/PIE/annotations/annotations.zip\"\n",
    "extract_to = \"/kaggle/working/PIE/annotations/\"\n",
    "\n",
    "if os.path.exists(extract_to + 'annotations'):\n",
    "    print(\"Exists already. Not unzipping.\")\n",
    "else:\n",
    "    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n",
    "        zip_ref.extractall(extract_to)\n",
    "    print(\"Unzipped successfully.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f13eb0b7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T12:09:08.551099Z",
     "iopub.status.busy": "2025-05-01T12:09:08.550827Z",
     "iopub.status.idle": "2025-05-01T12:09:09.273933Z",
     "shell.execute_reply": "2025-05-01T12:09:09.272860Z"
    },
    "papermill": {
     "duration": 0.734115,
     "end_time": "2025-05-01T12:09:09.275310",
     "exception": false,
     "start_time": "2025-05-01T12:09:08.541195",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unzipped successfully.\n"
     ]
    }
   ],
   "source": [
    "zip_path = \"/kaggle/working/PIE/annotations/annotations_vehicle.zip\"\n",
    "extract_to = \"/kaggle/working/PIE/annotations/\"\n",
    "\n",
    "if os.path.exists(extract_to + 'annotations_vehicle'):\n",
    "    print(\"Exists already. Not unzipping.\")\n",
    "else:\n",
    "    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n",
    "        zip_ref.extractall(extract_to)\n",
    "    print(\"Unzipped successfully.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d9df436d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T12:09:09.294740Z",
     "iopub.status.busy": "2025-05-01T12:09:09.294416Z",
     "iopub.status.idle": "2025-05-01T12:09:09.306700Z",
     "shell.execute_reply": "2025-05-01T12:09:09.305961Z"
    },
    "papermill": {
     "duration": 0.023415,
     "end_time": "2025-05-01T12:09:09.307999",
     "exception": false,
     "start_time": "2025-05-01T12:09:09.284584",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unzipped successfully.\n"
     ]
    }
   ],
   "source": [
    "zip_path = \"/kaggle/working/PIE/annotations/annotations_attributes.zip\"\n",
    "extract_to = \"/kaggle/working/PIE/annotations/\"\n",
    "\n",
    "if os.path.exists(extract_to + \"annotations_attributes\"):\n",
    "    print(\"Exists already. Not unzipping.\")\n",
    "else:\n",
    "    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n",
    "        zip_ref.extractall(extract_to)\n",
    "    print(\"Unzipped successfully.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "35146f99",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T12:09:09.328448Z",
     "iopub.status.busy": "2025-05-01T12:09:09.328165Z",
     "iopub.status.idle": "2025-05-01T12:09:09.339644Z",
     "shell.execute_reply": "2025-05-01T12:09:09.338791Z"
    },
    "papermill": {
     "duration": 0.023346,
     "end_time": "2025-05-01T12:09:09.340915",
     "exception": false,
     "start_time": "2025-05-01T12:09:09.317569",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # --- IMPORTS ---\n",
    "# import torch\n",
    "# import torch.nn as nn\n",
    "# import torch.optim as optim\n",
    "# from torch.utils.data import Dataset, DataLoader\n",
    "# import xml.etree.ElementTree as ET\n",
    "# import os\n",
    "# import numpy as np\n",
    "# from sklearn.metrics import accuracy_score, precision_recall_fscore_support, roc_auc_score, confusion_matrix, ConfusionMatrixDisplay\n",
    "# from sklearn.preprocessing import StandardScaler # For standardizing ego features\n",
    "# from tqdm.notebook import tqdm\n",
    "# import random\n",
    "# import math\n",
    "# import zipfile\n",
    "# import cv2\n",
    "# import pandas as pd\n",
    "# import matplotlib.pyplot as plt\n",
    "# import seaborn as sns\n",
    "# import pickle\n",
    "# import time\n",
    "# import sys # For path manipulation if needed\n",
    "\n",
    "# # --- Add PIE utilities path if necessary (adjust path) ---\n",
    "# pie_utilities_path = '/kaggle/working/PIE/utilities'\n",
    "# if pie_utilities_path not in sys.path:\n",
    "#     sys.path.insert(0, pie_utilities_path)\n",
    "# try:\n",
    "#     # We only need PIE class to generate the database if needed\n",
    "#     from pie_data import PIE\n",
    "# except ImportError as e:\n",
    "#     print(f\"Warning: Could not import PIE class from {pie_utilities_path}. Database must already exist. Error: {e}\")\n",
    "#     PIE = None # Define PIE as None if import fails\n",
    "\n",
    "# # --- Configuration ---\n",
    "# PIE_ROOT_PATH = '/kaggle/working/PIE' # Path where PIE repo was cloned/unzipped\n",
    "# VIDEO_INPUT_DIR = '/kaggle/input' # Where pie-setXX video dataset folders are\n",
    "# POSE_DATA_DIR = '/kaggle/input/pose-data/extracted_poses2' # Where setXX subdirs with PKLs are\n",
    "# PIE_DATABASE_CACHE_PATH = '/kaggle/input/pie-database/pie_database.pkl'\n",
    "\n",
    "# # --- Stream Control ---\n",
    "# ACTIVE_STREAMS = [\n",
    "#     'bbox',\n",
    "#     # 'pose',\n",
    "#     # 'ego_speed',\n",
    "#     # 'ego_acc',\n",
    "#     # 'ego_gyro',\n",
    "#     # 'ped_action',\n",
    "#     # 'ped_look',\n",
    "#     # 'ped_occlusion',\n",
    "#     # 'traffic_light',\n",
    "#     # 'static_context'\n",
    "# ]\n",
    "# print(f\"Active Streams: {ACTIVE_STREAMS}\")\n",
    "\n",
    "# # Model Hyperparameters\n",
    "# SEQ_LEN = 30\n",
    "# PRED_LEN = 1\n",
    "# # Input Sizes (Define for ALL potential streams)\n",
    "# INPUT_SIZE_BBOX = 4\n",
    "# INPUT_SIZE_POSE = 34\n",
    "# INPUT_SIZE_EGO_SPEED = 1\n",
    "# INPUT_SIZE_EGO_ACC = 2 # X, Y components\n",
    "# INPUT_SIZE_EGO_GYRO = 1 # Z component (Yaw rate)\n",
    "# INPUT_SIZE_PED_ACTION = 1 # 0:standing, 1:walking\n",
    "# INPUT_SIZE_PED_LOOK = 1 # 0:not-looking, 1:looking\n",
    "# INPUT_SIZE_PED_OCC = 1 # 0:none, 0.5:part, 1:full (normalized)\n",
    "# INPUT_SIZE_TL_STATE = 4 # 0:Undef, 1:Red, 2:Yellow, 3:Green (One-Hot)\n",
    "# # Static Feature Sizes (Matches pie_data.py mappings)\n",
    "# NUM_SIGNALIZED_CATS = 4\n",
    "# NUM_INTERSECTION_CATS = 5\n",
    "# NUM_AGE_CATS = 4\n",
    "# NUM_GENDER_CATS = 3\n",
    "# INPUT_SIZE_STATIC = NUM_SIGNALIZED_CATS + NUM_INTERSECTION_CATS + NUM_AGE_CATS + NUM_GENDER_CATS # = 16\n",
    "\n",
    "# LSTM_HIDDEN_SIZE = 256\n",
    "# NUM_LSTM_LAYERS = 2\n",
    "# DROPOUT_RATE = 0.3\n",
    "# NUM_CLASSES = 2\n",
    "# ATTENTION_DIM = 128\n",
    "\n",
    "# # Training Hyperparameters\n",
    "# LEARNING_RATE = 1e-4 # Possibly lower LR needed after balancing/more features\n",
    "# BATCH_SIZE = 32\n",
    "# NUM_EPOCHS = 10 # Increase epochs slightly for balanced data\n",
    "# DEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# print(f\"Using device: {DEVICE}\")\n",
    "\n",
    "# # Dataset Splits (Using PIE default)\n",
    "# TRAIN_SETS_STR = ['set01', 'set02', 'set04']\n",
    "# VAL_SETS_STR = ['set05', 'set06']\n",
    "# TEST_SETS_STR = ['set03'] # Although not used in training loop\n",
    "\n",
    "# # Mappings (Matches pie_data.py)\n",
    "# TL_STATE_MAP = {'__undefined__': 0, 'red': 1, 'yellow': 2, 'green': 3}\n",
    "# NUM_TL_STATES = len(TL_STATE_MAP)\n",
    "# SIGNALIZED_MAP = {'n/a': 0, 'C': 1, 'S': 2, 'CS': 3}\n",
    "# INTERSECTION_MAP = {'midblock': 0, 'T': 1, 'T-left': 2, 'T-right': 3, 'four-way': 4}\n",
    "# AGE_MAP = {'child': 0, 'young': 1, 'adult': 2, 'senior': 3}\n",
    "# GENDER_MAP = {'n/a': 0, 'female': 1, 'male': 2}\n",
    "\n",
    "# # --- Helper: One-Hot Encoding ---\n",
    "# def to_one_hot(index, num_classes):\n",
    "#     vec = np.zeros(num_classes, dtype=np.float32)\n",
    "#     if 0 <= index < num_classes:\n",
    "#         vec[index] = 1.0\n",
    "#     else: # Handle unexpected index\n",
    "#         vec[0] = 1.0 # Default to first class\n",
    "#     return vec\n",
    "\n",
    "# # --- Balancing Function ---\n",
    "# def balance_samples_count(seq_data, label_type, random_seed=42):\n",
    "#     print('---------------------------------------------------------')\n",
    "#     print(f\"Balancing samples based on '{label_type}' key\")\n",
    "#     if label_type not in seq_data:\n",
    "#         raise KeyError(f\"Label type '{label_type}' not found.\")\n",
    "#     try:\n",
    "#         gt_labels = [lbl[0] for lbl in seq_data[label_type]]\n",
    "#     except (IndexError, TypeError):\n",
    "#         raise ValueError(f\"Labels under '{label_type}' not in expected format [[label_val]].\")\n",
    "\n",
    "#     if not all(l in [0, 1] for l in gt_labels):\n",
    "#         print(f\"Warning: Labels for balancing contain values other than 0 or 1.\")\n",
    "\n",
    "#     num_pos_samples = np.count_nonzero(np.array(gt_labels))\n",
    "#     num_neg_samples = len(gt_labels) - num_pos_samples\n",
    "#     new_seq_data = {}\n",
    "\n",
    "#     if num_neg_samples == num_pos_samples:\n",
    "#         print('Samples already balanced.')\n",
    "#         return seq_data.copy()\n",
    "#     else:\n",
    "#         print(f'Unbalanced: Positive (1): {num_pos_samples} | Negative (0): {num_neg_samples}')\n",
    "#         majority_label = 0 if num_neg_samples > num_pos_samples else 1\n",
    "#         minority_count = min(num_neg_samples, num_pos_samples)\n",
    "#         print(f\"Undersampling majority class ({majority_label}) to match count ({minority_count}).\")\n",
    "\n",
    "#         majority_indices = np.where(np.array(gt_labels) == majority_label)[0]\n",
    "#         minority_indices = np.where(np.array(gt_labels) != majority_label)[0]\n",
    "#         np.random.seed(random_seed)\n",
    "#         keep_majority_indices = np.random.choice(majority_indices, size=minority_count, replace=False)\n",
    "#         final_indices = np.concatenate((minority_indices, keep_majority_indices))\n",
    "#         np.random.shuffle(final_indices)\n",
    "\n",
    "#         for k, v_list in seq_data.items():\n",
    "#             if isinstance(v_list, list) and len(v_list) == len(gt_labels):\n",
    "#                  try:\n",
    "#                      # Check if the list contains numpy arrays before converting the whole list\n",
    "#                      if v_list and isinstance(v_list[0], np.ndarray):\n",
    "#                          v_array = np.array(v_list)\n",
    "#                          new_seq_data[k] = list(v_array[final_indices])\n",
    "#                      else: # Assume list of lists or list of scalars\n",
    "#                           new_seq_data[k] = [v_list[i] for i in final_indices]\n",
    "#                  except Exception as e:\n",
    "#                       print(f\"Error processing key '{k}' during balancing: {e}. Skip.\")\n",
    "#                       new_seq_data[k] = []\n",
    "#             else:\n",
    "#                  print(f\"Warn: Skipping key '{k}' in balancing (not list or len mismatch).\")\n",
    "#                  new_seq_data[k] = v_list\n",
    "\n",
    "#         # Check if label key still exists after potential errors\n",
    "#         if label_type in new_seq_data:\n",
    "#              new_gt_labels = [lbl[0] for lbl in new_seq_data[label_type]]\n",
    "#              final_pos = np.count_nonzero(np.array(new_gt_labels))\n",
    "#              final_neg = len(new_gt_labels) - final_pos\n",
    "#              print(f'Balanced:   Positive (1): {final_pos} | Negative (0): {final_neg}')\n",
    "#         else:\n",
    "#              print(\"Error: Label key was lost during balancing process.\")\n",
    "\n",
    "#         print('---------------------------------------------------------')\n",
    "#         return new_seq_data\n",
    "\n",
    "\n",
    "# # --- Dataset Class ---\n",
    "# class PIEDataset(Dataset):\n",
    "#     def __init__(self, pie_database, set_names, pose_data_dir, seq_len, pred_len, scalers=None, active_streams=None):\n",
    "#         self.pie_db = pie_database\n",
    "#         self.set_names = set_names\n",
    "#         self.pose_data_dir = pose_data_dir\n",
    "#         self.seq_len = seq_len\n",
    "#         self.pred_len = pred_len\n",
    "#         self.scalers = scalers or {}\n",
    "#         self.active_streams = active_streams or []\n",
    "#         self.sequences = []\n",
    "#         self.all_pose_data = {}\n",
    "#         # Store input sizes needed for error handling in __getitem__\n",
    "#         self._input_sizes_for_error = self._get_input_sizes_dict()\n",
    "#         self._load_pose_data()\n",
    "#         self._generate_sequence_list()\n",
    "#         if not self.sequences:\n",
    "#             raise ValueError(f\"Dataset init failed: No sequences for {self.set_names}\")\n",
    "\n",
    "#     def _get_input_sizes_dict(self):\n",
    "#         # Helper to create input sizes dict, needed for error fallback in __getitem__\n",
    "#         input_sizes = {}\n",
    "#         for stream in self.active_streams:\n",
    "#             size_constant_name = f'INPUT_SIZE_{stream.upper()}'\n",
    "#             special_cases = {'TRAFFIC_LIGHT': 'TL_STATE', 'STATIC_CONTEXT': 'STATIC', 'EGO_SPEED': 'EGO_SPEED', 'EGO_ACC': 'EGO_ACC', 'EGO_GYRO': 'EGO_GYRO', 'PED_ACTION': 'PED_ACTION', 'PED_LOOK': 'PED_LOOK', 'PED_OCCLUSION': 'PED_OCC'}\n",
    "#             stream_upper_key = stream.upper()\n",
    "#             suffix = special_cases.get(stream_upper_key)\n",
    "#             if suffix:\n",
    "#                  size_constant_name = f'INPUT_SIZE_{suffix}'\n",
    "#             elif stream == 'bbox': size_constant_name = 'INPUT_SIZE_BBOX'\n",
    "#             elif stream == 'pose': size_constant_name = 'INPUT_SIZE_POSE'\n",
    "#             if size_constant_name in globals(): input_sizes[stream] = globals()[size_constant_name]\n",
    "#             else: input_sizes[stream] = 1 # Default size 1 if not found (should not happen ideally)\n",
    "#         return input_sizes\n",
    "\n",
    "#     def _load_pose_data(self):\n",
    "#         print(f\"\\nLoading pose data for sets: {self.set_names} from {self.pose_data_dir}\")\n",
    "#         sets_loaded_count = 0\n",
    "#         for set_id in tqdm(self.set_names, desc=\"Loading Pose Sets\"):\n",
    "#             self.all_pose_data[set_id] = {}\n",
    "#             pose_set_path = os.path.join(self.pose_data_dir, set_id)\n",
    "#             if not os.path.isdir(pose_set_path):\n",
    "#                 print(f\"Warn: Pose dir missing for {set_id} at {pose_set_path}\")\n",
    "#                 continue\n",
    "#             pkl_files_in_set = [f for f in os.listdir(pose_set_path) if f.startswith(f\"{set_id}_\") and f.endswith(\"_poses.pkl\")]\n",
    "#             if not pkl_files_in_set:\n",
    "#                 continue\n",
    "#             loaded_video_count = 0\n",
    "#             for pkl_filename in tqdm(pkl_files_in_set, desc=f\"Loading PKLs for {set_id}\", leave=False):\n",
    "#                 pkl_file_path = os.path.join(pose_set_path, pkl_filename)\n",
    "#                 try:\n",
    "#                     with open(pkl_file_path, 'rb') as f:\n",
    "#                         loaded_pkl_content = pickle.load(f)\n",
    "#                     if len(loaded_pkl_content) != 1:\n",
    "#                         continue\n",
    "#                     unique_video_key, video_data = list(loaded_pkl_content.items())[0]\n",
    "#                     video_id = \"_\".join(unique_video_key.split('_')[1:])\n",
    "#                     self.all_pose_data[set_id][video_id] = video_data\n",
    "#                     loaded_video_count += 1\n",
    "#                 except FileNotFoundError:\n",
    "#                     pass # Expected if some videos failed extraction\n",
    "#                 except Exception as e:\n",
    "#                     print(f\"Error loading pose PKL {pkl_file_path}: {e}\")\n",
    "#             if loaded_video_count > 0:\n",
    "#                 sets_loaded_count += 1\n",
    "#         print(f\"Finished loading pose data for {sets_loaded_count} sets.\")\n",
    "\n",
    "#     def _generate_sequence_list(self):\n",
    "#         print(f\"Generating sequence list from PIE database for sets: {self.set_names}\")\n",
    "#         sequence_count = 0\n",
    "#         ped_count = 0\n",
    "#         for set_id in tqdm(self.set_names, desc=\"Generating Sequences\"):\n",
    "#             if set_id not in self.pie_db:\n",
    "#                 continue\n",
    "#             for video_id, video_data in self.pie_db[set_id].items():\n",
    "#                 if 'ped_annotations' not in video_data:\n",
    "#                     continue\n",
    "#                 for ped_id, ped_data in video_data['ped_annotations'].items():\n",
    "#                     ped_count += 1\n",
    "#                     if 'frames' not in ped_data or len(ped_data['frames']) < self.seq_len + self.pred_len:\n",
    "#                         continue\n",
    "#                     sorted_frames = sorted(ped_data['frames'])\n",
    "#                     for i in range(len(sorted_frames) - self.seq_len - self.pred_len + 1):\n",
    "#                         start_frame = sorted_frames[i]\n",
    "#                         end_frame_observe = sorted_frames[i + self.seq_len - 1]\n",
    "#                         if end_frame_observe - start_frame != self.seq_len - 1:\n",
    "#                             continue\n",
    "#                         target_frame_actual_idx = i + self.seq_len + self.pred_len - 1\n",
    "#                         if target_frame_actual_idx >= len(sorted_frames):\n",
    "#                              continue # Avoid index out of bounds\n",
    "#                         target_frame = sorted_frames[target_frame_actual_idx]\n",
    "#                         if target_frame - end_frame_observe != self.pred_len:\n",
    "#                              continue\n",
    "#                         self.sequences.append((set_id, video_id, ped_id, start_frame))\n",
    "#                         sequence_count += 1\n",
    "#         print(f\"Found {sequence_count} valid sequences from {ped_count} pedestrian tracks.\")\n",
    "\n",
    "#     def __len__(self):\n",
    "#         return len(self.sequences)\n",
    "\n",
    "#     def __getitem__(self, idx):\n",
    "#         set_id, video_id, ped_id, start_frame = self.sequences[idx]\n",
    "#         frame_nums = list(range(start_frame, start_frame + self.seq_len))\n",
    "#         target_frame_num = start_frame + self.seq_len + self.pred_len - 1\n",
    "\n",
    "#         # Get data from the loaded PIE database\n",
    "#         video_db = self.pie_db.get(set_id, {}).get(video_id, {})\n",
    "#         ped_db = video_db.get('ped_annotations', {}).get(ped_id, {})\n",
    "#         ego_db = video_db.get('vehicle_annotations', {}) # Frame -> {sensor: value}\n",
    "#         traffic_db = video_db.get('traffic_annotations', {}) # ObjID -> {frames:[], state:[], ...}\n",
    "#         ped_attributes = ped_db.get('attributes', {})\n",
    "\n",
    "#         # Initialize feature sequences\n",
    "#         feature_sequences = {stream: [] for stream in self.active_streams}\n",
    "\n",
    "#         # Static Features (calculated once)\n",
    "#         static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32) # Default static\n",
    "#         if 'static_context' in self.active_streams:\n",
    "#             sig_idx = ped_attributes.get('signalized', 0)\n",
    "#             int_idx = ped_attributes.get('intersection', 0)\n",
    "#             age_idx = ped_attributes.get('age', 2) # Default to 'adult'\n",
    "#             gen_idx = ped_attributes.get('gender', 0)\n",
    "#             static_vec = np.concatenate([\n",
    "#                 to_one_hot(sig_idx, NUM_SIGNALIZED_CATS),\n",
    "#                 to_one_hot(int_idx, NUM_INTERSECTION_CATS),\n",
    "#                 to_one_hot(age_idx, NUM_AGE_CATS),\n",
    "#                 to_one_hot(gen_idx, NUM_GENDER_CATS)\n",
    "#             ])\n",
    "#             if static_vec.shape[0] != INPUT_SIZE_STATIC: # Sanity check\n",
    "#                  static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "\n",
    "#         # Get Target Label\n",
    "#         label = 0 # Default to not-crossing\n",
    "#         if 'frames' in ped_db and 'behavior' in ped_db and 'cross' in ped_db['behavior']:\n",
    "#              try:\n",
    "#                  target_frame_db_idx = ped_db['frames'].index(target_frame_num)\n",
    "#                  label = ped_db['behavior']['cross'][target_frame_db_idx]\n",
    "#                  if label == -1: label = 0 # Map irrelevant to not-crossing\n",
    "#              except (ValueError, IndexError):\n",
    "#                  pass # Keep default label\n",
    "\n",
    "#         # Iterate through sequence frames\n",
    "#         for frame_num in frame_nums:\n",
    "#             frame_db_idx = -1\n",
    "#             if 'frames' in ped_db:\n",
    "#                  try:\n",
    "#                      frame_db_idx = ped_db['frames'].index(frame_num)\n",
    "#                  except ValueError:\n",
    "#                      pass # Frame not found for this pedestrian in this sequence part\n",
    "#             ego_frame_data = ego_db.get(frame_num, {})\n",
    "\n",
    "#             # --- Extract for ACTIVE streams ---\n",
    "#             if 'bbox' in self.active_streams:\n",
    "#                 bbox_norm = np.zeros(INPUT_SIZE_BBOX, dtype=np.float32) # Default\n",
    "#                 if frame_db_idx != -1 and 'bbox' in ped_db and len(ped_db['bbox']) > frame_db_idx:\n",
    "#                     # --- Start Corrected Try/Except ---\n",
    "#                      try:\n",
    "#                           x1, y1, x2, y2 = ped_db['bbox'][frame_db_idx]\n",
    "#                           img_w = video_db.get('width', 1920) # Use default if missing\n",
    "#                           img_h = video_db.get('height', 1080)\n",
    "#                           if img_w > 0 and img_h > 0: # Check for valid image dimensions\n",
    "#                                cx = ((x1 + x2) / 2) / img_w\n",
    "#                                cy = ((y1 + y2) / 2) / img_h\n",
    "#                                w = (x2 - x1) / img_w\n",
    "#                                h = (y2 - y1) / img_h\n",
    "#                                # Check for valid normalized bbox dimensions\n",
    "#                                if w > 0 and h > 0 and 0 <= cx <= 1 and 0 <= cy <= 1:\n",
    "#                                     bbox_norm = np.array([cx, cy, w, h], dtype=np.float32)\n",
    "#                      except Exception as e:\n",
    "#                           # Keep default zero vector if any error occurs during processing\n",
    "#                           # print(f\"Warning: Error processing bbox F:{frame_num} P:{ped_id} V:{video_id} - {e}\") # Optional warning\n",
    "#                           pass\n",
    "#                     # --- End Corrected Try/Except ---\n",
    "#                 feature_sequences['bbox'].append(bbox_norm)\n",
    "\n",
    "#             # --- (Rest of stream extractions - unchanged logic but ensure proper indentation) ---\n",
    "#             if 'pose' in self.active_streams:\n",
    "#                 pose_vector = np.zeros(INPUT_SIZE_POSE, dtype=np.float32)\n",
    "#                 vid_pose_data = self.all_pose_data.get(set_id, {}).get(video_id, {})\n",
    "#                 frame_pose_data = vid_pose_data.get(frame_num, {})\n",
    "#                 loaded_pose = frame_pose_data.get(ped_id)\n",
    "#                 if loaded_pose is not None and isinstance(loaded_pose, np.ndarray) and loaded_pose.shape == (INPUT_SIZE_POSE,):\n",
    "#                     pose_vector = loaded_pose\n",
    "#                 feature_sequences['pose'].append(pose_vector)\n",
    "\n",
    "#             if 'ego_speed' in self.active_streams:\n",
    "#                 speed = ego_frame_data.get('OBD_speed', 0.0)\n",
    "#                 if speed == 0.0: speed = ego_frame_data.get('GPS_speed', 0.0)\n",
    "#                 speed_scaled = (speed - self.scalers.get('ego_speed_mean', 0.0)) / self.scalers.get('ego_speed_std', 1.0)\n",
    "#                 feature_sequences['ego_speed'].append([speed_scaled])\n",
    "\n",
    "#             if 'ego_acc' in self.active_streams:\n",
    "#                 accX = ego_frame_data.get('accX', 0.0)\n",
    "#                 accY = ego_frame_data.get('accY', 0.0)\n",
    "#                 accX_scaled = (accX - self.scalers.get('accX_mean', 0.0)) / self.scalers.get('accX_std', 1.0)\n",
    "#                 accY_scaled = (accY - self.scalers.get('accY_mean', 0.0)) / self.scalers.get('accY_std', 1.0)\n",
    "#                 feature_sequences['ego_acc'].append([accX_scaled, accY_scaled])\n",
    "\n",
    "#             if 'ego_gyro' in self.active_streams:\n",
    "#                 gyroZ = ego_frame_data.get('gyroZ', 0.0)\n",
    "#                 gyroZ_scaled = (gyroZ - self.scalers.get('gyroZ_mean', 0.0)) / self.scalers.get('gyroZ_std', 1.0)\n",
    "#                 feature_sequences['ego_gyro'].append([gyroZ_scaled])\n",
    "\n",
    "#             if 'ped_action' in self.active_streams:\n",
    "#                 action = 0 # Default standing\n",
    "#                 if frame_db_idx != -1 and 'behavior' in ped_db and 'action' in ped_db['behavior'] and len(ped_db['behavior']['action']) > frame_db_idx:\n",
    "#                      action = ped_db['behavior']['action'][frame_db_idx]\n",
    "#                 feature_sequences['ped_action'].append([float(action)])\n",
    "\n",
    "#             if 'ped_look' in self.active_streams:\n",
    "#                 look = 0 # Default not-looking\n",
    "#                 if frame_db_idx != -1 and 'behavior' in ped_db and 'look' in ped_db['behavior'] and len(ped_db['behavior']['look']) > frame_db_idx:\n",
    "#                      look = ped_db['behavior']['look'][frame_db_idx]\n",
    "#                 feature_sequences['ped_look'].append([float(look)])\n",
    "\n",
    "#             if 'ped_occlusion' in self.active_streams:\n",
    "#                 occ = 0.0 # Default none\n",
    "#                 if frame_db_idx != -1 and 'occlusion' in ped_db and len(ped_db['occlusion']) > frame_db_idx:\n",
    "#                      occ_val = ped_db['occlusion'][frame_db_idx]\n",
    "#                      occ = float(occ_val) / 2.0 # Normalize\n",
    "#                 feature_sequences['ped_occlusion'].append([occ])\n",
    "\n",
    "#             if 'traffic_light' in self.active_streams:\n",
    "#                 state_int = 0\n",
    "#                 for obj_id, obj_data in traffic_db.items():\n",
    "#                      if obj_data.get('obj_class') == 'traffic_light' and 'frames' in obj_data and 'state' in obj_data:\n",
    "#                           try:\n",
    "#                               tl_frame_idx = obj_data['frames'].index(frame_num)\n",
    "#                               state_val = obj_data['state'][tl_frame_idx]\n",
    "#                               if state_val != 0:\n",
    "#                                   state_int = state_val\n",
    "#                                   break # Found first non-undefined state\n",
    "#                           except (ValueError, IndexError):\n",
    "#                               continue\n",
    "#                 feature_sequences['traffic_light'].append(to_one_hot(state_int, NUM_TL_STATES))\n",
    "\n",
    "#             if 'static_context' in self.active_streams:\n",
    "#                 feature_sequences['static_context'].append(static_vec)\n",
    "\n",
    "#         # --- Convert lists to Tensors ---\n",
    "#         features = {}\n",
    "#         try:\n",
    "#             for stream_name in self.active_streams:\n",
    "#                  features[stream_name] = torch.tensor(np.array(feature_sequences[stream_name], dtype=np.float32), dtype=torch.float32)\n",
    "\n",
    "#         except Exception as e:\n",
    "#              print(f\"Error converting features idx {idx}: {e}. Return dummy.\")\n",
    "#              # Use the pre-calculated sizes dictionary for fallback\n",
    "#              features = {\n",
    "#                  name: torch.zeros((self.seq_len, self._input_sizes_for_error.get(name, 1)), dtype=torch.float32)\n",
    "#                  for name in self.active_streams\n",
    "#              }\n",
    "\n",
    "#         return features, torch.tensor(label, dtype=torch.long)\n",
    "\n",
    "# # --- Wrapper Dataset for Balanced Data ---\n",
    "# class BalancedDataset(Dataset):\n",
    "#     def __init__(self, data_dict, active_streams, label_key='label'):\n",
    "#         self.active_streams = active_streams\n",
    "#         self.label_key = label_key\n",
    "#         if self.label_key not in data_dict or not data_dict[self.label_key]:\n",
    "#              raise ValueError(f\"Label key '{self.label_key}' missing/empty.\")\n",
    "#         self.num_samples = len(data_dict[self.label_key])\n",
    "#         if self.num_samples == 0:\n",
    "#             print(\"Warning: BalancedDataset initialized with zero samples.\")\n",
    "\n",
    "#         self.features = {}\n",
    "#         for stream in self.active_streams:\n",
    "#              if stream in data_dict and data_dict[stream]:\n",
    "#                  try:\n",
    "#                      self.features[stream] = torch.tensor(np.array(data_dict[stream]), dtype=torch.float32)\n",
    "#                  except ValueError as e:\n",
    "#                       raise ValueError(f\"Error converting stream '{stream}' data: {e}\")\n",
    "#              else:\n",
    "#                   raise KeyError(f\"Stream '{stream}' missing/empty in balanced data.\")\n",
    "#         try:\n",
    "#             self.labels = torch.tensor([lbl[0] for lbl in data_dict[self.label_key]], dtype=torch.long)\n",
    "#         except (IndexError, TypeError) as e:\n",
    "#              raise ValueError(f\"Error converting labels: {e}\")\n",
    "\n",
    "#         for stream in self.active_streams:\n",
    "#              if len(self.features[stream]) != self.num_samples:\n",
    "#                  raise ValueError(f\"Len mismatch: Stream '{stream}' ({len(self.features[stream])}) vs Labels ({self.num_samples})\")\n",
    "#     def __len__(self):\n",
    "#         return self.num_samples\n",
    "#     def __getitem__(self, idx):\n",
    "#         feature_dict = {stream: self.features[stream][idx] for stream in self.active_streams}\n",
    "#         label = self.labels[idx]\n",
    "#         return feature_dict, label\n",
    "\n",
    "# # --- Model Architecture ---\n",
    "# class Attention(nn.Module):\n",
    "#     def __init__(self, hidden_dim, attention_dim):\n",
    "#         super(Attention, self).__init__()\n",
    "#         self.attention_net = nn.Sequential(\n",
    "#             nn.Linear(hidden_dim, attention_dim),\n",
    "#             nn.Tanh(),\n",
    "#             nn.Linear(attention_dim, 1)\n",
    "#         )\n",
    "#     def forward(self, lstm_output):\n",
    "#         att_scores = self.attention_net(lstm_output).squeeze(2)\n",
    "#         att_weights = torch.softmax(att_scores, dim=1)\n",
    "#         context_vector = torch.sum(lstm_output * att_weights.unsqueeze(2), dim=1)\n",
    "#         return context_vector, att_weights\n",
    "# class MultiStreamAdaptiveLSTM(nn.Module):\n",
    "#     def __init__(self, input_sizes, lstm_hidden_size, num_lstm_layers, num_classes, attention_dim, dropout_rate, stream_names=['bbox', 'pose']):\n",
    "#         super(MultiStreamAdaptiveLSTM, self).__init__()\n",
    "#         if not stream_names: raise ValueError(\"stream_names cannot be empty.\")\n",
    "#         self.stream_names = stream_names\n",
    "#         self.lstms = nn.ModuleDict()\n",
    "#         self.attentions = nn.ModuleDict()\n",
    "#         print(f\"Initializing model with streams: {self.stream_names}\")\n",
    "#         for name in self.stream_names:\n",
    "#             if name not in input_sizes: raise KeyError(f\"Input size for stream '{name}' not provided.\")\n",
    "#             current_input_size = input_sizes[name]\n",
    "#             print(f\"  - Adding stream '{name}' with input size {current_input_size}\")\n",
    "#             self.lstms[name] = nn.LSTM(current_input_size, lstm_hidden_size, num_lstm_layers,\n",
    "#                                        batch_first=True, dropout=dropout_rate if num_lstm_layers > 1 else 0,\n",
    "#                                        bidirectional=True)\n",
    "#             self.attentions[name] = Attention(lstm_hidden_size * 2 , attention_dim)\n",
    "#         num_active_streams = len(self.stream_names)\n",
    "#         combined_feature_dim = lstm_hidden_size * 2 * num_active_streams\n",
    "#         print(f\"  Combined feature dimension: {combined_feature_dim}\")\n",
    "#         self.dropout = nn.Dropout(dropout_rate)\n",
    "#         intermediate_dim = max(num_classes * 4, combined_feature_dim // 2)\n",
    "#         self.fc1 = nn.Linear(combined_feature_dim, intermediate_dim)\n",
    "#         self.relu = nn.ReLU()\n",
    "#         self.fc2 = nn.Linear(intermediate_dim, num_classes)\n",
    "#     def forward(self, x):\n",
    "#         stream_context_vectors = []\n",
    "#         stream_att_weights = {}\n",
    "#         for name in self.stream_names:\n",
    "#             if name not in x: print(f\"Warning: Stream '{name}' expected but not in input data.\"); continue\n",
    "#             lstm_out, _ = self.lstms[name](x[name])\n",
    "#             context_vector, attention_weights = self.attentions[name](lstm_out)\n",
    "#             stream_context_vectors.append(context_vector)\n",
    "#             stream_att_weights[name] = attention_weights\n",
    "#         if not stream_context_vectors: raise RuntimeError(\"No stream outputs generated.\")\n",
    "#         fused_features = torch.cat(stream_context_vectors, dim=1)\n",
    "#         out = self.dropout(fused_features)\n",
    "#         out = self.relu(self.fc1(out))\n",
    "#         out = self.dropout(out)\n",
    "#         logits = self.fc2(out)\n",
    "#         return logits\n",
    "\n",
    "# # --- Training and Evaluation Functions ---\n",
    "# def train_epoch(model, dataloader, optimizer, criterion, device):\n",
    "#     model.train()\n",
    "#     total_loss = 0.0\n",
    "#     all_preds = []\n",
    "#     all_labels = []\n",
    "#     active_streams = model.stream_names\n",
    "#     for features, labels in tqdm(dataloader, desc=\"Training\", leave=False):\n",
    "#         input_features = {name: features[name].to(device) for name in active_streams if name in features}\n",
    "#         labels = labels.to(device)\n",
    "#         optimizer.zero_grad()\n",
    "#         outputs = model(input_features)\n",
    "#         loss = criterion(outputs, labels)\n",
    "#         loss.backward()\n",
    "#         optimizer.step()\n",
    "#         total_loss += loss.item()\n",
    "#         preds = torch.argmax(outputs, dim=1)\n",
    "#         all_preds.extend(preds.cpu().numpy())\n",
    "#         all_labels.extend(labels.cpu().numpy())\n",
    "#     avg_loss = total_loss / len(dataloader)\n",
    "#     accuracy = accuracy_score(all_labels, all_preds)\n",
    "#     return avg_loss, accuracy\n",
    "\n",
    "# def evaluate_epoch(model, dataloader, criterion, device):\n",
    "#     model.eval()\n",
    "#     total_loss = 0.0\n",
    "#     all_labels = []\n",
    "#     all_preds = []\n",
    "#     all_probs = []\n",
    "#     active_streams = model.stream_names\n",
    "#     with torch.no_grad():\n",
    "#         for features, labels in tqdm(dataloader, desc=\"Evaluating\", leave=False):\n",
    "#             input_features = {name: features[name].to(device) for name in active_streams if name in features}\n",
    "#             labels = labels.to(device)\n",
    "#             outputs = model(input_features)\n",
    "#             loss = criterion(outputs, labels)\n",
    "#             total_loss += loss.item()\n",
    "#             probs = torch.softmax(outputs, dim=1)\n",
    "#             preds = torch.argmax(probs, dim=1)\n",
    "#             all_labels.extend(labels.cpu().numpy())\n",
    "#             all_preds.extend(preds.cpu().numpy())\n",
    "#             all_probs.extend(probs.cpu().numpy())\n",
    "#     avg_loss = total_loss / len(dataloader)\n",
    "#     all_probs = np.array(all_probs); all_labels = np.array(all_labels); all_preds = np.array(all_preds)\n",
    "#     accuracy = accuracy_score(all_labels, all_preds)\n",
    "#     precision, recall, f1, _ = precision_recall_fscore_support(all_labels, all_preds, average='binary', pos_label=1, zero_division=0)\n",
    "#     auc = roc_auc_score(all_labels, all_probs[:, 1]) if len(np.unique(all_labels)) > 1 else float('nan')\n",
    "#     return {'loss': avg_loss, 'accuracy': accuracy, 'precision': precision, 'recall': recall, 'f1': f1, 'auc': auc}\n",
    "\n",
    "# def get_predictions_and_labels(model, dataloader, device):\n",
    "#     model.eval(); all_labels = []; all_preds = []\n",
    "#     active_streams = model.stream_names\n",
    "#     with torch.no_grad():\n",
    "#         for features, labels in tqdm(dataloader, desc=\"Generating CM Data\", leave=False):\n",
    "#              input_features = {name: features[name].to(device) for name in active_streams if name in features}\n",
    "#              labels = labels.to(device); outputs = model(input_features); preds = torch.argmax(outputs, dim=1)\n",
    "#              all_labels.extend(labels.cpu().numpy()); all_preds.extend(preds.cpu().numpy())\n",
    "#     return np.array(all_labels), np.array(all_preds)\n",
    "\n",
    "# # --- Main Execution ---\n",
    "# if __name__ == '__main__':\n",
    "\n",
    "#     # --- Generate/Load PIE Database ---\n",
    "#     print(f\"Checking for PIE database cache at: {PIE_DATABASE_CACHE_PATH}\")\n",
    "#     if not os.path.exists(PIE_DATABASE_CACHE_PATH):\n",
    "#         if PIE is None: raise ImportError(\"PIE class not imported, cannot generate database.\")\n",
    "#         print(\"PIE database cache not found. Generating...\");\n",
    "#         pie_dataset_interface = PIE(data_path=PIE_ROOT_PATH, regen_database=True)\n",
    "#         pie_database = pie_dataset_interface.generate_database()\n",
    "#         if not pie_database: raise RuntimeError(\"Failed to generate PIE database.\")\n",
    "#         print(\"PIE database generated successfully.\")\n",
    "#     else:\n",
    "#         print(\"Loading PIE database from cache...\")\n",
    "#         try:\n",
    "#             with open(PIE_DATABASE_CACHE_PATH, 'rb') as f: pie_database = pickle.load(f)\n",
    "#             print(\"PIE database loaded successfully.\")\n",
    "#         except Exception as e: raise RuntimeError(f\"Failed to load PIE database: {e}\")\n",
    "\n",
    "#     # --- Calculate Standardization Parameters ---\n",
    "#     print(\"\\nCalculating standardization parameters from training set...\")\n",
    "#     all_train_ego_speeds = []; all_train_accX = []; all_train_accY = []; all_train_gyroZ = []\n",
    "#     for set_id in TRAIN_SETS_STR:\n",
    "#          if set_id in pie_database:\n",
    "#              for video_id, video_data in pie_database[set_id].items():\n",
    "#                   if 'vehicle_annotations' in video_data:\n",
    "#                        for frame_num, ego_frame_data in video_data['vehicle_annotations'].items():\n",
    "#                            speed = ego_frame_data.get('OBD_speed', 0.0);\n",
    "#                            if speed == 0.0: speed = ego_frame_data.get('GPS_speed', 0.0)\n",
    "#                            all_train_ego_speeds.append(speed); all_train_accX.append(ego_frame_data.get('accX', 0.0));\n",
    "#                            all_train_accY.append(ego_frame_data.get('accY', 0.0)); all_train_gyroZ.append(ego_frame_data.get('gyroZ', 0.0))\n",
    "#     scalers = {}\n",
    "#     if all_train_ego_speeds: scalers['ego_speed_mean'] = np.mean(all_train_ego_speeds); scalers['ego_speed_std'] = np.std(all_train_ego_speeds) if np.std(all_train_ego_speeds) > 1e-6 else 1.0; print(f\"  Ego Speed: Mean={scalers['ego_speed_mean']:.2f}, Std={scalers['ego_speed_std']:.2f}\")\n",
    "#     if all_train_accX: scalers['accX_mean'] = np.mean(all_train_accX); scalers['accX_std'] = np.std(all_train_accX) if np.std(all_train_accX) > 1e-6 else 1.0; scalers['accY_mean'] = np.mean(all_train_accY); scalers['accY_std'] = np.std(all_train_accY) if np.std(all_train_accY) > 1e-6 else 1.0; print(f\"  Ego AccX: Mean={scalers['accX_mean']:.2f}, Std={scalers['accX_std']:.2f}\"); print(f\"  Ego AccY: Mean={scalers['accY_mean']:.2f}, Std={scalers['accY_std']:.2f}\")\n",
    "#     if all_train_gyroZ: scalers['gyroZ_mean'] = np.mean(all_train_gyroZ); scalers['gyroZ_std'] = np.std(all_train_gyroZ) if np.std(all_train_gyroZ) > 1e-6 else 1.0; print(f\"  Ego GyroZ: Mean={scalers['gyroZ_mean']:.2f}, Std={scalers['gyroZ_std']:.2f}\")\n",
    "#     print(\"Standardization parameters calculated.\")\n",
    "\n",
    "#     # --- Initialize FULL Datasets ---\n",
    "#     print(\"\\nInitializing full datasets...\")\n",
    "#     full_train_dataset = PIEDataset(pie_database, TRAIN_SETS_STR, POSE_DATA_DIR, SEQ_LEN, PRED_LEN, scalers, ACTIVE_STREAMS)\n",
    "#     val_dataset = PIEDataset(pie_database, VAL_SETS_STR, POSE_DATA_DIR, SEQ_LEN, PRED_LEN, scalers, ACTIVE_STREAMS)\n",
    "#     if len(full_train_dataset) == 0 or len(val_dataset) == 0: raise ValueError(\"Dataset loading failed.\")\n",
    "\n",
    "#     # --- Prepare and Balance Training Data ---\n",
    "#     print(\"\\nExtracting training data for balancing...\")\n",
    "#     training_data_dict = {stream: [] for stream in ACTIVE_STREAMS}; training_data_dict['label'] = []\n",
    "#     for i in tqdm(range(len(full_train_dataset)), desc=\"Extracting data\"):\n",
    "#          features, label = full_train_dataset[i]\n",
    "#          for stream_name in ACTIVE_STREAMS: training_data_dict[stream_name].append(features[stream_name].numpy())\n",
    "#          training_data_dict['label'].append([label.item()]) # Store label as list containing the item\n",
    "#     print(f\"Original training samples: {len(training_data_dict['label'])}\")\n",
    "#     del full_train_dataset # Free memory\n",
    "\n",
    "#     label_key_for_balancing = 'label' # Key used in training_data_dict\n",
    "#     balanced_train_data_dict = balance_samples_count(training_data_dict, label_type=label_key_for_balancing)\n",
    "#     del training_data_dict # Free up memory\n",
    "\n",
    "#     # --- Create Balanced Training Dataset and DataLoaders ---\n",
    "#     print(\"\\nCreating DataLoaders...\")\n",
    "#     try: balanced_train_dataset = BalancedDataset(balanced_train_data_dict, ACTIVE_STREAMS, label_key=label_key_for_balancing); del balanced_train_data_dict\n",
    "#     except Exception as e: print(f\"Error creating BalancedDataset: {e}\"); raise\n",
    "#     if len(balanced_train_dataset) == 0: raise ValueError(\"Balanced training dataset is empty!\")\n",
    "\n",
    "#     train_loader = DataLoader(balanced_train_dataset, batch_size=BATCH_SIZE, shuffle=True, num_workers=2, pin_memory=True)\n",
    "#     val_loader = DataLoader(val_dataset, batch_size=BATCH_SIZE, shuffle=False, num_workers=2, pin_memory=True)\n",
    "#     print(\"DataLoaders created.\")\n",
    "\n",
    "#     # --- Initialize Model ---\n",
    "#     input_sizes = {}\n",
    "#     for stream in ACTIVE_STREAMS:\n",
    "#         size_constant_name = f'INPUT_SIZE_{stream.upper()}'\n",
    "#         special_cases = {'TRAFFIC_LIGHT': 'TL_STATE', 'STATIC_CONTEXT': 'STATIC', 'EGO_SPEED': 'EGO_SPEED', 'EGO_ACC': 'EGO_ACC', 'EGO_GYRO': 'EGO_GYRO', 'PED_ACTION': 'PED_ACTION', 'PED_LOOK': 'PED_LOOK', 'PED_OCCLUSION': 'PED_OCC'}\n",
    "#         stream_upper_key = stream.upper()\n",
    "#         suffix = special_cases.get(stream_upper_key)\n",
    "#         if suffix: size_constant_name = f'INPUT_SIZE_{suffix}'\n",
    "#         elif stream == 'bbox': size_constant_name = 'INPUT_SIZE_BBOX'\n",
    "#         elif stream == 'pose': size_constant_name = 'INPUT_SIZE_POSE'\n",
    "#         if size_constant_name in globals(): input_sizes[stream] = globals()[size_constant_name]\n",
    "#         else: raise ValueError(f\"Input size constant {size_constant_name} not found for stream {stream}\")\n",
    "\n",
    "#     model = MultiStreamAdaptiveLSTM(\n",
    "#         input_sizes=input_sizes, lstm_hidden_size=LSTM_HIDDEN_SIZE,\n",
    "#         num_lstm_layers=NUM_LSTM_LAYERS, num_classes=NUM_CLASSES, attention_dim=ATTENTION_DIM,\n",
    "#         dropout_rate=DROPOUT_RATE, stream_names=ACTIVE_STREAMS ).to(DEVICE)\n",
    "\n",
    "#     print(\"\\n--- Model Architecture ---\"); print(model); num_params = sum(p.numel() for p in model.parameters() if p.requires_grad); print(f\"Total Trainable Parameters: {num_params:,}\"); print(\"-\" * 30)\n",
    "\n",
    "#     # --- Class Weighting & Optimizer ---\n",
    "#     print(\"\\nCalculating Class Weights for Loss Function...\")\n",
    "#     balanced_train_labels_list = balanced_train_dataset.labels.tolist() # Use balanced list\n",
    "#     count_0 = balanced_train_labels_list.count(0); count_1 = balanced_train_labels_list.count(1)\n",
    "#     total = len(balanced_train_labels_list)\n",
    "#     if total == 0: print(\"Warning: Balanced dataset empty. Use equal weights.\"); weight_0 = 1.0; weight_1 = 1.0\n",
    "#     elif count_0 == 0: print(\"Warning: Class 0 missing. Adjust weights.\"); weight_0 = 0.0; weight_1 = 1.0\n",
    "#     elif count_1 == 0: print(\"Warning: Class 1 missing. Adjust weights.\"); weight_0 = 1.0; weight_1 = 0.0\n",
    "#     else: weight_0 = total / (2.0 * count_0); weight_1 = total / (2.0 * count_1) # Inverse frequency\n",
    "#     class_weights = torch.tensor([weight_0, weight_1], dtype=torch.float32).to(DEVICE)\n",
    "#     print(f\"Using Class Weights for Loss: 0={weight_0:.2f}, 1={weight_1:.2f}\")\n",
    "#     criterion = nn.CrossEntropyLoss(weight=class_weights)\n",
    "#     # criterion = nn.CrossEntropyLoss() # Uncomment to disable class weighting\n",
    "#     optimizer = optim.Adam(model.parameters(), lr=LEARNING_RATE)\n",
    "#     best_val_f1 = -1.0; train_losses, val_losses = [], []; train_accs, val_accs = [], []; val_f1s = []\n",
    "\n",
    "#     # --- Training Loop ---\n",
    "#     print(\"\\n--- Starting Training on Balanced Data---\")\n",
    "#     for epoch in range(NUM_EPOCHS):\n",
    "#         epoch_start_time = time.time()\n",
    "#         train_loss, train_acc = train_epoch(model, train_loader, optimizer, criterion, DEVICE)\n",
    "#         val_metrics = evaluate_epoch(model, val_loader, criterion, DEVICE)\n",
    "#         epoch_duration = time.time() - epoch_start_time\n",
    "#         train_losses.append(train_loss); val_losses.append(val_metrics['loss'])\n",
    "#         train_accs.append(train_acc); val_accs.append(val_metrics['accuracy'])\n",
    "#         val_f1s.append(val_metrics['f1'])\n",
    "#         print(f\"--- Epoch {epoch+1}/{NUM_EPOCHS} ({epoch_duration:.2f} sec) ---\")\n",
    "#         print(f\"  Train Loss: {train_loss:.4f}, Train Acc: {train_acc:.4f}\")\n",
    "#         print(f\"  Val Loss:   {val_metrics['loss']:.4f}, Val Acc:  {val_metrics['accuracy']:.4f}\")\n",
    "#         print(f\"  Val Prec:   {val_metrics['precision']:.4f}, Recall: {val_metrics['recall']:.4f}, F1: {val_metrics['f1']:.4f}\")\n",
    "#         print(f\"  Val AUC:    {val_metrics['auc']:.4f}\")\n",
    "#         if val_metrics['f1'] > best_val_f1:\n",
    "#             best_val_f1 = val_metrics['f1']\n",
    "#             torch.save(model.state_dict(), 'best_model_balanced.pth')\n",
    "#             print(f\"  >> Saved new best model with F1: {best_val_f1:.4f}\")\n",
    "#         print(\"-\" * 30)\n",
    "#     print(\"--- Training Finished ---\")\n",
    "\n",
    "#     # --- Plotting ---\n",
    "#     print(\"\\n--- Plotting Training History ---\")\n",
    "#     fig, axes = plt.subplots(1, 2, figsize=(12, 5))\n",
    "#     axes[0].plot(range(1, NUM_EPOCHS + 1), train_losses, label='Train Loss')\n",
    "#     axes[0].plot(range(1, NUM_EPOCHS + 1), val_losses, label='Val Loss')\n",
    "#     axes[0].set_xlabel('Epoch'); axes[0].set_ylabel('Loss'); axes[0].set_title('Loss Curve'); axes[0].legend(); axes[0].grid(True)\n",
    "#     axes[1].plot(range(1, NUM_EPOCHS + 1), train_accs, label='Train Accuracy')\n",
    "#     axes[1].plot(range(1, NUM_EPOCHS + 1), val_accs, label='Val Accuracy')\n",
    "#     axes[1].plot(range(1, NUM_EPOCHS + 1), val_f1s, label='Val F1-Score', linestyle='--')\n",
    "#     axes[1].set_xlabel('Epoch'); axes[1].set_ylabel('Metric'); axes[1].set_title('Accuracy & F1-Score Curve'); axes[1].legend(); axes[1].grid(True)\n",
    "#     plt.tight_layout(); plt.show()\n",
    "\n",
    "#     # --- Final Evaluation ---\n",
    "#     print(\"\\n--- Final Evaluation on Validation Set using Best Model ---\")\n",
    "#     best_model_path = 'best_model_balanced.pth'\n",
    "#     if os.path.exists(best_model_path):\n",
    "#         print(f\"Loading best saved model '{best_model_path}'\")\n",
    "#         model.load_state_dict(torch.load(best_model_path, map_location=DEVICE))\n",
    "#     else: print(\"Warning: No saved best model found. Evaluating final model.\")\n",
    "#     final_metrics = evaluate_epoch(model, val_loader, criterion, DEVICE)\n",
    "#     true_labels, pred_labels = get_predictions_and_labels(model, val_loader, DEVICE)\n",
    "#     cm = confusion_matrix(true_labels, pred_labels, labels=[0, 1])\n",
    "#     labels_display = ['Not Crossing', 'Crossing']\n",
    "#     print(\"\\n--- Final Performance Metrics ---\")\n",
    "#     print(f\"  Accuracy:  {final_metrics['accuracy']:.4f}\"); print(f\"  Precision: {final_metrics['precision']:.4f}\"); print(f\"  Recall:    {final_metrics['recall']:.4f}\"); print(f\"  F1 Score:  {final_metrics['f1']:.4f}\"); print(f\"  AUC:       {final_metrics['auc']:.4f}\"); print(f\"  Loss:      {final_metrics['loss']:.4f}\")\n",
    "#     print(\"\\n--- Confusion Matrix ---\")\n",
    "#     disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=labels_display); disp.plot(cmap=plt.cm.Blues); plt.title('Confusion Matrix (Validation Set)'); plt.show()\n",
    "\n",
    "#     print(\"\\n--- Script Complete ---\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cbd9afe5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T12:09:09.360242Z",
     "iopub.status.busy": "2025-05-01T12:09:09.360018Z",
     "iopub.status.idle": "2025-05-01T12:09:09.368858Z",
     "shell.execute_reply": "2025-05-01T12:09:09.368055Z"
    },
    "papermill": {
     "duration": 0.020092,
     "end_time": "2025-05-01T12:09:09.370052",
     "exception": false,
     "start_time": "2025-05-01T12:09:09.349960",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # --- CELL 1: DATA PREPARATION AND BALANCING (RUN ONCE) ---\n",
    "\n",
    "# import torch\n",
    "# import torch.nn as nn\n",
    "# import torch.optim as optim\n",
    "# from torch.utils.data import Dataset, DataLoader\n",
    "# import xml.etree.ElementTree as ET\n",
    "# import os\n",
    "# import numpy as np\n",
    "# from sklearn.metrics import accuracy_score, precision_recall_fscore_support, roc_auc_score, confusion_matrix, ConfusionMatrixDisplay\n",
    "# from sklearn.preprocessing import StandardScaler  # For standardizing ego features\n",
    "# from tqdm.notebook import tqdm\n",
    "# import random\n",
    "# import math\n",
    "# import zipfile\n",
    "# import cv2\n",
    "# import pandas as pd\n",
    "# import matplotlib.pyplot as plt\n",
    "# import seaborn as sns\n",
    "# import pickle\n",
    "# import time\n",
    "# import sys\n",
    "\n",
    "# # --- Add PIE utilities path if necessary (adjust path) ---\n",
    "# pie_utilities_path = '/kaggle/working/PIE/utilities'\n",
    "# if pie_utilities_path not in sys.path:\n",
    "#     sys.path.insert(0, pie_utilities_path)\n",
    "# try:\n",
    "#     from pie_data import PIE\n",
    "# except ImportError as e:\n",
    "#     print(f\"Warning: Could not import PIE class from {pie_utilities_path}. Database must already exist. Error: {e}\")\n",
    "#     PIE = None\n",
    "\n",
    "# # --- Configuration (Copy relevant parts here) ---\n",
    "# PIE_ROOT_PATH = '/kaggle/working/PIE'\n",
    "# VIDEO_INPUT_DIR = '/kaggle/input'\n",
    "# POSE_DATA_DIR = '/kaggle/input/pose-data/extracted_poses2'\n",
    "# PIE_DATABASE_CACHE_PATH = '/kaggle/input/pie-database/pie_database.pkl'\n",
    "\n",
    "# # --- Define ALL possible streams you might want to experiment with ---\n",
    "# # --- The data extraction will prepare ALL of these ---\n",
    "# ALL_POSSIBLE_STREAMS = [\n",
    "#     'bbox', 'pose', 'ego_speed', 'ego_acc', 'ego_gyro',\n",
    "#     'ped_action', 'ped_look', 'ped_occlusion', 'traffic_light', 'static_context'\n",
    "# ]\n",
    "# print(f\"Data will be prepared for streams: {ALL_POSSIBLE_STREAMS}\")\n",
    "\n",
    "# # --- Model Hyperparameters (Needed for Dataset) ---\n",
    "# SEQ_LEN = 30\n",
    "# PRED_LEN = 1\n",
    "\n",
    "# # --- Input Sizes (Needed for Dataset Error Handling & Definitions) ---\n",
    "# INPUT_SIZE_BBOX = 4\n",
    "# INPUT_SIZE_POSE = 34\n",
    "# INPUT_SIZE_EGO_SPEED = 1\n",
    "# INPUT_SIZE_EGO_ACC = 2\n",
    "# INPUT_SIZE_EGO_GYRO = 1\n",
    "# INPUT_SIZE_PED_ACTION = 1\n",
    "# INPUT_SIZE_PED_LOOK = 1\n",
    "# INPUT_SIZE_PED_OCC = 1\n",
    "# INPUT_SIZE_TL_STATE = 4\n",
    "# NUM_SIGNALIZED_CATS = 4\n",
    "# NUM_INTERSECTION_CATS = 5\n",
    "# NUM_AGE_CATS = 4\n",
    "# NUM_GENDER_CATS = 3\n",
    "# INPUT_SIZE_STATIC = NUM_SIGNALIZED_CATS + NUM_INTERSECTION_CATS + NUM_AGE_CATS + NUM_GENDER_CATS  # = 16\n",
    "\n",
    "# # --- Dataset Splits ---\n",
    "# TRAIN_SETS_STR = ['set01', 'set02', 'set04']\n",
    "# VAL_SETS_STR = ['set05', 'set06']\n",
    "\n",
    "# # --- Mappings ---\n",
    "# TL_STATE_MAP = {'__undefined__': 0, 'red': 1, 'yellow': 2, 'green': 3}\n",
    "# NUM_TL_STATES = len(TL_STATE_MAP)\n",
    "# SIGNALIZED_MAP = {'n/a': 0, 'C': 1, 'S': 2, 'CS': 3}\n",
    "# INTERSECTION_MAP = {'midblock': 0, 'T': 1, 'T-left': 2, 'T-right': 3, 'four-way': 4}\n",
    "# AGE_MAP = {'child': 0, 'young': 1, 'adult': 2, 'senior': 3}\n",
    "# GENDER_MAP = {'n/a': 0, 'female': 1, 'male': 2}\n",
    "\n",
    "# # --- Output Files from this Cell ---\n",
    "# BALANCED_DATA_PKL_PATH = \"/kaggle/working/balanced_train_data.pkl\"\n",
    "# SCALERS_PKL_PATH = \"/kaggle/working/scalers.pkl\"\n",
    "# VAL_SEQUENCES_PKL_PATH = \"/kaggle/working/val_sequences.pkl\"  # Save sequence info for val set\n",
    "\n",
    "# # --- Helper: One-Hot Encoding ---\n",
    "# def to_one_hot(index, num_classes):\n",
    "#     vec = np.zeros(num_classes, dtype=np.float32)\n",
    "#     if 0 <= index < num_classes:\n",
    "#         vec[index] = 1.0\n",
    "#     else:\n",
    "#         vec[0] = 1.0  # Default\n",
    "#     return vec\n",
    "\n",
    "# # --- Balancing Function ---\n",
    "# def balance_samples_count(seq_data, label_type, random_seed=42):\n",
    "#     print('---------------------------------------------------------')\n",
    "#     print(f\"Balancing samples based on '{label_type}' key\")\n",
    "#     if label_type not in seq_data:\n",
    "#         raise KeyError(f\"Label type '{label_type}' not found.\")\n",
    "#     try:\n",
    "#         gt_labels = [lbl[0] for lbl in seq_data[label_type]]\n",
    "#     except (IndexError, TypeError):\n",
    "#         raise ValueError(f\"Labels under '{label_type}' not in expected format [[label_val]].\")\n",
    "#     if not all(l in [0, 1] for l in gt_labels):\n",
    "#         print(f\"Warning: Labels for balancing contain values other than 0 or 1.\")\n",
    "#     num_pos_samples = np.count_nonzero(np.array(gt_labels))\n",
    "#     num_neg_samples = len(gt_labels) - num_pos_samples\n",
    "#     new_seq_data = {}\n",
    "#     if num_neg_samples == num_pos_samples:\n",
    "#         print('Samples already balanced.')\n",
    "#         return seq_data.copy()\n",
    "#     else:\n",
    "#         print(f'Unbalanced: Positive (1): {num_pos_samples} | Negative (0): {num_neg_samples}')\n",
    "#         majority_label = 0 if num_neg_samples > num_pos_samples else 1\n",
    "#         minority_count = min(num_neg_samples, num_pos_samples)\n",
    "#         print(f\"Undersampling majority class ({majority_label}) to match count ({minority_count}).\")\n",
    "#         majority_indices = np.where(np.array(gt_labels) == majority_label)[0]\n",
    "#         minority_indices = np.where(np.array(gt_labels) != majority_label)[0]\n",
    "#         np.random.seed(random_seed)\n",
    "#         keep_majority_indices = np.random.choice(majority_indices, size=minority_count, replace=False)\n",
    "#         final_indices = np.concatenate((minority_indices, keep_majority_indices))\n",
    "#         np.random.shuffle(final_indices)\n",
    "#         for k, v_list in seq_data.items():\n",
    "#             if isinstance(v_list, list) and len(v_list) == len(gt_labels):\n",
    "#                 try:\n",
    "#                     if v_list and isinstance(v_list[0], np.ndarray):\n",
    "#                         v_array = np.array(v_list)\n",
    "#                         new_seq_data[k] = list(v_array[final_indices])\n",
    "#                     else:\n",
    "#                         new_seq_data[k] = [v_list[i] for i in final_indices]\n",
    "#                 except Exception as e:\n",
    "#                     print(f\"Error processing key '{k}' during balancing: {e}. Skip.\")\n",
    "#                     new_seq_data[k] = []\n",
    "#             else:\n",
    "#                 print(f\"Warn: Skipping key '{k}' in balancing.\")\n",
    "#                 new_seq_data[k] = v_list\n",
    "#         if label_type in new_seq_data:\n",
    "#             new_gt_labels = [lbl[0] for lbl in new_seq_data[label_type]]\n",
    "#             final_pos = np.count_nonzero(np.array(new_gt_labels))\n",
    "#             final_neg = len(new_gt_labels) - final_pos\n",
    "#             print(f'Balanced:   Positive (1): {final_pos} | Negative (0): {final_neg}')\n",
    "#         else:\n",
    "#             print(\"Error: Label key lost during balancing.\")\n",
    "#         print('---------------------------------------------------------')\n",
    "#         return new_seq_data\n",
    "\n",
    "# # --- Dataset Class (Needed for initial loading) ---\n",
    "# class PIEDataset(Dataset):\n",
    "#     # --- (Dataset class definition - identical to the previous working version) ---\n",
    "#     # --- (Includes __init__, _load_pose_data, _generate_sequence_list, __len__, __getitem__) ---\n",
    "#     def __init__(self, pie_database, set_names, pose_data_dir, seq_len, pred_len, scalers=None, active_streams=None):\n",
    "#         self.pie_db = pie_database\n",
    "#         self.set_names = set_names\n",
    "#         self.pose_data_dir = pose_data_dir\n",
    "#         self.seq_len = seq_len\n",
    "#         self.pred_len = pred_len\n",
    "#         self.scalers = scalers or {}\n",
    "#         # Store ALL possible streams; __getitem__ will generate data for all streams.\n",
    "#         self.active_streams = ALL_POSSIBLE_STREAMS  # Generate all streams for potential use\n",
    "#         self.sequences = []\n",
    "#         self.all_pose_data = {}\n",
    "#         self._input_sizes_for_error = self._get_input_sizes_dict()  # Get sizes for all streams\n",
    "#         self._load_pose_data()\n",
    "#         self._generate_sequence_list()\n",
    "#         if not self.sequences:\n",
    "#             raise ValueError(f\"Dataset init failed: No sequences for {self.set_names}\")\n",
    "\n",
    "#     def _get_input_sizes_dict(self):\n",
    "#         input_sizes = {}\n",
    "#         special_cases = {\n",
    "#             'TRAFFIC_LIGHT': 'TL_STATE',\n",
    "#             'STATIC_CONTEXT': 'STATIC',\n",
    "#             'EGO_SPEED': 'EGO_SPEED',\n",
    "#             'EGO_ACC': 'EGO_ACC',\n",
    "#             'EGO_GYRO': 'EGO_GYRO',\n",
    "#             'PED_ACTION': 'PED_ACTION',\n",
    "#             'PED_LOOK': 'PED_LOOK',\n",
    "#             'PED_OCCLUSION': 'PED_OCC'\n",
    "#         }\n",
    "#         for stream in self.active_streams:\n",
    "#             stream_upper_key = stream.upper()\n",
    "#             if stream_upper_key in special_cases:\n",
    "#                 size_constant_name = f\"INPUT_SIZE_{special_cases[stream_upper_key]}\"\n",
    "#             elif stream == 'bbox':\n",
    "#                 size_constant_name = 'INPUT_SIZE_BBOX'\n",
    "#             elif stream == 'pose':\n",
    "#                 size_constant_name = 'INPUT_SIZE_POSE'\n",
    "#             else:\n",
    "#                 size_constant_name = f\"INPUT_SIZE_{stream.upper()}\"\n",
    "#             if size_constant_name in globals():\n",
    "#                 input_sizes[stream] = globals()[size_constant_name]\n",
    "#             else:\n",
    "#                 input_sizes[stream] = 1\n",
    "#         return input_sizes\n",
    "\n",
    "#     def _load_pose_data(self):\n",
    "#         print(f\"\\nLoading pose data for sets: {self.set_names} from {self.pose_data_dir}\")\n",
    "#         sets_loaded_count = 0\n",
    "#         for set_id in tqdm(self.set_names, desc=\"Loading Pose Sets\"):\n",
    "#             self.all_pose_data[set_id] = {}\n",
    "#             pose_set_path = os.path.join(self.pose_data_dir, set_id)\n",
    "#             if not os.path.isdir(pose_set_path):\n",
    "#                 print(f\"Warn: Pose dir missing for {set_id} at {pose_set_path}\")\n",
    "#                 continue\n",
    "#             pkl_files_in_set = [f for f in os.listdir(pose_set_path)\n",
    "#                                 if f.startswith(f\"{set_id}_\") and f.endswith(\"_poses.pkl\")]\n",
    "#             if not pkl_files_in_set:\n",
    "#                 continue\n",
    "#             loaded_video_count = 0\n",
    "#             for pkl_filename in tqdm(pkl_files_in_set, desc=f\"Loading PKLs for {set_id}\", leave=False):\n",
    "#                 pkl_file_path = os.path.join(pose_set_path, pkl_filename)\n",
    "#                 try:\n",
    "#                     with open(pkl_file_path, 'rb') as f:\n",
    "#                         loaded_pkl_content = pickle.load(f)\n",
    "#                     if len(loaded_pkl_content) != 1:\n",
    "#                         continue\n",
    "#                     unique_video_key, video_data = list(loaded_pkl_content.items())[0]\n",
    "#                     video_id = \"_\".join(unique_video_key.split('_')[1:])\n",
    "#                     self.all_pose_data[set_id][video_id] = video_data\n",
    "#                     loaded_video_count += 1\n",
    "#                 except FileNotFoundError:\n",
    "#                     pass\n",
    "#                 except Exception as e:\n",
    "#                     print(f\"Error loading pose PKL {pkl_file_path}: {e}\")\n",
    "#             if loaded_video_count > 0:\n",
    "#                 sets_loaded_count += 1\n",
    "#         print(f\"Finished loading pose data for {sets_loaded_count} sets.\")\n",
    "\n",
    "#     def _generate_sequence_list(self):\n",
    "#         print(f\"Generating sequence list from PIE database for sets: {self.set_names}\")\n",
    "#         sequence_count = 0\n",
    "#         ped_count = 0\n",
    "#         for set_id in tqdm(self.set_names, desc=\"Generating Sequences\"):\n",
    "#             if set_id not in self.pie_db:\n",
    "#                 continue\n",
    "#             for video_id, video_data in self.pie_db[set_id].items():\n",
    "#                 if 'ped_annotations' not in video_data:\n",
    "#                     continue\n",
    "#                 for ped_id, ped_data in video_data['ped_annotations'].items():\n",
    "#                     ped_count += 1\n",
    "#                     if 'frames' not in ped_data or len(ped_data['frames']) < self.seq_len + self.pred_len:\n",
    "#                         continue\n",
    "#                     sorted_frames = sorted(ped_data['frames'])\n",
    "#                     for i in range(len(sorted_frames) - self.seq_len - self.pred_len + 1):\n",
    "#                         start_frame = sorted_frames[i]\n",
    "#                         end_frame_observe = sorted_frames[i + self.seq_len - 1]\n",
    "#                         if end_frame_observe - start_frame != self.seq_len - 1:\n",
    "#                             continue\n",
    "#                         target_frame_actual_idx = i + self.seq_len + self.pred_len - 1\n",
    "#                         if target_frame_actual_idx >= len(sorted_frames):\n",
    "#                             continue\n",
    "#                         target_frame = sorted_frames[target_frame_actual_idx]\n",
    "#                         if target_frame - end_frame_observe != self.pred_len:\n",
    "#                             continue\n",
    "#                         self.sequences.append((set_id, video_id, ped_id, start_frame))\n",
    "#                         sequence_count += 1\n",
    "#         print(f\"Found {sequence_count} valid sequences from {ped_count} pedestrian tracks.\")\n",
    "\n",
    "#     def __len__(self):\n",
    "#         return len(self.sequences)\n",
    "\n",
    "#     def __getitem__(self, idx):\n",
    "#         # Get sequence identifiers\n",
    "#         set_id, video_id, ped_id, start_frame = self.sequences[idx]\n",
    "#         frame_nums = list(range(start_frame, start_frame + self.seq_len))\n",
    "#         target_frame_num = start_frame + self.seq_len + self.pred_len - 1\n",
    "\n",
    "#         video_db = self.pie_db.get(set_id, {}).get(video_id, {})\n",
    "#         ped_db = video_db.get('ped_annotations', {}).get(ped_id, {})\n",
    "#         ego_db = video_db.get('vehicle_annotations', {})\n",
    "#         traffic_db = video_db.get('traffic_annotations', {})\n",
    "#         ped_attributes = ped_db.get('attributes', {})\n",
    "\n",
    "#         # Initialize feature sequences and label\n",
    "#         feature_sequences = {stream: [] for stream in self.active_streams}\n",
    "#         label = 0\n",
    "\n",
    "#         # Determine target label (default is 0 if not found)\n",
    "#         if 'frames' in ped_db and 'behavior' in ped_db and 'cross' in ped_db['behavior']:\n",
    "#             try:\n",
    "#                 target_frame_db_idx = ped_db['frames'].index(target_frame_num)\n",
    "#                 label = ped_db['behavior']['cross'][target_frame_db_idx]\n",
    "#                 if label == -1:\n",
    "#                     label = 0\n",
    "#             except (ValueError, IndexError):\n",
    "#                 pass\n",
    "\n",
    "#         # Static features\n",
    "#         static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "#         if 'static_context' in self.active_streams:\n",
    "#             sig_idx = ped_attributes.get('signalized', 0)\n",
    "#             int_idx = ped_attributes.get('intersection', 0)\n",
    "#             age_idx = ped_attributes.get('age', 2)\n",
    "#             gen_idx = ped_attributes.get('gender', 0)\n",
    "#             static_vec = np.concatenate([\n",
    "#                 to_one_hot(sig_idx, NUM_SIGNALIZED_CATS),\n",
    "#                 to_one_hot(int_idx, NUM_INTERSECTION_CATS),\n",
    "#                 to_one_hot(age_idx, NUM_AGE_CATS),\n",
    "#                 to_one_hot(gen_idx, NUM_GENDER_CATS)\n",
    "#             ])\n",
    "#             if static_vec.shape[0] != INPUT_SIZE_STATIC:\n",
    "#                 static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "\n",
    "#         # Loop over each frame in the sequence\n",
    "#         for frame_num in frame_nums:\n",
    "#             frame_db_idx = -1\n",
    "#             if 'frames' in ped_db:\n",
    "#                 try:\n",
    "#                     frame_db_idx = ped_db['frames'].index(frame_num)\n",
    "#                 except ValueError:\n",
    "#                     pass\n",
    "#             ego_frame_data = ego_db.get(frame_num, {})\n",
    "\n",
    "#             # 'bbox' stream\n",
    "#             if 'bbox' in self.active_streams:\n",
    "#                 bbox_norm = np.zeros(INPUT_SIZE_BBOX, dtype=np.float32)\n",
    "#                 if frame_db_idx != -1 and 'bbox' in ped_db and len(ped_db['bbox']) > frame_db_idx:\n",
    "#                     try:\n",
    "#                         x1, y1, x2, y2 = ped_db['bbox'][frame_db_idx]\n",
    "#                         img_w = video_db.get('width', 1920)\n",
    "#                         img_h = video_db.get('height', 1080)\n",
    "#                         if img_w > 0 and img_h > 0:\n",
    "#                             cx = ((x1 + x2) / 2) / img_w\n",
    "#                             cy = ((y1 + y2) / 2) / img_h\n",
    "#                             w = (x2 - x1) / img_w\n",
    "#                             h = (y2 - y1) / img_h\n",
    "#                             if w > 0 and h > 0 and 0 <= cx <= 1 and 0 <= cy <= 1:\n",
    "#                                 bbox_norm = np.array([cx, cy, w, h], dtype=np.float32)\n",
    "#                     except Exception:\n",
    "#                         pass\n",
    "#                 feature_sequences['bbox'].append(bbox_norm)\n",
    "\n",
    "#             # 'pose' stream\n",
    "#             if 'pose' in self.active_streams:\n",
    "#                 pose_vector = np.zeros(INPUT_SIZE_POSE, dtype=np.float32)\n",
    "#                 vid_pose_data = self.all_pose_data.get(set_id, {}).get(video_id, {})\n",
    "#                 frame_pose_data = vid_pose_data.get(frame_num, {})\n",
    "#                 loaded_pose = frame_pose_data.get(ped_id)\n",
    "#                 if loaded_pose is not None and isinstance(loaded_pose, np.ndarray) and loaded_pose.shape == (INPUT_SIZE_POSE,):\n",
    "#                     pose_vector = loaded_pose\n",
    "#                 feature_sequences['pose'].append(pose_vector)\n",
    "\n",
    "#             # 'ego_speed' stream\n",
    "#             if 'ego_speed' in self.active_streams:\n",
    "#                 speed = ego_frame_data.get('OBD_speed', 0.0)\n",
    "#                 if speed == 0.0:\n",
    "#                     speed = ego_frame_data.get('GPS_speed', 0.0)\n",
    "#                 speed_scaled = (speed - self.scalers.get('ego_speed_mean', 0.0)) / self.scalers.get('ego_speed_std', 1.0)\n",
    "#                 feature_sequences['ego_speed'].append([speed_scaled])\n",
    "\n",
    "#             # 'ego_acc' stream\n",
    "#             if 'ego_acc' in self.active_streams:\n",
    "#                 accX = ego_frame_data.get('accX', 0.0)\n",
    "#                 accY = ego_frame_data.get('accY', 0.0)\n",
    "#                 accX_scaled = (accX - self.scalers.get('accX_mean', 0.0)) / self.scalers.get('accX_std', 1.0)\n",
    "#                 accY_scaled = (accY - self.scalers.get('accY_mean', 0.0)) / self.scalers.get('accY_std', 1.0)\n",
    "#                 feature_sequences['ego_acc'].append([accX_scaled, accY_scaled])\n",
    "\n",
    "#             # 'ego_gyro' stream\n",
    "#             if 'ego_gyro' in self.active_streams:\n",
    "#                 gyroZ = ego_frame_data.get('gyroZ', 0.0)\n",
    "#                 gyroZ_scaled = (gyroZ - self.scalers.get('gyroZ_mean', 0.0)) / self.scalers.get('gyroZ_std', 1.0)\n",
    "#                 feature_sequences['ego_gyro'].append([gyroZ_scaled])\n",
    "\n",
    "#             # 'ped_action' stream\n",
    "#             if 'ped_action' in self.active_streams:\n",
    "#                 action = 0\n",
    "#                 if frame_db_idx != -1 and 'behavior' in ped_db and 'action' in ped_db['behavior'] and len(ped_db['behavior']['action']) > frame_db_idx:\n",
    "#                     action = ped_db['behavior']['action'][frame_db_idx]\n",
    "#                 feature_sequences['ped_action'].append([float(action)])\n",
    "\n",
    "#             # 'ped_look' stream\n",
    "#             if 'ped_look' in self.active_streams:\n",
    "#                 look = 0\n",
    "#                 if frame_db_idx != -1 and 'behavior' in ped_db and 'look' in ped_db['behavior'] and len(ped_db['behavior']['look']) > frame_db_idx:\n",
    "#                     look = ped_db['behavior']['look'][frame_db_idx]\n",
    "#                 feature_sequences['ped_look'].append([float(look)])\n",
    "\n",
    "#             # 'ped_occlusion' stream\n",
    "#             if 'ped_occlusion' in self.active_streams:\n",
    "#                 occ = 0.0\n",
    "#                 if frame_db_idx != -1 and 'occlusion' in ped_db and len(ped_db['occlusion']) > frame_db_idx:\n",
    "#                     occ_val = ped_db['occlusion'][frame_db_idx]\n",
    "#                     occ = float(occ_val) / 2.0\n",
    "#                 feature_sequences['ped_occlusion'].append([occ])\n",
    "\n",
    "#             # 'traffic_light' stream\n",
    "#             if 'traffic_light' in self.active_streams:\n",
    "#                 state_int = 0\n",
    "#                 for obj_id, obj_data in traffic_db.items():\n",
    "#                     if obj_data.get('obj_class') == 'traffic_light' and 'frames' in obj_data and 'state' in obj_data:\n",
    "#                         try:\n",
    "#                             tl_frame_idx = obj_data['frames'].index(frame_num)\n",
    "#                             state_val = obj_data['state'][tl_frame_idx]\n",
    "#                             if state_val != 0:\n",
    "#                                 state_int = state_val\n",
    "#                                 break\n",
    "#                         except (ValueError, IndexError):\n",
    "#                             continue\n",
    "#                 feature_sequences['traffic_light'].append(to_one_hot(state_int, NUM_TL_STATES))\n",
    "\n",
    "#             # 'static_context' stream\n",
    "#             if 'static_context' in self.active_streams:\n",
    "#                 feature_sequences['static_context'].append(static_vec)\n",
    "\n",
    "#         features = {}\n",
    "#         try:\n",
    "#             for stream_name in self.active_streams:\n",
    "#                 features[stream_name] = torch.tensor(\n",
    "#                     np.array(feature_sequences[stream_name], dtype=np.float32),\n",
    "#                     dtype=torch.float32\n",
    "#                 )\n",
    "#         except Exception as e:\n",
    "#             print(f\"Error converting features idx {idx}: {e}. Return dummy.\")\n",
    "#             features = {\n",
    "#                 name: torch.zeros((self.seq_len, self._input_sizes_for_error.get(name, 1)), dtype=torch.float32)\n",
    "#                 for name in self.active_streams\n",
    "#             }\n",
    "#         return features, torch.tensor(label, dtype=torch.long)\n",
    "\n",
    "# # --- Main Data Prep Execution Block ---\n",
    "# if __name__ == '__main__':\n",
    "\n",
    "#     # --- Generate/Load PIE Database ---\n",
    "#     print(f\"Checking for PIE database cache at: {PIE_DATABASE_CACHE_PATH}\")\n",
    "#     if not os.path.exists(PIE_DATABASE_CACHE_PATH):\n",
    "#         if PIE is None:\n",
    "#             raise ImportError(\"PIE class not imported, cannot generate database.\")\n",
    "#         print(\"PIE database cache not found. Generating...\")\n",
    "#         pie_dataset_interface = PIE(data_path=PIE_ROOT_PATH, regen_database=True)\n",
    "#         pie_database = pie_dataset_interface.generate_database()\n",
    "#         if not pie_database:\n",
    "#             raise RuntimeError(\"Failed to generate PIE database.\")\n",
    "#         print(\"PIE database generated successfully.\")\n",
    "#     else:\n",
    "#         print(\"Loading PIE database from cache...\")\n",
    "#         try:\n",
    "#             with open(PIE_DATABASE_CACHE_PATH, 'rb') as f:\n",
    "#                 pie_database = pickle.load(f)\n",
    "#             print(\"PIE database loaded successfully.\")\n",
    "#         except Exception as e:\n",
    "#             raise RuntimeError(f\"Failed to load PIE database: {e}\")\n",
    "\n",
    "#     # --- Calculate Standardization Parameters ---\n",
    "#     print(\"\\nCalculating standardization parameters from training set...\")\n",
    "#     all_train_ego_speeds = []\n",
    "#     all_train_accX = []\n",
    "#     all_train_accY = []\n",
    "#     all_train_gyroZ = []\n",
    "#     for set_id in TRAIN_SETS_STR:\n",
    "#         if set_id in pie_database:\n",
    "#             for video_id, video_data in pie_database[set_id].items():\n",
    "#                 if 'vehicle_annotations' in video_data:\n",
    "#                     for frame_num, ego_frame_data in video_data['vehicle_annotations'].items():\n",
    "#                         speed = ego_frame_data.get('OBD_speed', 0.0)\n",
    "#                         if speed == 0.0:\n",
    "#                             speed = ego_frame_data.get('GPS_speed', 0.0)\n",
    "#                         all_train_ego_speeds.append(speed)\n",
    "#                         all_train_accX.append(ego_frame_data.get('accX', 0.0))\n",
    "#                         all_train_accY.append(ego_frame_data.get('accY', 0.0))\n",
    "#                         all_train_gyroZ.append(ego_frame_data.get('gyroZ', 0.0))\n",
    "#     scalers = {}\n",
    "#     if all_train_ego_speeds:\n",
    "#         scalers['ego_speed_mean'] = np.mean(all_train_ego_speeds)\n",
    "#         scalers['ego_speed_std'] = np.std(all_train_ego_speeds) if np.std(all_train_ego_speeds) > 1e-6 else 1.0\n",
    "#         print(f\"  Ego Speed: Mean={scalers['ego_speed_mean']:.2f}, Std={scalers['ego_speed_std']:.2f}\")\n",
    "#     if all_train_accX:\n",
    "#         scalers['accX_mean'] = np.mean(all_train_accX)\n",
    "#         scalers['accX_std'] = np.std(all_train_accX) if np.std(all_train_accX) > 1e-6 else 1.0\n",
    "#         scalers['accY_mean'] = np.mean(all_train_accY)\n",
    "#         scalers['accY_std'] = np.std(all_train_accY) if np.std(all_train_accY) > 1e-6 else 1.0\n",
    "#         print(f\"  Ego AccX: Mean={scalers['accX_mean']:.2f}, Std={scalers['accX_std']:.2f}\")\n",
    "#         print(f\"  Ego AccY: Mean={scalers['accY_mean']:.2f}, Std={scalers['accY_std']:.2f}\")\n",
    "#     if all_train_gyroZ:\n",
    "#         scalers['gyroZ_mean'] = np.mean(all_train_gyroZ)\n",
    "#         scalers['gyroZ_std'] = np.std(all_train_gyroZ) if np.std(all_train_gyroZ) > 1e-6 else 1.0\n",
    "#         print(f\"  Ego GyroZ: Mean={scalers['gyroZ_mean']:.2f}, Std={scalers['gyroZ_std']:.2f}\")\n",
    "#     print(\"Standardization parameters calculated.\")\n",
    "\n",
    "#     # --- Initialize FULL Training Dataset ---\n",
    "#     print(\"\\nInitializing full training dataset (for extraction)...\")\n",
    "#     full_train_dataset = PIEDataset(\n",
    "#         pie_database,\n",
    "#         TRAIN_SETS_STR,\n",
    "#         POSE_DATA_DIR,\n",
    "#         SEQ_LEN,\n",
    "#         PRED_LEN,\n",
    "#         scalers,\n",
    "#         ALL_POSSIBLE_STREAMS\n",
    "#     )\n",
    "#     if len(full_train_dataset) == 0:\n",
    "#         raise ValueError(\"Full Train Dataset loading failed.\")\n",
    "\n",
    "#     # --- Prepare and Balance Training Data ---\n",
    "#     print(\"\\nExtracting ALL stream data from training set for balancing...\")\n",
    "#     training_data_dict = {stream: [] for stream in ALL_POSSIBLE_STREAMS}\n",
    "#     training_data_dict['label'] = []\n",
    "#     for i in tqdm(range(len(full_train_dataset)), desc=\"Extracting data\"):\n",
    "#         features, label = full_train_dataset[i]\n",
    "#         for stream_name in ALL_POSSIBLE_STREAMS:\n",
    "#             if stream_name in features:\n",
    "#                 training_data_dict[stream_name].append(features[stream_name].numpy())\n",
    "#             else:\n",
    "#                 print(f\"Warning: Stream {stream_name} missing from dataset output index {i}.\")\n",
    "#                 # Append zeros of correct shape as placeholder\n",
    "#                 size_const = f\"INPUT_SIZE_{stream_name.upper()}\"\n",
    "#                 special_cases = {\n",
    "#                     'TRAFFIC_LIGHT': 'TL_STATE',\n",
    "#                     'STATIC_CONTEXT': 'STATIC',\n",
    "#                     'EGO_SPEED': 'EGO_SPEED',\n",
    "#                     'EGO_ACC': 'EGO_ACC',\n",
    "#                     'EGO_GYRO': 'EGO_GYRO',\n",
    "#                     'PED_ACTION': 'PED_ACTION',\n",
    "#                     'PED_LOOK': 'PED_LOOK',\n",
    "#                     'PED_OCCLUSION': 'PED_OCC'\n",
    "#                 }\n",
    "#                 if stream_name.upper() in special_cases:\n",
    "#                     size_const = f\"INPUT_SIZE_{special_cases[stream_name.upper()]}\"\n",
    "#                 elif stream_name == 'bbox':\n",
    "#                     size_const = 'INPUT_SIZE_BBOX'\n",
    "#                 elif stream_name == 'pose':\n",
    "#                     size_const = 'INPUT_SIZE_POSE'\n",
    "#                 stream_size = globals().get(size_const, 1)\n",
    "#                 training_data_dict[stream_name].append(np.zeros((SEQ_LEN, stream_size), dtype=np.float32))\n",
    "#         training_data_dict['label'].append([label.item()])\n",
    "#     print(f\"Original training samples: {len(training_data_dict['label'])}\")\n",
    "#     del full_train_dataset  # Free memory\n",
    "\n",
    "#     label_key_for_balancing = 'label'\n",
    "#     balanced_train_data_dict = balance_samples_count(training_data_dict, label_type=label_key_for_balancing)\n",
    "#     del training_data_dict  # Free up memory\n",
    "\n",
    "#     # --- Save Balanced Data and Scalers ---\n",
    "#     print(f\"\\nSaving balanced training data to: {BALANCED_DATA_PKL_PATH}\")\n",
    "#     try:\n",
    "#         with open(BALANCED_DATA_PKL_PATH, 'wb') as f:\n",
    "#             pickle.dump(balanced_train_data_dict, f, pickle.HIGHEST_PROTOCOL)\n",
    "#         print(\" -> Balanced data saved.\")\n",
    "#     except Exception as e:\n",
    "#         print(f\"  Error saving balanced data: {e}\")\n",
    "\n",
    "#     print(f\"\\nSaving scalers to: {SCALERS_PKL_PATH}\")\n",
    "#     try:\n",
    "#         with open(SCALERS_PKL_PATH, 'wb') as f:\n",
    "#             pickle.dump(scalers, f, pickle.HIGHEST_PROTOCOL)\n",
    "#         print(\" -> Scalers saved.\")\n",
    "#     except Exception as e:\n",
    "#         print(f\"  Error saving scalers: {e}\")\n",
    "\n",
    "#     # --- Prepare and Save Validation Sequence Info ---\n",
    "#     print(\"\\nInitializing validation dataset (for sequence info)...\")\n",
    "#     # Pass an empty list for streams if only sequence identifiers are needed.\n",
    "#     val_dataset = PIEDataset(pie_database, VAL_SETS_STR, POSE_DATA_DIR, SEQ_LEN, PRED_LEN, scalers, [])\n",
    "#     val_sequences_info = val_dataset.sequences\n",
    "#     del val_dataset\n",
    "\n",
    "#     print(f\"Saving validation sequence info ({len(val_sequences_info)} sequences) to: {VAL_SEQUENCES_PKL_PATH}\")\n",
    "#     try:\n",
    "#         with open(VAL_SEQUENCES_PKL_PATH, 'wb') as f:\n",
    "#             pickle.dump(val_sequences_info, f, pickle.HIGHEST_PROTOCOL)\n",
    "#         print(\" -> Validation sequence info saved.\")\n",
    "#     except Exception as e:\n",
    "#         print(f\" Error saving validation sequence info: {e}\")\n",
    "\n",
    "#     print(\"\\n--- Data Preparation and Balancing Cell Finished ---\")\n",
    "#     print(\"You can now run the next cell for training and evaluation.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "0c7b17d7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T12:09:09.388927Z",
     "iopub.status.busy": "2025-05-01T12:09:09.388705Z",
     "iopub.status.idle": "2025-05-01T12:09:09.393423Z",
     "shell.execute_reply": "2025-05-01T12:09:09.392800Z"
    },
    "papermill": {
     "duration": 0.015372,
     "end_time": "2025-05-01T12:09:09.394528",
     "exception": false,
     "start_time": "2025-05-01T12:09:09.379156",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # --- CELL 2: ABLATION STUDY - MODEL TRAINING AND EVALUATION ---\n",
    "\n",
    "# import torch\n",
    "# import torch.nn as nn\n",
    "# import torch.optim as optim\n",
    "# from torch.utils.data import Dataset, DataLoader\n",
    "# import os\n",
    "# import sys\n",
    "# import numpy as np\n",
    "# import pandas as pd\n",
    "# import pickle\n",
    "# import time\n",
    "# from tqdm.notebook import tqdm\n",
    "# from sklearn.metrics import (\n",
    "#     accuracy_score,\n",
    "#     precision_recall_fscore_support,\n",
    "#     roc_auc_score,\n",
    "#     confusion_matrix,\n",
    "#     ConfusionMatrixDisplay\n",
    "# )\n",
    "# import matplotlib.pyplot as plt\n",
    "# import seaborn as sns\n",
    "\n",
    "# # --- Add PIE utilities path if necessary ---\n",
    "# pie_utilities_path = '/kaggle/working/PIE/utilities'\n",
    "# if pie_utilities_path not in sys.path:\n",
    "#     sys.path.insert(0, pie_utilities_path)\n",
    "\n",
    "# try:\n",
    "#     from pie_data import PIE\n",
    "# except ImportError as e:\n",
    "#     print(f\"Warn: Could not import PIE class: {e}\")\n",
    "#     PIE = None\n",
    "\n",
    "# # --- Configuration ---\n",
    "# PIE_DATABASE_CACHE_PATH = '/kaggle/input/pie-database/pie_database.pkl'\n",
    "# POSE_DATA_DIR = '/kaggle/input/pose-data/extracted_poses2'\n",
    "# VAL_SETS_STR = ['set05', 'set06']\n",
    "\n",
    "# # --- Experiment settings ---\n",
    "# ALL_POSSIBLE_STREAMS = [\n",
    "#     'bbox', 'pose', 'ego_speed', 'ego_acc', 'ego_gyro',\n",
    "#     'ped_action', 'ped_look', 'ped_occlusion', 'traffic_light', 'static_context'\n",
    "# ]\n",
    "\n",
    "# STREAM_COMBINATIONS_TO_TEST = [\n",
    "#     ['bbox'],\n",
    "#     ['bbox', 'ped_action'],\n",
    "#     ['bbox', 'ped_look'],\n",
    "#     ['bbox', 'ego_speed'],\n",
    "#     ['bbox', 'ego_acc'],\n",
    "#     ['bbox', 'ped_action', 'ped_look'],\n",
    "#     ['bbox', 'ego_speed', 'ego_acc'],\n",
    "#     ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc'],\n",
    "#     ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'traffic_light', 'static_context']\n",
    "# ]\n",
    "\n",
    "# # --- Hyperparameters ---\n",
    "# SEQ_LEN = 30\n",
    "# PRED_LEN = 1\n",
    "\n",
    "# INPUT_SIZE_BBOX = 4\n",
    "# INPUT_SIZE_POSE = 34\n",
    "# INPUT_SIZE_EGO_SPEED = 1\n",
    "# INPUT_SIZE_EGO_ACC = 2\n",
    "# INPUT_SIZE_EGO_GYRO = 1\n",
    "# INPUT_SIZE_PED_ACTION = 1\n",
    "# INPUT_SIZE_PED_LOOK = 1\n",
    "# INPUT_SIZE_PED_OCC = 1\n",
    "# INPUT_SIZE_TL_STATE = 4\n",
    "\n",
    "# NUM_SIGNALIZED_CATS = 4\n",
    "# NUM_INTERSECTION_CATS = 5\n",
    "# NUM_AGE_CATS = 4\n",
    "# NUM_GENDER_CATS = 3\n",
    "# NUM_TRAFFIC_DIR_CATS = 2\n",
    "# LANE_CATEGORIES = {1:0,2:1,3:2,4:3,5:4,6:4,7:4,8:4}\n",
    "# NUM_LANE_CATS = len(set(LANE_CATEGORIES.values()))\n",
    "\n",
    "# INPUT_SIZE_STATIC = (\n",
    "#     NUM_SIGNALIZED_CATS +\n",
    "#     NUM_INTERSECTION_CATS +\n",
    "#     NUM_AGE_CATS +\n",
    "#     NUM_GENDER_CATS +\n",
    "#     NUM_TRAFFIC_DIR_CATS +\n",
    "#     NUM_LANE_CATS\n",
    "# )\n",
    "\n",
    "# LSTM_HIDDEN_SIZE = 256\n",
    "# NUM_LSTM_LAYERS = 2\n",
    "# DROPOUT_RATE = 0.3\n",
    "# NUM_CLASSES = 2\n",
    "# ATTENTION_DIM = 128\n",
    "\n",
    "# LEARNING_RATE = 1e-4\n",
    "# BATCH_SIZE = 32\n",
    "# NUM_EPOCHS = 10\n",
    "# DEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "\n",
    "# print(f\"Using device: {DEVICE}\")\n",
    "\n",
    "# # --- Paths for data ---\n",
    "# BALANCED_DATA_PKL_PATH = \"/kaggle/working/balanced_train_data.pkl\"\n",
    "# SCALERS_PKL_PATH = \"/kaggle/working/scalers.pkl\"\n",
    "\n",
    "# # --- Helpers, Dataset & Model definitions ---\n",
    "# # (Use the fully corrected versions from Cell 1 and Cell 2 above,\n",
    "# # ensuring no inline semicolons remain and each block is properly indented.)\n",
    "\n",
    "# def to_one_hot(index, num_classes):\n",
    "#     vec = np.zeros(num_classes, dtype=np.float32)\n",
    "#     idx = int(np.clip(index, 0, num_classes - 1))\n",
    "#     vec[idx] = 1.0\n",
    "#     return vec\n",
    "\n",
    "# # ... Paste full corrected definitions for:\n",
    "# #   PIEDataset, BalancedDataset,\n",
    "# #   Attention, MultiStreamAdaptiveLSTM,\n",
    "# #   train_epoch, evaluate_epoch, get_predictions_and_labels ...\n",
    "\n",
    "# # --- Main Ablation Loop ---\n",
    "# if __name__ == '__main__':\n",
    "#     # Load balanced training data and scalers\n",
    "#     try:\n",
    "#         with open(BALANCED_DATA_PKL_PATH, 'rb') as f:\n",
    "#             balanced_train_data_dict = pickle.load(f)\n",
    "#         with open(SCALERS_PKL_PATH, 'rb') as f:\n",
    "#             scalers = pickle.load(f)\n",
    "#     except Exception as e:\n",
    "#         print(f\"Error loading pre-processed data: {e}\")\n",
    "#         sys.exit(1)\n",
    "\n",
    "#     # Load PIE database\n",
    "#     if not os.path.exists(PIE_DATABASE_CACHE_PATH):\n",
    "#         raise FileNotFoundError(\"PIE database cache not found.\")\n",
    "#     with open(PIE_DATABASE_CACHE_PATH, 'rb') as f:\n",
    "#         pie_database = pickle.load(f)\n",
    "\n",
    "#     # Prepare validation dataset once\n",
    "#     val_dataset = PIEDataset(\n",
    "#         pie_database, VAL_SETS_STR, POSE_DATA_DIR,\n",
    "#         SEQ_LEN, PRED_LEN, scalers,\n",
    "#         ALL_POSSIBLE_STREAMS\n",
    "#     )\n",
    "#     val_loader = DataLoader(\n",
    "#         val_dataset, batch_size=BATCH_SIZE,\n",
    "#         shuffle=False, num_workers=2, pin_memory=True\n",
    "#     )\n",
    "\n",
    "#     results_summary = {}\n",
    "\n",
    "#     for streams in STREAM_COMBINATIONS_TO_TEST:\n",
    "#         print(f\"\\n=== Streams: {streams} ===\")\n",
    "#         # Create train dataset for this combo\n",
    "#         train_ds = BalancedDataset(\n",
    "#             balanced_train_data_dict, streams, label_key='label'\n",
    "#         )\n",
    "#         train_loader = DataLoader(\n",
    "#             train_ds, batch_size=BATCH_SIZE,\n",
    "#             shuffle=True, num_workers=2, pin_memory=True\n",
    "#         )\n",
    "\n",
    "#         # Model, optimizer, loss\n",
    "#         input_sizes = {\n",
    "#             s: globals()[f\"INPUT_SIZE_{s.upper()}\"] for s in streams\n",
    "#         }\n",
    "#         model = MultiStreamAdaptiveLSTM(\n",
    "#             input_sizes, LSTM_HIDDEN_SIZE, NUM_LSTM_LAYERS,\n",
    "#             NUM_CLASSES, ATTENTION_DIM, DROPOUT_RATE, streams\n",
    "#         ).to(DEVICE)\n",
    "\n",
    "#         # Class weights\n",
    "#         labels = train_ds.labels.tolist()\n",
    "#         c0 = labels.count(0)\n",
    "#         c1 = labels.count(1)\n",
    "#         tot = len(labels)\n",
    "#         if tot > 0 and c0 and c1:\n",
    "#             w0 = tot / (2*c0)\n",
    "#             w1 = tot / (2*c1)\n",
    "#         else:\n",
    "#             w0 = w1 = 1.0\n",
    "#         criterion = nn.CrossEntropyLoss(weight=torch.tensor([w0,w1]).to(DEVICE))\n",
    "#         optimizer = optim.Adam(model.parameters(), lr=LEARNING_RATE)\n",
    "\n",
    "#         best_val_f1 = -1.0\n",
    "#         best_model_path = None\n",
    "\n",
    "#         for ep in range(NUM_EPOCHS):\n",
    "#             train_epoch(model, train_loader, optimizer, criterion, DEVICE)\n",
    "#             m = evaluate_epoch(model, val_loader, criterion, DEVICE)\n",
    "#             if m['f1'] > best_val_f1:\n",
    "#                 best_val_f1 = m['f1']\n",
    "#                 best_model_path = f\"best_{'_'.join(streams)}_ep{ep+1}.pth\"\n",
    "#                 torch.save(model.state_dict(), best_model_path)\n",
    "\n",
    "#         if best_model_path:\n",
    "#             model.load_state_dict(torch.load(best_model_path, map_location=DEVICE))\n",
    "#         final_m = evaluate_epoch(model, val_loader, criterion, DEVICE)\n",
    "#         results_summary[tuple(streams)] = final_m\n",
    "\n",
    "#     # Print summary\n",
    "#     df = pd.DataFrame.from_dict(results_summary, orient='index')\n",
    "#     df.index = ['+'.join(k) for k in df.index]\n",
    "#     df = df.sort_values('f1', ascending=False)\n",
    "#     print(\"\\nAblation Results:\")\n",
    "#     print(df.to_markdown(floatfmt=\".4f\"))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a51c9212",
   "metadata": {
    "_kg_hide-input": true,
    "execution": {
     "iopub.execute_input": "2025-05-01T12:09:09.414071Z",
     "iopub.status.busy": "2025-05-01T12:09:09.413829Z",
     "iopub.status.idle": "2025-05-01T12:09:09.426448Z",
     "shell.execute_reply": "2025-05-01T12:09:09.425647Z"
    },
    "papermill": {
     "duration": 0.024199,
     "end_time": "2025-05-01T12:09:09.427649",
     "exception": false,
     "start_time": "2025-05-01T12:09:09.403450",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # --- IMPORTS ---\n",
    "# import torch\n",
    "# import torch.nn as nn\n",
    "# import torch.optim as optim\n",
    "# from torch.utils.data import Dataset, DataLoader\n",
    "# import xml.etree.ElementTree as ET\n",
    "# import os\n",
    "# import numpy as np\n",
    "# from sklearn.metrics import (\n",
    "#     accuracy_score,\n",
    "#     precision_recall_fscore_support,\n",
    "#     roc_auc_score,\n",
    "#     confusion_matrix,\n",
    "#     ConfusionMatrixDisplay,\n",
    "# )\n",
    "# from sklearn.preprocessing import StandardScaler\n",
    "# from tqdm.notebook import tqdm\n",
    "# import random\n",
    "# import math\n",
    "# import zipfile\n",
    "# import cv2\n",
    "# import pandas as pd\n",
    "# import matplotlib.pyplot as plt\n",
    "# import seaborn as sns\n",
    "# import pickle\n",
    "# import time\n",
    "# import sys\n",
    "# import gc  # garbage collector for cleanup calls\n",
    "\n",
    "# # --- Add PIE utilities path if necessary (adjust path) ---\n",
    "# pie_utilities_path = '/kaggle/working/PIE/utilities'\n",
    "# if pie_utilities_path not in sys.path:\n",
    "#     sys.path.insert(0, pie_utilities_path)\n",
    "# try:\n",
    "#     from pie_data import PIE\n",
    "# except ImportError as e:\n",
    "#     print(f\"Warning: Could not import PIE class from {pie_utilities_path}. Database must already exist. Error: {e}\")\n",
    "#     PIE = None\n",
    "\n",
    "# # --- Configuration ---\n",
    "# PIE_ROOT_PATH = '/kaggle/working/PIE'\n",
    "# VIDEO_INPUT_DIR = '/kaggle/input'\n",
    "# POSE_DATA_DIR = '/kaggle/input/pose-data/extracted_poses2'\n",
    "# PIE_DATABASE_CACHE_PATH = '/kaggle/input/pie-database/pie_database.pkl'\n",
    "\n",
    "# # --- Define ALL possible streams (used by Dataset class) ---\n",
    "# ALL_POSSIBLE_STREAMS = [\n",
    "#     'bbox', 'pose', 'ego_speed', 'ego_acc', 'ego_gyro',\n",
    "#     'ped_action', 'ped_look', 'ped_occlusion', 'traffic_light', 'static_context'\n",
    "# ]\n",
    "# print(f\"All possible streams: {ALL_POSSIBLE_STREAMS}\")\n",
    "\n",
    "# # --- STREAM COMBINATIONS TO TEST FOR ABLATION STUDY ---\n",
    "\n",
    "# STREAM_COMBINATIONS_TO_TEST = [\n",
    "#     ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc'], \n",
    "#     ['traffic_light', 'bbox', 'pose', 'ped_action'],\n",
    "#     ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'traffic_light'],\n",
    "#     ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'static_context'],\n",
    "#     ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'ego_gyro'],\n",
    "#     ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'ped_occlusion'],\n",
    "#     ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'pose'],\n",
    "#     ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'traffic_light', 'static_context'],\n",
    "#     ['bbox', 'ped_action', 'ped_look'], \n",
    "# ]\n",
    "\n",
    "# print(f\"Stream combinations to test: {STREAM_COMBINATIONS_TO_TEST}\")\n",
    "\n",
    "# # --- Model Hyperparameters ---\n",
    "# SEQ_LEN = 30\n",
    "# PRED_LEN = 1\n",
    "\n",
    "# # --- Input Sizes ---\n",
    "# INPUT_SIZE_BBOX = 4\n",
    "# INPUT_SIZE_POSE = 34\n",
    "# INPUT_SIZE_EGO_SPEED = 1\n",
    "# INPUT_SIZE_EGO_ACC = 2\n",
    "# INPUT_SIZE_EGO_GYRO = 1\n",
    "# INPUT_SIZE_PED_ACTION = 1\n",
    "# INPUT_SIZE_PED_LOOK = 1\n",
    "# INPUT_SIZE_PED_OCC = 1\n",
    "# INPUT_SIZE_TL_STATE = 4\n",
    "# NUM_SIGNALIZED_CATS = 4\n",
    "# NUM_INTERSECTION_CATS = 5\n",
    "# NUM_AGE_CATS = 4\n",
    "# NUM_GENDER_CATS = 3\n",
    "# NUM_TRAFFIC_DIR_CATS = 2\n",
    "# LANE_CATEGORIES = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 4, 7: 4, 8: 4}\n",
    "# NUM_LANE_CATS = len(set(LANE_CATEGORIES.values()))\n",
    "# INPUT_SIZE_STATIC = (\n",
    "#     NUM_SIGNALIZED_CATS\n",
    "#     + NUM_INTERSECTION_CATS\n",
    "#     + NUM_AGE_CATS\n",
    "#     + NUM_GENDER_CATS\n",
    "#     + NUM_TRAFFIC_DIR_CATS\n",
    "#     + NUM_LANE_CATS\n",
    "# )\n",
    "\n",
    "# LSTM_HIDDEN_SIZE = 256\n",
    "# NUM_LSTM_LAYERS = 2\n",
    "# DROPOUT_RATE = 0.3\n",
    "# NUM_CLASSES = 2\n",
    "# ATTENTION_DIM = 128\n",
    "\n",
    "# # --- Training Hyperparameters ---\n",
    "# LEARNING_RATE = 1e-4\n",
    "# BATCH_SIZE = 32\n",
    "# NUM_EPOCHS = 10\n",
    "# DEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# print(f\"Using device: {DEVICE}\")\n",
    "\n",
    "# # --- Dataset Splits ---\n",
    "# TRAIN_SETS_STR = ['set01', 'set02', 'set04']\n",
    "# VAL_SETS_STR = ['set05', 'set06']\n",
    "\n",
    "# # --- Mappings ---\n",
    "# TL_STATE_MAP = {'__undefined__': 0, 'red': 1, 'yellow': 2, 'green': 3}\n",
    "# NUM_TL_STATES = len(TL_STATE_MAP)\n",
    "# SIGNALIZED_MAP = {'n/a': 0, 'C': 1, 'S': 2, 'CS': 3}\n",
    "# INTERSECTION_MAP = {'midblock': 0, 'T': 1, 'T-left': 2, 'T-right': 3, 'four-way': 4}\n",
    "# AGE_MAP = {'child': 0, 'young': 1, 'adult': 2, 'senior': 3}\n",
    "# GENDER_MAP = {'n/a': 0, 'female': 1, 'male': 2}\n",
    "# TRAFFIC_DIR_MAP = {'OW': 0, 'TW': 1}\n",
    "\n",
    "# # --- Output Files (for intermediate balanced data/scalers) ---\n",
    "# BALANCED_DATA_PKL_PATH = \"/kaggle/working/balanced_train_data.pkl\"\n",
    "# SCALERS_PKL_PATH = \"/kaggle/working/scalers.pkl\"\n",
    "\n",
    "\n",
    "# # --- Helper: One-Hot Encoding ---\n",
    "# def to_one_hot(index, num_classes):\n",
    "#     vec = np.zeros(num_classes, dtype=np.float32)\n",
    "#     safe_index = int(np.clip(index, 0, num_classes - 1))\n",
    "#     vec[safe_index] = 1.0\n",
    "#     return vec\n",
    "\n",
    "\n",
    "# # --- Balancing Function ---\n",
    "# def balance_samples_count(seq_data, label_type, random_seed=42):\n",
    "#     print('---------------------------------------------------------')\n",
    "#     print(f\"Balancing samples based on '{label_type}' key\")\n",
    "#     if label_type not in seq_data:\n",
    "#         raise KeyError(f\"Label type '{label_type}' not found.\")\n",
    "#     try:\n",
    "#         gt_labels = [lbl[0] for lbl in seq_data[label_type]]\n",
    "#     except (IndexError, TypeError):\n",
    "#         raise ValueError(f\"Labels under '{label_type}' not in expected format [[label_val]].\")\n",
    "\n",
    "#     if not all(l in [0, 1] for l in gt_labels):\n",
    "#         print(f\"Warning: Labels for balancing contain values other than 0 or 1.\")\n",
    "\n",
    "#     num_pos_samples = np.count_nonzero(np.array(gt_labels))\n",
    "#     num_neg_samples = len(gt_labels) - num_pos_samples\n",
    "#     new_seq_data = {}\n",
    "\n",
    "#     if num_neg_samples == num_pos_samples:\n",
    "#         print('Samples already balanced.')\n",
    "#         return seq_data.copy()\n",
    "#     else:\n",
    "#         print(f'Unbalanced: Positive (1): {num_pos_samples} | Negative (0): {num_neg_samples}')\n",
    "#         majority_label = 0 if num_neg_samples > num_pos_samples else 1\n",
    "#         minority_count = min(num_neg_samples, num_pos_samples)\n",
    "#         print(f\"Undersampling majority class ({majority_label}) to match count ({minority_count}).\")\n",
    "\n",
    "#         majority_indices = np.where(np.array(gt_labels) == majority_label)[0]\n",
    "#         minority_indices = np.where(np.array(gt_labels) != majority_label)[0]\n",
    "#         np.random.seed(random_seed)\n",
    "#         keep_majority_indices = np.random.choice(\n",
    "#             majority_indices, size=minority_count, replace=False\n",
    "#         )\n",
    "#         final_indices = np.concatenate((minority_indices, keep_majority_indices))\n",
    "#         np.random.shuffle(final_indices)\n",
    "\n",
    "#         for k, v_list in seq_data.items():\n",
    "#             if isinstance(v_list, list) and len(v_list) == len(gt_labels):\n",
    "#                 try:\n",
    "#                     if v_list and isinstance(v_list[0], np.ndarray):\n",
    "#                         v_array = np.array(v_list)\n",
    "#                         new_seq_data[k] = list(v_array[final_indices])\n",
    "#                     else:\n",
    "#                         new_seq_data[k] = [v_list[i] for i in final_indices]\n",
    "#                 except Exception as e:\n",
    "#                     print(f\"Error processing key '{k}' during balancing: {e}. Skip.\")\n",
    "#                     new_seq_data[k] = []\n",
    "#             else:\n",
    "#                 print(f\"Warn: Skipping key '{k}' in balancing (not list or len mismatch).\")\n",
    "#                 new_seq_data[k] = v_list\n",
    "\n",
    "#         if label_type in new_seq_data:\n",
    "#             new_gt_labels = [lbl[0] for lbl in new_seq_data[label_type]]\n",
    "#             final_pos = np.count_nonzero(np.array(new_gt_labels))\n",
    "#             final_neg = len(new_gt_labels) - final_pos\n",
    "#             print(f'Balanced:   Positive (1): {final_pos} | Negative (0): {final_neg}')\n",
    "#         else:\n",
    "#             print(\"Error: Label key was lost during balancing process.\")\n",
    "\n",
    "#         print('---------------------------------------------------------')\n",
    "#         return new_seq_data\n",
    "\n",
    "\n",
    "# # --- Dataset Class ---\n",
    "# class PIEDataset(Dataset):\n",
    "#     def __init__(\n",
    "#         self,\n",
    "#         pie_database,\n",
    "#         set_names,\n",
    "#         pose_data_dir,\n",
    "#         seq_len,\n",
    "#         pred_len,\n",
    "#         scalers=None,\n",
    "#         streams_to_generate=None,\n",
    "#     ):\n",
    "#         self.pie_db = pie_database\n",
    "#         self.set_names = set_names\n",
    "#         self.pose_data_dir = pose_data_dir\n",
    "#         self.seq_len = seq_len\n",
    "#         self.pred_len = pred_len\n",
    "#         self.scalers = scalers or {}\n",
    "#         self.streams_to_generate = (\n",
    "#             streams_to_generate or ALL_POSSIBLE_STREAMS\n",
    "#         )  # Streams this instance CAN generate\n",
    "#         self.sequences = []\n",
    "#         self.all_pose_data = {}\n",
    "#         self._input_sizes_for_error = self._get_input_sizes_dict()\n",
    "#         if 'pose' in self.streams_to_generate:\n",
    "#             self._load_pose_data()\n",
    "#         self._generate_sequence_list()\n",
    "#         if not self.sequences:\n",
    "#             raise ValueError(f\"Dataset init failed: No sequences for {self.set_names}\")\n",
    "\n",
    "#     def _get_input_sizes_dict(self):\n",
    "#         input_sizes = {}\n",
    "#         special_cases = {\n",
    "#             'TRAFFIC_LIGHT': 'TL_STATE',\n",
    "#             'STATIC_CONTEXT': 'STATIC',\n",
    "#             'EGO_SPEED': 'EGO_SPEED',\n",
    "#             'EGO_ACC': 'EGO_ACC',\n",
    "#             'EGO_GYRO': 'EGO_GYRO',\n",
    "#             'PED_ACTION': 'PED_ACTION',\n",
    "#             'PED_LOOK': 'PED_LOOK',\n",
    "#             'PED_OCCLUSION': 'PED_OCC',\n",
    "#         }\n",
    "#         for stream in ALL_POSSIBLE_STREAMS:\n",
    "#             size_constant_name = f'INPUT_SIZE_{stream.upper()}'\n",
    "#             stream_upper_key = stream.upper()\n",
    "#             suffix = special_cases.get(stream_upper_key)\n",
    "#             if suffix:\n",
    "#                 size_constant_name = f'INPUT_SIZE_{suffix}'\n",
    "#             elif stream == 'bbox':\n",
    "#                 size_constant_name = 'INPUT_SIZE_BBOX'\n",
    "#             elif stream == 'pose':\n",
    "#                 size_constant_name = 'INPUT_SIZE_POSE'\n",
    "\n",
    "#             input_sizes[stream] = globals().get(size_constant_name, 1)\n",
    "#         return input_sizes\n",
    "\n",
    "#     def _load_pose_data(self):\n",
    "#         print(f\"\\nLoading pose data for sets: {self.set_names} from {self.pose_data_dir}\")\n",
    "#         sets_loaded_count = 0\n",
    "#         for set_id in self.set_names:\n",
    "#             self.all_pose_data[set_id] = {}\n",
    "#             pose_set_path = os.path.join(self.pose_data_dir, set_id)\n",
    "#             if not os.path.isdir(pose_set_path):\n",
    "#                 continue\n",
    "#             pkl_files_in_set = [\n",
    "#                 f\n",
    "#                 for f in os.listdir(pose_set_path)\n",
    "#                 if f.startswith(f\"{set_id}_\") and f.endswith(\"_poses.pkl\")\n",
    "#             ]\n",
    "#             if not pkl_files_in_set:\n",
    "#                 continue\n",
    "#             loaded_video_count = 0\n",
    "#             for pkl_filename in pkl_files_in_set:\n",
    "#                 pkl_file_path = os.path.join(pose_set_path, pkl_filename)\n",
    "#                 try:\n",
    "#                     with open(pkl_file_path, 'rb') as f:\n",
    "#                         loaded_pkl_content = pickle.load(f)\n",
    "#                     if len(loaded_pkl_content) != 1:\n",
    "#                         continue\n",
    "#                     unique_video_key, video_data = list(loaded_pkl_content.items())[0]\n",
    "#                     video_id = \"_\".join(unique_video_key.split(\"_\")[1:])\n",
    "#                     if video_id in self.pie_db.get(set_id, {}):\n",
    "#                         self.all_pose_data[set_id][video_id] = video_data\n",
    "#                         loaded_video_count += 1\n",
    "#                 except FileNotFoundError:\n",
    "#                     pass\n",
    "#                 except Exception as e:\n",
    "#                     print(f\"Error loading pose PKL {pkl_file_path}: {e}\")\n",
    "#             if loaded_video_count > 0:\n",
    "#                 sets_loaded_count += 1\n",
    "#         print(f\"Finished loading pose data for {sets_loaded_count} sets for this Dataset instance.\")\n",
    "\n",
    "#     def _generate_sequence_list(self):\n",
    "#         sequence_count = 0\n",
    "#         for set_id in self.set_names:\n",
    "#             if set_id not in self.pie_db:\n",
    "#                 continue\n",
    "#             for video_id, video_data in self.pie_db[set_id].items():\n",
    "#                 if \"ped_annotations\" not in video_data:\n",
    "#                     continue\n",
    "#                 for ped_id, ped_data in video_data[\"ped_annotations\"].items():\n",
    "#                     if \"frames\" not in ped_data or len(ped_data[\"frames\"]) < self.seq_len + self.pred_len:\n",
    "#                         continue\n",
    "#                     sorted_frames = sorted(ped_data[\"frames\"])\n",
    "#                     for i in range(len(sorted_frames) - self.seq_len - self.pred_len + 1):\n",
    "#                         start_frame = sorted_frames[i]\n",
    "#                         end_frame_observe = sorted_frames[i + self.seq_len - 1]\n",
    "#                         if end_frame_observe - start_frame != self.seq_len - 1:\n",
    "#                             continue\n",
    "#                         target_frame_actual_idx = i + self.seq_len + self.pred_len - 1\n",
    "#                         if target_frame_actual_idx >= len(sorted_frames):\n",
    "#                             continue\n",
    "#                         target_frame = sorted_frames[target_frame_actual_idx]\n",
    "#                         if target_frame - end_frame_observe != self.pred_len:\n",
    "#                             continue\n",
    "#                         self.sequences.append((set_id, video_id, ped_id, start_frame))\n",
    "#                         sequence_count += 1\n",
    "#         print(f\"Dataset initialized with {sequence_count} sequences for sets {self.set_names}.\")\n",
    "\n",
    "#     def __len__(self):\n",
    "#         return len(self.sequences)\n",
    "\n",
    "#     def __getitem__(self, idx):\n",
    "#         set_id, video_id, ped_id, start_frame = self.sequences[idx]\n",
    "#         frame_nums = list(range(start_frame, start_frame + self.seq_len))\n",
    "#         target_frame_num = start_frame + self.seq_len + self.pred_len - 1\n",
    "\n",
    "#         video_db = self.pie_db.get(set_id, {}).get(video_id, {})\n",
    "#         ped_db = video_db.get(\"ped_annotations\", {}).get(ped_id, {})\n",
    "#         ego_db = video_db.get(\"vehicle_annotations\", {})\n",
    "#         traffic_db = video_db.get(\"traffic_annotations\", {})\n",
    "#         ped_attributes = ped_db.get(\"attributes\", {})\n",
    "\n",
    "#         feature_sequences = {s: [] for s in self.streams_to_generate}\n",
    "#         label = 0\n",
    "#         if \"frames\" in ped_db and \"behavior\" in ped_db and \"cross\" in ped_db[\"behavior\"]:\n",
    "#             try:\n",
    "#                 tf_idx = ped_db[\"frames\"].index(target_frame_num)\n",
    "#                 label = ped_db[\"behavior\"][\"cross\"][tf_idx]\n",
    "#                 if label == -1:\n",
    "#                     label = 0\n",
    "#             except (ValueError, IndexError):\n",
    "#                 pass\n",
    "\n",
    "#         static_vec = None\n",
    "#         if \"static_context\" in self.streams_to_generate:\n",
    "#             sig = ped_attributes.get(\"signalized\", 0)\n",
    "#             inter = ped_attributes.get(\"intersection\", 0)\n",
    "#             age = ped_attributes.get(\"age\", 2)\n",
    "#             gen = ped_attributes.get(\"gender\", 0)\n",
    "#             td = int(ped_attributes.get(\"traffic_direction\", 0))\n",
    "#             nl = ped_attributes.get(\"num_lanes\", 2)\n",
    "#             nl_idx = LANE_CATEGORIES.get(nl, list(LANE_CATEGORIES.values())[-1])\n",
    "#             static_features = [\n",
    "#                 to_one_hot(sig, NUM_SIGNALIZED_CATS),\n",
    "#                 to_one_hot(inter, NUM_INTERSECTION_CATS),\n",
    "#                 to_one_hot(age, NUM_AGE_CATS),\n",
    "#                 to_one_hot(gen, NUM_GENDER_CATS),\n",
    "#                 to_one_hot(td, NUM_TRAFFIC_DIR_CATS),\n",
    "#                 to_one_hot(nl_idx, NUM_LANE_CATS),\n",
    "#             ]\n",
    "#             static_vec = np.concatenate(static_features)\n",
    "#             if static_vec.shape[0] != INPUT_SIZE_STATIC:\n",
    "#                 static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "\n",
    "#         for frame_num in frame_nums:\n",
    "#             idx_in = -1\n",
    "#             if \"frames\" in ped_db:\n",
    "#                 try:\n",
    "#                     idx_in = ped_db[\"frames\"].index(frame_num)\n",
    "#                 except ValueError:\n",
    "#                     pass\n",
    "#             ego_f = ego_db.get(frame_num, {})\n",
    "\n",
    "#             if \"bbox\" in self.streams_to_generate:\n",
    "#                 bbox_norm = np.zeros(INPUT_SIZE_BBOX, dtype=np.float32)\n",
    "#                 if idx_in != -1 and \"bbox\" in ped_db and len(ped_db[\"bbox\"]) > idx_in:\n",
    "#                     try:\n",
    "#                         x1, y1, x2, y2 = ped_db[\"bbox\"][idx_in]\n",
    "#                         w_img = video_db.get(\"width\", 1920)\n",
    "#                         h_img = video_db.get(\"height\", 1080)\n",
    "#                         if w_img > 0 and h_img > 0:\n",
    "#                             cx = ((x1 + x2) / 2) / w_img\n",
    "#                             cy = ((y1 + y2) / 2) / h_img\n",
    "#                             w = (x2 - x1) / w_img\n",
    "#                             h = (y2 - y1) / h_img\n",
    "#                             if 0 <= cx <= 1 and 0 <= cy <= 1 and w > 0 and h > 0:\n",
    "#                                 bbox_norm = np.array([cx, cy, w, h], dtype=np.float32)\n",
    "#                     except Exception:\n",
    "#                         pass\n",
    "#                 feature_sequences[\"bbox\"].append(bbox_norm)\n",
    "\n",
    "#             if \"pose\" in self.streams_to_generate:\n",
    "#                 pose_v = np.zeros(INPUT_SIZE_POSE, dtype=np.float32)\n",
    "#                 if set_id in self.all_pose_data and video_id in self.all_pose_data[set_id]:\n",
    "#                     pdict = self.all_pose_data[set_id][video_id].get(frame_num, {})\n",
    "#                     lp = pdict.get(ped_id)\n",
    "#                     if isinstance(lp, np.ndarray) and lp.shape == (INPUT_SIZE_POSE,):\n",
    "#                         pose_v = lp\n",
    "#                 feature_sequences[\"pose\"].append(pose_v)\n",
    "\n",
    "#             if \"ego_speed\" in self.streams_to_generate:\n",
    "#                 sp = ego_f.get(\"OBD_speed\", 0.0) or ego_f.get(\"GPS_speed\", 0.0) or 0.0\n",
    "#                 sp_s = (sp - self.scalers.get(\"ego_speed_mean\", 0.0)) / self.scalers.get(\"ego_speed_std\", 1.0)\n",
    "#                 feature_sequences[\"ego_speed\"].append([sp_s])\n",
    "\n",
    "#             if \"ego_acc\" in self.streams_to_generate:\n",
    "#                 ax = ego_f.get(\"accX\", 0.0)\n",
    "#                 ay = ego_f.get(\"accY\", 0.0)\n",
    "#                 ax_s = (ax - self.scalers.get(\"accX_mean\", 0.0)) / self.scalers.get(\"accX_std\", 1.0)\n",
    "#                 ay_s = (ay - self.scalers.get(\"accY_mean\", 0.0)) / self.scalers.get(\"accY_std\", 1.0)\n",
    "#                 feature_sequences[\"ego_acc\"].append([ax_s, ay_s])\n",
    "\n",
    "#             if \"ego_gyro\" in self.streams_to_generate:\n",
    "#                 gz = ego_f.get(\"gyroZ\", 0.0)\n",
    "#                 gz_s = (gz - self.scalers.get(\"gyroZ_mean\", 0.0)) / self.scalers.get(\"gyroZ_std\", 1.0)\n",
    "#                 feature_sequences[\"ego_gyro\"].append([gz_s])\n",
    "\n",
    "#             if \"ped_action\" in self.streams_to_generate:\n",
    "#                 ac = 0\n",
    "#                 if idx_in != -1 and \"behavior\" in ped_db and \"action\" in ped_db[\"behavior\"]:\n",
    "#                     arr = ped_db[\"behavior\"][\"action\"]\n",
    "#                     if len(arr) > idx_in:\n",
    "#                         ac = arr[idx_in]\n",
    "#                 feature_sequences[\"ped_action\"].append([float(ac)])\n",
    "\n",
    "#             if \"ped_look\" in self.streams_to_generate:\n",
    "#                 lk = 0\n",
    "#                 if idx_in != -1 and \"behavior\" in ped_db and \"look\" in ped_db[\"behavior\"]:\n",
    "#                     arr = ped_db[\"behavior\"][\"look\"]\n",
    "#                     if len(arr) > idx_in:\n",
    "#                         lk = arr[idx_in]\n",
    "#                 feature_sequences[\"ped_look\"].append([float(lk)])\n",
    "\n",
    "#             if \"ped_occlusion\" in self.streams_to_generate:\n",
    "#                 oc = 0.0\n",
    "#                 if idx_in != -1 and \"occlusion\" in ped_db:\n",
    "#                     arr = ped_db[\"occlusion\"]\n",
    "#                     if len(arr) > idx_in:\n",
    "#                         oc = float(arr[idx_in]) / 2.0\n",
    "#                 feature_sequences[\"ped_occlusion\"].append([oc])\n",
    "\n",
    "#             if \"traffic_light\" in self.streams_to_generate:\n",
    "#                 st = 0\n",
    "#                 for obj_id, od in traffic_db.items():\n",
    "#                     if od.get(\"obj_class\") == \"traffic_light\" and \"frames\" in od and \"state\" in od:\n",
    "#                         try:\n",
    "#                             fi = od[\"frames\"].index(frame_num)\n",
    "#                             sv = od[\"state\"][fi]\n",
    "#                             if sv != 0:\n",
    "#                                 st = sv\n",
    "#                                 break\n",
    "#                         except (ValueError, IndexError):\n",
    "#                             continue\n",
    "#                 feature_sequences[\"traffic_light\"].append(to_one_hot(st, NUM_TL_STATES))\n",
    "\n",
    "#             if \"static_context\" in self.streams_to_generate:\n",
    "#                 feature_sequences[\"static_context\"].append(\n",
    "#                     static_vec\n",
    "#                     if static_vec is not None\n",
    "#                     else np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "#                 )\n",
    "\n",
    "#         # Convert lists to tensors\n",
    "#         features = {}\n",
    "#         try:\n",
    "#             for sn in self.streams_to_generate:\n",
    "#                 arr = np.array(feature_sequences[sn], dtype=np.float32)\n",
    "#                 features[sn] = torch.tensor(arr, dtype=torch.float32)\n",
    "#         except Exception as e:\n",
    "#             print(f\"Error converting features idx {idx}: {e}. Return dummy.\")\n",
    "#             features = {\n",
    "#                 name: torch.zeros(\n",
    "#                     (self.seq_len, self._input_sizes_for_error.get(name, 1)),\n",
    "#                     dtype=torch.float32,\n",
    "#                 )\n",
    "#                 for name in self.streams_to_generate\n",
    "#             }\n",
    "\n",
    "#         return features, torch.tensor(label, dtype=torch.long)\n",
    "\n",
    "\n",
    "# # --- Wrapper Dataset for Balanced Data ---\n",
    "# class BalancedDataset(Dataset):\n",
    "#     def __init__(self, data_dict, active_streams, label_key='label'):\n",
    "#         self.active_streams = active_streams\n",
    "#         self.label_key = label_key\n",
    "#         if label_key not in data_dict or not data_dict[label_key]:\n",
    "#             raise ValueError(f\"Label key '{label_key}' missing/empty.\")\n",
    "#         self.num_samples = len(data_dict[label_key])\n",
    "#         if self.num_samples == 0:\n",
    "#             print(\"Warning: BalancedDataset initialized with zero samples.\")\n",
    "#         self.features = {}\n",
    "#         for s in active_streams:\n",
    "#             if s in data_dict and data_dict[s]:\n",
    "#                 self.features[s] = torch.tensor(\n",
    "#                     np.array(data_dict[s]), dtype=torch.float32\n",
    "#                 )\n",
    "#             else:\n",
    "#                 raise KeyError(f\"Stream '{s}' requested but missing/empty in balanced data.\")\n",
    "#         try:\n",
    "#             self.labels = torch.tensor(\n",
    "#                 [lbl[0] for lbl in data_dict[label_key]], dtype=torch.long\n",
    "#             )\n",
    "#         except (IndexError, TypeError) as e:\n",
    "#             raise ValueError(f\"Error converting labels: {e}\")\n",
    "#         for s in active_streams:\n",
    "#             if len(self.features[s]) != self.num_samples:\n",
    "#                 raise ValueError(f\"Len mismatch: Stream '{s}' vs Labels\")\n",
    "\n",
    "#     def __len__(self):\n",
    "#         return self.num_samples\n",
    "\n",
    "#     def __getitem__(self, idx):\n",
    "#         fd = {s: self.features[s][idx] for s in self.active_streams}\n",
    "#         return fd, self.labels[idx]\n",
    "\n",
    "\n",
    "# # --- Model Architecture ---\n",
    "# class Attention(nn.Module):\n",
    "#     def __init__(self, hidden_dim, attention_dim):\n",
    "#         super(Attention, self).__init__()\n",
    "#         self.attention_net = nn.Sequential(\n",
    "#             nn.Linear(hidden_dim, attention_dim),\n",
    "#             nn.Tanh(),\n",
    "#             nn.Linear(attention_dim, 1),\n",
    "#         )\n",
    "\n",
    "#     def forward(self, lstm_output):\n",
    "#         scores = self.attention_net(lstm_output).squeeze(2)\n",
    "#         weights = torch.softmax(scores, dim=1)\n",
    "#         context = torch.sum(lstm_output * weights.unsqueeze(2), dim=1)\n",
    "#         return context, weights\n",
    "\n",
    "\n",
    "# class MultiStreamAdaptiveLSTM(nn.Module):\n",
    "#     def __init__(\n",
    "#         self,\n",
    "#         input_sizes,\n",
    "#         lstm_hidden_size,\n",
    "#         num_lstm_layers,\n",
    "#         num_classes,\n",
    "#         attention_dim,\n",
    "#         dropout_rate,\n",
    "#         stream_names=['bbox', 'pose'],\n",
    "#     ):\n",
    "#         super(MultiStreamAdaptiveLSTM, self).__init__()\n",
    "#         if not stream_names:\n",
    "#             raise ValueError(\"stream_names cannot be empty.\")\n",
    "#         self.stream_names = stream_names\n",
    "#         self.lstms = nn.ModuleDict()\n",
    "#         self.attentions = nn.ModuleDict()\n",
    "#         print(f\"Initializing model with streams: {self.stream_names}\")\n",
    "#         for name in stream_names:\n",
    "#             if name not in input_sizes:\n",
    "#                 raise KeyError(f\"Input size for stream '{name}' not provided.\")\n",
    "#             insize = input_sizes[name]\n",
    "#             print(f\"  - Adding stream '{name}' with input size {insize}\")\n",
    "#             self.lstms[name] = nn.LSTM(\n",
    "#                 insize,\n",
    "#                 lstm_hidden_size,\n",
    "#                 num_lstm_layers,\n",
    "#                 batch_first=True,\n",
    "#                 dropout=dropout_rate if num_lstm_layers > 1 else 0,\n",
    "#                 bidirectional=True,\n",
    "#             )\n",
    "#             self.attentions[name] = Attention(lstm_hidden_size * 2, attention_dim)\n",
    "#         nf = lstm_hidden_size * 2 * len(stream_names)\n",
    "#         print(f\"  Combined feature dimension: {nf}\")\n",
    "#         self.dropout = nn.Dropout(dropout_rate)\n",
    "#         interm = max(num_classes * 4, nf // 2)\n",
    "#         self.fc1 = nn.Linear(nf, interm)\n",
    "#         self.relu = nn.ReLU()\n",
    "#         self.fc2 = nn.Linear(interm, num_classes)\n",
    "\n",
    "#     def forward(self, x):\n",
    "#         ctxs = []\n",
    "#         for name in self.stream_names:\n",
    "#             if name not in x:\n",
    "#                 print(f\"Warning: Stream '{name}' expected but missing.\")\n",
    "#                 continue\n",
    "#             out, _ = self.lstms[name](x[name])\n",
    "#             ctx, _ = self.attentions[name](out)\n",
    "#             ctxs.append(ctx)\n",
    "#         if not ctxs:\n",
    "#             raise RuntimeError(\"No stream outputs generated.\")\n",
    "#         f = torch.cat(ctxs, dim=1)\n",
    "#         y = self.dropout(f)\n",
    "#         y = self.relu(self.fc1(y))\n",
    "#         y = self.dropout(y)\n",
    "#         return self.fc2(y)\n",
    "\n",
    "\n",
    "# # --- Training and Evaluation Functions ---\n",
    "# def train_epoch(model, loader, optim, crit, device):\n",
    "#     model.train()\n",
    "#     total, allp, allg = 0.0, [], []\n",
    "#     for feats, labs in tqdm(loader, desc=\"Training\", leave=False):\n",
    "#         inp = {n: feats[n].to(device) for n in model.stream_names if n in feats}\n",
    "#         labs = labs.to(device)\n",
    "#         optim.zero_grad()\n",
    "#         out = model(inp)\n",
    "#         loss = crit(out, labs)\n",
    "#         loss.backward()\n",
    "#         optim.step()\n",
    "#         total += loss.item()\n",
    "#         preds = out.argmax(1).cpu().numpy()\n",
    "#         allp.extend(preds)\n",
    "#         allg.extend(labs.cpu().numpy())\n",
    "#     return total / max(1, len(loader)), accuracy_score(allg, allp)\n",
    "\n",
    "\n",
    "# def evaluate_epoch(model, loader, crit, device):\n",
    "#     model.eval()\n",
    "#     total, allg, allp, allpr = 0.0, [], [], []\n",
    "#     with torch.no_grad():\n",
    "#         for feats, labs in tqdm(loader, desc=\"Evaluating\", leave=False):\n",
    "#             inp = {n: feats[n].to(device) for n in model.stream_names if n in feats}\n",
    "#             labs = labs.to(device)\n",
    "#             out = model(inp)\n",
    "#             loss = crit(out, labs)\n",
    "#             total += loss.item()\n",
    "#             probs = torch.softmax(out, 1).cpu().numpy()\n",
    "#             preds = probs.argmax(1)\n",
    "#             allg.extend(labs.cpu().numpy())\n",
    "#             allp.extend(preds)\n",
    "#             allpr.extend(probs)\n",
    "#     allg = np.array(allg)\n",
    "#     allp = np.array(allp)\n",
    "#     allpr = np.array(allpr)\n",
    "#     acc = accuracy_score(allg, allp)\n",
    "#     prec, rec, f1, _ = precision_recall_fscore_support(\n",
    "#         allg, allp, average='binary', pos_label=1, zero_division=0\n",
    "#     )\n",
    "#     auc = roc_auc_score(allg, allpr[:, 1]) if len(np.unique(allg)) > 1 else float('nan')\n",
    "#     return {'loss': total / max(1, len(loader)), 'accuracy': acc,\n",
    "#             'precision': prec, 'recall': rec, 'f1': f1, 'auc': auc}\n",
    "\n",
    "\n",
    "# def get_predictions_and_labels(model, loader, device):\n",
    "#     model.eval()\n",
    "#     allg, allp = [], []\n",
    "#     with torch.no_grad():\n",
    "#         for feats, labs in tqdm(loader, desc=\"Generating CM Data\", leave=False):\n",
    "#             inp = {n: feats[n].to(device) for n in model.stream_names if n in feats}\n",
    "#             labs = labs.to(device)\n",
    "#             out = model(inp)\n",
    "#             preds = out.argmax(1)\n",
    "#             allg.extend(labs.cpu().numpy())\n",
    "#             allp.extend(preds.cpu().numpy())\n",
    "#     return np.array(allg), np.array(allp)\n",
    "\n",
    "\n",
    "# # --- Main Execution Block ---\n",
    "# if __name__ == '__main__':\n",
    "#     # --- Step 1: Data Preparation ---\n",
    "#     print(\"--- Running Data Preparation ---\")\n",
    "#     print(f\"Checking for PIE database cache at: {PIE_DATABASE_CACHE_PATH}\")\n",
    "#     if not os.path.exists(PIE_DATABASE_CACHE_PATH):\n",
    "#         if PIE is None:\n",
    "#             raise ImportError(\"PIE class not imported, cannot generate database.\")\n",
    "#         print(\"PIE database cache not found. Generating...\")\n",
    "#         pie_interface = PIE(data_path=PIE_ROOT_PATH, regen_database=True)\n",
    "#         pie_database = pie_interface.generate_database()\n",
    "#         if not pie_database:\n",
    "#             raise RuntimeError(\"Failed to generate PIE database.\")\n",
    "#         print(\"PIE database generated successfully.\")\n",
    "#     else:\n",
    "#         print(\"Loading PIE database from cache...\")\n",
    "#         try:\n",
    "#             with open(PIE_DATABASE_CACHE_PATH, 'rb') as f:\n",
    "#                 pie_database = pickle.load(f)\n",
    "#             print(\"PIE database loaded successfully.\")\n",
    "#         except Exception as e:\n",
    "#             raise RuntimeError(f\"Failed to load PIE database: {e}\")\n",
    "\n",
    "#     # --- Calculate Standardization Parameters ---\n",
    "#     print(\"\\nCalculating standardization parameters from training set...\")\n",
    "#     all_train_ego_speeds, all_train_accX, all_train_accY, all_train_gyroZ = [], [], [], []\n",
    "#     for sid in TRAIN_SETS_STR:\n",
    "#         if sid in pie_database:\n",
    "#             for vid, vdata in pie_database[sid].items():\n",
    "#                 va = vdata.get('vehicle_annotations', {})\n",
    "#                 for fn, ed in va.items():\n",
    "#                     sp = ed.get('OBD_speed', 0.0) or ed.get('GPS_speed', 0.0) or 0.0\n",
    "#                     all_train_ego_speeds.append(sp)\n",
    "#                     all_train_accX.append(ed.get('accX', 0.0))\n",
    "#                     all_train_accY.append(ed.get('accY', 0.0))\n",
    "#                     all_train_gyroZ.append(ed.get('gyroZ', 0.0))\n",
    "#     scalers = {}\n",
    "#     if all_train_ego_speeds:\n",
    "#         scalers['ego_speed_mean'] = np.mean(all_train_ego_speeds)\n",
    "#         scalers['ego_speed_std'] = np.std(all_train_ego_speeds) or 1.0\n",
    "#         print(f\"  Ego Speed: Mean={scalers['ego_speed_mean']:.2f}, Std={scalers['ego_speed_std']:.2f}\")\n",
    "#     if all_train_accX:\n",
    "#         scalers['accX_mean'] = np.mean(all_train_accX)\n",
    "#         scalers['accX_std'] = np.std(all_train_accX) or 1.0\n",
    "#         scalers['accY_mean'] = np.mean(all_train_accY)\n",
    "#         scalers['accY_std'] = np.std(all_train_accY) or 1.0\n",
    "#         print(f\"  Ego AccX: Mean={scalers['accX_mean']:.2f}, Std={scalers['accX_std']:.2f}\")\n",
    "#         print(f\"  Ego AccY: Mean={scalers['accY_mean']:.2f}, Std={scalers['accY_std']:.2f}\")\n",
    "#     if all_train_gyroZ:\n",
    "#         scalers['gyroZ_mean'] = np.mean(all_train_gyroZ)\n",
    "#         scalers['gyroZ_std'] = np.std(all_train_gyroZ) or 1.0\n",
    "#         print(f\"  Ego GyroZ: Mean={scalers['gyroZ_mean']:.2f}, Std={scalers['gyroZ_std']:.2f}\")\n",
    "#     print(\"Standardization parameters calculated.\")\n",
    "\n",
    "#     # --- Initialize FULL Training Dataset ---\n",
    "#     print(\"\\nInitializing full training dataset (for extraction)...\")\n",
    "#     full_train_dataset = PIEDataset(\n",
    "#         pie_database, TRAIN_SETS_STR, POSE_DATA_DIR, SEQ_LEN, PRED_LEN, scalers, ALL_POSSIBLE_STREAMS\n",
    "#     )\n",
    "#     if len(full_train_dataset) == 0:\n",
    "#         raise ValueError(\"Full Train Dataset loading failed.\")\n",
    "\n",
    "#     # --- Prepare and Balance Training Data ---\n",
    "#     print(\"\\nExtracting ALL stream data from training set for balancing...\")\n",
    "#     training_data_dict = {s: [] for s in ALL_POSSIBLE_STREAMS}\n",
    "#     training_data_dict['label'] = []\n",
    "#     for i in tqdm(range(len(full_train_dataset)), desc=\"Extracting data\"):\n",
    "#         feats, lab = full_train_dataset[i]\n",
    "#         for s in ALL_POSSIBLE_STREAMS:\n",
    "#             arr = feats.get(s)\n",
    "#             if arr is not None:\n",
    "#                 training_data_dict[s].append(arr.numpy())\n",
    "#             else:\n",
    "#                 size = full_train_dataset._input_sizes_for_error.get(s, 1)\n",
    "#                 training_data_dict[s].append(np.zeros((SEQ_LEN, size), dtype=np.float32))\n",
    "#         training_data_dict['label'].append([lab.item()])\n",
    "#     print(f\"Original training samples: {len(training_data_dict['label'])}\")\n",
    "#     del full_train_dataset\n",
    "#     gc.collect()\n",
    "\n",
    "#     balanced_train_data_dict = balance_samples_count(\n",
    "#         training_data_dict, label_type='label'\n",
    "#     )\n",
    "#     del training_data_dict\n",
    "#     gc.collect()\n",
    "\n",
    "#     print(f\"\\nSaving balanced training data to: {BALANCED_DATA_PKL_PATH}\")\n",
    "#     with open(BALANCED_DATA_PKL_PATH, 'wb') as f:\n",
    "#         pickle.dump(balanced_train_data_dict, f, pickle.HIGHEST_PROTOCOL)\n",
    "#     print(\" -> Balanced data saved.\")\n",
    "\n",
    "#     print(f\"\\nSaving scalers to: {SCALERS_PKL_PATH}\")\n",
    "#     with open(SCALERS_PKL_PATH, 'wb') as f:\n",
    "#         pickle.dump(scalers, f, pickle.HIGHEST_PROTOCOL)\n",
    "#     print(\" -> Scalers saved.\")\n",
    "\n",
    "#     # --- Clean up and start Step 2 ---\n",
    "#     del pie_database\n",
    "#     gc.collect()\n",
    "\n",
    "#     print(\"\\n--- Data Preparation and Balancing Completed ---\")\n",
    "#     print(\"--- Ablation Study Starting Below ---\")\n",
    "#     print(\"-\" * 70)\n",
    "\n",
    "#     # --- Step 2: Ablation Study ---\n",
    "#     print(f\"\\nLoading balanced training data from: {BALANCED_DATA_PKL_PATH}\")\n",
    "#     print(f\"Loading scalers from: {SCALERS_PKL_PATH}\")\n",
    "#     with open(BALANCED_DATA_PKL_PATH, 'rb') as f:\n",
    "#         balanced_train_data_dict = pickle.load(f)\n",
    "#     with open(SCALERS_PKL_PATH, 'rb') as f:\n",
    "#         scalers = pickle.load(f)\n",
    "#     print(\" -> Pre-processed data loaded successfully.\")\n",
    "\n",
    "#     print(\"\\nLoading PIE database cache for Validation...\")\n",
    "#     with open(PIE_DATABASE_CACHE_PATH, 'rb') as f:\n",
    "#         pie_database = pickle.load(f)\n",
    "#     print(\" -> PIE database loaded successfully.\")\n",
    "\n",
    "#     print(\"\\nInitializing validation dataset...\")\n",
    "#     val_dataset = PIEDataset(\n",
    "#         pie_database, VAL_SETS_STR, POSE_DATA_DIR, SEQ_LEN, PRED_LEN, scalers, ALL_POSSIBLE_STREAMS\n",
    "#     )\n",
    "#     val_loader = DataLoader(\n",
    "#         val_dataset, batch_size=BATCH_SIZE, shuffle=False, num_workers=2, pin_memory=True\n",
    "#     )\n",
    "#     print(\"Validation dataset and loader created.\")\n",
    "#     del pie_database\n",
    "#     gc.collect()\n",
    "\n",
    "#     # --- Ablation Study Loop ---\n",
    "#     results_summary = {}\n",
    "\n",
    "#     for streams in STREAM_COMBINATIONS_TO_TEST:\n",
    "#         key = tuple(sorted(streams))\n",
    "#         print(f\"\\n===== Experiment: Active Streams: {streams} =====\")\n",
    "\n",
    "#         try:\n",
    "#             curr_ds = BalancedDataset(balanced_train_data_dict, streams, label_key='label')\n",
    "#         except Exception as e:\n",
    "#             print(f\"Error creating BalancedDataset: {e}. Skipping.\")\n",
    "#             continue\n",
    "#         train_loader = DataLoader(\n",
    "#             curr_ds, batch_size=BATCH_SIZE, shuffle=True, num_workers=2, pin_memory=True\n",
    "#         )\n",
    "\n",
    "#         print(\"Initializing model...\")\n",
    "#         curr_ins = {}\n",
    "#         special = {\n",
    "#             'TRAFFIC_LIGHT': 'TL_STATE',\n",
    "#             'STATIC_CONTEXT': 'STATIC',\n",
    "#             'EGO_SPEED': 'EGO_SPEED',\n",
    "#             'EGO_ACC': 'EGO_ACC',\n",
    "#             'EGO_GYRO': 'EGO_GYRO',\n",
    "#             'PED_ACTION': 'PED_ACTION',\n",
    "#             'PED_LOOK': 'PED_LOOK',\n",
    "#             'PED_OCCLUSION': 'PED_OCC',\n",
    "#         }\n",
    "#         for s in streams:\n",
    "#             name = f'INPUT_SIZE_{s.upper()}'\n",
    "#             suf = special.get(s.upper(), None)\n",
    "#             if suf:\n",
    "#                 name = f'INPUT_SIZE_{suf}'\n",
    "#             elif s == 'bbox':\n",
    "#                 name = 'INPUT_SIZE_BBOX'\n",
    "#             elif s == 'pose':\n",
    "#                 name = 'INPUT_SIZE_POSE'\n",
    "#             curr_ins[s] = globals()[name]\n",
    "\n",
    "#         model = MultiStreamAdaptiveLSTM(\n",
    "#             input_sizes=curr_ins,\n",
    "#             lstm_hidden_size=LSTM_HIDDEN_SIZE,\n",
    "#             num_lstm_layers=NUM_LSTM_LAYERS,\n",
    "#             num_classes=NUM_CLASSES,\n",
    "#             attention_dim=ATTENTION_DIM,\n",
    "#             dropout_rate=DROPOUT_RATE,\n",
    "#             stream_names=streams,\n",
    "#         ).to(DEVICE)\n",
    "#         print(\n",
    "#             f\"Model Initialized. Trainable Parameters: \"\n",
    "#             f\"{sum(p.numel() for p in model.parameters() if p.requires_grad):,}\"\n",
    "#         )\n",
    "\n",
    "#         labs = curr_ds.labels.tolist()\n",
    "#         c0, c1 = labs.count(0), labs.count(1)\n",
    "#         tot = len(labs)\n",
    "#         if tot == 0:\n",
    "#             w0 = w1 = 1.0\n",
    "#         elif c0 == 0:\n",
    "#             w0, w1 = 0.0, 1.0\n",
    "#         elif c1 == 0:\n",
    "#             w0, w1 = 1.0, 0.0\n",
    "#         else:\n",
    "#             w0, w1 = tot / (2 * c0), tot / (2 * c1)\n",
    "#         cw = torch.tensor([w0, w1], dtype=torch.float32).to(DEVICE)\n",
    "#         crit = nn.CrossEntropyLoss(weight=cw)\n",
    "#         opt = optim.Adam(model.parameters(), lr=LEARNING_RATE)\n",
    "\n",
    "#         best_f1 = -1.0\n",
    "#         best_path = None\n",
    "\n",
    "#         for ep in range(NUM_EPOCHS):\n",
    "#             t_loss, t_acc = train_epoch(model, train_loader, opt, crit, DEVICE)\n",
    "#             vmet = evaluate_epoch(model, val_loader, crit, DEVICE)\n",
    "#             print(\n",
    "#                 f\"Epoch {ep+1}/{NUM_EPOCHS}: \"\n",
    "#                 f\"Train Loss={t_loss:.4f}, Train Acc={t_acc:.4f} | \"\n",
    "#                 f\"Val Loss={vmet['loss']:.4f}, Val Acc={vmet['accuracy']:.4f}, F1={vmet['f1']:.4f}\"\n",
    "#             )\n",
    "#             if vmet['f1'] > best_f1:\n",
    "#                 best_f1 = vmet['f1']\n",
    "#                 path = f\"best_model_{'_'.join(sorted(streams))}_ep{ep+1}.pth\"\n",
    "#                 torch.save(model.state_dict(), path)\n",
    "#                 best_path = path\n",
    "#                 print(f\"  → New best F1, saved to {path}\")\n",
    "\n",
    "#         # final eval\n",
    "#         if best_path:\n",
    "#             model.load_state_dict(torch.load(best_path, map_location=DEVICE))\n",
    "#             final_met = evaluate_epoch(model, val_loader, crit, DEVICE)\n",
    "#         else:\n",
    "#             final_met = vmet\n",
    "\n",
    "#         results_summary[key] = {\n",
    "#             'Best Val F1': best_f1,\n",
    "#             'Final F1': final_met['f1'],\n",
    "#             'Final Precision': final_met['precision'],\n",
    "#             'Final Recall': final_met['recall'],\n",
    "#             'Final Accuracy': final_met['accuracy'],\n",
    "#             'Final AUC': final_met['auc'],\n",
    "#             'Final Loss': final_met['loss'],\n",
    "#         }\n",
    "#         print(f\"Results for {streams}: {results_summary[key]}\")\n",
    "\n",
    "#         del model, opt, crit, train_loader, curr_ds\n",
    "#         gc.collect()\n",
    "#         torch.cuda.empty_cache()\n",
    "#         time.sleep(1)\n",
    "\n",
    "#     # --- Print Summary Table ---\n",
    "#     print(\"\\n--- Ablation Study Summary ---\")\n",
    "#     if results_summary:\n",
    "#         # Filter out keys that are not tuples before creating DataFrame\n",
    "#         valid_results = {k: v for k, v in results_summary.items() if isinstance(k, tuple)}\n",
    "#         if not valid_results:\n",
    "#              print(\"No valid experiment results found in summary dictionary.\")\n",
    "#         else:\n",
    "#             summary_df = pd.DataFrame.from_dict(valid_results, orient='index')\n",
    "#             # Format index - ensure keys are tuples of strings before joining\n",
    "#             summary_df.index = [\", \".join(map(str, k)) for k in summary_df.index]\n",
    "#             cols_order = ['Best Val F1', 'Final F1', 'Final Recall', 'Final Precision', 'Final Accuracy', 'Final AUC', 'Final Loss']\n",
    "#             summary_df = summary_df[[col for col in cols_order if col in summary_df.columns]]\n",
    "#             summary_df = summary_df.sort_values(by='Best Val F1', ascending=False)\n",
    "#             print(summary_df.to_markdown(floatfmt=\".4f\"))\n",
    "#     else:\n",
    "#         print(\"No experiments were completed successfully.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "cafb7262",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T12:09:09.447649Z",
     "iopub.status.busy": "2025-05-01T12:09:09.447321Z",
     "iopub.status.idle": "2025-05-01T12:09:09.457778Z",
     "shell.execute_reply": "2025-05-01T12:09:09.456960Z"
    },
    "papermill": {
     "duration": 0.02224,
     "end_time": "2025-05-01T12:09:09.459026",
     "exception": false,
     "start_time": "2025-05-01T12:09:09.436786",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # --- IMPORTS ---------------------------------------------------------------\n",
    "# import torch\n",
    "# import torch.nn as nn\n",
    "# import torch.optim as optim\n",
    "# from torch.utils.data import Dataset, DataLoader        # keep DataLoader around\n",
    "# import xml.etree.ElementTree as ET\n",
    "# import os\n",
    "# import numpy as np\n",
    "# from tqdm.notebook import tqdm                         # progress-bar\n",
    "# import random, math, zipfile, cv2, pandas as pd\n",
    "# import matplotlib.pyplot as plt, seaborn as sns\n",
    "# import pickle, time, sys, gc\n",
    "\n",
    "# # ---------------------------------------------------------------------------\n",
    "# # Optional PIE utilities path (not required for visualisation-only script)\n",
    "# # pie_utilities_path = '/kaggle/working/PIE/utilities'\n",
    "# # if pie_utilities_path not in sys.path:\n",
    "# #     sys.path.insert(0, pie_utilities_path)\n",
    "# # try:\n",
    "# #     from pie_data import PIE\n",
    "# # except ImportError:\n",
    "# #     PIE = None\n",
    "# # ---------------------------------------------------------------------------\n",
    "\n",
    "# # ------------------------------- Configuration -----------------------------\n",
    "# VIDEO_ID_TO_PROCESS = \"video_0001\"\n",
    "# SET_ID_TO_PROCESS   = \"set01\"\n",
    "\n",
    "# # ------------------------------- Paths ------------------------------------\n",
    "# IMAGE_FRAME_DIR         = \"/kaggle/input/sample-images2/Frames\"\n",
    "# PIE_DATABASE_CACHE_PATH = \"/kaggle/input/pie-database/pie_database.pkl\"\n",
    "# SCALERS_PKL_PATH        = \"/kaggle/working/scalers.pkl\"\n",
    "# MODEL_PATH              = (\"/kaggle/input/best_model_ablation/pytorch/default/1/\"\n",
    "#                            \"best_model_bbox_ego_acc_ego_speed_ped_action_ped_look_static_context_ep1.pth\")\n",
    "# OUTPUT_VIDEO_PATH       = f\"/kaggle/working/{SET_ID_TO_PROCESS}_{VIDEO_ID_TO_PROCESS}_predictions.mp4\"\n",
    "\n",
    "# POSE_DATA_DIR = \"/kaggle/input/sample-poses\"   # <-- NEW: required for pose loading\n",
    "# # ---------------------------------------------------------------------------\n",
    "\n",
    "# # *** Define the streams this specific model was trained with ***\n",
    "# MODEL_ACTIVE_STREAMS = [\n",
    "#     \"bbox\",\n",
    "#     \"ego_speed\",\n",
    "#     \"ego_acc\",\n",
    "#     \"ped_action\",\n",
    "#     \"ped_look\",\n",
    "#     \"static_context\",\n",
    "# ]\n",
    "# print(f\"Model uses Active Streams: {MODEL_ACTIVE_STREAMS}\")\n",
    "\n",
    "# # -------------------- Model & dataset hyper-parameters --------------------\n",
    "# SEQ_LEN = 30\n",
    "# PRED_LEN = 1          # prediction at end of sequence\n",
    "\n",
    "# INPUT_SIZE_BBOX       = 4\n",
    "# INPUT_SIZE_POSE       = 34\n",
    "# INPUT_SIZE_EGO_SPEED  = 1\n",
    "# INPUT_SIZE_EGO_ACC    = 2\n",
    "# INPUT_SIZE_EGO_GYRO   = 1\n",
    "# INPUT_SIZE_PED_ACTION = 1\n",
    "# INPUT_SIZE_PED_LOOK   = 1\n",
    "# INPUT_SIZE_PED_OCC    = 1\n",
    "# INPUT_SIZE_TL_STATE   = 4\n",
    "\n",
    "# NUM_SIGNALIZED_CATS   = 4\n",
    "# NUM_INTERSECTION_CATS = 5\n",
    "# NUM_AGE_CATS          = 4\n",
    "# NUM_GENDER_CATS       = 3\n",
    "# NUM_TRAFFIC_DIR_CATS  = 2\n",
    "# LANE_CATEGORIES       = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 4, 7: 4, 8: 4}\n",
    "# NUM_LANE_CATS         = len(set(LANE_CATEGORIES.values()))\n",
    "# INPUT_SIZE_STATIC     = (NUM_SIGNALIZED_CATS + NUM_INTERSECTION_CATS + NUM_AGE_CATS\n",
    "#                          + NUM_GENDER_CATS + NUM_TRAFFIC_DIR_CATS + NUM_LANE_CATS)\n",
    "\n",
    "# LSTM_HIDDEN_SIZE = 256\n",
    "# NUM_LSTM_LAYERS  = 2\n",
    "# DROPOUT_RATE     = 0.3\n",
    "# NUM_CLASSES      = 2\n",
    "# ATTENTION_DIM    = 128\n",
    "\n",
    "# DEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# print(f\"Using device: {DEVICE}\")\n",
    "\n",
    "# # ----------------------------- label maps ---------------------------------\n",
    "# TL_STATE_MAP    = {\"__undefined__\": 0, \"red\": 1, \"yellow\": 2, \"green\": 3}\n",
    "# NUM_TL_STATES   = len(TL_STATE_MAP)\n",
    "# SIGNALIZED_MAP  = {\"n/a\": 0, \"C\": 1, \"S\": 2, \"CS\": 3}\n",
    "# INTERSECTION_MAP= {\"midblock\": 0, \"T\": 1, \"T-left\": 2, \"T-right\": 3, \"four-way\": 4}\n",
    "# AGE_MAP         = {\"child\": 0, \"young\": 1, \"adult\": 2, \"senior\": 3}\n",
    "# GENDER_MAP      = {\"n/a\": 0, \"female\": 1, \"male\": 2}\n",
    "# TRAFFIC_DIR_MAP = {\"OW\": 0, \"TW\": 1}\n",
    "\n",
    "# # ----------------------------- utilities ----------------------------------\n",
    "# def to_one_hot(index: int, num_classes: int) -> np.ndarray:\n",
    "#     vec = np.zeros(num_classes, dtype=np.float32)\n",
    "#     vec[int(np.clip(index, 0, num_classes - 1))] = 1.0\n",
    "#     return vec\n",
    "\n",
    "# ALL_POSSIBLE_STREAMS = [\n",
    "#     \"bbox\", \"pose\", \"ego_speed\", \"ego_acc\", \"ego_gyro\",\n",
    "#     \"ped_action\", \"ped_look\", \"ped_occlusion\", \"traffic_light\", \"static_context\",\n",
    "# ]\n",
    "\n",
    "# # ==========================================================================#\n",
    "# #                                DATASET                                    #\n",
    "# # ==========================================================================#\n",
    "# class PIEDatasetInference:\n",
    "#     def __init__(self, pie_database: dict, set_names: list[str],\n",
    "#                  pose_data_dir: str, scalers: dict | None = None):\n",
    "#         self.pie_db    = pie_database\n",
    "#         self.set_names = set_names\n",
    "#         self.pose_data_dir = pose_data_dir\n",
    "#         self.scalers   = scalers or {}\n",
    "#         self.all_pose_data = {}\n",
    "#         self._input_sizes_for_error = self._get_input_sizes_dict()\n",
    "#         self._load_pose_data()\n",
    "\n",
    "#     # ----------------------------------------------------------------------\n",
    "#     def _get_input_sizes_dict(self) -> dict[str, int]:\n",
    "#         input_sizes, special = {}, {\n",
    "#             \"TRAFFIC_LIGHT\": \"TL_STATE\",\n",
    "#             \"STATIC_CONTEXT\": \"STATIC\",\n",
    "#             \"EGO_SPEED\": \"EGO_SPEED\",\n",
    "#             \"EGO_ACC\": \"EGO_ACC\",\n",
    "#             \"EGO_GYRO\": \"EGO_GYRO\",\n",
    "#             \"PED_ACTION\": \"PED_ACTION\",\n",
    "#             \"PED_LOOK\": \"PED_LOOK\",\n",
    "#             \"PED_OCCLUSION\": \"PED_OCC\",\n",
    "#         }\n",
    "#         for stream in ALL_POSSIBLE_STREAMS:\n",
    "#             const_name = f\"INPUT_SIZE_{stream.upper()}\"\n",
    "#             suffix     = special.get(stream.upper())\n",
    "#             if suffix:\n",
    "#                 const_name = f\"INPUT_SIZE_{suffix}\"\n",
    "#             elif stream == \"bbox\":\n",
    "#                 const_name = \"INPUT_SIZE_BBOX\"\n",
    "#             elif stream == \"pose\":\n",
    "#                 const_name = \"INPUT_SIZE_POSE\"\n",
    "#             input_sizes[stream] = globals().get(const_name, 1)\n",
    "#         return input_sizes\n",
    "\n",
    "#     # ----------------------------------------------------------------------\n",
    "#     def _load_pose_data(self):\n",
    "#         print(\"Loading pose data (if available)...\")\n",
    "#         sets_loaded = 0\n",
    "#         for set_id in self.set_names:\n",
    "#             self.all_pose_data[set_id] = {}\n",
    "#             pose_set_path = os.path.join(self.pose_data_dir, set_id)\n",
    "#             if not os.path.isdir(pose_set_path):\n",
    "#                 continue\n",
    "\n",
    "#             pkl_files = [f for f in os.listdir(pose_set_path)\n",
    "#                          if f.startswith(f\"{set_id}_\") and f.endswith(\"_poses.pkl\")]\n",
    "\n",
    "#             loaded = 0\n",
    "#             for pkl_name in pkl_files:\n",
    "#                 pkl_path = os.path.join(pose_set_path, pkl_name)\n",
    "#                 try:\n",
    "#                     with open(pkl_path, \"rb\") as f:\n",
    "#                         loaded_pkl = pickle.load(f)\n",
    "#                     if len(loaded_pkl) != 1:\n",
    "#                         continue\n",
    "#                     video_key, video_data = list(loaded_pkl.items())[0]\n",
    "#                     video_id = \"_\".join(video_key.split(\"_\")[1:])\n",
    "#                     if video_id in self.pie_db.get(set_id, {}):\n",
    "#                         self.all_pose_data[set_id][video_id] = video_data\n",
    "#                         loaded += 1\n",
    "#                 except Exception as e:\n",
    "#                     print(f\"Pose load error {pkl_path}: {e}\")\n",
    "#             if loaded:\n",
    "#                 sets_loaded += 1\n",
    "#         print(f\"Finished loading pose data for {sets_loaded} set(s).\")\n",
    "\n",
    "#     # ----------------------------------------------------------------------\n",
    "#     def get_feature_sequence(\n",
    "#         self,\n",
    "#         set_id: str,\n",
    "#         video_id: str,\n",
    "#         ped_id: str,\n",
    "#         end_frame_num: int,\n",
    "#         seq_len: int,\n",
    "#         streams_needed: list[str],\n",
    "#     ):\n",
    "#         \"\"\"Return {stream: tensor[1, seq_len, dim]} or None if invalid.\"\"\"\n",
    "#         frames = list(range(end_frame_num - seq_len + 1, end_frame_num + 1))\n",
    "#         if frames[0] < 0:\n",
    "#             return None\n",
    "\n",
    "#         video_db   = self.pie_db.get(set_id, {}).get(video_id, {})\n",
    "#         ped_db     = video_db.get(\"ped_annotations\", {}).get(ped_id, {})\n",
    "#         ego_db     = video_db.get(\"vehicle_annotations\", {})\n",
    "#         traffic_db = video_db.get(\"traffic_annotations\", {})\n",
    "#         ped_attr   = ped_db.get(\"attributes\", {})\n",
    "\n",
    "#         feats = {s: [] for s in streams_needed}\n",
    "#         valid = True\n",
    "\n",
    "#         # static-context vector (once per sequence)\n",
    "#         static_vec = None\n",
    "#         if \"static_context\" in streams_needed:\n",
    "#             sig_idx = ped_attr.get(\"signalized\", 0)\n",
    "#             int_idx = ped_attr.get(\"intersection\", 0)\n",
    "#             age_idx = ped_attr.get(\"age\", 2)\n",
    "#             gen_idx = ped_attr.get(\"gender\", 0)\n",
    "#             td_idx  = int(ped_attr.get(\"traffic_direction\", 0))\n",
    "#             nl_cat  = LANE_CATEGORIES.get(\n",
    "#                 ped_attr.get(\"num_lanes\", 2),\n",
    "#                 LANE_CATEGORIES[max(LANE_CATEGORIES)],\n",
    "#             )\n",
    "#             static_vec = np.concatenate([\n",
    "#                 to_one_hot(sig_idx, NUM_SIGNALIZED_CATS),\n",
    "#                 to_one_hot(int_idx, NUM_INTERSECTION_CATS),\n",
    "#                 to_one_hot(age_idx, NUM_AGE_CATS),\n",
    "#                 to_one_hot(gen_idx, NUM_GENDER_CATS),\n",
    "#                 to_one_hot(td_idx, NUM_TRAFFIC_DIR_CATS),\n",
    "#                 to_one_hot(nl_cat, NUM_LANE_CATS),\n",
    "#             ])\n",
    "#             if static_vec.size != INPUT_SIZE_STATIC:\n",
    "#                 static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "\n",
    "#         # ----------------------- per-frame extraction ----------------------\n",
    "#         for f in frames:\n",
    "#             # index of this frame in pedestrian’s annotation list\n",
    "#             if \"frames\" in ped_db:\n",
    "#                 try:\n",
    "#                     frame_db_idx = ped_db[\"frames\"].index(f)\n",
    "#                 except ValueError:\n",
    "#                     valid = False\n",
    "#                     break\n",
    "#             else:\n",
    "#                 valid = False\n",
    "#                 break\n",
    "\n",
    "#             ego_frame = ego_db.get(f)\n",
    "\n",
    "#             if ego_frame is None and any(s in streams_needed\n",
    "#                                          for s in (\"ego_speed\", \"ego_acc\", \"ego_gyro\")):\n",
    "#                 valid = False\n",
    "#                 break\n",
    "\n",
    "#             # ---------- bbox ----------\n",
    "#             if \"bbox\" in streams_needed:\n",
    "#                 bbox_norm = np.zeros(INPUT_SIZE_BBOX, dtype=np.float32)\n",
    "#                 if \"bbox\" in ped_db and len(ped_db[\"bbox\"]) > frame_db_idx:\n",
    "#                     try:\n",
    "#                         x1, y1, x2, y2 = ped_db[\"bbox\"][frame_db_idx]\n",
    "#                         img_w = video_db.get(\"width\", 1920)\n",
    "#                         img_h = video_db.get(\"height\", 1080)\n",
    "#                         if img_w > 0 and img_h > 0:\n",
    "#                             cx = (x1 + x2) / 2 / img_w\n",
    "#                             cy = (y1 + y2) / 2 / img_h\n",
    "#                             w  = (x2 - x1) / img_w\n",
    "#                             h  = (y2 - y1) / img_h\n",
    "#                             if (\n",
    "#                                 w > 0\n",
    "#                                 and h > 0\n",
    "#                                 and 0 <= cx <= 1\n",
    "#                                 and 0 <= cy <= 1\n",
    "#                             ):\n",
    "#                                 bbox_norm = np.array([cx, cy, w, h], np.float32)\n",
    "#                     except Exception:\n",
    "#                         pass\n",
    "#                 feats[\"bbox\"].append(bbox_norm)\n",
    "\n",
    "#             # ---------- pose ----------\n",
    "#             if \"pose\" in streams_needed:\n",
    "#                 pose_vec = np.zeros(INPUT_SIZE_POSE, dtype=np.float32)\n",
    "#                 vid_pose = self.all_pose_data.get(set_id, {}).get(video_id, {})\n",
    "#                 frame_pose = vid_pose.get(f, {})\n",
    "#                 loaded_pose = frame_pose.get(ped_id)\n",
    "#                 if (loaded_pose is not None\n",
    "#                         and isinstance(loaded_pose, np.ndarray)\n",
    "#                         and loaded_pose.shape == (INPUT_SIZE_POSE,)):\n",
    "#                     pose_vec = loaded_pose\n",
    "#                 feats[\"pose\"].append(pose_vec)\n",
    "\n",
    "#             # ---------- ego streams ----------\n",
    "#             if \"ego_speed\" in streams_needed:\n",
    "#                 speed = ego_frame.get(\"OBD_speed\", 0.0)\n",
    "#                 if speed == 0.0:\n",
    "#                     speed = ego_frame.get(\"GPS_speed\", 0.0)\n",
    "#                 speed_scaled = ((speed - self.scalers.get(\"ego_speed_mean\", 0.0))\n",
    "#                                 / self.scalers.get(\"ego_speed_std\", 1.0))\n",
    "#                 feats[\"ego_speed\"].append([speed_scaled])\n",
    "\n",
    "#             if \"ego_acc\" in streams_needed:\n",
    "#                 acc_x = ego_frame.get(\"accX\", 0.0)\n",
    "#                 acc_y = ego_frame.get(\"accY\", 0.0)\n",
    "#                 feats[\"ego_acc\"].append([\n",
    "#                     (acc_x - self.scalers.get(\"accX_mean\", 0.0))\n",
    "#                     / self.scalers.get(\"accX_std\", 1.0),\n",
    "#                     (acc_y - self.scalers.get(\"accY_mean\", 0.0))\n",
    "#                     / self.scalers.get(\"accY_std\", 1.0),\n",
    "#                 ])\n",
    "\n",
    "#             if \"ego_gyro\" in streams_needed:\n",
    "#                 gyro_z = ego_frame.get(\"gyroZ\", 0.0)\n",
    "#                 gyro_z_scaled = ((gyro_z - self.scalers.get(\"gyroZ_mean\", 0.0))\n",
    "#                                  / self.scalers.get(\"gyroZ_std\", 1.0))\n",
    "#                 feats[\"ego_gyro\"].append([gyro_z_scaled])\n",
    "\n",
    "#             # ---------- pedestrian behaviour ----------\n",
    "#             if \"ped_action\" in streams_needed:\n",
    "#                 action_val = 0\n",
    "#                 if (\n",
    "#                     \"behavior\" in ped_db\n",
    "#                     and \"action\" in ped_db[\"behavior\"]\n",
    "#                     and len(ped_db[\"behavior\"][\"action\"]) > frame_db_idx\n",
    "#                 ):\n",
    "#                     action_val = ped_db[\"behavior\"][\"action\"][frame_db_idx]\n",
    "#                 feats[\"ped_action\"].append([float(action_val)])\n",
    "\n",
    "#             if \"ped_look\" in streams_needed:\n",
    "#                 look_val = 0\n",
    "#                 if (\n",
    "#                     \"behavior\" in ped_db\n",
    "#                     and \"look\" in ped_db[\"behavior\"]\n",
    "#                     and len(ped_db[\"behavior\"][\"look\"]) > frame_db_idx\n",
    "#                 ):\n",
    "#                     look_val = ped_db[\"behavior\"][\"look\"][frame_db_idx]\n",
    "#                 feats[\"ped_look\"].append([float(look_val)])\n",
    "\n",
    "#             if \"ped_occlusion\" in streams_needed:\n",
    "#                 occ = 0.0\n",
    "#                 if \"occlusion\" in ped_db and len(ped_db[\"occlusion\"]) > frame_db_idx:\n",
    "#                     occ_val = ped_db[\"occlusion\"][frame_db_idx]\n",
    "#                     occ = float(occ_val) / 2.0\n",
    "#                 feats[\"ped_occlusion\"].append([occ])\n",
    "\n",
    "#             # ---------- traffic light ----------\n",
    "#             if \"traffic_light\" in streams_needed:\n",
    "#                 state_int = 0\n",
    "#                 for obj_id, obj_data in traffic_db.items():\n",
    "#                     if (\n",
    "#                         obj_data.get(\"obj_class\") == \"traffic_light\"\n",
    "#                         and \"frames\" in obj_data\n",
    "#                         and \"state\" in obj_data\n",
    "#                     ):\n",
    "#                         try:\n",
    "#                             tl_idx   = obj_data[\"frames\"].index(f)\n",
    "#                             state_val = obj_data[\"state\"][tl_idx]\n",
    "#                             if state_val != 0:\n",
    "#                                 state_int = state_val\n",
    "#                                 break\n",
    "#                         except (ValueError, IndexError):\n",
    "#                             continue\n",
    "#                 feats[\"traffic_light\"].append(to_one_hot(state_int, NUM_TL_STATES))\n",
    "\n",
    "#             # ---------- static context ----------\n",
    "#             if \"static_context\" in streams_needed:\n",
    "#                 feats[\"static_context\"].append(\n",
    "#                     static_vec if static_vec is not None\n",
    "#                     else np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "#                 )\n",
    "\n",
    "#         # ------------------------------------------------------------------\n",
    "#         if not valid:\n",
    "#             return None\n",
    "\n",
    "#         try:\n",
    "#             out = {}\n",
    "#             for name in streams_needed:\n",
    "#                 tensor = torch.tensor(\n",
    "#                     np.array(feats[name], dtype=np.float32),\n",
    "#                     dtype=torch.float32,\n",
    "#                 ).unsqueeze(0)                           # add batch dim\n",
    "#                 exp_shape = (1, seq_len,\n",
    "#                              self._input_sizes_for_error.get(name, 1))\n",
    "#                 if tensor.shape != exp_shape:\n",
    "#                     print(f\"Shape mismatch {name}: {tensor.shape} vs {exp_shape}\")\n",
    "#                     return None\n",
    "#                 out[name] = tensor\n",
    "#             return out\n",
    "#         except Exception as e:\n",
    "#             print(f\"Sequence→tensor error: {e}\")\n",
    "#             return None\n",
    "\n",
    "# # ==========================================================================#\n",
    "# #                          MODEL ARCHITECTURE                               #\n",
    "# # ==========================================================================#\n",
    "# class Attention(nn.Module):\n",
    "#     def __init__(self, hidden_dim: int, att_dim: int):\n",
    "#         super().__init__()\n",
    "#         # must be called attention_net so the saved keys match:\n",
    "#         self.attention_net = nn.Sequential(\n",
    "#             nn.Linear(hidden_dim, att_dim),\n",
    "#             nn.Tanh(),\n",
    "#             nn.Linear(att_dim, 1),\n",
    "#         )\n",
    "\n",
    "#     def forward(self, lstm_out: torch.Tensor):\n",
    "#         # lstm_out: [B, T, 2H]\n",
    "#         att_scores  = self.attention_net(lstm_out).squeeze(2)   # [B, T]\n",
    "#         att_weights = torch.softmax(att_scores, dim=1)          # [B, T]\n",
    "#         ctx         = torch.sum(lstm_out * att_weights.unsqueeze(2), dim=1)\n",
    "#         return ctx, att_weights\n",
    "\n",
    "\n",
    "# class MultiStreamAdaptiveLSTM(nn.Module):\n",
    "#     def __init__(\n",
    "#         self,\n",
    "#         input_sizes: dict[str, int],\n",
    "#         lstm_hidden_size: int,\n",
    "#         num_lstm_layers: int,\n",
    "#         num_classes: int,\n",
    "#         attention_dim: int,\n",
    "#         dropout_rate: float,\n",
    "#         stream_names: list[str] | None = None,\n",
    "#     ):\n",
    "#         super().__init__()\n",
    "#         if not stream_names:\n",
    "#             raise ValueError(\"stream_names cannot be empty\")\n",
    "\n",
    "#         self.stream_names = list(stream_names)\n",
    "#         self.lstms       = nn.ModuleDict()\n",
    "#         self.attentions  = nn.ModuleDict()\n",
    "\n",
    "#         for name in self.stream_names:\n",
    "#             if name not in input_sizes:\n",
    "#                 raise KeyError(f\"Missing input size for stream '{name}'\")\n",
    "#             self.lstms[name] = nn.LSTM(\n",
    "#                 input_sizes[name],\n",
    "#                 lstm_hidden_size,\n",
    "#                 num_lstm_layers,\n",
    "#                 batch_first=True,\n",
    "#                 dropout=dropout_rate if num_lstm_layers > 1 else 0.0,\n",
    "#                 bidirectional=True,\n",
    "#             )\n",
    "#             self.attentions[name] = Attention(lstm_hidden_size * 2, attention_dim)\n",
    "\n",
    "#         combined_dim = lstm_hidden_size * 2 * len(self.stream_names)\n",
    "#         inter_dim    = max(num_classes * 4, combined_dim // 2)\n",
    "\n",
    "#         self.dropout = nn.Dropout(dropout_rate)\n",
    "#         self.fc1     = nn.Linear(combined_dim, inter_dim)\n",
    "#         self.relu    = nn.ReLU()\n",
    "#         self.fc2     = nn.Linear(inter_dim, num_classes)\n",
    "\n",
    "#     def forward(self, x_dict: dict[str, torch.Tensor]):\n",
    "#         ctx_list = []\n",
    "#         for name in self.stream_names:\n",
    "#             if name not in x_dict:\n",
    "#                 print(f\"Warning: missing stream '{name}' in forward()\")\n",
    "#                 continue\n",
    "#             lstm_out, _ = self.lstms[name](x_dict[name])\n",
    "#             ctx, _      = self.attentions[name](lstm_out)\n",
    "#             ctx_list.append(ctx)\n",
    "\n",
    "#         if not ctx_list:\n",
    "#             raise RuntimeError(\"No stream outputs generated\")\n",
    "\n",
    "#         fused = torch.cat(ctx_list, dim=1)\n",
    "#         out   = self.dropout(fused)\n",
    "#         out   = self.relu(self.fc1(out))\n",
    "#         out   = self.dropout(out)\n",
    "#         logits= self.fc2(out)\n",
    "#         return logits\n",
    "\n",
    "# # ==========================================================================#\n",
    "# #                              MAIN SCRIPT                                  #\n",
    "# # ==========================================================================#\n",
    "# if __name__ == \"__main__\":\n",
    "\n",
    "#     # --------------------- load PIE database ------------------------------\n",
    "#     print(\"\\nLoading PIE database cache …\")\n",
    "#     if not os.path.exists(PIE_DATABASE_CACHE_PATH):\n",
    "#         raise FileNotFoundError(\"PIE database cache not found.\")\n",
    "#     with open(PIE_DATABASE_CACHE_PATH, \"rb\") as f:\n",
    "#         pie_database = pickle.load(f)\n",
    "#     print(\" -> database loaded.\")\n",
    "\n",
    "#     # --------------------- load scalers -----------------------------------\n",
    "#     print(f\"\\nLoading scalers from {SCALERS_PKL_PATH}\")\n",
    "#     try:\n",
    "#         with open(SCALERS_PKL_PATH, \"rb\") as f:\n",
    "#             scalers = pickle.load(f)\n",
    "#         print(\" -> scalers loaded.\")\n",
    "#     except FileNotFoundError:\n",
    "#         sys.exit(f\"ERROR: Scalers file not found at {SCALERS_PKL_PATH}\")\n",
    "\n",
    "#     # --------------------- helper dataset ---------------------------------\n",
    "#     print(\"\\nInitialising dataset helper …\")\n",
    "#     dataset_helper = PIEDatasetInference(\n",
    "#         pie_database, [SET_ID_TO_PROCESS], POSE_DATA_DIR, scalers\n",
    "#     )\n",
    "#     print(\"Helper dataset ready.\")\n",
    "\n",
    "#     # --------------------- build model ------------------------------------\n",
    "#     print(\"\\nBuilding model …\")\n",
    "#     input_sizes = {}\n",
    "#     special = {\n",
    "#         \"TRAFFIC_LIGHT\": \"TL_STATE\",\n",
    "#         \"STATIC_CONTEXT\": \"STATIC\",\n",
    "#         \"EGO_SPEED\": \"EGO_SPEED\",\n",
    "#         \"EGO_ACC\": \"EGO_ACC\",\n",
    "#         \"EGO_GYRO\": \"EGO_GYRO\",\n",
    "#         \"PED_ACTION\": \"PED_ACTION\",\n",
    "#         \"PED_LOOK\": \"PED_LOOK\",\n",
    "#         \"PED_OCCLUSION\": \"PED_OCC\",\n",
    "#     }\n",
    "#     for s in MODEL_ACTIVE_STREAMS:\n",
    "#         cname = f\"INPUT_SIZE_{s.upper()}\"\n",
    "#         suff  = special.get(s.upper())\n",
    "#         if suff:\n",
    "#             cname = f\"INPUT_SIZE_{suff}\"\n",
    "#         elif s == \"bbox\":\n",
    "#             cname = \"INPUT_SIZE_BBOX\"\n",
    "#         elif s == \"pose\":\n",
    "#             cname = \"INPUT_SIZE_POSE\"\n",
    "#         if cname not in globals():\n",
    "#             raise ValueError(f\"Missing constant {cname}\")\n",
    "#         input_sizes[s] = globals()[cname]\n",
    "\n",
    "#     model = MultiStreamAdaptiveLSTM(\n",
    "#         input_sizes,\n",
    "#         LSTM_HIDDEN_SIZE,\n",
    "#         NUM_LSTM_LAYERS,\n",
    "#         NUM_CLASSES,\n",
    "#         ATTENTION_DIM,\n",
    "#         DROPOUT_RATE,\n",
    "#         MODEL_ACTIVE_STREAMS,\n",
    "#     ).to(DEVICE)\n",
    "\n",
    "#     # --------------------- load weights -----------------------------------\n",
    "#     print(f\"\\nLoading weights from {MODEL_PATH}\")\n",
    "#     if not os.path.exists(MODEL_PATH):\n",
    "#         raise FileNotFoundError(f\"Model file not found: {MODEL_PATH}\")\n",
    "#     model.load_state_dict(torch.load(MODEL_PATH, map_location=DEVICE))\n",
    "#     model.eval()\n",
    "#     print(\" -> model ready.\")\n",
    "\n",
    "#     # --------------------- collect annotated frames -----------------------\n",
    "#     print(f\"\\nScanning annotations for {SET_ID_TO_PROCESS}/{VIDEO_ID_TO_PROCESS} …\")\n",
    "#     ped_ann = (pie_database\n",
    "#                .get(SET_ID_TO_PROCESS, {})\n",
    "#                .get(VIDEO_ID_TO_PROCESS, {})\n",
    "#                .get(\"ped_annotations\", {}))\n",
    "#     if not ped_ann:\n",
    "#         raise ValueError(\"No pedestrian annotations found.\")\n",
    "\n",
    "#     annotated = set()\n",
    "#     for ped_data in ped_ann.values():\n",
    "#         annotated.update(ped_data.get(\"frames\", []))\n",
    "#     frames_sorted = sorted(annotated)\n",
    "#     if not frames_sorted:\n",
    "#         raise ValueError(\"No annotated frames found.\")\n",
    "#     print(f\" -> found {len(frames_sorted)} frames.\")\n",
    "\n",
    "#     # --------------------- inference --------------------------------------\n",
    "#     print(\"\\nRunning inference on annotated frames …\")\n",
    "#     preds_per_frame, error_frames = {}, 0\n",
    "\n",
    "#     with torch.no_grad():\n",
    "#         for fnum in tqdm(frames_sorted, desc=\"Predicting\"):\n",
    "#             preds_per_frame[fnum] = {}\n",
    "#             peds_here = [\n",
    "#                 pid for pid, pdata in ped_ann.items()\n",
    "#                 if fnum in pdata.get(\"frames\", [])\n",
    "#             ]\n",
    "#             for pid in peds_here:\n",
    "#                 seq = dataset_helper.get_feature_sequence(\n",
    "#                     SET_ID_TO_PROCESS,\n",
    "#                     VIDEO_ID_TO_PROCESS,\n",
    "#                     pid,\n",
    "#                     fnum,\n",
    "#                     SEQ_LEN,\n",
    "#                     MODEL_ACTIVE_STREAMS,\n",
    "#                 )\n",
    "#                 if seq is None:\n",
    "#                     preds_per_frame[fnum][pid] = -1\n",
    "#                     continue\n",
    "#                 try:\n",
    "#                     seq = {k: v.to(DEVICE) for k, v in seq.items()}\n",
    "#                     logits = model(seq)\n",
    "#                     prob   = torch.softmax(logits, dim=1)\n",
    "#                     pred   = torch.argmax(prob, dim=1).item()\n",
    "#                     preds_per_frame[fnum][pid] = pred\n",
    "#                 except Exception as e:\n",
    "#                     print(f\"Inference error F{fnum} P{pid}: {e}\")\n",
    "#                     preds_per_frame[fnum][pid] = -1\n",
    "#                     error_frames += 1\n",
    "\n",
    "#     print(f\"Predictions complete. Errors on {error_frames} instances.\")\n",
    "\n",
    "# # -------------------------------------------------------------------------\n",
    "# # ------- Create & write the *annotated-only* video  -----------------------\n",
    "# print(f\"\\nCreating video with annotated frames only → {OUTPUT_VIDEO_PATH}\")\n",
    "\n",
    "# # Use the first annotated frame to get size\n",
    "# first_annotated_idx = frames_sorted[0] - 1        # convert 1-based → 0-based file index\n",
    "# first_frame_path    = os.path.join(\n",
    "#     IMAGE_FRAME_DIR, f\"frame_{first_annotated_idx:05d}.jpg\"\n",
    "# )\n",
    "# sample_img = cv2.imread(first_frame_path)\n",
    "# if sample_img is None:\n",
    "#     raise IOError(f\"Could not read first annotated frame: {first_frame_path}\")\n",
    "# height, width, _ = sample_img.shape\n",
    "# print(f\" -> video size {width}×{height}, total annotated frames {len(frames_sorted)}\")\n",
    "\n",
    "# fourcc = cv2.VideoWriter_fourcc(*\"mp4v\")\n",
    "# fps    = 30                                   # keep whatever FPS you prefer\n",
    "# writer = cv2.VideoWriter(OUTPUT_VIDEO_PATH, fourcc, fps, (width, height))\n",
    "# if not writer.isOpened():\n",
    "#     raise IOError(\"Could not open cv2 VideoWriter\")\n",
    "\n",
    "# # colours\n",
    "# col_nc, col_cr, col_un = (0,255,0), (0,0,255), (255,255,0)\n",
    "\n",
    "# for lookup in tqdm(frames_sorted, desc=\"Writing video\"):\n",
    "#     idx = lookup - 1                          # image file index (0-based)\n",
    "#     img_path = os.path.join(IMAGE_FRAME_DIR, f\"frame_{idx:05d}.jpg\")\n",
    "\n",
    "#     frame = cv2.imread(img_path)\n",
    "#     if frame is None:\n",
    "#         frame = np.zeros((height, width, 3), np.uint8)\n",
    "\n",
    "#     # draw predictions\n",
    "#     preds_here = preds_per_frame.get(lookup, {})\n",
    "#     for pid, bbox in [\n",
    "#         (pid, pdata[\"bbox\"][pdata[\"frames\"].index(lookup)])\n",
    "#         for pid, pdata in ped_ann.items()\n",
    "#         if lookup in pdata.get(\"frames\", [])\n",
    "#     ]:\n",
    "#         pred = preds_here.get(pid, -1)\n",
    "#         colour, label = (col_un, \"Unknown\")\n",
    "#         if pred == 0:\n",
    "#             colour, label = (col_nc, \"Not Crossing\")\n",
    "#         elif pred == 1:\n",
    "#             colour, label = (col_cr, \"Crossing\")\n",
    "\n",
    "#         try:\n",
    "#             x1, y1, x2, y2 = map(int, bbox)\n",
    "#             cv2.rectangle(frame, (x1, y1), (x2, y2), colour, 2)\n",
    "#             cv2.putText(frame, label, (x1, y1 - 10),\n",
    "#                         cv2.FONT_HERSHEY_SIMPLEX, 0.6, colour, 2)\n",
    "#         except Exception:\n",
    "#             pass\n",
    "\n",
    "#     writer.write(frame)\n",
    "\n",
    "# writer.release()\n",
    "# print(f\"\\nAnnotated-only video saved to: {OUTPUT_VIDEO_PATH}\")\n",
    "# # -------------------------------------------------------------------------\n",
    "\n",
    "# print(\"\\n--- Visualisation script finished ---\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "58a16379",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T12:09:09.479990Z",
     "iopub.status.busy": "2025-05-01T12:09:09.479707Z",
     "iopub.status.idle": "2025-05-01T12:20:41.140689Z",
     "shell.execute_reply": "2025-05-01T12:20:41.139714Z"
    },
    "papermill": {
     "duration": 691.68304,
     "end_time": "2025-05-01T12:20:41.151544",
     "exception": false,
     "start_time": "2025-05-01T12:09:09.468504",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- DATA PREPARATION ---\n",
      "Loading PIE database cache …\n",
      "✓ PIE DB loaded.\n",
      "\n",
      "Computing scalers …\n",
      "Scalers: {'ego_speed_mean': 13.428368358531902, 'ego_speed_std': 13.306451814881573, 'accX_mean': -0.028068299916188515, 'accX_std': 0.07827638994593288, 'accY_mean': -0.5235171297788667, 'accY_std': 0.8514409917161664, 'gyroZ_mean': -0.037905654051963104, 'gyroZ_std': 4.475510697376237}\n",
      "\n",
      "Extracting training sequences (all streams) …\n",
      "Loading pose PKLs …\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c6e22eb8978741ecb4591ad7cba8cd62",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "6a2791f1dd8545258c3bfa61da36dfe6",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "19e3ba4375f8436db075aff095d10993",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enumerating sequences …\n",
      "Total sequences: 281342\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f598dece7a6a4b25b687f94a0e0e19f0",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "seq:   0%|          | 0/281342 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Raw training samples: 281342\n",
      "Balanced: 1s=51749 | 0s=51749\n",
      "\n",
      "Saving balanced data …\n",
      "✓ /kaggle/working/balanced_train_data.pkl\n",
      "Saving scalers …\n",
      "✓ /kaggle/working/scalers.pkl\n",
      "\n",
      "--- DATA PREPARATION COMPLETE ---\n"
     ]
    }
   ],
   "source": [
    "# -----------------------------------------------------------------------------\n",
    "# CELL 1: DATA PREPARATION & BALANCING  (run once before training)\n",
    "# -----------------------------------------------------------------------------\n",
    "#  This cell:\n",
    "#    1. Loads (or regenerates) the PIE database\n",
    "#    2. Computes per-signal standardisation scalers\n",
    "#    3. Extracts ALL training sequences for every stream\n",
    "#    4. Balances the dataset 50 / 50 on the crossing label\n",
    "#    5. Writes two pickles:\n",
    "#         - /kaggle/working/balanced_train_data.pkl\n",
    "#         - /kaggle/working/scalers.pkl\n",
    "# -----------------------------------------------------------------------------\n",
    "\n",
    "import os\n",
    "import sys\n",
    "import time\n",
    "import pickle\n",
    "import gc\n",
    "from pathlib import Path\n",
    "\n",
    "import cv2                               # used internally by PIE utilities\n",
    "import numpy as np\n",
    "import torch\n",
    "from torch.utils.data import Dataset\n",
    "from tqdm.notebook import tqdm\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                                PIE utilities                                 #\n",
    "# -----------------------------------------------------------------------------#\n",
    "pie_utilities_path = \"/kaggle/working/PIE/utilities\"\n",
    "if pie_utilities_path not in sys.path:\n",
    "    sys.path.insert(0, pie_utilities_path)\n",
    "\n",
    "try:\n",
    "    from pie_data import PIE\n",
    "except ImportError as e:\n",
    "    print(\n",
    "        f\"[WARN] Could not import PIE from {pie_utilities_path}. \"\n",
    "        f\"If the DB cache already exists this is fine.\\n→ {e}\"\n",
    "    )\n",
    "    PIE = None\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                              configuration                                   #\n",
    "# -----------------------------------------------------------------------------#\n",
    "PIE_ROOT_PATH           = \"/kaggle/working/PIE\"\n",
    "POSE_DATA_DIR           = \"/kaggle/input/pose-data/extracted_poses2\"\n",
    "PIE_DATABASE_CACHE_PATH = \"/kaggle/input/pie-database/pie_database.pkl\"\n",
    "\n",
    "TRAIN_SETS_STR = [\"set01\", \"set02\", \"set04\"]\n",
    "\n",
    "BALANCED_DATA_PKL_PATH  = \"/kaggle/working/balanced_train_data.pkl\"\n",
    "SCALERS_PKL_PATH        = \"/kaggle/working/scalers.pkl\"\n",
    "\n",
    "# Streams used throughout the project ----------------------------------------\n",
    "ALL_POSSIBLE_STREAMS = [\n",
    "    \"bbox\",\n",
    "    \"pose\",\n",
    "    \"ego_speed\",\n",
    "    \"ego_acc\",\n",
    "    \"ego_gyro\",\n",
    "    \"ped_action\",\n",
    "    \"ped_look\",\n",
    "    \"ped_occlusion\",\n",
    "    \"traffic_light\",\n",
    "    \"static_context\",\n",
    "]\n",
    "\n",
    "# Feature sizes & categorical constants --------------------------------------\n",
    "SEQ_LEN, PRED_LEN = 30, 60\n",
    "\n",
    "INPUT_SIZE_BBOX       = 4\n",
    "INPUT_SIZE_POSE       = 34\n",
    "INPUT_SIZE_EGO_SPEED  = 1\n",
    "INPUT_SIZE_EGO_ACC    = 2\n",
    "INPUT_SIZE_EGO_GYRO   = 1\n",
    "INPUT_SIZE_PED_ACTION = 1\n",
    "INPUT_SIZE_PED_LOOK   = 1\n",
    "INPUT_SIZE_PED_OCC    = 1\n",
    "INPUT_SIZE_TL_STATE   = 4\n",
    "\n",
    "NUM_SIGNALIZED_CATS   = 4\n",
    "NUM_INTERSECTION_CATS = 5\n",
    "NUM_AGE_CATS          = 4\n",
    "NUM_GENDER_CATS       = 3\n",
    "NUM_TRAFFIC_DIR_CATS  = 2\n",
    "\n",
    "LANE_CATEGORIES = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 4, 7: 4, 8: 4}\n",
    "NUM_LANE_CATS   = len(set(LANE_CATEGORIES.values()))\n",
    "\n",
    "INPUT_SIZE_STATIC = (\n",
    "    NUM_SIGNALIZED_CATS\n",
    "    + NUM_INTERSECTION_CATS\n",
    "    + NUM_AGE_CATS\n",
    "    + NUM_GENDER_CATS\n",
    "    + NUM_TRAFFIC_DIR_CATS\n",
    "    + NUM_LANE_CATS\n",
    ")  # → 23\n",
    "\n",
    "TL_STATE_MAP = {\"__undefined__\": 0, \"red\": 1, \"yellow\": 2, \"green\": 3}\n",
    "NUM_TL_STATES = len(TL_STATE_MAP)\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                               helper utils                                   #\n",
    "# -----------------------------------------------------------------------------#\n",
    "\n",
    "\n",
    "def to_one_hot(index: int, num_classes: int) -> np.ndarray:\n",
    "    vec = np.zeros(num_classes, dtype=np.float32)\n",
    "    vec[int(np.clip(index, 0, num_classes - 1))] = 1.0\n",
    "    return vec\n",
    "\n",
    "\n",
    "def balance_samples_count(seq_data: dict, label_key: str, seed: int = 42) -> dict:\n",
    "    \"\"\"Undersample majority class so positive and negative labels are equal.\"\"\"\n",
    "    labels = [lbl[0] for lbl in seq_data[label_key]]\n",
    "    n_pos  = int(np.sum(labels))\n",
    "    n_neg  = len(labels) - n_pos\n",
    "\n",
    "    if n_pos == n_neg:\n",
    "        print(\"Dataset already balanced.\")\n",
    "        return seq_data.copy()\n",
    "\n",
    "    majority_label    = 0 if n_neg > n_pos else 1\n",
    "    minority_count    = min(n_pos, n_neg)\n",
    "    majority_indices  = np.where(np.array(labels) == majority_label)[0]\n",
    "    minority_indices  = np.where(np.array(labels) != majority_label)[0]\n",
    "\n",
    "    rng = np.random.default_rng(seed)\n",
    "    keep_majority = rng.choice(majority_indices, size=minority_count, replace=False)\n",
    "    final_indices = np.concatenate([minority_indices, keep_majority])\n",
    "    rng.shuffle(final_indices)\n",
    "\n",
    "    balanced = {}\n",
    "    for k, v in seq_data.items():\n",
    "        balanced[k] = [v[i] for i in final_indices]\n",
    "\n",
    "    print(f\"Balanced: 1s={minority_count} | 0s={minority_count}\")\n",
    "    return balanced\n",
    "\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                                PIEDataset                                    #\n",
    "# -----------------------------------------------------------------------------#\n",
    "class PIEDataset(Dataset):\n",
    "    \"\"\"\n",
    "    Lightweight dataset that can generate any subset of the PIE feature streams.\n",
    "    \"\"\"\n",
    "\n",
    "    def __init__(\n",
    "        self,\n",
    "        pie_db: dict,\n",
    "        set_names: list[str],\n",
    "        pose_dir: str,\n",
    "        seq_len: int,\n",
    "        pred_len: int,\n",
    "        scalers: dict,\n",
    "        streams_to_generate: list[str],\n",
    "    ):\n",
    "        self.pie_db            = pie_db\n",
    "        self.set_names         = set_names\n",
    "        self.pose_dir          = pose_dir\n",
    "        self.seq_len           = seq_len\n",
    "        self.pred_len          = pred_len\n",
    "        self.scalers           = scalers\n",
    "        self.streams           = streams_to_generate\n",
    "        self._input_sizes      = self._build_input_size_map()\n",
    "        self.all_pose_data     = {}\n",
    "        self.sequences         = []\n",
    "\n",
    "        if \"pose\" in self.streams:\n",
    "            self._load_pose_pkls()\n",
    "        self._enumerate_sequences()\n",
    "\n",
    "    # ------------------------ internal helpers -------------------------------\n",
    "    def _build_input_size_map(self) -> dict:\n",
    "        special = {\n",
    "            \"TRAFFIC_LIGHT\": \"TL_STATE\",\n",
    "            \"STATIC_CONTEXT\": \"STATIC\",\n",
    "            \"EGO_SPEED\": \"EGO_SPEED\",\n",
    "            \"EGO_ACC\": \"EGO_ACC\",\n",
    "            \"EGO_GYRO\": \"EGO_GYRO\",\n",
    "            \"PED_ACTION\": \"PED_ACTION\",\n",
    "            \"PED_LOOK\": \"PED_LOOK\",\n",
    "            \"PED_OCCLUSION\": \"PED_OCC\",\n",
    "        }\n",
    "        sizes = {}\n",
    "        for s in ALL_POSSIBLE_STREAMS:\n",
    "            const = f\"INPUT_SIZE_{special.get(s.upper(), s.upper())}\"\n",
    "            if s == \"bbox\":\n",
    "                const = \"INPUT_SIZE_BBOX\"\n",
    "            elif s == \"pose\":\n",
    "                const = \"INPUT_SIZE_POSE\"\n",
    "            sizes[s] = globals().get(const, 1)\n",
    "        return sizes\n",
    "\n",
    "    def _load_pose_pkls(self):\n",
    "        print(\"Loading pose PKLs …\")\n",
    "        for set_id in self.set_names:\n",
    "            set_dir = Path(self.pose_dir) / set_id\n",
    "            if not set_dir.is_dir():\n",
    "                continue\n",
    "            self.all_pose_data[set_id] = {}\n",
    "            for pkl_path in tqdm(set_dir.glob(f\"{set_id}_*_poses.pkl\"), leave=False):\n",
    "                try:\n",
    "                    with open(pkl_path, \"rb\") as fp:\n",
    "                        loaded = pickle.load(fp)\n",
    "                except Exception as e:\n",
    "                    print(f\"[pose load] {pkl_path}: {e}\")\n",
    "                    continue\n",
    "\n",
    "                if len(loaded) != 1:\n",
    "                    continue\n",
    "                (key, data), *_ = loaded.items()\n",
    "                vid = \"_\".join(key.split(\"_\")[1:])\n",
    "                if vid in self.pie_db.get(set_id, {}):\n",
    "                    self.all_pose_data[set_id][vid] = data\n",
    "\n",
    "    def _enumerate_sequences(self):\n",
    "        print(\"Enumerating sequences …\")\n",
    "        for set_id in self.set_names:\n",
    "            for vid, vdb in self.pie_db.get(set_id, {}).items():\n",
    "                for pid, pdb in vdb.get(\"ped_annotations\", {}).items():\n",
    "                    frames = pdb.get(\"frames\", [])\n",
    "                    if len(frames) < self.seq_len + self.pred_len:\n",
    "                        continue\n",
    "                    frames = sorted(frames)\n",
    "                    for i in range(len(frames) - self.seq_len - self.pred_len + 1):\n",
    "                        start = frames[i]\n",
    "                        obs_end = frames[i + self.seq_len - 1]\n",
    "                        if obs_end - start != self.seq_len - 1:\n",
    "                            continue\n",
    "                        target = frames[i + self.seq_len + self.pred_len - 1]\n",
    "                        if target - obs_end != self.pred_len:\n",
    "                            continue\n",
    "                        self.sequences.append((set_id, vid, pid, start))\n",
    "        print(f\"Total sequences: {len(self.sequences)}\")\n",
    "\n",
    "    # ------------------ Dataset API ------------------------------------------\n",
    "    def __len__(self):\n",
    "        return len(self.sequences)\n",
    "\n",
    "    def __getitem__(self, idx: int):\n",
    "        set_id, vid, pid, start = self.sequences[idx]\n",
    "        vdb  = self.pie_db[set_id][vid]\n",
    "        pdb  = vdb[\"ped_annotations\"][pid]\n",
    "        ego  = vdb.get(\"vehicle_annotations\", {})\n",
    "        tldb = vdb.get(\"traffic_annotations\", {})\n",
    "\n",
    "        frame_nums = list(range(start, start + self.seq_len))\n",
    "        target_f   = start + self.seq_len + self.pred_len - 1\n",
    "\n",
    "        # label ---------------------------------------------------------------\n",
    "        label = 0\n",
    "        if (\n",
    "            \"frames\" in pdb\n",
    "            and \"behavior\" in pdb\n",
    "            and \"cross\" in pdb[\"behavior\"]\n",
    "            and target_f in pdb[\"frames\"]\n",
    "        ):\n",
    "            try:\n",
    "                j = pdb[\"frames\"].index(target_f)\n",
    "                label = pdb[\"behavior\"][\"cross\"][j]\n",
    "                if label == -1:\n",
    "                    label = 0\n",
    "            except (ValueError, IndexError):\n",
    "                pass\n",
    "\n",
    "        # static context ------------------------------------------------------\n",
    "        static_vec = np.zeros(INPUT_SIZE_STATIC, np.float32)\n",
    "        if \"static_context\" in self.streams:\n",
    "            attr  = pdb.get(\"attributes\", {})\n",
    "            sig   = attr.get(\"signalized\", 0)\n",
    "            intr  = attr.get(\"intersection\", 0)\n",
    "            age   = attr.get(\"age\", 2)\n",
    "            gen   = attr.get(\"gender\", 0)\n",
    "            tdir  = int(attr.get(\"traffic_direction\", 0))\n",
    "            ln    = attr.get(\"num_lanes\", 2)\n",
    "            lncat = LANE_CATEGORIES.get(ln, LANE_CATEGORIES[max(LANE_CATEGORIES)])\n",
    "            static_vec = np.concatenate(\n",
    "                [\n",
    "                    to_one_hot(sig,  NUM_SIGNALIZED_CATS),\n",
    "                    to_one_hot(intr, NUM_INTERSECTION_CATS),\n",
    "                    to_one_hot(age,  NUM_AGE_CATS),\n",
    "                    to_one_hot(gen,  NUM_GENDER_CATS),\n",
    "                    to_one_hot(tdir, NUM_TRAFFIC_DIR_CATS),\n",
    "                    to_one_hot(lncat, NUM_LANE_CATS),\n",
    "                ]\n",
    "            ).astype(np.float32)\n",
    "\n",
    "        # per-frame feature assembly -----------------------------------------\n",
    "        feats = {s: [] for s in self.streams}\n",
    "\n",
    "        for fn in frame_nums:\n",
    "            fidx = -1\n",
    "            if \"frames\" in pdb:\n",
    "                try:\n",
    "                    fidx = pdb[\"frames\"].index(fn)\n",
    "                except ValueError:\n",
    "                    pass\n",
    "\n",
    "            ego_f = ego.get(fn, {})\n",
    "\n",
    "            # bbox ----------------------------------------------------------\n",
    "            if \"bbox\" in self.streams:\n",
    "                bb = np.zeros(INPUT_SIZE_BBOX, np.float32)\n",
    "                if (\n",
    "                    fidx != -1\n",
    "                    and \"bbox\" in pdb\n",
    "                    and len(pdb[\"bbox\"]) > fidx\n",
    "                ):\n",
    "                    try:\n",
    "                        x1, y1, x2, y2 = pdb[\"bbox\"][fidx]\n",
    "                        w_img = vdb.get(\"width\", 1920)\n",
    "                        h_img = vdb.get(\"height\", 1080)\n",
    "                        if w_img > 0 and h_img > 0:\n",
    "                            cx = ((x1 + x2) / 2) / w_img\n",
    "                            cy = ((y1 + y2) / 2) / h_img\n",
    "                            w  = (x2 - x1) / w_img\n",
    "                            h  = (y2 - y1) / h_img\n",
    "                            if 0 < w and 0 < h and 0 <= cx <= 1 and 0 <= cy <= 1:\n",
    "                                bb = np.array([cx, cy, w, h], np.float32)\n",
    "                    except Exception:\n",
    "                        pass\n",
    "                feats[\"bbox\"].append(bb)\n",
    "\n",
    "            # pose ----------------------------------------------------------\n",
    "            if \"pose\" in self.streams:\n",
    "                pvec = np.zeros(INPUT_SIZE_POSE, np.float32)\n",
    "                pose_set = self.all_pose_data.get(set_id, {}).get(vid, {})\n",
    "                p_loaded = pose_set.get(fn, {}).get(pid)\n",
    "                if (\n",
    "                    isinstance(p_loaded, np.ndarray)\n",
    "                    and p_loaded.shape == (INPUT_SIZE_POSE,)\n",
    "                ):\n",
    "                    pvec = p_loaded\n",
    "                feats[\"pose\"].append(pvec)\n",
    "\n",
    "            # ego signals ---------------------------------------------------\n",
    "            if \"ego_speed\" in self.streams:\n",
    "                s = ego_f.get(\"OBD_speed\", 0.0) or ego_f.get(\"GPS_speed\", 0.0)\n",
    "                s = (s - self.scalers.get(\"ego_speed_mean\", 0.0)) / self.scalers.get(\n",
    "                    \"ego_speed_std\", 1.0\n",
    "                )\n",
    "                feats[\"ego_speed\"].append([s])\n",
    "\n",
    "            if \"ego_acc\" in self.streams:\n",
    "                ax = ego_f.get(\"accX\", 0.0)\n",
    "                ay = ego_f.get(\"accY\", 0.0)\n",
    "                ax = (ax - self.scalers.get(\"accX_mean\", 0.0)) / self.scalers.get(\n",
    "                    \"accX_std\", 1.0\n",
    "                )\n",
    "                ay = (ay - self.scalers.get(\"accY_mean\", 0.0)) / self.scalers.get(\n",
    "                    \"accY_std\", 1.0\n",
    "                )\n",
    "                feats[\"ego_acc\"].append([ax, ay])\n",
    "\n",
    "            if \"ego_gyro\" in self.streams:\n",
    "                gz = ego_f.get(\"gyroZ\", 0.0)\n",
    "                gz = (gz - self.scalers.get(\"gyroZ_mean\", 0.0)) / self.scalers.get(\n",
    "                    \"gyroZ_std\", 1.0\n",
    "                )\n",
    "                feats[\"ego_gyro\"].append([gz])\n",
    "\n",
    "            # pedestrian behaviour -----------------------------------------\n",
    "            if \"ped_action\" in self.streams:\n",
    "                action = (\n",
    "                    pdb[\"behavior\"][\"action\"][fidx]\n",
    "                    if fidx != -1\n",
    "                    and \"behavior\" in pdb\n",
    "                    and \"action\" in pdb[\"behavior\"]\n",
    "                    and len(pdb[\"behavior\"][\"action\"]) > fidx\n",
    "                    else 0\n",
    "                )\n",
    "                feats[\"ped_action\"].append([float(action)])\n",
    "\n",
    "            if \"ped_look\" in self.streams:\n",
    "                look = (\n",
    "                    pdb[\"behavior\"][\"look\"][fidx]\n",
    "                    if fidx != -1\n",
    "                    and \"behavior\" in pdb\n",
    "                    and \"look\" in pdb[\"behavior\"]\n",
    "                    and len(pdb[\"behavior\"][\"look\"]) > fidx\n",
    "                    else 0\n",
    "                )\n",
    "                feats[\"ped_look\"].append([float(look)])\n",
    "\n",
    "            if \"ped_occlusion\" in self.streams:\n",
    "                occ = (\n",
    "                    float(pdb[\"occlusion\"][fidx]) / 2.0\n",
    "                    if fidx != -1\n",
    "                    and \"occlusion\" in pdb\n",
    "                    and len(pdb[\"occlusion\"]) > fidx\n",
    "                    else 0.0\n",
    "                )\n",
    "                feats[\"ped_occlusion\"].append([occ])\n",
    "\n",
    "            # traffic light -------------------------------------------------\n",
    "            if \"traffic_light\" in self.streams:\n",
    "                tl_state = 0\n",
    "                for obj in tldb.values():\n",
    "                    if obj.get(\"obj_class\") != \"traffic_light\":\n",
    "                        continue\n",
    "                    if \"frames\" not in obj or \"state\" not in obj:\n",
    "                        continue\n",
    "                    try:\n",
    "                        j = obj[\"frames\"].index(fn)\n",
    "                        if obj[\"state\"][j] != 0:\n",
    "                            tl_state = obj[\"state\"][j]\n",
    "                            break\n",
    "                    except (ValueError, IndexError):\n",
    "                        continue\n",
    "                feats[\"traffic_light\"].append(to_one_hot(tl_state, NUM_TL_STATES))\n",
    "\n",
    "            # static context -----------------------------------------------\n",
    "            if \"static_context\" in self.streams:\n",
    "                feats[\"static_context\"].append(static_vec)\n",
    "\n",
    "        # numpy → torch ------------------------------------------------------\n",
    "        out = {\n",
    "            s: torch.tensor(np.asarray(feats[s], np.float32), dtype=torch.float32)\n",
    "            for s in self.streams\n",
    "        }\n",
    "        return out, torch.tensor(label, dtype=torch.long)\n",
    "\n",
    "\n",
    "# =============================================================================\n",
    "#                       MAIN: build balanced training set\n",
    "# =============================================================================\n",
    "if __name__ == \"__main__\":\n",
    "    print(\"\\n--- DATA PREPARATION ---\")\n",
    "\n",
    "    # 1) load / regenerate PIE DB -------------------------------------------\n",
    "    cache = Path(PIE_DATABASE_CACHE_PATH)\n",
    "    if cache.is_file():\n",
    "        print(\"Loading PIE database cache …\")\n",
    "        with cache.open(\"rb\") as fp:\n",
    "            pie_db = pickle.load(fp)\n",
    "        print(\"✓ PIE DB loaded.\")\n",
    "    else:\n",
    "        if PIE is None:\n",
    "            raise RuntimeError(\"PIE class unavailable: cannot rebuild database.\")\n",
    "        print(\"Cache not found – regenerating PIE DB …\")\n",
    "        pie_db = PIE(data_path=PIE_ROOT_PATH, regen_database=True).generate_database()\n",
    "        if not pie_db:\n",
    "            raise RuntimeError(\"PIE DB generation failed.\")\n",
    "        print(\"✓ PIE DB generated.\")\n",
    "\n",
    "    # 2) compute scalers -----------------------------------------------------\n",
    "    print(\"\\nComputing scalers …\")\n",
    "    spd, accx, accy, gyz = [], [], [], []\n",
    "    for sid in TRAIN_SETS_STR:\n",
    "        for vid, vdb in pie_db.get(sid, {}).items():\n",
    "            for frame, e in vdb.get(\"vehicle_annotations\", {}).items():\n",
    "                s  = e.get(\"OBD_speed\", 0.0) or e.get(\"GPS_speed\", 0.0)\n",
    "                spd.append(s)\n",
    "                accx.append(e.get(\"accX\", 0.0))\n",
    "                accy.append(e.get(\"accY\", 0.0))\n",
    "                gyz.append(e.get(\"gyroZ\", 0.0))\n",
    "\n",
    "    scalers = {}\n",
    "    if spd:\n",
    "        scalers[\"ego_speed_mean\"] = float(np.mean(spd))\n",
    "        scalers[\"ego_speed_std\"]  = float(max(np.std(spd), 1e-6))\n",
    "    if accx:\n",
    "        scalers[\"accX_mean\"] = float(np.mean(accx))\n",
    "        scalers[\"accX_std\"]  = float(max(np.std(accx), 1e-6))\n",
    "        scalers[\"accY_mean\"] = float(np.mean(accy))\n",
    "        scalers[\"accY_std\"]  = float(max(np.std(accy), 1e-6))\n",
    "    if gyz:\n",
    "        scalers[\"gyroZ_mean\"] = float(np.mean(gyz))\n",
    "        scalers[\"gyroZ_std\"]  = float(max(np.std(gyz), 1e-6))\n",
    "\n",
    "    print(\"Scalers:\", scalers)\n",
    "\n",
    "    # 3) extract full training dataset --------------------------------------\n",
    "    print(\"\\nExtracting training sequences (all streams) …\")\n",
    "    full_ds = PIEDataset(\n",
    "        pie_db,\n",
    "        TRAIN_SETS_STR,\n",
    "        POSE_DATA_DIR,\n",
    "        SEQ_LEN,\n",
    "        PRED_LEN,\n",
    "        scalers,\n",
    "        ALL_POSSIBLE_STREAMS,\n",
    "    )\n",
    "\n",
    "    train_dict = {s: [] for s in ALL_POSSIBLE_STREAMS}\n",
    "    train_dict[\"label\"] = []\n",
    "\n",
    "    for i in tqdm(range(len(full_ds)), desc=\"seq\"):\n",
    "        feat, lbl = full_ds[i]\n",
    "        for s in ALL_POSSIBLE_STREAMS:\n",
    "            train_dict[s].append(feat[s].numpy())\n",
    "        train_dict[\"label\"].append([lbl.item()])\n",
    "\n",
    "    print(f\"Raw training samples: {len(train_dict['label'])}\")\n",
    "\n",
    "    # 4) balance -------------------------------------------------------------\n",
    "    balanced = balance_samples_count(train_dict, \"label\")\n",
    "    del train_dict, full_ds\n",
    "    gc.collect()\n",
    "\n",
    "    # 5) write pickles -------------------------------------------------------\n",
    "    print(\"\\nSaving balanced data …\")\n",
    "    with open(BALANCED_DATA_PKL_PATH, \"wb\") as fp:\n",
    "        pickle.dump(balanced, fp, pickle.HIGHEST_PROTOCOL)\n",
    "    print(f\"✓ {BALANCED_DATA_PKL_PATH}\")\n",
    "\n",
    "    print(\"Saving scalers …\")\n",
    "    with open(SCALERS_PKL_PATH, \"wb\") as fp:\n",
    "        pickle.dump(scalers, fp, pickle.HIGHEST_PROTOCOL)\n",
    "    print(f\"✓ {SCALERS_PKL_PATH}\")\n",
    "\n",
    "    del pie_db\n",
    "    gc.collect()\n",
    "\n",
    "    print(\"\\n--- DATA PREPARATION COMPLETE ---\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "5d6b4e08",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T12:20:41.174951Z",
     "iopub.status.busy": "2025-05-01T12:20:41.174332Z",
     "iopub.status.idle": "2025-05-01T13:17:02.918644Z",
     "shell.execute_reply": "2025-05-01T13:17:02.917562Z"
    },
    "papermill": {
     "duration": 3381.758353,
     "end_time": "2025-05-01T13:17:02.919935",
     "exception": false,
     "start_time": "2025-05-01T12:20:41.161582",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Running Weighted Average Fusion With Active Streams: ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'static_context'] ---\n",
      "Using device: cuda\n",
      "--- Running Model Training/Evaluation with Weighted Fusion ---\n",
      "Active Streams: ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'static_context']\n",
      "\n",
      "Loading balanced training data …\n",
      "   ✓ pre-processed data loaded.\n",
      "\n",
      "Loading PIE database cache for validation …\n",
      "   ✓ PIE database loaded.\n",
      "\n",
      "Creating Datasets and DataLoaders …\n",
      "Dataset initialized with 77288 sequences for sets ['set05', 'set06'].\n",
      "   ✓ DataLoaders ready.\n",
      "\n",
      "Initialising model …\n",
      "Initializing Weighted-Avg model with streams: ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'static_context']\n",
      "  – Adding stream 'bbox' (input 4)\n",
      "  – Adding stream 'ped_action' (input 1)\n",
      "  – Adding stream 'ped_look' (input 1)\n",
      "  – Adding stream 'ego_speed' (input 1)\n",
      "  – Adding stream 'ego_acc' (input 2)\n",
      "  – Adding stream 'static_context' (input 23)\n",
      "\n",
      "--- Model architecture ---\n",
      "MultiStreamWeightedAvgLSTM(\n",
      "  (lstms): ModuleDict(\n",
      "    (bbox): LSTM(4, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "    (ped_action): LSTM(1, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "    (ped_look): LSTM(1, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "    (ego_speed): LSTM(1, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "    (ego_acc): LSTM(2, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "    (static_context): LSTM(23, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "  )\n",
      "  (attentions): ModuleDict(\n",
      "    (bbox): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "    (ped_action): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "    (ped_look): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "    (ego_speed): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "    (ego_acc): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "    (static_context): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "  )\n",
      "  (dropout): Dropout(p=0.3, inplace=False)\n",
      "  (fc1): Linear(in_features=512, out_features=256, bias=True)\n",
      "  (relu): ReLU()\n",
      "  (fc2): Linear(in_features=256, out_features=2, bias=True)\n",
      ")\n",
      "Trainable parameters: 13,224,206\n",
      "------------------------------\n",
      "\n",
      "Calculating class weights …\n",
      "Loss weights → 0: 1.00, 1: 1.00\n",
      "\n",
      "--- Starting training ---\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ae68f528e72d424f9e9b464c335f21d3",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3235 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ba0ecca90d704d43863d266af84799d7",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 01/10 – 312.7s\n",
      "  train loss 0.3667 | acc 0.8414\n",
      "  val   loss 0.3130 | acc 0.8767\n",
      "           prec 0.5559 | rec 0.9618 | f1 0.7046 | auc 0.9641\n",
      "  ✓ new best model saved → best_model_weighted_bbox_ego_acc_ego_speed_ped_action_ped_look_static_context_ep1.pth (F1 0.7046)\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "278ba0db4ff94726a2f036651b81f0f5",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3235 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0a27560192b34fcf9ece68df60d2b2e4",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 02/10 – 312.7s\n",
      "  train loss 0.3042 | acc 0.8715\n",
      "  val   loss 0.2363 | acc 0.9094\n",
      "           prec 0.6531 | rec 0.8680 | f1 0.7454 | auc 0.9550\n",
      "  ✓ new best model saved → best_model_weighted_bbox_ego_acc_ego_speed_ped_action_ped_look_static_context_ep2.pth (F1 0.7454)\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "62c79a5dfd4348eb9afb8e4601fbe3ab",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3235 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "220efbb4974c48a7bef50164d11067a5",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 03/10 – 314.4s\n",
      "  train loss 0.2784 | acc 0.8850\n",
      "  val   loss 0.2984 | acc 0.8937\n",
      "           prec 0.6086 | rec 0.8535 | f1 0.7106 | auc 0.9386\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "baba944c72f444918c541d2476c19d67",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3235 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b169d4bc80144eb3836a84714ed243c0",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 04/10 – 311.0s\n",
      "  train loss 0.2507 | acc 0.8981\n",
      "  val   loss 0.3299 | acc 0.8767\n",
      "           prec 0.5693 | rec 0.7932 | f1 0.6628 | auc 0.9211\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "333f1545c29e427890227d9c38c07e42",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3235 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "402493abdfe24e7abeaa26a2c29372d4",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 05/10 – 314.3s\n",
      "  train loss 0.2274 | acc 0.9074\n",
      "  val   loss 0.3903 | acc 0.8776\n",
      "           prec 0.5696 | rec 0.8137 | f1 0.6701 | auc 0.9227\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "fbc4de422c604b61a156ca2bccebd49a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3235 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d0b4e93713ee44619eb505fe44446289",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 06/10 – 314.5s\n",
      "  train loss 0.2066 | acc 0.9165\n",
      "  val   loss 0.4230 | acc 0.8674\n",
      "           prec 0.5424 | rec 0.8467 | f1 0.6612 | auc 0.9193\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "149a6dc30a534a3aa679b204cb4c1e2b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3235 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "126a347d61404b49a219f87b737dda58",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 07/10 – 312.5s\n",
      "  train loss 0.1901 | acc 0.9239\n",
      "  val   loss 0.4394 | acc 0.8823\n",
      "           prec 0.5867 | rec 0.7771 | f1 0.6686 | auc 0.9088\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "361f4da1820c442984ae2316af99f990",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3235 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0d35e5478c194fe58eb16901bf6cfa03",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 08/10 – 312.8s\n",
      "  train loss 0.1771 | acc 0.9303\n",
      "  val   loss 0.4122 | acc 0.8790\n",
      "           prec 0.5852 | rec 0.7155 | f1 0.6438 | auc 0.9088\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d976444acb73454aa5574e05183e3c87",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3235 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e0e5210d250f4bd5ada80334f8ebc9f7",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 09/10 – 312.3s\n",
      "  train loss 0.1668 | acc 0.9353\n",
      "  val   loss 0.4518 | acc 0.8754\n",
      "           prec 0.5768 | rec 0.6929 | f1 0.6295 | auc 0.9026\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "debc3559d3614dedbdf77b8c709fe83a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3235 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a0e141d9a26840ebaa10e0ffe900e4b6",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 10/10 – 312.3s\n",
      "  train loss 0.1523 | acc 0.9415\n",
      "  val   loss 0.4266 | acc 0.8736\n",
      "           prec 0.5768 | rec 0.6483 | f1 0.6105 | auc 0.9057\n",
      "\n",
      "--- Training finished ---\n",
      "\n",
      "Plotting training curves …\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Final Evaluation on Validation set ---\n",
      "Loaded best model: best_model_weighted_bbox_ego_acc_ego_speed_ped_action_ped_look_static_context_ep2.pth\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "9350bd01390640368ea2a0e2cc2a91dd",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1e5a73ecea954fb38b4fb8b9ee6590c3",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Generating CM Data:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Final metrics (Weighted Avg Fusion) ---\n",
      "loss      : 0.2363\n",
      "accuracy  : 0.9094\n",
      "precision : 0.6531\n",
      "recall    : 0.8680\n",
      "f1        : 0.7454\n",
      "auc       : 0.9550\n",
      "(Best validation F1 during training: 0.7454)\n"
     ]
    },
    {
     "data": {
      "image/png": "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Q0RERMWMTCZT+z3K+bm+tMt3wiWEAAC0bNlSZ50hIiIiKok02haCGSoREVHpwylF7WmUcNWsWfOdSVdCQoJWHSIiIqLihTvNa0+jhGvmzJk5dponIiIiIvU0Srj69euHypUr66ovREREVAzJZTKtvrxam2tLinwnXFy/RUREVDpxDZf28r3xafZTikRERESkmXyPcGVlZemyH0RERFRcablonl+lqOEaLiIiIip95JBBrkXWpM21JQUTLiIiIlKL20JoT+MvryYiIiIizXCEi4iIiNTiU4raY8JFREREanEfLu1xSpGIiIhIxzjCRURERGpx0bz2mHARERGRWnJoOaXIbSE4pUhERESkaxzhIiIiIrU4pag9JlxERESklhzaTYlxOo3vAREREZHOcYSLiIiI1JLJZJBpMS+ozbUlBRMuIiIiUkv2/4c215d2TLiIiIhILe40rz2u4SIiIiLSMY5wERER0TtxjEo7TLiIiIhILe7DpT1OKRIRERHpGEe4iIiISC1uC6E9JlxERESkFnea1x7fAyIiIiId4wgXERERqcUpRe0x4SIiIiK1uNO89jilSERERKRjHOEiIiIitTilqD0mXERERKQWn1LUHhMuIiIiUosjXNpj0klERETFypw5c9CoUSOYmJigcuXK6NatG2JiYlRiUlJS4OfnhwoVKqBcuXLo2bMn4uPjVWJiY2PRsWNHlC1bFpUrV8akSZOQkZGhEnP8+HE0aNAACoUCjo6OCA4OztGf5cuXw87ODoaGhmjSpAnOnTun8T0x4SIiIiK1ZIVwaOLEiRPw8/PDH3/8gdDQUKSnp6Ndu3ZITk6WYsaPH4/9+/dj586dOHHiBO7fv48ePXpI5zMzM9GxY0ekpaXhzJkz2LBhA4KDgxEQECDF3Lx5Ex07dkTr1q0RERGBcePGYejQoThy5IgUs337dvj7+2P69Om4dOkS6tWrB29vbzx8+FCje5IJIYSG7wOVEElJSTA1NUX8k0Qolcqi7g6RTsQ+flnUXSDSiRfPk+Be0wqJibr7HZ79d2LrmX9RtpxJget5+eI5BnxUs8B9ffToESpXrowTJ06gRYsWSExMRKVKlbB161b06tULABAdHQ1nZ2eEh4ejadOmOHToEDp16oT79+/DwsICALBq1SpMmTIFjx49goGBAaZMmYIDBw7g77//ltrq168fnj17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tYpi0XxJwzVcRERERDrGES4iIiJSS4b//05ELa4v7ZhwERERkVpcwqU9TikSERER6RhHuIiIiEgtmUzLKUUOcTHhIiIionfhpKK2OKVIREREpGMc4SIiIiK1OKWoPSZcREREpBYnFLXHKUUiIiIiHeMIFxEREanFKUXtMeEiIiIitfhditpjwkVERETqcRGX1riGi4iIiEjHOMJFREREanGAS3tMuIiIiEgtLprXHqcUiYiIiHSMI1xERESkFp9S1B4TLiIiIlKPi7i0xilFIiIiIh3jCBcRERGpxQEu7THhIiIiIrX4lKL2OKVIREREpGMc4SIiIqJ30O4pRU4qMuEiIiKid+CUovY4pUhERESkY0y4iIiIiHSMU4pERESkFqcUtceEi4iIiNTiV/toj1OKRERERDrGES4iIiJSi1OK2mPCRURERGrxq320xylFIiIiIh3jCBcRERGpxyEurTHhIiIiIrX4lKL2OKVIREREpGMc4SIiIiK1+JSi9phwERERkVpcwqU9JlxERESkHjMurXENFxEREZGOcYSLiIiI1OJTitpjwkVERERqcdG89phwlWJCCADA86SkIu4Jke68eP6yqLtApBMvXjwH8L/f5bqUpOXfCW2vLwmYcJViz5+//o/V0d6miHtCREQF9fz5c5iamuqkbgMDA1haWqJGIfydsLS0hIGBQSH06sMkE+8jNaZiKSsrC/fv34eJiQlkHO/VuaSkJNjY2ODOnTtQKpVF3R2iQsfP+PslhMDz589hbW0NuVx3z8ClpKQgLS1N63oMDAxgaGhYCD36MHGEqxSTy+WoWrVqUXej1FEqlfxjRCUaP+Pvj65Gtt5kaGhYqhOlwsJtIYiIiIh0jAkXERERkY4x4SJ6TxQKBaZPnw6FQlHUXSHSCX7GifLGRfNEREREOsYRLiIiIiIdY8JFREREpGNMuIiIiIh0jAkXUQkik8mwb9++ou4GkVqtWrXCuHHjirobRO8VEy764A0aNAgymQxz585VKd+3b5/GO+jb2dlh8eLF+Yq9fPkyevfuDQsLCxgaGqJGjRoYNmwY/v33X43aLEwPHjxA+/bti6x9Kp7i4uIwevRoODg4QKFQwMbGBp07d8axY8eKpD979uzBrFmziqRtoqLChItKBENDQ3z//fd4+vTpe2kvJCQETZs2RWpqKrZs2YKoqChs3rwZ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\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Learned fusion weights ---\n",
      "bbox           : 0.1691\n",
      "ped_action     : 0.1664\n",
      "ped_look       : 0.1639\n",
      "ego_speed      : 0.1640\n",
      "ego_acc        : 0.1647\n",
      "static_context : 0.1719\n",
      "------------------------------\n",
      "\n",
      "--- Script complete ---\n"
     ]
    }
   ],
   "source": [
    "# --- CELL 2: ABLATION STUDY – MODEL TRAINING AND EVALUATION (with Weighted Average Fusion) ---\n",
    "\n",
    "import os\n",
    "import sys\n",
    "import gc\n",
    "import time\n",
    "import math\n",
    "import random\n",
    "import pickle\n",
    "import torch\n",
    "import numpy as np\n",
    "import pandas as pd                      # results-summary table\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from tqdm.notebook import tqdm\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "from sklearn.metrics import (\n",
    "    accuracy_score,\n",
    "    precision_recall_fscore_support,\n",
    "    roc_auc_score,\n",
    "    confusion_matrix,\n",
    "    ConfusionMatrixDisplay,\n",
    ")\n",
    "\n",
    "# --- Add PIE utilities path if necessary (adjust path) ------------------------\n",
    "pie_utilities_path = \"/kaggle/working/PIE/utilities\"\n",
    "if pie_utilities_path not in sys.path:\n",
    "    sys.path.insert(0, pie_utilities_path)\n",
    "\n",
    "try:\n",
    "    from pie_data import PIE\n",
    "except ImportError as e:\n",
    "    print(f\"Warn: Could not import PIE class: {e}\")\n",
    "    PIE = None\n",
    "\n",
    "# --- Configuration ------------------------------------------------------------\n",
    "PIE_ROOT_PATH = \"/kaggle/working/PIE\"\n",
    "POSE_DATA_DIR = \"/kaggle/input/pose-data/extracted_poses2\"\n",
    "PIE_DATABASE_CACHE_PATH = \"/kaggle/input/pie-database/pie_database.pkl\"\n",
    "\n",
    "# --- Define ALL possible streams (used by Dataset class) ----------------------\n",
    "ALL_POSSIBLE_STREAMS = [\n",
    "    \"bbox\",\n",
    "    \"pose\",\n",
    "    \"ego_speed\",\n",
    "    \"ego_acc\",\n",
    "    \"ego_gyro\",\n",
    "    \"ped_action\",\n",
    "    \"ped_look\",\n",
    "    \"ped_occlusion\",\n",
    "    \"traffic_light\",\n",
    "    \"static_context\",\n",
    "]\n",
    "\n",
    "# --- *** CHOOSE ACTIVE STREAMS FOR THIS EXPERIMENT *** ------------------------\n",
    "ACTIVE_STREAMS = [\n",
    "    \"bbox\",\n",
    "    \"ped_action\",\n",
    "    \"ped_look\",\n",
    "    \"ego_speed\",\n",
    "    \"ego_acc\",\n",
    "    \"static_context\",\n",
    "]\n",
    "# ------------------------------------------------------------------------------\n",
    "\n",
    "print(f\"--- Running Weighted Average Fusion With Active Streams: {ACTIVE_STREAMS} ---\")\n",
    "\n",
    "# --- Model Hyper-parameters ---------------------------------------------------\n",
    "SEQ_LEN, PRED_LEN = 30, 1\n",
    "INPUT_SIZE_BBOX = 4\n",
    "INPUT_SIZE_POSE = 34\n",
    "INPUT_SIZE_EGO_SPEED = 1\n",
    "INPUT_SIZE_EGO_ACC = 2\n",
    "INPUT_SIZE_EGO_GYRO = 1\n",
    "INPUT_SIZE_PED_ACTION = 1\n",
    "INPUT_SIZE_PED_LOOK = 1\n",
    "INPUT_SIZE_PED_OCC = 1\n",
    "INPUT_SIZE_TL_STATE = 4\n",
    "NUM_SIGNALIZED_CATS = 4\n",
    "NUM_INTERSECTION_CATS = 5\n",
    "NUM_AGE_CATS = 4\n",
    "NUM_GENDER_CATS = 3\n",
    "NUM_TRAFFIC_DIR_CATS = 2\n",
    "LANE_CATEGORIES = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 4, 7: 4, 8: 4}\n",
    "NUM_LANE_CATS = len(set(LANE_CATEGORIES.values()))\n",
    "INPUT_SIZE_STATIC = (\n",
    "    NUM_SIGNALIZED_CATS\n",
    "    + NUM_INTERSECTION_CATS\n",
    "    + NUM_AGE_CATS\n",
    "    + NUM_GENDER_CATS\n",
    "    + NUM_TRAFFIC_DIR_CATS\n",
    "    + NUM_LANE_CATS\n",
    ")\n",
    "\n",
    "LSTM_HIDDEN_SIZE = 256\n",
    "NUM_LSTM_LAYERS = 2\n",
    "DROPOUT_RATE = 0.3\n",
    "NUM_CLASSES = 2\n",
    "ATTENTION_DIM = 128\n",
    "\n",
    "# --- Training Hyper-parameters ------------------------------------------------\n",
    "LEARNING_RATE = 1e-4\n",
    "BATCH_SIZE = 32\n",
    "NUM_EPOCHS = 10\n",
    "DEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "print(f\"Using device: {DEVICE}\")\n",
    "\n",
    "# --- Dataset splits -----------------------------------------------------------\n",
    "VAL_SETS_STR = [\"set05\", \"set06\"]\n",
    "\n",
    "# --- Paths for pre-processed data --------------------------------------------\n",
    "BALANCED_DATA_PKL_PATH = \"/kaggle/working/balanced_train_data.pkl\"\n",
    "SCALERS_PKL_PATH = \"/kaggle/working/scalers.pkl\"\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                               Helper classes                                #\n",
    "# -----------------------------------------------------------------------------\n",
    "\n",
    "\n",
    "def to_one_hot(index, num_classes):\n",
    "    vec = np.zeros(num_classes, dtype=np.float32)\n",
    "    safe_index = int(np.clip(index, 0, num_classes - 1))\n",
    "    vec[safe_index] = 1.0\n",
    "    return vec\n",
    "\n",
    "\n",
    "class PIEDataset(Dataset):\n",
    "    \"\"\"\n",
    "    Dataset that can dynamically enable/disable streams.\n",
    "    \"\"\"\n",
    "\n",
    "    def __init__(\n",
    "        self,\n",
    "        pie_database,\n",
    "        set_names,\n",
    "        pose_data_dir,\n",
    "        seq_len,\n",
    "        pred_len,\n",
    "        scalers=None,\n",
    "        active_streams=None,\n",
    "    ):\n",
    "        self.pie_db = pie_database\n",
    "        self.set_names = set_names\n",
    "        self.pose_data_dir = pose_data_dir\n",
    "        self.seq_len = seq_len\n",
    "        self.pred_len = pred_len\n",
    "        self.scalers = scalers or {}\n",
    "        self.active_streams = active_streams or ALL_POSSIBLE_STREAMS\n",
    "        self.sequences = []\n",
    "        self.all_pose_data = {}\n",
    "\n",
    "        self._input_sizes_for_error = self._get_input_sizes_dict()\n",
    "\n",
    "        if \"pose\" in self.active_streams:\n",
    "            self._load_pose_data()\n",
    "\n",
    "        self._generate_sequence_list()\n",
    "        if not self.sequences:\n",
    "            raise ValueError(f\"Dataset init failed: No sequences for {self.set_names}\")\n",
    "\n",
    "    # --------------------------------------------------------------------- #\n",
    "    #                        internal helper methods                        #\n",
    "    # --------------------------------------------------------------------- #\n",
    "\n",
    "    def _get_input_sizes_dict(self):\n",
    "        \"\"\"\n",
    "        Build a dict {stream_name: feature_size}.\n",
    "        \"\"\"\n",
    "        input_sizes = {}\n",
    "        special_cases = {\n",
    "            \"TRAFFIC_LIGHT\": \"TL_STATE\",\n",
    "            \"STATIC_CONTEXT\": \"STATIC\",\n",
    "            \"EGO_SPEED\": \"EGO_SPEED\",\n",
    "            \"EGO_ACC\": \"EGO_ACC\",\n",
    "            \"EGO_GYRO\": \"EGO_GYRO\",\n",
    "            \"PED_ACTION\": \"PED_ACTION\",\n",
    "            \"PED_LOOK\": \"PED_LOOK\",\n",
    "            \"PED_OCCLUSION\": \"PED_OCC\",\n",
    "        }\n",
    "\n",
    "        for stream in ALL_POSSIBLE_STREAMS:\n",
    "            size_constant_name = f\"INPUT_SIZE_{stream.upper()}\"\n",
    "            stream_upper_key = stream.upper()\n",
    "            suffix = special_cases.get(stream_upper_key)\n",
    "\n",
    "            if suffix:\n",
    "                size_constant_name = f\"INPUT_SIZE_{suffix}\"\n",
    "            elif stream == \"bbox\":\n",
    "                size_constant_name = \"INPUT_SIZE_BBOX\"\n",
    "            elif stream == \"pose\":\n",
    "                size_constant_name = \"INPUT_SIZE_POSE\"\n",
    "\n",
    "            input_sizes[stream] = globals().get(size_constant_name, 1)\n",
    "\n",
    "        return input_sizes\n",
    "\n",
    "    def _load_pose_data(self):\n",
    "        \"\"\"\n",
    "        Load pose dictionaries once per dataset instance.\n",
    "        \"\"\"\n",
    "        sets_loaded_count = 0\n",
    "        for set_id in self.set_names:\n",
    "            self.all_pose_data[set_id] = {}\n",
    "            pose_set_path = os.path.join(self.pose_data_dir, set_id)\n",
    "            if not os.path.isdir(pose_set_path):\n",
    "                continue\n",
    "\n",
    "            pkl_files_in_set = [\n",
    "                f\n",
    "                for f in os.listdir(pose_set_path)\n",
    "                if f.startswith(f\"{set_id}_\") and f.endswith(\"_poses.pkl\")\n",
    "            ]\n",
    "            if not pkl_files_in_set:\n",
    "                continue\n",
    "\n",
    "            loaded_video_count = 0\n",
    "            for pkl_filename in pkl_files_in_set:\n",
    "                pkl_file_path = os.path.join(pose_set_path, pkl_filename)\n",
    "                try:\n",
    "                    with open(pkl_file_path, \"rb\") as f:\n",
    "                        loaded_pkl_content = pickle.load(f)\n",
    "                except FileNotFoundError:\n",
    "                    continue\n",
    "                except Exception as e:\n",
    "                    print(f\"Error loading pose PKL {pkl_file_path}: {e}\")\n",
    "                    continue\n",
    "\n",
    "                # Every pose-PKL contains a single key (video), by convention\n",
    "                if len(loaded_pkl_content) != 1:\n",
    "                    continue\n",
    "\n",
    "                unique_video_key, video_data = list(loaded_pkl_content.items())[0]\n",
    "                video_id = \"_\".join(unique_video_key.split(\"_\")[1:])\n",
    "                if video_id in self.pie_db.get(set_id, {}):\n",
    "                    self.all_pose_data[set_id][video_id] = video_data\n",
    "                    loaded_video_count += 1\n",
    "\n",
    "            if loaded_video_count > 0:\n",
    "                sets_loaded_count += 1\n",
    "\n",
    "    def _generate_sequence_list(self):\n",
    "        \"\"\"\n",
    "        Enumerate every sliding window that satisfies length + prediction horizon.\n",
    "        \"\"\"\n",
    "        sequence_count = 0\n",
    "        for set_id in self.set_names:\n",
    "            if set_id not in self.pie_db:\n",
    "                continue\n",
    "            for video_id, video_data in self.pie_db[set_id].items():\n",
    "                if \"ped_annotations\" not in video_data:\n",
    "                    continue\n",
    "                for ped_id, ped_data in video_data[\"ped_annotations\"].items():\n",
    "                    frames = ped_data.get(\"frames\", [])\n",
    "                    if len(frames) < self.seq_len + self.pred_len:\n",
    "                        continue\n",
    "\n",
    "                    frames_sorted = sorted(frames)\n",
    "                    for i in range(len(frames_sorted) - self.seq_len - self.pred_len + 1):\n",
    "                        start_f = frames_sorted[i]\n",
    "                        obs_end_f = frames_sorted[i + self.seq_len - 1]\n",
    "\n",
    "                        # consecutiveness check\n",
    "                        if obs_end_f - start_f != self.seq_len - 1:\n",
    "                            continue\n",
    "\n",
    "                        target_idx = i + self.seq_len + self.pred_len - 1\n",
    "                        if target_idx >= len(frames_sorted):\n",
    "                            continue\n",
    "\n",
    "                        target_f = frames_sorted[target_idx]\n",
    "                        if target_f - obs_end_f != self.pred_len:\n",
    "                            continue\n",
    "\n",
    "                        self.sequences.append((set_id, video_id, ped_id, start_f))\n",
    "                        sequence_count += 1\n",
    "\n",
    "        print(f\"Dataset initialized with {sequence_count} sequences for sets {self.set_names}.\")\n",
    "\n",
    "    # --------------------------------------------------------------------- #\n",
    "    #                              overrides                                #\n",
    "    # --------------------------------------------------------------------- #\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.sequences)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        \"\"\"\n",
    "        Returns:\n",
    "            features_dict   {stream_name: Tensor(seq_len, feat_dim)}\n",
    "            label_tensor    Tensor([])\n",
    "        \"\"\"\n",
    "        set_id, video_id, ped_id, start_frame = self.sequences[idx]\n",
    "        frame_nums = list(range(start_frame, start_frame + self.seq_len))\n",
    "        target_frame_num = start_frame + self.seq_len + self.pred_len - 1\n",
    "\n",
    "        # convenient aliases\n",
    "        video_db = self.pie_db.get(set_id, {}).get(video_id, {})\n",
    "        ped_db = video_db.get(\"ped_annotations\", {}).get(ped_id, {})\n",
    "        ego_db = video_db.get(\"vehicle_annotations\", {})\n",
    "        traffic_db = video_db.get(\"traffic_annotations\", {})\n",
    "        ped_attributes = ped_db.get(\"attributes\", {})\n",
    "\n",
    "        feature_sequences = {s: [] for s in self.active_streams}\n",
    "        label = 0\n",
    "\n",
    "        if (\n",
    "            \"frames\" in ped_db\n",
    "            and \"behavior\" in ped_db\n",
    "            and \"cross\" in ped_db[\"behavior\"]\n",
    "        ):\n",
    "            try:\n",
    "                target_idx = ped_db[\"frames\"].index(target_frame_num)\n",
    "                label = ped_db[\"behavior\"][\"cross\"][target_idx]\n",
    "                if label == -1:\n",
    "                    label = 0\n",
    "            except (ValueError, IndexError):\n",
    "                pass\n",
    "\n",
    "        # --- static context ------------------------------------------------\n",
    "        static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "        if \"static_context\" in self.active_streams:\n",
    "            sig_idx = ped_attributes.get(\"signalized\", 0)\n",
    "            int_idx = ped_attributes.get(\"intersection\", 0)\n",
    "            age_idx = ped_attributes.get(\"age\", 2)\n",
    "            gen_idx = ped_attributes.get(\"gender\", 0)\n",
    "            td_idx = int(ped_attributes.get(\"traffic_direction\", 0))\n",
    "            nl_val = ped_attributes.get(\"num_lanes\", 2)\n",
    "            nl_cat_idx = LANE_CATEGORIES.get(\n",
    "                nl_val, LANE_CATEGORIES[max(LANE_CATEGORIES.keys())]\n",
    "            )\n",
    "\n",
    "            static_vec = np.concatenate(\n",
    "                [\n",
    "                    to_one_hot(sig_idx, NUM_SIGNALIZED_CATS),\n",
    "                    to_one_hot(int_idx, NUM_INTERSECTION_CATS),\n",
    "                    to_one_hot(age_idx, NUM_AGE_CATS),\n",
    "                    to_one_hot(gen_idx, NUM_GENDER_CATS),\n",
    "                    to_one_hot(td_idx, NUM_TRAFFIC_DIR_CATS),\n",
    "                    to_one_hot(nl_cat_idx, NUM_LANE_CATS),\n",
    "                ]\n",
    "            )\n",
    "\n",
    "            if static_vec.shape[0] != INPUT_SIZE_STATIC:\n",
    "                static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "\n",
    "        # -------------------------------------------------------------------\n",
    "        #                    per-frame feature extraction                    #\n",
    "        # -------------------------------------------------------------------\n",
    "        for frame_num in frame_nums:\n",
    "            frame_db_idx = -1\n",
    "            if \"frames\" in ped_db:\n",
    "                try:\n",
    "                    frame_db_idx = ped_db[\"frames\"].index(frame_num)\n",
    "                except ValueError:\n",
    "                    pass\n",
    "\n",
    "            ego_frame_data = ego_db.get(frame_num, {})\n",
    "\n",
    "            # ---------- bbox ------------------------------------------------\n",
    "            if \"bbox\" in self.active_streams:\n",
    "                bbox_norm = np.zeros(INPUT_SIZE_BBOX, dtype=np.float32)\n",
    "                if (\n",
    "                    frame_db_idx != -1\n",
    "                    and \"bbox\" in ped_db\n",
    "                    and len(ped_db[\"bbox\"]) > frame_db_idx\n",
    "                ):\n",
    "                    try:\n",
    "                        x1, y1, x2, y2 = ped_db[\"bbox\"][frame_db_idx]\n",
    "                        img_w = video_db.get(\"width\", 1920)\n",
    "                        img_h = video_db.get(\"height\", 1080)\n",
    "                        if img_w > 0 and img_h > 0:\n",
    "                            cx = ((x1 + x2) / 2) / img_w\n",
    "                            cy = ((y1 + y2) / 2) / img_h\n",
    "                            w = (x2 - x1) / img_w\n",
    "                            h = (y2 - y1) / img_h\n",
    "                            if 0 < w and 0 < h and 0 <= cx <= 1 and 0 <= cy <= 1:\n",
    "                                bbox_norm = np.array([cx, cy, w, h], dtype=np.float32)\n",
    "                    except Exception:\n",
    "                        pass\n",
    "\n",
    "                feature_sequences[\"bbox\"].append(bbox_norm)\n",
    "\n",
    "            # ---------- pose -----------------------------------------------\n",
    "            if \"pose\" in self.active_streams:\n",
    "                pose_vector = np.zeros(INPUT_SIZE_POSE, dtype=np.float32)\n",
    "                vid_pose = self.all_pose_data.get(set_id, {}).get(video_id, {})\n",
    "                frame_pose = vid_pose.get(frame_num, {})\n",
    "                loaded_pose = frame_pose.get(ped_id)\n",
    "\n",
    "                if (\n",
    "                    loaded_pose is not None\n",
    "                    and isinstance(loaded_pose, np.ndarray)\n",
    "                    and loaded_pose.shape == (INPUT_SIZE_POSE,)\n",
    "                ):\n",
    "                    pose_vector = loaded_pose\n",
    "\n",
    "                feature_sequences[\"pose\"].append(pose_vector)\n",
    "\n",
    "            # ---------- ego-speed ------------------------------------------\n",
    "            if \"ego_speed\" in self.active_streams:\n",
    "                speed = ego_frame_data.get(\"OBD_speed\", 0.0)\n",
    "                if speed == 0.0:\n",
    "                    speed = ego_frame_data.get(\"GPS_speed\", 0.0)\n",
    "\n",
    "                speed_scaled = (\n",
    "                    speed - self.scalers.get(\"ego_speed_mean\", 0.0)\n",
    "                ) / self.scalers.get(\"ego_speed_std\", 1.0)\n",
    "                feature_sequences[\"ego_speed\"].append([speed_scaled])\n",
    "\n",
    "            # ---------- ego-acc --------------------------------------------\n",
    "            if \"ego_acc\" in self.active_streams:\n",
    "                acc_x = ego_frame_data.get(\"accX\", 0.0)\n",
    "                acc_y = ego_frame_data.get(\"accY\", 0.0)\n",
    "                acc_x_scaled = (\n",
    "                    acc_x - self.scalers.get(\"accX_mean\", 0.0)\n",
    "                ) / self.scalers.get(\"accX_std\", 1.0)\n",
    "                acc_y_scaled = (\n",
    "                    acc_y - self.scalers.get(\"accY_mean\", 0.0)\n",
    "                ) / self.scalers.get(\"accY_std\", 1.0)\n",
    "                feature_sequences[\"ego_acc\"].append([acc_x_scaled, acc_y_scaled])\n",
    "\n",
    "            # ---------- ego-gyro -------------------------------------------\n",
    "            if \"ego_gyro\" in self.active_streams:\n",
    "                gyro_z = ego_frame_data.get(\"gyroZ\", 0.0)\n",
    "                gyro_z_scaled = (\n",
    "                    gyro_z - self.scalers.get(\"gyroZ_mean\", 0.0)\n",
    "                ) / self.scalers.get(\"gyroZ_std\", 1.0)\n",
    "                feature_sequences[\"ego_gyro\"].append([gyro_z_scaled])\n",
    "\n",
    "            # ---------- ped_action -----------------------------------------\n",
    "            if \"ped_action\" in self.active_streams:\n",
    "                action = 0\n",
    "                if (\n",
    "                    frame_db_idx != -1\n",
    "                    and \"behavior\" in ped_db\n",
    "                    and \"action\" in ped_db[\"behavior\"]\n",
    "                    and len(ped_db[\"behavior\"][\"action\"]) > frame_db_idx\n",
    "                ):\n",
    "                    action = ped_db[\"behavior\"][\"action\"][frame_db_idx]\n",
    "                feature_sequences[\"ped_action\"].append([float(action)])\n",
    "\n",
    "            # ---------- ped_look -------------------------------------------\n",
    "            if \"ped_look\" in self.active_streams:\n",
    "                look = 0\n",
    "                if (\n",
    "                    frame_db_idx != -1\n",
    "                    and \"behavior\" in ped_db\n",
    "                    and \"look\" in ped_db[\"behavior\"]\n",
    "                    and len(ped_db[\"behavior\"][\"look\"]) > frame_db_idx\n",
    "                ):\n",
    "                    look = ped_db[\"behavior\"][\"look\"][frame_db_idx]\n",
    "                feature_sequences[\"ped_look\"].append([float(look)])\n",
    "\n",
    "            # ---------- ped_occlusion --------------------------------------\n",
    "            if \"ped_occlusion\" in self.active_streams:\n",
    "                occ = 0.0\n",
    "                if (\n",
    "                    frame_db_idx != -1\n",
    "                    and \"occlusion\" in ped_db\n",
    "                    and len(ped_db[\"occlusion\"]) > frame_db_idx\n",
    "                ):\n",
    "                    occ_val = ped_db[\"occlusion\"][frame_db_idx]\n",
    "                    occ = float(occ_val) / 2.0\n",
    "                feature_sequences[\"ped_occlusion\"].append([occ])\n",
    "\n",
    "            # ---------- traffic_light --------------------------------------\n",
    "            if \"traffic_light\" in self.active_streams:\n",
    "                state_int = 0\n",
    "                for obj_id, obj_data in traffic_db.items():\n",
    "                    if (\n",
    "                        obj_data.get(\"obj_class\") == \"traffic_light\"\n",
    "                        and \"frames\" in obj_data\n",
    "                        and \"state\" in obj_data\n",
    "                    ):\n",
    "                        try:\n",
    "                            tl_idx = obj_data[\"frames\"].index(frame_num)\n",
    "                            state_val = obj_data[\"state\"][tl_idx]\n",
    "                            if state_val != 0:\n",
    "                                state_int = state_val\n",
    "                                break\n",
    "                        except (ValueError, IndexError):\n",
    "                            continue\n",
    "                feature_sequences[\"traffic_light\"].append(\n",
    "                    to_one_hot(state_int, INPUT_SIZE_TL_STATE)\n",
    "                )\n",
    "\n",
    "            # ---------- static_context (per-frame replicate) ---------------\n",
    "            if \"static_context\" in self.active_streams:\n",
    "                feature_sequences[\"static_context\"].append(static_vec)\n",
    "\n",
    "        # -------------------------------------------------------------------\n",
    "        # convert to tensors / safe fallback\n",
    "        # -------------------------------------------------------------------\n",
    "        features = {}\n",
    "        try:\n",
    "            for name in self.active_streams:\n",
    "                features[name] = torch.tensor(\n",
    "                    np.asarray(feature_sequences[name], dtype=np.float32),\n",
    "                    dtype=torch.float32,\n",
    "                )\n",
    "        except Exception as e:\n",
    "            print(f\"Error converting features idx {idx}: {e}. Returning zeros.\")\n",
    "            features = {\n",
    "                name: torch.zeros(\n",
    "                    (self.seq_len, self._input_sizes_for_error.get(name, 1)),\n",
    "                    dtype=torch.float32,\n",
    "                )\n",
    "                for name in self.active_streams\n",
    "            }\n",
    "\n",
    "        return features, torch.tensor(label, dtype=torch.long)\n",
    "\n",
    "\n",
    "class BalancedDataset(Dataset):\n",
    "    \"\"\"\n",
    "    Memory-based balanced dataset generated by the prep notebook cell.\n",
    "    \"\"\"\n",
    "\n",
    "    def __init__(self, data_dict, active_streams, label_key=\"label\"):\n",
    "        self.active_streams = active_streams\n",
    "        self.label_key = label_key\n",
    "\n",
    "        if self.label_key not in data_dict or not data_dict[self.label_key]:\n",
    "            raise ValueError(f\"Label key '{self.label_key}' missing/empty.\")\n",
    "\n",
    "        self.num_samples = len(data_dict[self.label_key])\n",
    "        if self.num_samples == 0:\n",
    "            print(\"Warning: BalancedDataset initialized with zero samples.\")\n",
    "\n",
    "        # convert every requested stream to tensor\n",
    "        self.features = {}\n",
    "        for stream in self.active_streams:\n",
    "            if stream in data_dict and data_dict[stream]:\n",
    "                try:\n",
    "                    self.features[stream] = torch.tensor(\n",
    "                        np.asarray(data_dict[stream]), dtype=torch.float32\n",
    "                    )\n",
    "                except ValueError as e:\n",
    "                    raise ValueError(f\"Error converting stream '{stream}': {e}\")\n",
    "            else:\n",
    "                raise KeyError(f\"Stream '{stream}' missing or empty in data.\")\n",
    "\n",
    "        try:\n",
    "            self.labels = torch.tensor(\n",
    "                [lbl[0] for lbl in data_dict[self.label_key]], dtype=torch.long\n",
    "            )\n",
    "        except (IndexError, TypeError) as e:\n",
    "            raise ValueError(f\"Error converting labels: {e}\")\n",
    "\n",
    "        for stream in self.active_streams:\n",
    "            if len(self.features[stream]) != self.num_samples:\n",
    "                raise ValueError(\n",
    "                    f\"Len mismatch: '{stream}' ({len(self.features[stream])}) vs labels ({self.num_samples})\"\n",
    "                )\n",
    "\n",
    "    def __len__(self):\n",
    "        return self.num_samples\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        feature_dict = {s: self.features[s][idx] for s in self.active_streams}\n",
    "        label = self.labels[idx]\n",
    "        return feature_dict, label\n",
    "\n",
    "\n",
    "class Attention(nn.Module):\n",
    "    def __init__(self, hidden_dim, attention_dim):\n",
    "        super().__init__()\n",
    "        self.attention_net = nn.Sequential(\n",
    "            nn.Linear(hidden_dim, attention_dim),\n",
    "            nn.Tanh(),\n",
    "            nn.Linear(attention_dim, 1),\n",
    "        )\n",
    "\n",
    "    def forward(self, lstm_output):\n",
    "        att_scores = self.attention_net(lstm_output).squeeze(2)\n",
    "        att_weights = torch.softmax(att_scores, dim=1)\n",
    "        context_vector = torch.sum(lstm_output * att_weights.unsqueeze(2), dim=1)\n",
    "        return context_vector, att_weights\n",
    "\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                  ***  MODEL WITH WEIGHTED AVERAGE FUSION  ***                #\n",
    "# -----------------------------------------------------------------------------\n",
    "\n",
    "\n",
    "class MultiStreamWeightedAvgLSTM(nn.Module):\n",
    "    def __init__(\n",
    "        self,\n",
    "        input_sizes,\n",
    "        lstm_hidden_size,\n",
    "        num_lstm_layers,\n",
    "        num_classes,\n",
    "        attention_dim,\n",
    "        dropout_rate,\n",
    "        stream_names=None,\n",
    "    ):\n",
    "        super().__init__()\n",
    "\n",
    "        if not stream_names:\n",
    "            raise ValueError(\"stream_names cannot be empty.\")\n",
    "        self.stream_names = stream_names\n",
    "        self.num_active_streams = len(stream_names)\n",
    "        self.lstm_output_dim = lstm_hidden_size * 2  # Bi-LSTM doubles hidden\n",
    "\n",
    "        self.lstms = nn.ModuleDict()\n",
    "        self.attentions = nn.ModuleDict()\n",
    "\n",
    "        print(f\"Initializing Weighted-Avg model with streams: {self.stream_names}\")\n",
    "\n",
    "        for name in self.stream_names:\n",
    "            if name not in input_sizes:\n",
    "                raise KeyError(f\"Input size for stream '{name}' not provided.\")\n",
    "\n",
    "            in_size = input_sizes[name]\n",
    "            print(f\"  – Adding stream '{name}' (input {in_size})\")\n",
    "\n",
    "            self.lstms[name] = nn.LSTM(\n",
    "                in_size,\n",
    "                lstm_hidden_size,\n",
    "                num_lstm_layers,\n",
    "                batch_first=True,\n",
    "                dropout=dropout_rate if num_lstm_layers > 1 else 0,\n",
    "                bidirectional=True,\n",
    "            )\n",
    "            self.attentions[name] = Attention(self.lstm_output_dim, attention_dim)\n",
    "\n",
    "        # learnable fusion weights (one per stream)\n",
    "        self.fusion_weights = nn.Parameter(torch.ones(self.num_active_streams))\n",
    "\n",
    "        # classification head\n",
    "        fused_dim = self.lstm_output_dim\n",
    "        self.dropout = nn.Dropout(dropout_rate)\n",
    "        inter_dim = max(num_classes * 4, fused_dim // 2)\n",
    "        self.fc1 = nn.Linear(fused_dim, inter_dim)\n",
    "        self.relu = nn.ReLU()\n",
    "        self.fc2 = nn.Linear(inter_dim, num_classes)\n",
    "\n",
    "    # --------------------------------------------------------------------- #\n",
    "\n",
    "    def forward(self, x):\n",
    "        # gather context vectors ------------------------------------------------\n",
    "        ctx_vecs = []\n",
    "        for name in self.stream_names:\n",
    "            if name not in x:\n",
    "                # gracefully handle a missing stream during inference\n",
    "                zero_ctx = torch.zeros(\n",
    "                    x[next(iter(x))].shape[0],\n",
    "                    self.lstm_output_dim,\n",
    "                    device=x[next(iter(x))].device,\n",
    "                )\n",
    "                ctx_vecs.append(zero_ctx)\n",
    "                continue\n",
    "\n",
    "            lstm_out, _ = self.lstms[name](x[name])\n",
    "            context_vector, _ = self.attentions[name](lstm_out)\n",
    "            ctx_vecs.append(context_vector)\n",
    "\n",
    "        if len(ctx_vecs) != self.num_active_streams:\n",
    "            raise RuntimeError(\n",
    "                f\"context_vectors({len(ctx_vecs)}) != num_streams({self.num_active_streams})\"\n",
    "            )\n",
    "\n",
    "        # weighted average fusion ---------------------------------------------\n",
    "        stacked = torch.stack(ctx_vecs, dim=1)  # (B, N, D)\n",
    "        weights = torch.softmax(self.fusion_weights, dim=0).view(1, -1, 1)\n",
    "        fused = torch.sum(stacked * weights, dim=1)\n",
    "\n",
    "        # classification head --------------------------------------------------\n",
    "        out = self.dropout(fused)\n",
    "        out = self.relu(self.fc1(out))\n",
    "        out = self.dropout(out)\n",
    "        logits = self.fc2(out)\n",
    "        return logits\n",
    "\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                       Training / evaluation helpers                          #\n",
    "# -----------------------------------------------------------------------------\n",
    "\n",
    "\n",
    "def train_epoch(model, dataloader, optimizer, criterion, device):\n",
    "    model.train()\n",
    "    total_loss = 0.0\n",
    "    all_preds, all_labels = [], []\n",
    "    active = model.stream_names\n",
    "\n",
    "    for feats, labels in tqdm(dataloader, desc=\"Training\", leave=False):\n",
    "        inputs = {n: feats[n].to(device) for n in active if n in feats}\n",
    "        labels = labels.to(device)\n",
    "\n",
    "        optimizer.zero_grad()\n",
    "        outputs = model(inputs)\n",
    "        loss = criterion(outputs, labels)\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "\n",
    "        total_loss += loss.item()\n",
    "        all_preds.extend(torch.argmax(outputs, 1).cpu().numpy())\n",
    "        all_labels.extend(labels.cpu().numpy())\n",
    "\n",
    "    return total_loss / max(1, len(dataloader)), accuracy_score(all_labels, all_preds)\n",
    "\n",
    "\n",
    "def evaluate_epoch(model, dataloader, criterion, device):\n",
    "    model.eval()\n",
    "    total_loss = 0.0\n",
    "    all_labels, all_preds, all_probs = [], [], []\n",
    "    active = model.stream_names\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for feats, labels in tqdm(dataloader, desc=\"Evaluating\", leave=False):\n",
    "            inputs = {n: feats[n].to(device) for n in active if n in feats}\n",
    "            labels = labels.to(device)\n",
    "\n",
    "            outputs = model(inputs)\n",
    "            loss = criterion(outputs, labels)\n",
    "            total_loss += loss.item()\n",
    "\n",
    "            probs = torch.softmax(outputs, 1)\n",
    "            preds = torch.argmax(probs, 1)\n",
    "\n",
    "            all_labels.extend(labels.cpu().numpy())\n",
    "            all_preds.extend(preds.cpu().numpy())\n",
    "            all_probs.extend(probs.cpu().numpy())\n",
    "\n",
    "    avg_loss = total_loss / max(1, len(dataloader))\n",
    "    all_probs = np.asarray(all_probs)\n",
    "    all_labels = np.asarray(all_labels)\n",
    "    all_preds = np.asarray(all_preds)\n",
    "\n",
    "    acc = accuracy_score(all_labels, all_preds)\n",
    "    prec, rec, f1, _ = precision_recall_fscore_support(\n",
    "        all_labels, all_preds, average=\"binary\", pos_label=1, zero_division=0\n",
    "    )\n",
    "    auc = (\n",
    "        roc_auc_score(all_labels, all_probs[:, 1])\n",
    "        if len(np.unique(all_labels)) > 1\n",
    "        else float(\"nan\")\n",
    "    )\n",
    "\n",
    "    return {\n",
    "        \"loss\": avg_loss,\n",
    "        \"accuracy\": acc,\n",
    "        \"precision\": prec,\n",
    "        \"recall\": rec,\n",
    "        \"f1\": f1,\n",
    "        \"auc\": auc,\n",
    "    }\n",
    "\n",
    "\n",
    "def get_predictions_and_labels(model, dataloader, device):\n",
    "    model.eval()\n",
    "    labels_all, preds_all = [], []\n",
    "    active = model.stream_names\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for feats, labels in tqdm(dataloader, desc=\"Generating CM Data\", leave=False):\n",
    "            inputs = {n: feats[n].to(device) for n in active if n in feats}\n",
    "            outputs = model(inputs)\n",
    "            preds = torch.argmax(outputs, 1)\n",
    "            labels_all.extend(labels.cpu().numpy())\n",
    "            preds_all.extend(preds.cpu().numpy())\n",
    "\n",
    "    return np.asarray(labels_all), np.asarray(preds_all)\n",
    "\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                            Main execution block                              #\n",
    "# -----------------------------------------------------------------------------\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    print(\"--- Running Model Training/Evaluation with Weighted Fusion ---\")\n",
    "    print(f\"Active Streams: {ACTIVE_STREAMS}\")\n",
    "\n",
    "    # ------------------ load balanced data & scalers -------------------------\n",
    "    print(\"\\nLoading balanced training data …\")\n",
    "    try:\n",
    "        with open(BALANCED_DATA_PKL_PATH, \"rb\") as f:\n",
    "            balanced_train_data_dict = pickle.load(f)\n",
    "        with open(SCALERS_PKL_PATH, \"rb\") as f:\n",
    "            scalers = pickle.load(f)\n",
    "        print(\"   ✓ pre-processed data loaded.\")\n",
    "    except FileNotFoundError as e:\n",
    "        print(f\"ERROR: {e}.  Run the preprocessing cell first.\")\n",
    "        sys.exit(1)\n",
    "    except Exception as e:\n",
    "        print(f\"Error loading pre-processed data: {e}\")\n",
    "        sys.exit(1)\n",
    "\n",
    "    # -------------------------- load PIE database ----------------------------\n",
    "    print(\"\\nLoading PIE database cache for validation …\")\n",
    "    if not os.path.exists(PIE_DATABASE_CACHE_PATH):\n",
    "        raise FileNotFoundError(\"PIE database cache not found.\")\n",
    "\n",
    "    try:\n",
    "        with open(PIE_DATABASE_CACHE_PATH, \"rb\") as f:\n",
    "            pie_database = pickle.load(f)\n",
    "    except Exception as e:\n",
    "        raise RuntimeError(f\"Failed to load PIE database: {e}\")\n",
    "    print(\"   ✓ PIE database loaded.\")\n",
    "\n",
    "    # ------------------- create datasets / dataloaders -----------------------\n",
    "    print(\"\\nCreating Datasets and DataLoaders …\")\n",
    "    try:\n",
    "        train_dataset = BalancedDataset(\n",
    "            balanced_train_data_dict, ACTIVE_STREAMS, label_key=\"label\"\n",
    "        )\n",
    "        del balanced_train_data_dict\n",
    "\n",
    "        val_dataset = PIEDataset(\n",
    "            pie_database,\n",
    "            VAL_SETS_STR,\n",
    "            POSE_DATA_DIR,\n",
    "            SEQ_LEN,\n",
    "            PRED_LEN,\n",
    "            scalers,\n",
    "            ALL_POSSIBLE_STREAMS,  # provide all streams for val\n",
    "        )\n",
    "    except Exception as e:\n",
    "        print(f\"Error creating datasets: {e}\")\n",
    "        raise\n",
    "\n",
    "    if len(train_dataset) == 0 or len(val_dataset) == 0:\n",
    "        raise ValueError(\"One of the datasets is empty!\")\n",
    "\n",
    "    train_loader = DataLoader(\n",
    "        train_dataset,\n",
    "        batch_size=BATCH_SIZE,\n",
    "        shuffle=True,\n",
    "        num_workers=2,\n",
    "        pin_memory=True,\n",
    "    )\n",
    "    val_loader = DataLoader(\n",
    "        val_dataset,\n",
    "        batch_size=BATCH_SIZE,\n",
    "        shuffle=False,\n",
    "        num_workers=2,\n",
    "        pin_memory=True,\n",
    "    )\n",
    "    print(\"   ✓ DataLoaders ready.\")\n",
    "    del pie_database\n",
    "    gc.collect()\n",
    "\n",
    "    # ------------------------- initialise the model --------------------------\n",
    "    print(\"\\nInitialising model …\")\n",
    "    current_input_sizes = {}\n",
    "    SPECIAL = {\n",
    "        \"TRAFFIC_LIGHT\": \"TL_STATE\",\n",
    "        \"STATIC_CONTEXT\": \"STATIC\",\n",
    "        \"EGO_SPEED\": \"EGO_SPEED\",\n",
    "        \"EGO_ACC\": \"EGO_ACC\",\n",
    "        \"EGO_GYRO\": \"EGO_GYRO\",\n",
    "        \"PED_ACTION\": \"PED_ACTION\",\n",
    "        \"PED_LOOK\": \"PED_LOOK\",\n",
    "        \"PED_OCCLUSION\": \"PED_OCC\",\n",
    "    }\n",
    "\n",
    "    for s in ACTIVE_STREAMS:\n",
    "        name = f\"INPUT_SIZE_{SPECIAL.get(s.upper(), s.upper())}\"\n",
    "        if s == \"bbox\":\n",
    "            name = \"INPUT_SIZE_BBOX\"\n",
    "        elif s == \"pose\":\n",
    "            name = \"INPUT_SIZE_POSE\"\n",
    "\n",
    "        if name not in globals():\n",
    "            raise ValueError(f\"Input-size constant {name} not found.\")\n",
    "\n",
    "        current_input_sizes[s] = globals()[name]\n",
    "\n",
    "    model = MultiStreamWeightedAvgLSTM(\n",
    "        current_input_sizes,\n",
    "        LSTM_HIDDEN_SIZE,\n",
    "        NUM_LSTM_LAYERS,\n",
    "        NUM_CLASSES,\n",
    "        ATTENTION_DIM,\n",
    "        DROPOUT_RATE,\n",
    "        stream_names=ACTIVE_STREAMS,\n",
    "    ).to(DEVICE)\n",
    "\n",
    "    print(\"\\n--- Model architecture ---\")\n",
    "    print(model)\n",
    "    total_params = sum(p.numel() for p in model.parameters() if p.requires_grad)\n",
    "    print(f\"Trainable parameters: {total_params:,}\")\n",
    "    print(\"-\" * 30)\n",
    "\n",
    "    # ---------------- loss / optimiser --------------------------------------\n",
    "    print(\"\\nCalculating class weights …\")\n",
    "    train_labels = train_dataset.labels.tolist()\n",
    "    n0, n1 = train_labels.count(0), train_labels.count(1)\n",
    "    total = len(train_labels)\n",
    "    if total == 0:\n",
    "        w0, w1 = 1.0, 1.0\n",
    "    elif n0 == 0:\n",
    "        w0, w1 = 0.0, 1.0\n",
    "    elif n1 == 0:\n",
    "        w0, w1 = 1.0, 0.0\n",
    "    else:\n",
    "        w0, w1 = total / (2.0 * n0), total / (2.0 * n1)\n",
    "\n",
    "    class_weights = torch.tensor([w0, w1], dtype=torch.float32).to(DEVICE)\n",
    "    print(f\"Loss weights → 0: {w0:.2f}, 1: {w1:.2f}\")\n",
    "\n",
    "    criterion = nn.CrossEntropyLoss(weight=class_weights)\n",
    "    optimizer = optim.Adam(model.parameters(), lr=LEARNING_RATE)\n",
    "\n",
    "    best_val_f1 = -1.0\n",
    "    history = {\"train_loss\": [], \"val_loss\": [], \"train_acc\": [], \"val_acc\": [], \"val_f1\": []}\n",
    "    best_model_path = \"\"\n",
    "\n",
    "    # --------------------------- training loop -------------------------------\n",
    "    print(\"\\n--- Starting training ---\")\n",
    "    for epoch in range(NUM_EPOCHS):\n",
    "        t0 = time.time()\n",
    "\n",
    "        train_loss, train_acc = train_epoch(model, train_loader, optimizer, criterion, DEVICE)\n",
    "        metrics = evaluate_epoch(model, val_loader, criterion, DEVICE)\n",
    "\n",
    "        history[\"train_loss\"].append(train_loss)\n",
    "        history[\"val_loss\"].append(metrics[\"loss\"])\n",
    "        history[\"train_acc\"].append(train_acc)\n",
    "        history[\"val_acc\"].append(metrics[\"accuracy\"])\n",
    "        history[\"val_f1\"].append(metrics[\"f1\"])\n",
    "\n",
    "        print(f\"\\nEpoch {epoch + 1:02d}/{NUM_EPOCHS} – {time.time() - t0:.1f}s\")\n",
    "        print(f\"  train loss {train_loss:.4f} | acc {train_acc:.4f}\")\n",
    "        print(f\"  val   loss {metrics['loss']:.4f} | acc {metrics['accuracy']:.4f}\")\n",
    "        print(\n",
    "            f\"           prec {metrics['precision']:.4f} | rec {metrics['recall']:.4f} | f1 {metrics['f1']:.4f} | auc {metrics['auc']:.4f}\"\n",
    "        )\n",
    "\n",
    "        if metrics[\"f1\"] > best_val_f1:\n",
    "            best_val_f1 = metrics[\"f1\"]\n",
    "            best_model_path = f\"best_model_weighted_{'_'.join(sorted(ACTIVE_STREAMS))}_ep{epoch + 1}.pth\"\n",
    "            torch.save(model.state_dict(), best_model_path)\n",
    "            print(f\"  ✓ new best model saved → {best_model_path} (F1 {best_val_f1:.4f})\")\n",
    "\n",
    "    print(\"\\n--- Training finished ---\")\n",
    "\n",
    "    # --------------------------- plots ---------------------------------------\n",
    "    print(\"\\nPlotting training curves …\")\n",
    "    fig, ax = plt.subplots(1, 2, figsize=(12, 5))\n",
    "\n",
    "    ax[0].plot(range(1, NUM_EPOCHS + 1), history[\"train_loss\"], label=\"Train\")\n",
    "    ax[0].plot(range(1, NUM_EPOCHS + 1), history[\"val_loss\"], label=\"Val\")\n",
    "    ax[0].set_xlabel(\"Epoch\")\n",
    "    ax[0].set_ylabel(\"Loss\")\n",
    "    ax[0].set_title(\"Loss curve\")\n",
    "    ax[0].legend()\n",
    "    ax[0].grid(True)\n",
    "\n",
    "    ax[1].plot(range(1, NUM_EPOCHS + 1), history[\"train_acc\"], label=\"Train Acc\")\n",
    "    ax[1].plot(range(1, NUM_EPOCHS + 1), history[\"val_acc\"], label=\"Val Acc\")\n",
    "    ax[1].plot(range(1, NUM_EPOCHS + 1), history[\"val_f1\"], \"--\", label=\"Val F1\")\n",
    "    ax[1].set_xlabel(\"Epoch\")\n",
    "    ax[1].set_ylabel(\"Metric\")\n",
    "    ax[1].set_title(\"Accuracy & F1\")\n",
    "    ax[1].legend()\n",
    "    ax[1].grid(True)\n",
    "\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "    # ------------------- final evaluation (best model) -----------------------\n",
    "    print(\"\\n--- Final Evaluation on Validation set ---\")\n",
    "    if best_model_path and os.path.exists(best_model_path):\n",
    "        try:\n",
    "            model.load_state_dict(torch.load(best_model_path, map_location=DEVICE))\n",
    "            print(f\"Loaded best model: {best_model_path}\")\n",
    "        except Exception as e:\n",
    "            print(f\"Warning: could not load best model ({e}).  Using last epoch params.\")\n",
    "    else:\n",
    "        print(\"Warning: best model not found, using last epoch parameters.\")\n",
    "\n",
    "    final_metrics = evaluate_epoch(model, val_loader, criterion, DEVICE)\n",
    "    y_true, y_pred = get_predictions_and_labels(model, val_loader, DEVICE)\n",
    "    cm = confusion_matrix(y_true, y_pred, labels=[0, 1])\n",
    "\n",
    "    print(\"\\n--- Final metrics (Weighted Avg Fusion) ---\")\n",
    "    for k, v in final_metrics.items():\n",
    "        print(f\"{k:<10}: {v:.4f}\")\n",
    "\n",
    "    print(f\"(Best validation F1 during training: {best_val_f1:.4f})\")\n",
    "\n",
    "    ConfusionMatrixDisplay(cm, display_labels=[\"Not Crossing\", \"Crossing\"]).plot(\n",
    "        cmap=plt.cm.Blues\n",
    "    )\n",
    "    plt.title(\"Confusion Matrix\")\n",
    "    plt.show()\n",
    "\n",
    "    # ------------------- inspect learned fusion weights ----------------------\n",
    "    if hasattr(model, \"fusion_weights\"):\n",
    "        w = torch.softmax(model.fusion_weights, 0).detach().cpu().numpy()\n",
    "        print(\"\\n--- Learned fusion weights ---\")\n",
    "        for stream, weight in zip(model.stream_names, w):\n",
    "            print(f\"{stream:<15}: {weight:.4f}\")\n",
    "        print(\"-\" * 30)\n",
    "\n",
    "    print(\"\\n--- Script complete ---\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6e2e0839",
   "metadata": {
    "papermill": {
     "duration": 0.015712,
     "end_time": "2025-05-01T13:17:02.951596",
     "exception": false,
     "start_time": "2025-05-01T13:17:02.935884",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 6993690,
     "sourceId": 11201333,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6993708,
     "sourceId": 11201362,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6993722,
     "sourceId": 11201388,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6993740,
     "sourceId": 11201422,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6993794,
     "sourceId": 11201506,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6993809,
     "sourceId": 11201543,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7034191,
     "sourceId": 11255589,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7127490,
     "sourceId": 11382982,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7142036,
     "sourceId": 11402679,
     "sourceType": "datasetVersion"
    },
    {
     "modelId": 279383,
     "modelInstanceId": 258142,
     "sourceId": 302300,
     "sourceType": "modelInstanceVersion"
    },
    {
     "modelId": 283333,
     "modelInstanceId": 262207,
     "sourceId": 307831,
     "sourceType": "modelInstanceVersion"
    },
    {
     "modelId": 288527,
     "modelInstanceId": 267476,
     "sourceId": 316944,
     "sourceType": "modelInstanceVersion"
    },
    {
     "modelId": 297682,
     "modelInstanceId": 276781,
     "sourceId": 329886,
     "sourceType": "modelInstanceVersion"
    },
    {
     "modelId": 297702,
     "modelInstanceId": 276800,
     "sourceId": 329908,
     "sourceType": "modelInstanceVersion"
    },
    {
     "isSourceIdPinned": true,
     "modelId": 314775,
     "modelInstanceId": 294156,
     "sourceId": 352620,
     "sourceType": "modelInstanceVersion"
    }
   ],
   "dockerImageVersionId": 30918,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4106.003697,
   "end_time": "2025-05-01T13:17:06.401518",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-01T12:08:40.397821",
   "version": "2.6.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "00bd783afec041b188a2d4832fb8af51": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "029f6cac00df40a8a76da388baf6253f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7bd3714969b44a5e808461a61c886b1e",
       "placeholder": "​",
       "style": "IPY_MODEL_bb01d9d031f04d9db55c3651fd3cf7ac",
       "tabbable": null,
       "tooltip": null,
       "value": " 3234/3235 [03:13&lt;00:00, 16.19it/s]"
      }
     },
     "04066e20ee134530b6a5f29d0218a85f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "04455c20175247c295f9d7766ca3c732": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "04d6fe76037e43f48b2268dd84f1a69f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "07f7285eb9ff438a92b3bd27d3d49276": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "09c7512379c642eaac47ee78378cf37b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "09ed117c7e5d4defa13b0d0131e94094": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_312917b5977f44bf9f8a2b745bba5449",
       "placeholder": "​",
       "style": "IPY_MODEL_1d762084ab854a5896c33c97a219350b",
       "tabbable": null,
       "tooltip": null,
       "value": " 2414/2416 [01:57&lt;00:00, 11.79it/s]"
      }
     },
     "0a226eb78343456594eb3a31c188a5f7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "0a22f180f3834d5e84d8246962989dc1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "0a27560192b34fcf9ece68df60d2b2e4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_9aaddc47fead49939389caa2d57cbe3c",
        "IPY_MODEL_0af6783eed2a4623a7469406a7d99196",
        "IPY_MODEL_81492dc52d644902817b4779af8e50cf"
       ],
       "layout": "IPY_MODEL_69436bad8dbb403e8fc96a84a941b793",
       "tabbable": null,
       "tooltip": null
      }
     },
     "0a3950abf5a64d70b5d108d931db753b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_757a5641073d4afc864b7287e670da41",
       "placeholder": "​",
       "style": "IPY_MODEL_72323abec65049b3bd6917cceed702ce",
       "tabbable": null,
       "tooltip": null,
       "value": " 3233/3235 [03:14&lt;00:00, 15.92it/s]"
      }
     },
     "0af6783eed2a4623a7469406a7d99196": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_1906b7b5375c40b4bfe4008acd02a28e",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_daf7c671294e4098a802684d5b994d8d",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "0bba6def1bf04a52ad59338d87868a87": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "0c317cb33f734b268367f44d801a4a02": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "0c8fceb00b8340cd86545b5a0bd976b8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "0d35e5478c194fe58eb16901bf6cfa03": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_a662e26817b64408bb35f94ea802d3af",
        "IPY_MODEL_51f81ad3a39e4ae5a6ee5822a3f600e8",
        "IPY_MODEL_93c8e6eefde44892a7601e0977f1186e"
       ],
       "layout": "IPY_MODEL_f0fdbe8db1c346c8b3c0e837922bd6c2",
       "tabbable": null,
       "tooltip": null
      }
     },
     "0dd8c513476e45a8a5ecf460ef4ba4b0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "0e180196bcaf497f924ee3aa593888bd": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0e650bbb0bc445bc895894091d560b62": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "0f054a9b8d83452994aaba9a1050b90d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "0f815bbf9499480cb1d6c99c19adeb2f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "126a347d61404b49a219f87b737dda58": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_d14119e693754a5fa18579baac088996",
        "IPY_MODEL_87da856f7a9a42a8aee9df077561e505",
        "IPY_MODEL_9e2d27be90594692849e7170cf5c52af"
       ],
       "layout": "IPY_MODEL_3d1c186cd45c4a5f9833e463aeb69141",
       "tabbable": null,
       "tooltip": null
      }
     },
     "13bec828cf904916a65fb8e512bb5ba1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_69eb12fa5d5b4debb4c393a7aa443799",
       "placeholder": "​",
       "style": "IPY_MODEL_7f7d69895937416e83bea9d520af1969",
       "tabbable": null,
       "tooltip": null,
       "value": " 2/? [00:00&lt;00:00, 13.98it/s]"
      }
     },
     "149a6dc30a534a3aa679b204cb4c1e2b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_f2a2da84d89d43b58d3bb8052b08cf07",
        "IPY_MODEL_473312fee3514b709334b19f73b1e1bb",
        "IPY_MODEL_029f6cac00df40a8a76da388baf6253f"
       ],
       "layout": "IPY_MODEL_b2e968ec6d1d4844ad26fce67595c987",
       "tabbable": null,
       "tooltip": null
      }
     },
     "14da482ec1614acfbc7b9c7d066d2059": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3fcff261535f4b41b062aa9d048e92c6",
       "placeholder": "​",
       "style": "IPY_MODEL_21c1a7cfc4c6418fb8c0360f854d09a5",
       "tabbable": null,
       "tooltip": null,
       "value": ""
      }
     },
     "159b755857164122af80c40f385d8237": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "15bac02d14f348608bc19cda46a46f57": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "1906b7b5375c40b4bfe4008acd02a28e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "198748889240464bb5e2b45bae20e85b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "19e3ba4375f8436db075aff095d10993": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_14da482ec1614acfbc7b9c7d066d2059",
        "IPY_MODEL_4d8f824a7de242319267810de2b923dd",
        "IPY_MODEL_d4d408bceb9d425a824a96b93d5fc3dd"
       ],
       "layout": "IPY_MODEL_96c5c79b6b51454c903dcc850b6daa26",
       "tabbable": null,
       "tooltip": null
      }
     },
     "1a3eacbce85646a8ba8476a2fbafe52a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1aa1fc3c1b3f44729ba90e8109bc2948": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_be26e00ba1d84110b3dab25b8d62b8dc",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_314fdd5c8d5d44d6a61a4af3a322a21a",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "1bc9f04c129845baa39fc206022031df": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1c08e2670fae4b0595d5380414427edd": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1c61bebbd6cb4dcebf3dc68332c052f6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1d6d4cfa62e14373a395e2ae51fdeeff": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "1d762084ab854a5896c33c97a219350b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "1e5a73ecea954fb38b4fb8b9ee6590c3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_41e317cdfc294a5ab68b860ff9a03abd",
        "IPY_MODEL_7c58260bf8ca4656a7652b25490b1928",
        "IPY_MODEL_8015330fc49844d5aab8c5b8d194175a"
       ],
       "layout": "IPY_MODEL_159b755857164122af80c40f385d8237",
       "tabbable": null,
       "tooltip": null
      }
     },
     "1f7afc7e8a2c48cda13cb4633a0b05c9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e15dc6cb7dfa45cca0da9ad330bd0da1",
       "max": 3235.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_81179d44f0db4bb9ad3b06b500306441",
       "tabbable": null,
       "tooltip": null,
       "value": 3235.0
      }
     },
     "1fe73a770bb74843a1b28daf0b29ecca": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "203820b2fb2f427f9f549a187a9ca3eb": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "207f099e9bf94d35904c36655ccfc93a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "20c4b71bebb44a7db71857a9b03b178e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "20df27f1fae546849208dd807e9bbf8d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "21c1a7cfc4c6418fb8c0360f854d09a5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "220efbb4974c48a7bef50164d11067a5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_3a7b48e963b54cbbb9d5b39e1ea9e3dc",
        "IPY_MODEL_d59a96da38d449eda8d05d787799e673",
        "IPY_MODEL_71b68f25642d4f08bf67073350b28d96"
       ],
       "layout": "IPY_MODEL_25c6b52b5c9f459180938af2ac424316",
       "tabbable": null,
       "tooltip": null
      }
     },
     "23833c9b7cab44ff89b0f1d0d86af7a8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "23aef3758aae4c4fb92433515b41cf64": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "240610b7a97a40dc801a26ed3fe0f81a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "244483092ba64888af879f79f9131ad7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2540b3de64f947b997148baf1382f2c6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "254f775e3dbc453b9482c3b12ae656d6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_79455135f2e744e98d84823b3e148c2e",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_adeaffd7d6b042148a0a95f0e65befdc",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "25c6b52b5c9f459180938af2ac424316": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "26450c007b0b480eb9be04aa641451fb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "265c30f63fa843aea19f2b2164e68103": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "26e2bd70ad2f4ed89b517f181bfc8eb7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f5d83bd981434acb8f46dece30afb7ec",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_55a39c79675143889a46ddb1004c32fd",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "278ba0db4ff94726a2f036651b81f0f5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_702edcb1ddc74e3c80dfc5b07cc45b88",
        "IPY_MODEL_acd413c9c9e34b8e82b70e3922ec1451",
        "IPY_MODEL_49206bca298b4f62b5d3555ae77e3fdf"
       ],
       "layout": "IPY_MODEL_0a22f180f3834d5e84d8246962989dc1",
       "tabbable": null,
       "tooltip": null
      }
     },
     "296f7b5251fd453792e723a6e5fa386f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "2996af4df70a4b7cb4acb5a59106a314": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "2a4b7428e80746a7b47dc1ad560178d8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2c88385209534db6916bcae56f5e9b5a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "2fd9e673e34e4ce1b30c8d18c0bd64e4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "312917b5977f44bf9f8a2b745bba5449": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "314fdd5c8d5d44d6a61a4af3a322a21a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "31863ed34b8e47eaa0f0c5e33fba796b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3190396a9fcb42e2a8a4af95121499c1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_889d41c68f5e4b8d9dcd0df96eadddc6",
       "placeholder": "​",
       "style": "IPY_MODEL_61b18442c71e48fc96762ddf3f24bf29",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "333f1545c29e427890227d9c38c07e42": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_cb1d350404d94a3989a1fb74fb519d04",
        "IPY_MODEL_dd32e9400cbb46d399b86453a5d7cf99",
        "IPY_MODEL_0a3950abf5a64d70b5d108d931db753b"
       ],
       "layout": "IPY_MODEL_ff9650ecf2654a55a16fe6ee065f7d0d",
       "tabbable": null,
       "tooltip": null
      }
     },
     "33a6ebd1358a43bb969e224af8074990": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "35c06fd894b64cc6921851e83a89aa62": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "361f4da1820c442984ae2316af99f990": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_4815e0018630468ca5ae63ee2e7c3fad",
        "IPY_MODEL_8ff899cfb8164ccc87605b4bec3f5103",
        "IPY_MODEL_60614a1478b844aeb5a1c6a6171b0632"
       ],
       "layout": "IPY_MODEL_d262b4be8e524c03826083ab3968fee4",
       "tabbable": null,
       "tooltip": null
      }
     },
     "36e56d1a54554e8ab66f4ce8521ff456": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_41eda0f11606480dac8677343c7f191c",
       "placeholder": "​",
       "style": "IPY_MODEL_98395f6395694dc1b8689c8eba71c0ad",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "3944c40fb54b46f8b11b91dbb573817a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "3a7b48e963b54cbbb9d5b39e1ea9e3dc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_203820b2fb2f427f9f549a187a9ca3eb",
       "placeholder": "​",
       "style": "IPY_MODEL_5e4f849e025944fd9c8b11d869a1fee5",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "3a895e7f37de443eaf217101d1451a93": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "3bb2c6272bcd4a41834a3c60b33f33b1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "3c8487f44c1e4d91a3493d72e45d298c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "3d1c186cd45c4a5f9833e463aeb69141": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "3dfaf1a53f634c04a6ab14e902f7ad39": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3fcff261535f4b41b062aa9d048e92c6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "402493abdfe24e7abeaa26a2c29372d4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_86fca52693fb4982a249ad6762e58168",
        "IPY_MODEL_cf3193098c384fbaacd73e51037ee4d8",
        "IPY_MODEL_901ca415be2a4dbc808cce0ca3a2fed4"
       ],
       "layout": "IPY_MODEL_713b3da9efd74e67b0bff38d49bd4c92",
       "tabbable": null,
       "tooltip": null
      }
     },
     "41e317cdfc294a5ab68b860ff9a03abd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_23833c9b7cab44ff89b0f1d0d86af7a8",
       "placeholder": "​",
       "style": "IPY_MODEL_a308524b45144ed09986ce226dc9406b",
       "tabbable": null,
       "tooltip": null,
       "value": "Generating CM Data: 100%"
      }
     },
     "41eda0f11606480dac8677343c7f191c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4219b5c0732246c9b14d66072032b4e3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "4380e04ed0124202a24dfaf9b35aabdd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "458984648e66455ea023fa9572d446f2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "45b09981f7de4245825906a581c580d2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "4641d66b6e014843b40767fb9c21e0f5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_1bc9f04c129845baa39fc206022031df",
       "max": 3235.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_fb25e1980aba43a7b088f5cabbce8c6b",
       "tabbable": null,
       "tooltip": null,
       "value": 3235.0
      }
     },
     "46ae5099d8f640c3a89cc31fb61bae87": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "473312fee3514b709334b19f73b1e1bb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7882997d2a434b2993be798095a4657f",
       "max": 3235.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_6fbd346318864367b49562035c27b8e1",
       "tabbable": null,
       "tooltip": null,
       "value": 3235.0
      }
     },
     "47a5ce6be60f441e9f921b2f029225a7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_b3ee13bbddf44072a887eb1ecd7ddade",
       "placeholder": "​",
       "style": "IPY_MODEL_a7ff0bc2820f481fa6b287d9d6fa6429",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "4815e0018630468ca5ae63ee2e7c3fad": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_face6256abdb44c096414edb18433437",
       "placeholder": "​",
       "style": "IPY_MODEL_0e650bbb0bc445bc895894091d560b62",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "49206bca298b4f62b5d3555ae77e3fdf": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_da2e33a8d5f749db854d11dffd51029f",
       "placeholder": "​",
       "style": "IPY_MODEL_3c8487f44c1e4d91a3493d72e45d298c",
       "tabbable": null,
       "tooltip": null,
       "value": " 3233/3235 [03:13&lt;00:00, 16.62it/s]"
      }
     },
     "49b581aacf0b4262882a0514d195a81b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_1c08e2670fae4b0595d5380414427edd",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_e08943e05f3e42b0ab0dc635649198e7",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "4c915574421045e79ab9a0bc181e4758": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4d8f824a7de242319267810de2b923dd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "info",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0a226eb78343456594eb3a31c188a5f7",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_f5e377b4f1bd474e8facf75c3fc46982",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "4dd0fd97105948ddaa00dc402e21044d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_53ed5a5c90ea4f84a439a89c306753ed",
       "max": 281342.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_66d0c55c6d9b4b32a3ec1f8059cb6a4c",
       "tabbable": null,
       "tooltip": null,
       "value": 281342.0
      }
     },
     "51f81ad3a39e4ae5a6ee5822a3f600e8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_be37e3c147434d86915ab5d1a9111481",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_656d1647548b49899e29feba3fbaa255",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "52e67fe5fb2145a499bb7510048aa854": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "53ed5a5c90ea4f84a439a89c306753ed": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5516cf1a66c24ffcaf8b819a4f92aec6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "552e723f092d4e08ac2aa6113bd64a7d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "55a39c79675143889a46ddb1004c32fd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "55d7a07330b74382be7f3a3ac17cdf24": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5828ac7503c64bbe9db9d0d4a44fa60e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "5c30d3a1691d4ea2b3c435343a36385b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5c400122621841bf9e8aa9ac04171263": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "5d8519b96e5a4dce8b60ef740cae8757": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "5e4f849e025944fd9c8b11d869a1fee5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "5ebf7e866c9f4406a8a0f7bce4eba9ec": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_46ae5099d8f640c3a89cc31fb61bae87",
       "placeholder": "​",
       "style": "IPY_MODEL_6492f5515a914103a9b8b234fda24618",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "5ee1c6f8b87d4584ac71bc819dc3a7e8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4c915574421045e79ab9a0bc181e4758",
       "max": 3235.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_2540b3de64f947b997148baf1382f2c6",
       "tabbable": null,
       "tooltip": null,
       "value": 3235.0
      }
     },
     "5f5a1f00dc884333ad59d662a95e26d8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5ffed07a9f544ceeb5ac8047e17f7f64": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_d76e601843fc4d06a54d8e0adfb8e9db",
       "placeholder": "​",
       "style": "IPY_MODEL_f0bd479bc9244316bcb8ae96062b0738",
       "tabbable": null,
       "tooltip": null,
       "value": " 3233/3235 [03:12&lt;00:00, 16.36it/s]"
      }
     },
     "60614a1478b844aeb5a1c6a6171b0632": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_a99b6401905c46b3baa9a68246180132",
       "placeholder": "​",
       "style": "IPY_MODEL_0c8fceb00b8340cd86545b5a0bd976b8",
       "tabbable": null,
       "tooltip": null,
       "value": " 3233/3235 [03:15&lt;00:00, 16.18it/s]"
      }
     },
     "61b18442c71e48fc96762ddf3f24bf29": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "62c79a5dfd4348eb9afb8e4601fbe3ab": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_5ebf7e866c9f4406a8a0f7bce4eba9ec",
        "IPY_MODEL_4641d66b6e014843b40767fb9c21e0f5",
        "IPY_MODEL_80da564a6e3f4d088411b8403fa6c7ff"
       ],
       "layout": "IPY_MODEL_e333bb8bee6943488208cca0faa81b85",
       "tabbable": null,
       "tooltip": null
      }
     },
     "63028db457444e07b139d657e46dd18b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "636eb0de48154dc8a6d10811fca34a56": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_89344ebe63914b75bb834095891bad36",
       "placeholder": "​",
       "style": "IPY_MODEL_936a9028de514f1d9379dbc91f7c7cca",
       "tabbable": null,
       "tooltip": null,
       "value": " 3233/3235 [03:13&lt;00:00, 16.42it/s]"
      }
     },
     "637439178ad045109012bd8e8ee595fa": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_a1d3cba2df864b2b8771301d6dad0564",
       "placeholder": "​",
       "style": "IPY_MODEL_552e723f092d4e08ac2aa6113bd64a7d",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "6492f5515a914103a9b8b234fda24618": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "656d1647548b49899e29feba3fbaa255": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "6613b8a6feb749c89f211d807cf18776": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "66d0c55c6d9b4b32a3ec1f8059cb6a4c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "66e7f15250eb499e9807db52bf7baad7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "6807e27d7946442992c2592efb0c2a07": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "684ab8a829184f399cbd3299e983f520": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "6896adb0b67a4937b67410972ff830c0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "69436bad8dbb403e8fc96a84a941b793": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "69eb12fa5d5b4debb4c393a7aa443799": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6a2791f1dd8545258c3bfa61da36dfe6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_a9b60105a94b4b9ca58f4313eb33bd22",
        "IPY_MODEL_9e0c031c8dcb4d6187a89bce9ac4720b",
        "IPY_MODEL_13bec828cf904916a65fb8e512bb5ba1"
       ],
       "layout": "IPY_MODEL_c7078483cec1499ba14f33601a5fb451",
       "tabbable": null,
       "tooltip": null
      }
     },
     "6c6cd5a3860e482a9046102ccaf5b768": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f452c8081903412290c3d2d70e5673b7",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_2c88385209534db6916bcae56f5e9b5a",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "6c755d3a63a24ad7857dac9a09638314": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "6e2d4dbe2d5f4f06ac5471059c88ec62": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6f5bba4b040c4bad8a9a12572dc66761": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6fbd346318864367b49562035c27b8e1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "6fcfcad13dc444e2ad7773b4b0600415": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "702edcb1ddc74e3c80dfc5b07cc45b88": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7bdb6dfdfac64b35b5b3ee7c97e42bbc",
       "placeholder": "​",
       "style": "IPY_MODEL_66e7f15250eb499e9807db52bf7baad7",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "7068428504ff40ae913cba5c8bb773b9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "713b3da9efd74e67b0bff38d49bd4c92": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "71b68f25642d4f08bf67073350b28d96": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_1c61bebbd6cb4dcebf3dc68332c052f6",
       "placeholder": "​",
       "style": "IPY_MODEL_15bac02d14f348608bc19cda46a46f57",
       "tabbable": null,
       "tooltip": null,
       "value": " 2414/2416 [01:57&lt;00:00,  8.99it/s]"
      }
     },
     "72323abec65049b3bd6917cceed702ce": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "732cba8717e3455fb47c110ac2f3ad43": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "74e9ee59cc9e4c04b081b58924e66da7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "757a5641073d4afc864b7287e670da41": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7882997d2a434b2993be798095a4657f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "78b01cfdbd2846e58bdc7e6a20b09bf4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7ea76cf47efa4171b3ca27a0d60397bf",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_1d6d4cfa62e14373a395e2ae51fdeeff",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "79455135f2e744e98d84823b3e148c2e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7ba09604a9af4b62be5d3bd7ead98ed5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "7bd3714969b44a5e808461a61c886b1e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7bdb6dfdfac64b35b5b3ee7c97e42bbc": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7c58260bf8ca4656a7652b25490b1928": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_63028db457444e07b139d657e46dd18b",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_ca756c45aeff4258bf010a85b0388432",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "7cf11c1792954f1db30304059aef55e3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "7d9eca47e48847b6a688759140ce296f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7e5c3a4e6e37416f9fbc04113553a6b2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7ea76cf47efa4171b3ca27a0d60397bf": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7f7d69895937416e83bea9d520af1969": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "8015330fc49844d5aab8c5b8d194175a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3dfaf1a53f634c04a6ab14e902f7ad39",
       "placeholder": "​",
       "style": "IPY_MODEL_b716bc630cc24bdd93da846cde0dbb52",
       "tabbable": null,
       "tooltip": null,
       "value": " 2414/2416 [01:56&lt;00:00, 13.00it/s]"
      }
     },
     "80da564a6e3f4d088411b8403fa6c7ff": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_04455c20175247c295f9d7766ca3c732",
       "placeholder": "​",
       "style": "IPY_MODEL_35c06fd894b64cc6921851e83a89aa62",
       "tabbable": null,
       "tooltip": null,
       "value": " 3233/3235 [03:15&lt;00:00, 16.27it/s]"
      }
     },
     "81179d44f0db4bb9ad3b06b500306441": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "81492dc52d644902817b4779af8e50cf": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_00bd783afec041b188a2d4832fb8af51",
       "placeholder": "​",
       "style": "IPY_MODEL_0dd8c513476e45a8a5ecf460ef4ba4b0",
       "tabbable": null,
       "tooltip": null,
       "value": " 2415/2416 [01:58&lt;00:00, 13.15it/s]"
      }
     },
     "86fca52693fb4982a249ad6762e58168": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_b9ab3f85b03443c4a3894a8b4bd99045",
       "placeholder": "​",
       "style": "IPY_MODEL_6896adb0b67a4937b67410972ff830c0",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "87da856f7a9a42a8aee9df077561e505": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_6f5bba4b040c4bad8a9a12572dc66761",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_e2c1acf3fbf942959db903681b823220",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "887a8d26a3e344b39fbe0eefe0a54e7e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_6613b8a6feb749c89f211d807cf18776",
       "placeholder": "​",
       "style": "IPY_MODEL_684ab8a829184f399cbd3299e983f520",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "889d41c68f5e4b8d9dcd0df96eadddc6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "89344ebe63914b75bb834095891bad36": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8e268f42c6fa42449fcd229081222694": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "8ec1d242b18643a7b93af7c9a2427795": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "8f29992c1ffd4c0cb63dcd3ad27ba5dc": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8ff899cfb8164ccc87605b4bec3f5103": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7d9eca47e48847b6a688759140ce296f",
       "max": 3235.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_98829d280a074a13b3ab16f191f07981",
       "tabbable": null,
       "tooltip": null,
       "value": 3235.0
      }
     },
     "901ca415be2a4dbc808cce0ca3a2fed4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7068428504ff40ae913cba5c8bb773b9",
       "placeholder": "​",
       "style": "IPY_MODEL_8ec1d242b18643a7b93af7c9a2427795",
       "tabbable": null,
       "tooltip": null,
       "value": " 2416/2416 [01:58&lt;00:00, 15.17it/s]"
      }
     },
     "9178026e544f41deb376f2fcefb2ce4b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "91a82316860e46c39833191d4de37894": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "92c6b9938fca4ea8911947b18988ece4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ecac758c316a4eaeaaa425844579402b",
       "placeholder": "​",
       "style": "IPY_MODEL_207f099e9bf94d35904c36655ccfc93a",
       "tabbable": null,
       "tooltip": null,
       "value": "seq: 100%"
      }
     },
     "9350bd01390640368ea2a0e2cc2a91dd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_3190396a9fcb42e2a8a4af95121499c1",
        "IPY_MODEL_254f775e3dbc453b9482c3b12ae656d6",
        "IPY_MODEL_a14784a6651646509bf8216c0ab3bfef"
       ],
       "layout": "IPY_MODEL_cae19aa7bd5241ab8a905a9b3be13282",
       "tabbable": null,
       "tooltip": null
      }
     },
     "936a9028de514f1d9379dbc91f7c7cca": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "939f391bc98e4ae4a9a67dff77c4f8aa": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_52e67fe5fb2145a499bb7510048aa854",
       "placeholder": "​",
       "style": "IPY_MODEL_b0799d0eb4a743b289ef2e60b990ba02",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "93c8e6eefde44892a7601e0977f1186e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_2fd9e673e34e4ce1b30c8d18c0bd64e4",
       "placeholder": "​",
       "style": "IPY_MODEL_4219b5c0732246c9b14d66072032b4e3",
       "tabbable": null,
       "tooltip": null,
       "value": " 2414/2416 [01:56&lt;00:00, 13.02it/s]"
      }
     },
     "9404dd5e1ce04641b45dffa7795bca1c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_244483092ba64888af879f79f9131ad7",
       "max": 3235.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_b007f25971814b42b3e897de1a1c4414",
       "tabbable": null,
       "tooltip": null,
       "value": 3235.0
      }
     },
     "96b645a624b34d688020bbdab80916c3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "96c5c79b6b51454c903dcc850b6daa26": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "978d97bf9e244a63ac551e1ce9cf2062": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "98395f6395694dc1b8689c8eba71c0ad": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "98829d280a074a13b3ab16f191f07981": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "9aaddc47fead49939389caa2d57cbe3c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_6e2d4dbe2d5f4f06ac5471059c88ec62",
       "placeholder": "​",
       "style": "IPY_MODEL_b8e4e30477ed49ff869acff3fbd0f276",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "9e0c031c8dcb4d6187a89bce9ac4720b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "info",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9178026e544f41deb376f2fcefb2ce4b",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_ba5d8a3fa3d0435fa5170a5da5a43fbe",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "9e2d27be90594692849e7170cf5c52af": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c5d687e960844999bb8f1480ca80fd41",
       "placeholder": "​",
       "style": "IPY_MODEL_0bba6def1bf04a52ad59338d87868a87",
       "tabbable": null,
       "tooltip": null,
       "value": " 2415/2416 [01:57&lt;00:00, 12.85it/s]"
      }
     },
     "9f5d99c33f7a4f8c84e698e1b5991736": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5c30d3a1691d4ea2b3c435343a36385b",
       "placeholder": "​",
       "style": "IPY_MODEL_0f054a9b8d83452994aaba9a1050b90d",
       "tabbable": null,
       "tooltip": null,
       "value": " 3235/3235 [03:14&lt;00:00, 16.66it/s]"
      }
     },
     "9f8392b9b876475f875711e4882c78a0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a07dd5eb13be439393c7a692238e914a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a0e141d9a26840ebaa10e0ffe900e4b6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_aefe5021d08a4c5695d8006e2617e4f4",
        "IPY_MODEL_49b581aacf0b4262882a0514d195a81b",
        "IPY_MODEL_d8984441070f4bd8b833953b3100049d"
       ],
       "layout": "IPY_MODEL_2996af4df70a4b7cb4acb5a59106a314",
       "tabbable": null,
       "tooltip": null
      }
     },
     "a14784a6651646509bf8216c0ab3bfef": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_1a3eacbce85646a8ba8476a2fbafe52a",
       "placeholder": "​",
       "style": "IPY_MODEL_c62ec2b8f7c4455f8bf2a016b9f2bc9e",
       "tabbable": null,
       "tooltip": null,
       "value": " 2414/2416 [01:58&lt;00:00, 12.74it/s]"
      }
     },
     "a1d3cba2df864b2b8771301d6dad0564": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a2dc1f90a50f416fbd92bc753d3968f8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5f5a1f00dc884333ad59d662a95e26d8",
       "max": 3235.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_ac2a2cb6a331454b8c77acf81e0ec9db",
       "tabbable": null,
       "tooltip": null,
       "value": 3235.0
      }
     },
     "a308524b45144ed09986ce226dc9406b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "a390b54e9bb2426088c1159d7bbfd974": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_2a4b7428e80746a7b47dc1ad560178d8",
       "placeholder": "​",
       "style": "IPY_MODEL_5d8519b96e5a4dce8b60ef740cae8757",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "a5d7d7e90ec24874be1e1548a75fc932": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a662e26817b64408bb35f94ea802d3af": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_6807e27d7946442992c2592efb0c2a07",
       "placeholder": "​",
       "style": "IPY_MODEL_296f7b5251fd453792e723a6e5fa386f",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "a6f3689384d046a9908a599e200ce7ef": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "a7660bade6974622b504dd72713d684e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a7ff0bc2820f481fa6b287d9d6fa6429": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "a94e45b3807144f1ab62bcc95baca6fd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f3324937455a45bda6b6c9dfa4a0d63a",
       "max": 3235.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_20c4b71bebb44a7db71857a9b03b178e",
       "tabbable": null,
       "tooltip": null,
       "value": 3235.0
      }
     },
     "a99b6401905c46b3baa9a68246180132": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a9b60105a94b4b9ca58f4313eb33bd22": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e0574f284af74d1a9a756e8d98d8ec2b",
       "placeholder": "​",
       "style": "IPY_MODEL_5828ac7503c64bbe9db9d0d4a44fa60e",
       "tabbable": null,
       "tooltip": null,
       "value": ""
      }
     },
     "ac2a2cb6a331454b8c77acf81e0ec9db": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "acd413c9c9e34b8e82b70e3922ec1451": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_55d7a07330b74382be7f3a3ac17cdf24",
       "max": 3235.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_3944c40fb54b46f8b11b91dbb573817a",
       "tabbable": null,
       "tooltip": null,
       "value": 3235.0
      }
     },
     "adeaffd7d6b042148a0a95f0e65befdc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "ae68f528e72d424f9e9b464c335f21d3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_36e56d1a54554e8ab66f4ce8521ff456",
        "IPY_MODEL_5ee1c6f8b87d4584ac71bc819dc3a7e8",
        "IPY_MODEL_9f5d99c33f7a4f8c84e698e1b5991736"
       ],
       "layout": "IPY_MODEL_caa60b7c87bf41529090bf910a5739aa",
       "tabbable": null,
       "tooltip": null
      }
     },
     "aefe5021d08a4c5695d8006e2617e4f4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0f815bbf9499480cb1d6c99c19adeb2f",
       "placeholder": "​",
       "style": "IPY_MODEL_198748889240464bb5e2b45bae20e85b",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "b007f25971814b42b3e897de1a1c4414": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "b0799d0eb4a743b289ef2e60b990ba02": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "b169d4bc80144eb3836a84714ed243c0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_939f391bc98e4ae4a9a67dff77c4f8aa",
        "IPY_MODEL_26e2bd70ad2f4ed89b517f181bfc8eb7",
        "IPY_MODEL_edb1deb9ca6d4efd8bc2647e57771fcd"
       ],
       "layout": "IPY_MODEL_04d6fe76037e43f48b2268dd84f1a69f",
       "tabbable": null,
       "tooltip": null
      }
     },
     "b2e968ec6d1d4844ad26fce67595c987": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "b3ee13bbddf44072a887eb1ecd7ddade": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b716bc630cc24bdd93da846cde0dbb52": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "b84783cd11034c14bd769dd1291cafb3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_07f7285eb9ff438a92b3bd27d3d49276",
       "placeholder": "​",
       "style": "IPY_MODEL_96b645a624b34d688020bbdab80916c3",
       "tabbable": null,
       "tooltip": null,
       "value": " 3234/3235 [03:15&lt;00:00, 16.08it/s]"
      }
     },
     "b8e4e30477ed49ff869acff3fbd0f276": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "b9ab3f85b03443c4a3894a8b4bd99045": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ba0ecca90d704d43863d266af84799d7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_fb4e59e38f8f418eaeba57715e441d04",
        "IPY_MODEL_78b01cfdbd2846e58bdc7e6a20b09bf4",
        "IPY_MODEL_c1ac501f3dc74b13a202715d6f5ad984"
       ],
       "layout": "IPY_MODEL_0c317cb33f734b268367f44d801a4a02",
       "tabbable": null,
       "tooltip": null
      }
     },
     "ba5d8a3fa3d0435fa5170a5da5a43fbe": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "baba944c72f444918c541d2476c19d67": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_47a5ce6be60f441e9f921b2f029225a7",
        "IPY_MODEL_a2dc1f90a50f416fbd92bc753d3968f8",
        "IPY_MODEL_5ffed07a9f544ceeb5ac8047e17f7f64"
       ],
       "layout": "IPY_MODEL_732cba8717e3455fb47c110ac2f3ad43",
       "tabbable": null,
       "tooltip": null
      }
     },
     "bb01d9d031f04d9db55c3651fd3cf7ac": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "bcecced9bc0140b5a496e50b3e9c97e2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "bd5c1ab4f1504a28ad200d17004565f0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "be26e00ba1d84110b3dab25b8d62b8dc": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "be37e3c147434d86915ab5d1a9111481": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c1ac501f3dc74b13a202715d6f5ad984": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7e5c3a4e6e37416f9fbc04113553a6b2",
       "placeholder": "​",
       "style": "IPY_MODEL_26450c007b0b480eb9be04aa641451fb",
       "tabbable": null,
       "tooltip": null,
       "value": " 2414/2416 [01:57&lt;00:00, 12.23it/s]"
      }
     },
     "c1c39082f47a45359286567e41946bee": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c5d687e960844999bb8f1480ca80fd41": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c62ec2b8f7c4455f8bf2a016b9f2bc9e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "c6e22eb8978741ecb4591ad7cba8cd62": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_e0dc999edd9b442793fcfcab6c966e77",
        "IPY_MODEL_cfe60d3677634da88924cb9866dc3547",
        "IPY_MODEL_e0d8af3445134e00a6372451c7e0408a"
       ],
       "layout": "IPY_MODEL_cec32f99d2d7477980dbdc54ff51a583",
       "tabbable": null,
       "tooltip": null
      }
     },
     "c7078483cec1499ba14f33601a5fb451": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "c8b60285cca642caa9726fc0f1962c9b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ca73e99a56b644a8a007264d2f64d753": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_bd5c1ab4f1504a28ad200d17004565f0",
       "placeholder": "​",
       "style": "IPY_MODEL_a6f3689384d046a9908a599e200ce7ef",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "ca756c45aeff4258bf010a85b0388432": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "caa60b7c87bf41529090bf910a5739aa": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "cae19aa7bd5241ab8a905a9b3be13282": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "cb1d350404d94a3989a1fb74fb519d04": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_bcecced9bc0140b5a496e50b3e9c97e2",
       "placeholder": "​",
       "style": "IPY_MODEL_3a895e7f37de443eaf217101d1451a93",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "cd24c88f1bd64104adf224202898bd1d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "cec32f99d2d7477980dbdc54ff51a583": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "cf3193098c384fbaacd73e51037ee4d8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c8b60285cca642caa9726fc0f1962c9b",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_ea8a7373d56c49dca2fa7a4ec2f86999",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "cfe60d3677634da88924cb9866dc3547": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "info",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_91a82316860e46c39833191d4de37894",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_6fcfcad13dc444e2ad7773b4b0600415",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "d0b4e93713ee44619eb505fe44446289": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_ca73e99a56b644a8a007264d2f64d753",
        "IPY_MODEL_1aa1fc3c1b3f44729ba90e8109bc2948",
        "IPY_MODEL_09ed117c7e5d4defa13b0d0131e94094"
       ],
       "layout": "IPY_MODEL_5c400122621841bf9e8aa9ac04171263",
       "tabbable": null,
       "tooltip": null
      }
     },
     "d14119e693754a5fa18579baac088996": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_33a6ebd1358a43bb969e224af8074990",
       "placeholder": "​",
       "style": "IPY_MODEL_6c755d3a63a24ad7857dac9a09638314",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "d20b6dc7d63645c8a79bc4f2cb19209a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d255a363535a44a38f8576feddd7758f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "d262b4be8e524c03826083ab3968fee4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "d3f8d4d303984a44a4ae3ec21635820a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "d4d408bceb9d425a824a96b93d5fc3dd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_31863ed34b8e47eaa0f0c5e33fba796b",
       "placeholder": "​",
       "style": "IPY_MODEL_d3f8d4d303984a44a4ae3ec21635820a",
       "tabbable": null,
       "tooltip": null,
       "value": " 16/? [00:00&lt;00:00, 19.88it/s]"
      }
     },
     "d59a96da38d449eda8d05d787799e673": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_240610b7a97a40dc801a26ed3fe0f81a",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_23aef3758aae4c4fb92433515b41cf64",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "d76e601843fc4d06a54d8e0adfb8e9db": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d8984441070f4bd8b833953b3100049d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_458984648e66455ea023fa9572d446f2",
       "placeholder": "​",
       "style": "IPY_MODEL_f0c221ee9e574bd5a01e2e454cbbfa79",
       "tabbable": null,
       "tooltip": null,
       "value": " 2413/2416 [01:57&lt;00:00, 11.45it/s]"
      }
     },
     "d8a36a07d57d4bf493314cf0c188dc82": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c1c39082f47a45359286567e41946bee",
       "placeholder": "​",
       "style": "IPY_MODEL_3bb2c6272bcd4a41834a3c60b33f33b1",
       "tabbable": null,
       "tooltip": null,
       "value": " 281342/281342 [11:07&lt;00:00, 429.95it/s]"
      }
     },
     "d8bb7f59127846dc9db00574ad98e8a3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "d976444acb73454aa5574e05183e3c87": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_a390b54e9bb2426088c1159d7bbfd974",
        "IPY_MODEL_1f7afc7e8a2c48cda13cb4633a0b05c9",
        "IPY_MODEL_636eb0de48154dc8a6d10811fca34a56"
       ],
       "layout": "IPY_MODEL_7cf11c1792954f1db30304059aef55e3",
       "tabbable": null,
       "tooltip": null
      }
     },
     "da2e33a8d5f749db854d11dffd51029f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "daf7c671294e4098a802684d5b994d8d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "dd32e9400cbb46d399b86453a5d7cf99": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_a5d7d7e90ec24874be1e1548a75fc932",
       "max": 3235.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_7ba09604a9af4b62be5d3bd7ead98ed5",
       "tabbable": null,
       "tooltip": null,
       "value": 3235.0
      }
     },
     "debc3559d3614dedbdf77b8c709fe83a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_ef8527e2dccd4117a64b48e375d9dc17",
        "IPY_MODEL_9404dd5e1ce04641b45dffa7795bca1c",
        "IPY_MODEL_f8e7c97022b343c285c3ead2e4150c86"
       ],
       "layout": "IPY_MODEL_45b09981f7de4245825906a581c580d2",
       "tabbable": null,
       "tooltip": null
      }
     },
     "e0574f284af74d1a9a756e8d98d8ec2b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e08943e05f3e42b0ab0dc635649198e7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "e0d8af3445134e00a6372451c7e0408a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_09c7512379c642eaac47ee78378cf37b",
       "placeholder": "​",
       "style": "IPY_MODEL_74e9ee59cc9e4c04b081b58924e66da7",
       "tabbable": null,
       "tooltip": null,
       "value": " 1/? [00:00&lt;00:00,  6.75it/s]"
      }
     },
     "e0dc999edd9b442793fcfcab6c966e77": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9f8392b9b876475f875711e4882c78a0",
       "placeholder": "​",
       "style": "IPY_MODEL_4380e04ed0124202a24dfaf9b35aabdd",
       "tabbable": null,
       "tooltip": null,
       "value": ""
      }
     },
     "e0e5210d250f4bd5ada80334f8ebc9f7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_637439178ad045109012bd8e8ee595fa",
        "IPY_MODEL_6c6cd5a3860e482a9046102ccaf5b768",
        "IPY_MODEL_fc2238269e8349a983d018a8756fb0fa"
       ],
       "layout": "IPY_MODEL_265c30f63fa843aea19f2b2164e68103",
       "tabbable": null,
       "tooltip": null
      }
     },
     "e15dc6cb7dfa45cca0da9ad330bd0da1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e2c1acf3fbf942959db903681b823220": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "e333bb8bee6943488208cca0faa81b85": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "ea8a7373d56c49dca2fa7a4ec2f86999": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "ecac758c316a4eaeaaa425844579402b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "edb1deb9ca6d4efd8bc2647e57771fcd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_a07dd5eb13be439393c7a692238e914a",
       "placeholder": "​",
       "style": "IPY_MODEL_cd24c88f1bd64104adf224202898bd1d",
       "tabbable": null,
       "tooltip": null,
       "value": " 2415/2416 [01:57&lt;00:00, 12.76it/s]"
      }
     },
     "ef8527e2dccd4117a64b48e375d9dc17": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_d20b6dc7d63645c8a79bc4f2cb19209a",
       "placeholder": "​",
       "style": "IPY_MODEL_d8bb7f59127846dc9db00574ad98e8a3",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "f0bd479bc9244316bcb8ae96062b0738": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f0c221ee9e574bd5a01e2e454cbbfa79": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f0fdbe8db1c346c8b3c0e837922bd6c2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "f2a2da84d89d43b58d3bb8052b08cf07": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_8f29992c1ffd4c0cb63dcd3ad27ba5dc",
       "placeholder": "​",
       "style": "IPY_MODEL_d255a363535a44a38f8576feddd7758f",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "f3324937455a45bda6b6c9dfa4a0d63a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f452c8081903412290c3d2d70e5673b7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f598dece7a6a4b25b687f94a0e0e19f0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_92c6b9938fca4ea8911947b18988ece4",
        "IPY_MODEL_4dd0fd97105948ddaa00dc402e21044d",
        "IPY_MODEL_d8a36a07d57d4bf493314cf0c188dc82"
       ],
       "layout": "IPY_MODEL_a7660bade6974622b504dd72713d684e",
       "tabbable": null,
       "tooltip": null
      }
     },
     "f5d83bd981434acb8f46dece30afb7ec": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f5e377b4f1bd474e8facf75c3fc46982": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "f8e7c97022b343c285c3ead2e4150c86": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0e180196bcaf497f924ee3aa593888bd",
       "placeholder": "​",
       "style": "IPY_MODEL_8e268f42c6fa42449fcd229081222694",
       "tabbable": null,
       "tooltip": null,
       "value": " 3235/3235 [03:13&lt;00:00, 17.19it/s]"
      }
     },
     "face6256abdb44c096414edb18433437": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "fb25e1980aba43a7b088f5cabbce8c6b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "fb4e59e38f8f418eaeba57715e441d04": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_20df27f1fae546849208dd807e9bbf8d",
       "placeholder": "​",
       "style": "IPY_MODEL_1fe73a770bb74843a1b28daf0b29ecca",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "fbc4de422c604b61a156ca2bccebd49a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_887a8d26a3e344b39fbe0eefe0a54e7e",
        "IPY_MODEL_a94e45b3807144f1ab62bcc95baca6fd",
        "IPY_MODEL_b84783cd11034c14bd769dd1291cafb3"
       ],
       "layout": "IPY_MODEL_978d97bf9e244a63ac551e1ce9cf2062",
       "tabbable": null,
       "tooltip": null
      }
     },
     "fc2238269e8349a983d018a8756fb0fa": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5516cf1a66c24ffcaf8b819a4f92aec6",
       "placeholder": "​",
       "style": "IPY_MODEL_04066e20ee134530b6a5f29d0218a85f",
       "tabbable": null,
       "tooltip": null,
       "value": " 2414/2416 [01:57&lt;00:00, 12.63it/s]"
      }
     },
     "ff9650ecf2654a55a16fe6ee065f7d0d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
