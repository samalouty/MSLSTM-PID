{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":11201333,"sourceType":"datasetVersion","datasetId":6993690},{"sourceId":11201362,"sourceType":"datasetVersion","datasetId":6993708},{"sourceId":11201388,"sourceType":"datasetVersion","datasetId":6993722},{"sourceId":11201422,"sourceType":"datasetVersion","datasetId":6993740},{"sourceId":11201506,"sourceType":"datasetVersion","datasetId":6993794},{"sourceId":11201543,"sourceType":"datasetVersion","datasetId":6993809},{"sourceId":11255589,"sourceType":"datasetVersion","datasetId":7034191},{"sourceId":11382982,"sourceType":"datasetVersion","datasetId":7127490},{"sourceId":11402679,"sourceType":"datasetVersion","datasetId":7142036},{"sourceId":11684148,"sourceType":"datasetVersion","datasetId":7333398},{"sourceId":11720877,"sourceType":"datasetVersion","datasetId":7357780},{"sourceId":302300,"sourceType":"modelInstanceVersion","modelInstanceId":258142,"modelId":279383},{"sourceId":307831,"sourceType":"modelInstanceVersion","modelInstanceId":262207,"modelId":283333},{"sourceId":316944,"sourceType":"modelInstanceVersion","modelInstanceId":267476,"modelId":288527},{"sourceId":329886,"sourceType":"modelInstanceVersion","modelInstanceId":276781,"modelId":297682},{"sourceId":329908,"sourceType":"modelInstanceVersion","modelInstanceId":276800,"modelId":297702},{"sourceId":352620,"sourceType":"modelInstanceVersion","isSourceIdPinned":true,"modelInstanceId":294156,"modelId":314775}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!git clone https://github.com/aras62/PIE.git\n!unzip /content/PIE/annotations/annotations.zip -d /content/PIE\n!unzip /content/PIE/annotations/annotations_vehicle.zip -d /content/PIE\n# !git clone https://github.com/hustvl/YOLOP.git\n!mkdir /kaggle/working/PIE/content","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T13:27:07.771729Z","iopub.execute_input":"2025-04-19T13:27:07.772029Z","iopub.status.idle":"2025-04-19T13:27:08.263278Z","shell.execute_reply.started":"2025-04-19T13:27:07.771999Z","shell.execute_reply":"2025-04-19T13:27:08.262097Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"!pip install -q ultralytics opencv-python-headless ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-01T07:05:30.756957Z","iopub.execute_input":"2025-05-01T07:05:30.757137Z","iopub.status.idle":"2025-05-01T07:05:36.274800Z","shell.execute_reply.started":"2025-05-01T07:05:30.757119Z","shell.execute_reply":"2025-05-01T07:05:36.273824Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import Dataset, DataLoader\nimport xml.etree.ElementTree as ET\nimport os\nimport numpy as np\nfrom sklearn.metrics import accuracy_score, precision_recall_fscore_support, roc_auc_score, confusion_matrix, ConfusionMatrixDisplay\nfrom tqdm.notebook import tqdm\nimport random\nimport math\nimport zipfile\nimport cv2\nfrom ultralytics import YOLO\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport time","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-15T19:55:10.154360Z","iopub.execute_input":"2025-04-15T19:55:10.154719Z","iopub.status.idle":"2025-04-15T19:55:16.590012Z","shell.execute_reply.started":"2025-04-15T19:55:10.154687Z","shell.execute_reply":"2025-04-15T19:55:16.589278Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"zip_path = \"/kaggle/working/PIE/annotations/annotations.zip\"\nextract_to = \"/kaggle/working/PIE/annotations/\"\n\nif os.path.exists(extract_to + 'annotations'):\n    print(\"Exists already. Not unzipping.\")\nelse:\n    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n        zip_ref.extractall(extract_to)\n    print(\"Unzipped successfully.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-15T19:55:16.590843Z","iopub.execute_input":"2025-04-15T19:55:16.591210Z","iopub.status.idle":"2025-04-15T19:55:16.596284Z","shell.execute_reply.started":"2025-04-15T19:55:16.591187Z","shell.execute_reply":"2025-04-15T19:55:16.595261Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"zip_path = \"/kaggle/working/PIE/annotations/annotations_vehicle.zip\"\nextract_to = \"/kaggle/working/PIE/annotations/\"\n\nif os.path.exists(extract_to + 'annotations_vehicle'):\n    print(\"Exists already. Not unzipping.\")\nelse:\n    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n        zip_ref.extractall(extract_to)\n    print(\"Unzipped successfully.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-15T19:55:16.597390Z","iopub.execute_input":"2025-04-15T19:55:16.597839Z","iopub.status.idle":"2025-04-15T19:55:16.618074Z","shell.execute_reply.started":"2025-04-15T19:55:16.597803Z","shell.execute_reply":"2025-04-15T19:55:16.617129Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"zip_path = \"/kaggle/working/PIE/annotations/annotations_attributes.zip\"\nextract_to = \"/kaggle/working/PIE/annotations/\"\n\nif os.path.exists(extract_to + \"annotations_attributes\"):\n    print(\"Exists already. Not unzipping.\")\nelse:\n    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n        zip_ref.extractall(extract_to)\n    print(\"Unzipped successfully.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-15T19:55:16.619029Z","iopub.execute_input":"2025-04-15T19:55:16.619360Z","iopub.status.idle":"2025-04-15T19:55:16.635884Z","shell.execute_reply.started":"2025-04-15T19:55:16.619328Z","shell.execute_reply":"2025-04-15T19:55:16.634975Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# -----------------------------------------------------------------------------\n# CELL 1: DATA PREPARATION & BALANCING  (run once before training)\n# -----------------------------------------------------------------------------\n#  This cell:\n#    1. Loads (or regenerates) the PIE database\n#    2. Computes per-signal standardisation scalers\n#    3. Extracts ALL training sequences for every stream\n#    4. Balances the dataset 50 / 50 on the crossing label (using undersampling)\n#    5. Writes two pickles:\n#         - /kaggle/working/balanced_train_data.pkl\n#         - /kaggle/working/scalers.pkl\n# -----------------------------------------------------------------------------\n\nimport os\nimport sys\nimport time\nimport pickle\nimport gc\nfrom pathlib import Path\n\nimport cv2                               # used internally by PIE utilities\nimport numpy as np\nimport torch\nfrom torch.utils.data import Dataset\nfrom tqdm.notebook import tqdm\n\n# -----------------------------------------------------------------------------#\n#                                PIE utilities                                 #\n# -----------------------------------------------------------------------------#\npie_utilities_path = \"/kaggle/working/PIE/utilities\"\nif pie_utilities_path not in sys.path:\n    sys.path.insert(0, pie_utilities_path)\n\ntry:\n    from pie_data import PIE\nexcept ImportError as e:\n    print(\n        f\"[WARN] Could not import PIE from {pie_utilities_path}. \"\n        f\"If the DB cache already exists this is fine.\\nâ†’ {e}\"\n    )\n    PIE = None\n\n# -----------------------------------------------------------------------------#\n#                              configuration                                   #\n# -----------------------------------------------------------------------------#\nPIE_ROOT_PATH           = \"/kaggle/working/PIE\"\nPOSE_DATA_DIR           = \"/kaggle/input/pose-data/extracted_poses2\"\nPIE_DATABASE_CACHE_PATH = \"/kaggle/input/pie-database/pie_database.pkl\"\n\nTRAIN_SETS_STR = [\"set01\", \"set02\", \"set04\"]\n\nBALANCED_DATA_PKL_PATH  = \"/kaggle/working/balanced_train_data.pkl\"\nSCALERS_PKL_PATH        = \"/kaggle/working/scalers.pkl\"\n\n# Streams used throughout the project ----------------------------------------\nALL_POSSIBLE_STREAMS = [\n    \"bbox\",\n    \"pose\",\n    \"ego_speed\",\n    \"ego_acc\",\n    \"ego_gyro\",\n    \"ped_action\",\n    \"ped_look\",\n    \"ped_occlusion\",\n    \"traffic_light\",\n    \"static_context\",\n]\n\n# Feature sizes & categorical constants --------------------------------------\nSEQ_LEN, PRED_LEN = 30, 1\n\nINPUT_SIZE_BBOX       = 4\nINPUT_SIZE_POSE       = 34\nINPUT_SIZE_EGO_SPEED  = 1\nINPUT_SIZE_EGO_ACC    = 2\nINPUT_SIZE_EGO_GYRO   = 1\nINPUT_SIZE_PED_ACTION = 1\nINPUT_SIZE_PED_LOOK   = 1\nINPUT_SIZE_PED_OCC    = 1\nINPUT_SIZE_TL_STATE   = 4\n\nNUM_SIGNALIZED_CATS   = 4\nNUM_INTERSECTION_CATS = 5\nNUM_AGE_CATS          = 4\nNUM_GENDER_CATS       = 3\nNUM_TRAFFIC_DIR_CATS  = 2\n\nLANE_CATEGORIES = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 4, 7: 4, 8: 4}\nNUM_LANE_CATS   = len(set(LANE_CATEGORIES.values()))\n\nINPUT_SIZE_STATIC = (\n    NUM_SIGNALIZED_CATS\n    + NUM_INTERSECTION_CATS\n    + NUM_AGE_CATS\n    + NUM_GENDER_CATS\n    + NUM_TRAFFIC_DIR_CATS\n    + NUM_LANE_CATS\n)  # â†’ 23\n\nTL_STATE_MAP = {\"__undefined__\": 0, \"red\": 1, \"yellow\": 2, \"green\": 3}\nNUM_TL_STATES = len(TL_STATE_MAP)\n\n# -----------------------------------------------------------------------------#\n#                               helper utils                                   #\n# -----------------------------------------------------------------------------#\n\n\ndef to_one_hot(index: int, num_classes: int) -> np.ndarray:\n    vec = np.zeros(num_classes, dtype=np.float32)\n    vec[int(np.clip(index, 0, num_classes - 1))] = 1.0\n    return vec\n\n\ndef balance_samples_count(seq_data: dict, label_key: str, seed: int = 42) -> dict:\n    \"\"\"Undersample majority class so positive and negative labels are equal.\"\"\"\n    labels = [lbl[0] for lbl in seq_data[label_key]]\n    n_pos  = int(np.sum(labels))\n    n_neg  = len(labels) - n_pos\n\n    if n_pos == n_neg:\n        print(\"Dataset already balanced.\")\n        return seq_data.copy()\n\n    majority_label    = 0 if n_neg > n_pos else 1\n    minority_count    = min(n_pos, n_neg)\n    majority_indices  = np.where(np.array(labels) == majority_label)[0]\n    minority_indices  = np.where(np.array(labels) != majority_label)[0]\n\n    rng = np.random.default_rng(seed)\n    keep_majority = rng.choice(majority_indices, size=minority_count, replace=False)\n    final_indices = np.concatenate([minority_indices, keep_majority])\n    rng.shuffle(final_indices)\n\n    balanced = {}\n    for k, v in seq_data.items():\n        balanced[k] = [v[i] for i in final_indices]\n\n    print(f\"Balanced: 1s={minority_count} | 0s={minority_count}\")\n    return balanced\n\n\n# -----------------------------------------------------------------------------#\n#                                PIEDataset                                    #\n# -----------------------------------------------------------------------------#\nclass PIEDataset(Dataset):\n    \"\"\"\n    Lightweight dataset that can generate any subset of the PIE feature streams.\n    \"\"\"\n\n    def __init__(\n        self,\n        pie_db: dict,\n        set_names: list[str],\n        pose_dir: str,\n        seq_len: int,\n        pred_len: int,\n        scalers: dict,\n        streams_to_generate: list[str],\n    ):\n        self.pie_db            = pie_db\n        self.set_names         = set_names\n        self.pose_dir          = pose_dir\n        self.seq_len           = seq_len\n        self.pred_len          = pred_len\n        self.scalers           = scalers\n        self.streams           = streams_to_generate\n        self._input_sizes      = self._build_input_size_map()\n        self.all_pose_data     = {}\n        self.sequences         = []\n\n        if \"pose\" in self.streams:\n            self._load_pose_pkls()\n        self._enumerate_sequences()\n\n    # ------------------------ internal helpers -------------------------------\n    def _build_input_size_map(self) -> dict:\n        special = {\n            \"TRAFFIC_LIGHT\": \"TL_STATE\",\n            \"STATIC_CONTEXT\": \"STATIC\",\n            \"EGO_SPEED\": \"EGO_SPEED\",\n            \"EGO_ACC\": \"EGO_ACC\",\n            \"EGO_GYRO\": \"EGO_GYRO\",\n            \"PED_ACTION\": \"PED_ACTION\",\n            \"PED_LOOK\": \"PED_LOOK\",\n            \"PED_OCCLUSION\": \"PED_OCC\",\n        }\n        sizes = {}\n        for s in ALL_POSSIBLE_STREAMS:\n            const = f\"INPUT_SIZE_{special.get(s.upper(), s.upper())}\"\n            if s == \"bbox\":\n                const = \"INPUT_SIZE_BBOX\"\n            elif s == \"pose\":\n                const = \"INPUT_SIZE_POSE\"\n            sizes[s] = globals().get(const, 1)\n        return sizes\n\n    def _load_pose_pkls(self):\n        print(\"Loading pose PKLs â€¦\")\n        for set_id in self.set_names:\n            set_dir = Path(self.pose_dir) / set_id\n            if not set_dir.is_dir():\n                continue\n            self.all_pose_data[set_id] = {}\n            for pkl_path in tqdm(set_dir.glob(f\"{set_id}_*_poses.pkl\"), leave=False):\n                try:\n                    with open(pkl_path, \"rb\") as fp:\n                        loaded = pickle.load(fp)\n                except Exception as e:\n                    print(f\"[pose load] {pkl_path}: {e}\")\n                    continue\n\n                if len(loaded) != 1:\n                    continue\n                (key, data), *_ = loaded.items()\n                vid = \"_\".join(key.split(\"_\")[1:])\n                if vid in self.pie_db.get(set_id, {}):\n                    self.all_pose_data[set_id][vid] = data\n\n    def _enumerate_sequences(self):\n        print(\"Enumerating sequences â€¦\")\n        for set_id in self.set_names:\n            for vid, vdb in self.pie_db.get(set_id, {}).items():\n                for pid, pdb in vdb.get(\"ped_annotations\", {}).items():\n                    frames = pdb.get(\"frames\", [])\n                    if len(frames) < self.seq_len + self.pred_len:\n                        continue\n                    frames = sorted(frames)\n                    for i in range(len(frames) - self.seq_len - self.pred_len + 1):\n                        start = frames[i]\n                        obs_end = frames[i + self.seq_len - 1]\n                        if obs_end - start != self.seq_len - 1:\n                            continue\n                        target = frames[i + self.seq_len + self.pred_len - 1]\n                        if target - obs_end != self.pred_len:\n                            continue\n                        self.sequences.append((set_id, vid, pid, start))\n        print(f\"Total sequences: {len(self.sequences)}\")\n\n    # ------------------ Dataset API ------------------------------------------\n    def __len__(self):\n        return len(self.sequences)\n\n    def __getitem__(self, idx: int):\n        set_id, vid, pid, start = self.sequences[idx]\n        vdb  = self.pie_db[set_id][vid]\n        pdb  = vdb[\"ped_annotations\"][pid]\n        ego  = vdb.get(\"vehicle_annotations\", {})\n        tldb = vdb.get(\"traffic_annotations\", {})\n\n        frame_nums = list(range(start, start + self.seq_len))\n        target_f   = start + self.seq_len + self.pred_len - 1\n\n        # label ---------------------------------------------------------------\n        label = 0\n        if (\n            \"frames\" in pdb\n            and \"behavior\" in pdb\n            and \"cross\" in pdb[\"behavior\"]\n            and target_f in pdb[\"frames\"]\n        ):\n            try:\n                j = pdb[\"frames\"].index(target_f)\n                label = pdb[\"behavior\"][\"cross\"][j]\n                if label == -1:\n                    label = 0\n            except (ValueError, IndexError):\n                pass\n\n        # static context ------------------------------------------------------\n        static_vec = np.zeros(INPUT_SIZE_STATIC, np.float32)\n        if \"static_context\" in self.streams:\n            attr  = pdb.get(\"attributes\", {})\n            sig   = attr.get(\"signalized\", 0)\n            intr  = attr.get(\"intersection\", 0)\n            age   = attr.get(\"age\", 2)\n            gen   = attr.get(\"gender\", 0)\n            tdir  = int(attr.get(\"traffic_direction\", 0))\n            ln    = attr.get(\"num_lanes\", 2)\n            lncat = LANE_CATEGORIES.get(ln, LANE_CATEGORIES[max(LANE_CATEGORIES)])\n            static_vec = np.concatenate(\n                [\n                    to_one_hot(sig,  NUM_SIGNALIZED_CATS),\n                    to_one_hot(intr, NUM_INTERSECTION_CATS),\n                    to_one_hot(age,  NUM_AGE_CATS),\n                    to_one_hot(gen,  NUM_GENDER_CATS),\n                    to_one_hot(tdir, NUM_TRAFFIC_DIR_CATS),\n                    to_one_hot(lncat, NUM_LANE_CATS),\n                ]\n            ).astype(np.float32)\n\n        # per-frame feature assembly -----------------------------------------\n        feats = {s: [] for s in self.streams}\n\n        for fn in frame_nums:\n            fidx = -1\n            if \"frames\" in pdb:\n                try:\n                    fidx = pdb[\"frames\"].index(fn)\n                except ValueError:\n                    pass\n\n            ego_f = ego.get(fn, {})\n\n            # bbox ----------------------------------------------------------\n            if \"bbox\" in self.streams:\n                bb = np.zeros(INPUT_SIZE_BBOX, np.float32)\n                if (\n                    fidx != -1\n                    and \"bbox\" in pdb\n                    and len(pdb[\"bbox\"]) > fidx\n                ):\n                    try:\n                        x1, y1, x2, y2 = pdb[\"bbox\"][fidx]\n                        w_img = vdb.get(\"width\", 1920)\n                        h_img = vdb.get(\"height\", 1080)\n                        if w_img > 0 and h_img > 0:\n                            cx = ((x1 + x2) / 2) / w_img\n                            cy = ((y1 + y2) / 2) / h_img\n                            w  = (x2 - x1) / w_img\n                            h  = (y2 - y1) / h_img\n                            if 0 < w and 0 < h and 0 <= cx <= 1 and 0 <= cy <= 1:\n                                bb = np.array([cx, cy, w, h], np.float32)\n                    except Exception:\n                        pass\n                feats[\"bbox\"].append(bb)\n\n            # pose ----------------------------------------------------------\n            if \"pose\" in self.streams:\n                pvec = np.zeros(INPUT_SIZE_POSE, np.float32)\n                pose_set = self.all_pose_data.get(set_id, {}).get(vid, {})\n                p_loaded = pose_set.get(fn, {}).get(pid)\n                if (\n                    isinstance(p_loaded, np.ndarray)\n                    and p_loaded.shape == (INPUT_SIZE_POSE,)\n                ):\n                    pvec = p_loaded\n                feats[\"pose\"].append(pvec)\n\n            # ego signals ---------------------------------------------------\n            if \"ego_speed\" in self.streams:\n                s = ego_f.get(\"OBD_speed\", 0.0) or ego_f.get(\"GPS_speed\", 0.0)\n                s = (s - self.scalers.get(\"ego_speed_mean\", 0.0)) / self.scalers.get(\n                    \"ego_speed_std\", 1.0\n                )\n                feats[\"ego_speed\"].append([s])\n\n            if \"ego_acc\" in self.streams:\n                ax = ego_f.get(\"accX\", 0.0)\n                ay = ego_f.get(\"accY\", 0.0)\n                ax = (ax - self.scalers.get(\"accX_mean\", 0.0)) / self.scalers.get(\n                    \"accX_std\", 1.0\n                )\n                ay = (ay - self.scalers.get(\"accY_mean\", 0.0)) / self.scalers.get(\n                    \"accY_std\", 1.0\n                )\n                feats[\"ego_acc\"].append([ax, ay])\n\n            if \"ego_gyro\" in self.streams:\n                gz = ego_f.get(\"gyroZ\", 0.0)\n                gz = (gz - self.scalers.get(\"gyroZ_mean\", 0.0)) / self.scalers.get(\n                    \"gyroZ_std\", 1.0\n                )\n                feats[\"ego_gyro\"].append([gz])\n\n            # pedestrian behaviour -----------------------------------------\n            if \"ped_action\" in self.streams:\n                action = (\n                    pdb[\"behavior\"][\"action\"][fidx]\n                    if fidx != -1\n                    and \"behavior\" in pdb\n                    and \"action\" in pdb[\"behavior\"]\n                    and len(pdb[\"behavior\"][\"action\"]) > fidx\n                    else 0\n                )\n                feats[\"ped_action\"].append([float(action)])\n\n            if \"ped_look\" in self.streams:\n                look = (\n                    pdb[\"behavior\"][\"look\"][fidx]\n                    if fidx != -1\n                    and \"behavior\" in pdb\n                    and \"look\" in pdb[\"behavior\"]\n                    and len(pdb[\"behavior\"][\"look\"]) > fidx\n                    else 0\n                )\n                feats[\"ped_look\"].append([float(look)])\n\n            if \"ped_occlusion\" in self.streams:\n                occ = (\n                    float(pdb[\"occlusion\"][fidx]) / 2.0\n                    if fidx != -1\n                    and \"occlusion\" in pdb\n                    and len(pdb[\"occlusion\"]) > fidx\n                    else 0.0\n                )\n                feats[\"ped_occlusion\"].append([occ])\n\n            # traffic light -------------------------------------------------\n            if \"traffic_light\" in self.streams:\n                tl_state = 0\n                for obj in tldb.values():\n                    if obj.get(\"obj_class\") != \"traffic_light\":\n                        continue\n                    if \"frames\" not in obj or \"state\" not in obj:\n                        continue\n                    try:\n                        j = obj[\"frames\"].index(fn)\n                        if obj[\"state\"][j] != 0:\n                            tl_state = obj[\"state\"][j]\n                            break\n                    except (ValueError, IndexError):\n                        continue\n                feats[\"traffic_light\"].append(to_one_hot(tl_state, NUM_TL_STATES))\n\n            # static context -----------------------------------------------\n            if \"static_context\" in self.streams:\n                feats[\"static_context\"].append(static_vec)\n\n        # numpy â†’ torch ------------------------------------------------------\n        out = {\n            s: torch.tensor(np.asarray(feats[s], np.float32), dtype=torch.float32)\n            for s in self.streams\n        }\n        return out, torch.tensor(label, dtype=torch.long)\n\n\n# =============================================================================\n#                       MAIN: build balanced training set\n# =============================================================================\nif __name__ == \"__main__\" and \"__file__\" not in locals(): # Check if running in notebook or script\n    print(\"\\n--- DATA PREPARATION ---\")\n\n    # 1) load / regenerate PIE DB -------------------------------------------\n    cache = Path(PIE_DATABASE_CACHE_PATH)\n    if cache.is_file():\n        print(\"Loading PIE database cache â€¦\")\n        with cache.open(\"rb\") as fp:\n            pie_db = pickle.load(fp)\n        print(\"âœ“ PIE DB loaded.\")\n    else:\n        if PIE is None:\n            raise RuntimeError(\"PIE class unavailable: cannot rebuild database.\")\n        print(\"Cache not found â€“ regenerating PIE DB â€¦\")\n        pie_db = PIE(data_path=PIE_ROOT_PATH, regen_database=True).generate_database()\n        if not pie_db:\n            raise RuntimeError(\"PIE DB generation failed.\")\n        print(\"âœ“ PIE DB generated.\")\n\n    # 2) compute scalers -----------------------------------------------------\n    print(\"\\nComputing scalers â€¦\")\n    spd, accx, accy, gyz = [], [], [], []\n    for sid in TRAIN_SETS_STR:\n        for vid, vdb in pie_db.get(sid, {}).items():\n            for frame, e in vdb.get(\"vehicle_annotations\", {}).items():\n                s  = e.get(\"OBD_speed\", 0.0) or e.get(\"GPS_speed\", 0.0)\n                spd.append(s)\n                accx.append(e.get(\"accX\", 0.0))\n                accy.append(e.get(\"accY\", 0.0))\n                gyz.append(e.get(\"gyroZ\", 0.0))\n\n    scalers = {}\n    if spd:\n        scalers[\"ego_speed_mean\"] = float(np.mean(spd))\n        scalers[\"ego_speed_std\"]  = float(max(np.std(spd), 1e-6))\n    if accx:\n        scalers[\"accX_mean\"] = float(np.mean(accx))\n        scalers[\"accX_std\"]  = float(max(np.std(accx), 1e-6))\n        scalers[\"accY_mean\"] = float(np.mean(accy))\n        scalers[\"accY_std\"]  = float(max(np.std(accy), 1e-6))\n    if gyz:\n        scalers[\"gyroZ_mean\"] = float(np.mean(gyz))\n        scalers[\"gyroZ_std\"]  = float(max(np.std(gyz), 1e-6))\n\n    print(\"Scalers:\", scalers)\n\n    # 3) extract full training dataset --------------------------------------\n    print(\"\\nExtracting training sequences (all streams) â€¦\")\n    full_ds = PIEDataset(\n        pie_db,\n        TRAIN_SETS_STR,\n        POSE_DATA_DIR,\n        SEQ_LEN,\n        PRED_LEN,\n        scalers,\n        ALL_POSSIBLE_STREAMS,\n    )\n\n    train_dict = {s: [] for s in ALL_POSSIBLE_STREAMS}\n    train_dict[\"label\"] = []\n\n    for i in tqdm(range(len(full_ds)), desc=\"seq\"):\n        feat, lbl = full_ds[i]\n        for s in ALL_POSSIBLE_STREAMS:\n            train_dict[s].append(feat[s].numpy())\n        train_dict[\"label\"].append([lbl.item()])\n\n    print(f\"Raw training samples: {len(train_dict['label'])}\")\n\n    # 4) balance -------------------------------------------------------------\n    balanced = balance_samples_count(train_dict, \"label\")\n    del train_dict, full_ds\n    gc.collect()\n\n    # 5) write pickles -------------------------------------------------------\n    print(\"\\nSaving balanced data â€¦\")\n    with open(BALANCED_DATA_PKL_PATH, \"wb\") as fp:\n        pickle.dump(balanced, fp, pickle.HIGHEST_PROTOCOL)\n    print(f\"âœ“ {BALANCED_DATA_PKL_PATH}\")\n\n    print(\"Saving scalers â€¦\")\n    with open(SCALERS_PKL_PATH, \"wb\") as fp:\n        pickle.dump(scalers, fp, pickle.HIGHEST_PROTOCOL)\n    print(f\"âœ“ {SCALERS_PKL_PATH}\")\n\n    del pie_db\n    gc.collect()\n\n    print(\"\\n--- DATA PREPARATION COMPLETE ---\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# --- CELL 2: ABLATION STUDY â€“ MODEL TRAINING AND EVALUATION (with Weighted Average Fusion) ---\n\nimport os\nimport sys\nimport gc\nimport time\nimport math\nimport random\nimport pickle\nimport torch\nimport numpy as np\nimport pandas as pd                      # results-summary table\nimport torch.nn as nn\nimport torch.optim as optim\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom tqdm.notebook import tqdm\nfrom torch.utils.data import Dataset, DataLoader\nfrom sklearn.metrics import (\n    accuracy_score,\n    precision_recall_fscore_support,\n    roc_auc_score,\n    confusion_matrix,\n    ConfusionMatrixDisplay,\n)\n\n# --- Add PIE utilities path if necessary (adjust path) ------------------------\npie_utilities_path = \"/kaggle/working/PIE/utilities\"\nif pie_utilities_path not in sys.path:\n    sys.path.insert(0, pie_utilities_path)\n\ntry:\n    from pie_data import PIE\nexcept ImportError as e:\n    print(f\"Warn: Could not import PIE class: {e}\")\n    PIE = None\n\n# --- Configuration ------------------------------------------------------------\nPIE_ROOT_PATH = \"/kaggle/working/PIE\"\nPOSE_DATA_DIR = \"/kaggle/input/pose-data/extracted_poses2\"\nPIE_DATABASE_CACHE_PATH = \"/kaggle/input/pie-database/pie_database.pkl\"\n\n# --- Define ALL possible streams (used by Dataset class) ----------------------\nALL_POSSIBLE_STREAMS = [\n    \"bbox\",\n    \"pose\",\n    \"ego_speed\",\n    \"ego_acc\",\n    \"ego_gyro\",\n    \"ped_action\",\n    \"ped_look\",\n    \"ped_occlusion\",\n    \"traffic_light\",\n    \"static_context\",\n]\n\n# --- *** CHOOSE ACTIVE STREAMS FOR THIS EXPERIMENT *** ------------------------\nACTIVE_STREAMS = [\n    \"bbox\",\n    \"ped_action\",\n    \"ped_look\",\n    \"ego_speed\",\n    \"ego_acc\",\n    \"static_context\",\n    # \"pose\",             # Consider adding pose back\n    # \"traffic_light\"     # Consider adding traffic_light\n]\n# ------------------------------------------------------------------------------\n\nprint(f\"--- Running Weighted Average Fusion With Active Streams: {ACTIVE_STREAMS} ---\")\n\n# --- Model Hyper-parameters ---------------------------------------------------\nSEQ_LEN, PRED_LEN = 30, 1\nINPUT_SIZE_BBOX = 4\nINPUT_SIZE_POSE = 34\nINPUT_SIZE_EGO_SPEED = 1\nINPUT_SIZE_EGO_ACC = 2\nINPUT_SIZE_EGO_GYRO = 1\nINPUT_SIZE_PED_ACTION = 1\nINPUT_SIZE_PED_LOOK = 1\nINPUT_SIZE_PED_OCC = 1\nINPUT_SIZE_TL_STATE = 4\nNUM_SIGNALIZED_CATS = 4\nNUM_INTERSECTION_CATS = 5\nNUM_AGE_CATS = 4\nNUM_GENDER_CATS = 3\nNUM_TRAFFIC_DIR_CATS = 2\nLANE_CATEGORIES = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 4, 7: 4, 8: 4}\nNUM_LANE_CATS = len(set(LANE_CATEGORIES.values()))\nINPUT_SIZE_STATIC = (\n    NUM_SIGNALIZED_CATS\n    + NUM_INTERSECTION_CATS\n    + NUM_AGE_CATS\n    + NUM_GENDER_CATS\n    + NUM_TRAFFIC_DIR_CATS\n    + NUM_LANE_CATS\n)\n\nLSTM_HIDDEN_SIZE = 256\nNUM_LSTM_LAYERS = 2\nDROPOUT_RATE = 0.3 # Can be tuned, e.g., 0.3, 0.4, 0.5\nNUM_CLASSES = 2\nATTENTION_DIM = 128\n\n# --- Training Hyper-parameters ------------------------------------------------\nLEARNING_RATE = 1e-4\nWEIGHT_DECAY = 1e-5 # Added for L2 regularization\nBATCH_SIZE = 32 # Consider 64 if memory allows\nNUM_EPOCHS = 30  # Max epochs; Early stopping will likely trigger sooner\nEARLY_STOPPING_PATIENCE = 5 # Epochs to wait for val_f1 improvement\nSCHEDULER_PATIENCE = 2 # Epochs for ReduceLROnPlateau\nSCHEDULER_FACTOR = 0.1 # Factor to reduce LR by\n\nDEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(f\"Using device: {DEVICE}\")\n\n# --- Dataset splits -----------------------------------------------------------\nVAL_SETS_STR = [\"set05\", \"set06\"]\n\n# --- Paths for pre-processed data --------------------------------------------\nBALANCED_DATA_PKL_PATH = \"/kaggle/working/balanced_train_data.pkl\"\nSCALERS_PKL_PATH = \"/kaggle/working/scalers.pkl\"\n\n# -----------------------------------------------------------------------------#\n#                               Helper classes                                #\n# -----------------------------------------------------------------------------\n\n\ndef to_one_hot(index, num_classes):\n    vec = np.zeros(num_classes, dtype=np.float32)\n    safe_index = int(np.clip(index, 0, num_classes - 1))\n    vec[safe_index] = 1.0\n    return vec\n\n\nclass PIEDataset(Dataset):\n    \"\"\"\n    Dataset that can dynamically enable/disable streams.\n    (This class definition is identical to your original Cell 2, so it's kept concise here)\n    \"\"\"\n    def __init__(\n        self,\n        pie_database,\n        set_names,\n        pose_data_dir,\n        seq_len,\n        pred_len,\n        scalers=None,\n        active_streams=None, # This should be ALL_POSSIBLE_STREAMS for val_dataset\n    ):\n        self.pie_db = pie_database\n        self.set_names = set_names\n        self.pose_data_dir = pose_data_dir\n        self.seq_len = seq_len\n        self.pred_len = pred_len\n        self.scalers = scalers or {}\n        # For validation, PIEDataset should be able to provide ALL streams.\n        # The main script will then only request ACTIVE_STREAMS from the model's perspective.\n        # However, the PIEDataset itself needs to know which streams *it might be asked to generate*.\n        # So, for the PIEDataset instance for validation, it's better to pass ALL_POSSIBLE_STREAMS\n        # to its own 'active_streams' init argument, if it uses that to pre-filter.\n        # Based on your code, it seems it iterates self.active_streams to build features.\n        # So, when creating val_dataset, `active_streams` should be `ALL_POSSIBLE_STREAMS`\n        # to ensure it can provide any stream requested by any model configuration.\n        # The DataLoader will then pass only the model's `ACTIVE_STREAMS` to the model.\n        self.active_streams_to_load = active_streams or ALL_POSSIBLE_STREAMS # What the dataset will try to load/process\n        self.sequences = []\n        self.all_pose_data = {}\n        self._input_sizes_for_error = self._get_input_sizes_dict()\n\n        if \"pose\" in self.active_streams_to_load:\n            self._load_pose_data()\n        self._generate_sequence_list()\n        if not self.sequences:\n            print(f\"Warning: Dataset init resulted in 0 sequences for {self.set_names}. Check data paths and set names.\")\n\n\n    def _get_input_sizes_dict(self):\n        input_sizes = {}\n        special_cases = {\n            \"TRAFFIC_LIGHT\": \"TL_STATE\", \"STATIC_CONTEXT\": \"STATIC\",\n            \"EGO_SPEED\": \"EGO_SPEED\", \"EGO_ACC\": \"EGO_ACC\", \"EGO_GYRO\": \"EGO_GYRO\",\n            \"PED_ACTION\": \"PED_ACTION\", \"PED_LOOK\": \"PED_LOOK\", \"PED_OCCLUSION\": \"PED_OCC\",\n        }\n        for stream in ALL_POSSIBLE_STREAMS:\n            size_constant_name = f\"INPUT_SIZE_{special_cases.get(stream.upper(), stream.upper())}\"\n            if stream == \"bbox\": size_constant_name = \"INPUT_SIZE_BBOX\"\n            elif stream == \"pose\": size_constant_name = \"INPUT_SIZE_POSE\"\n            input_sizes[stream] = globals().get(size_constant_name, 1)\n        return input_sizes\n\n    def _load_pose_data(self):\n        for set_id in self.set_names:\n            self.all_pose_data[set_id] = {}\n            pose_set_path = os.path.join(self.pose_data_dir, set_id)\n            if not os.path.isdir(pose_set_path): continue\n            pkl_files = [f for f in os.listdir(pose_set_path) if f.startswith(f\"{set_id}_\") and f.endswith(\"_poses.pkl\")]\n            if not pkl_files: continue\n            for pkl_filename in pkl_files:\n                try:\n                    with open(os.path.join(pose_set_path, pkl_filename), \"rb\") as f:\n                        content = pickle.load(f)\n                    if len(content) != 1: continue\n                    key, data = list(content.items())[0]\n                    vid = \"_\".join(key.split(\"_\")[1:])\n                    if vid in self.pie_db.get(set_id, {}): self.all_pose_data[set_id][vid] = data\n                except Exception as e: print(f\"Error loading pose {pkl_filename}: {e}\")\n\n    def _generate_sequence_list(self):\n        count = 0\n        for set_id in self.set_names:\n            if set_id not in self.pie_db: continue\n            for vid, v_data in self.pie_db[set_id].items():\n                if \"ped_annotations\" not in v_data: continue\n                for pid, p_data in v_data[\"ped_annotations\"].items():\n                    frames = sorted(p_data.get(\"frames\", []))\n                    if len(frames) < self.seq_len + self.pred_len: continue\n                    for i in range(len(frames) - self.seq_len - self.pred_len + 1):\n                        start_f, obs_end_f = frames[i], frames[i + self.seq_len - 1]\n                        if obs_end_f - start_f != self.seq_len - 1: continue\n                        target_f = frames[i + self.seq_len + self.pred_len - 1]\n                        if target_f - obs_end_f != self.pred_len: continue\n                        self.sequences.append((set_id, vid, pid, start_f))\n                        count +=1\n        # print(f\"PIEDataset for {self.set_names}: {count} sequences.\") # Less verbose\n\n    def __len__(self): return len(self.sequences)\n\n    def __getitem__(self, idx):\n        set_id, video_id, ped_id, start_frame = self.sequences[idx]\n        frame_nums = list(range(start_frame, start_frame + self.seq_len))\n        target_frame_num = start_frame + self.seq_len + self.pred_len - 1\n\n        video_db = self.pie_db.get(set_id, {}).get(video_id, {})\n        ped_db = video_db.get(\"ped_annotations\", {}).get(ped_id, {})\n        ego_db = video_db.get(\"vehicle_annotations\", {})\n        traffic_db = video_db.get(\"traffic_annotations\", {})\n        ped_attributes = ped_db.get(\"attributes\", {})\n\n        feature_sequences = {s: [] for s in self.active_streams_to_load} # Use active_streams_to_load\n        label = 0\n        if \"frames\" in ped_db and \"behavior\" in ped_db and \"cross\" in ped_db[\"behavior\"]:\n            try:\n                target_idx = ped_db[\"frames\"].index(target_frame_num)\n                label = ped_db[\"behavior\"][\"cross\"][target_idx]\n                if label == -1: label = 0\n            except (ValueError, IndexError): pass\n\n        static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n        if \"static_context\" in self.active_streams_to_load:\n            attrs = ped_attributes\n            static_vec = np.concatenate([\n                to_one_hot(attrs.get(\"signalized\", 0), NUM_SIGNALIZED_CATS),\n                to_one_hot(attrs.get(\"intersection\", 0), NUM_INTERSECTION_CATS),\n                to_one_hot(attrs.get(\"age\", 2), NUM_AGE_CATS),\n                to_one_hot(attrs.get(\"gender\", 0), NUM_GENDER_CATS),\n                to_one_hot(int(attrs.get(\"traffic_direction\", 0)), NUM_TRAFFIC_DIR_CATS),\n                to_one_hot(LANE_CATEGORIES.get(attrs.get(\"num_lanes\", 2), LANE_CATEGORIES[max(LANE_CATEGORIES.keys())]), NUM_LANE_CATS)\n            ])\n\n        for frame_num in frame_nums:\n            fidx = -1\n            if \"frames\" in ped_db:\n                try: fidx = ped_db[\"frames\"].index(frame_num)\n                except ValueError: pass\n            ego_frame = ego_db.get(frame_num, {})\n\n            if \"bbox\" in self.active_streams_to_load:\n                bb_norm = np.zeros(INPUT_SIZE_BBOX, dtype=np.float32)\n                if fidx!=-1 and \"bbox\" in ped_db and len(ped_db[\"bbox\"]) > fidx:\n                    try:\n                        x1,y1,x2,y2 = ped_db[\"bbox\"][fidx]\n                        iw, ih = video_db.get(\"width\",1920), video_db.get(\"height\",1080)\n                        if iw>0 and ih>0:\n                            cx,cy,w,h = ((x1+x2)/2)/iw, ((y1+y2)/2)/ih, (x2-x1)/iw, (y2-y1)/ih\n                            if 0<w and 0<h and 0<=cx<=1 and 0<=cy<=1:\n                                bb_norm = np.array([cx,cy,w,h],dtype=np.float32)\n                    except: pass\n                feature_sequences[\"bbox\"].append(bb_norm)\n            if \"pose\" in self.active_streams_to_load:\n                pv = np.zeros(INPUT_SIZE_POSE, dtype=np.float32)\n                pose = self.all_pose_data.get(set_id,{}).get(video_id,{}).get(frame_num,{}).get(ped_id)\n                if isinstance(pose, np.ndarray) and pose.shape==(INPUT_SIZE_POSE,): pv = pose\n                feature_sequences[\"pose\"].append(pv)\n            if \"ego_speed\" in self.active_streams_to_load:\n                s = ego_frame.get(\"OBD_speed\",0.) or ego_frame.get(\"GPS_speed\",0.)\n                s_norm = (s - self.scalers.get(\"ego_speed_mean\",0.))/self.scalers.get(\"ego_speed_std\",1.)\n                feature_sequences[\"ego_speed\"].append([s_norm])\n            if \"ego_acc\" in self.active_streams_to_load:\n                ax,ay = ego_frame.get(\"accX\",0.), ego_frame.get(\"accY\",0.)\n                ax_n = (ax - self.scalers.get(\"accX_mean\",0.))/self.scalers.get(\"accX_std\",1.)\n                ay_n = (ay - self.scalers.get(\"accY_mean\",0.))/self.scalers.get(\"accY_std\",1.)\n                feature_sequences[\"ego_acc\"].append([ax_n, ay_n])\n            if \"ego_gyro\" in self.active_streams_to_load:\n                gz = ego_frame.get(\"gyroZ\",0.)\n                gz_n = (gz - self.scalers.get(\"gyroZ_mean\",0.))/self.scalers.get(\"gyroZ_std\",1.)\n                feature_sequences[\"ego_gyro\"].append([gz_n])\n            if \"ped_action\" in self.active_streams_to_load:\n                act = 0\n                if fidx!=-1 and \"behavior\" in ped_db and \"action\" in ped_db[\"behavior\"] and len(ped_db[\"behavior\"][\"action\"])>fidx:\n                    act = ped_db[\"behavior\"][\"action\"][fidx]\n                feature_sequences[\"ped_action\"].append([float(act)])\n            if \"ped_look\" in self.active_streams_to_load:\n                lk = 0\n                if fidx!=-1 and \"behavior\" in ped_db and \"look\" in ped_db[\"behavior\"] and len(ped_db[\"behavior\"][\"look\"])>fidx:\n                    lk = ped_db[\"behavior\"][\"look\"][fidx]\n                feature_sequences[\"ped_look\"].append([float(lk)])\n            if \"ped_occlusion\" in self.active_streams_to_load:\n                occ = 0.\n                if fidx!=-1 and \"occlusion\" in ped_db and len(ped_db[\"occlusion\"])>fidx:\n                    occ = float(ped_db[\"occlusion\"][fidx])/2.\n                feature_sequences[\"ped_occlusion\"].append([occ])\n            if \"traffic_light\" in self.active_streams_to_load:\n                tl_s = 0\n                for obj in traffic_db.values():\n                    if obj.get(\"obj_class\")==\"traffic_light\" and \"frames\" in obj and \"state\" in obj:\n                        try:\n                            tl_idx = obj[\"frames\"].index(frame_num)\n                            if obj[\"state\"][tl_idx]!=0: tl_s = obj[\"state\"][tl_idx]; break\n                        except: continue\n                feature_sequences[\"traffic_light\"].append(to_one_hot(tl_s, INPUT_SIZE_TL_STATE))\n            if \"static_context\" in self.active_streams_to_load:\n                feature_sequences[\"static_context\"].append(static_vec)\n\n        features = {}\n        try:\n            for name in self.active_streams_to_load: # Use active_streams_to_load\n                 features[name] = torch.tensor(np.asarray(feature_sequences[name], dtype=np.float32), dtype=torch.float32)\n        except Exception as e:\n            print(f\"Error converting features idx {idx} for {set_id}/{video_id}/{ped_id}: {e}. Returning zeros.\")\n            features = {\n                name: torch.zeros((self.seq_len, self._input_sizes_for_error.get(name,1)), dtype=torch.float32)\n                for name in self.active_streams_to_load # Use active_streams_to_load\n            }\n        return features, torch.tensor(label, dtype=torch.long)\n\n\nclass BalancedDataset(Dataset):\n    \"\"\"\n    Memory-based balanced dataset generated by the prep notebook cell.\n    (This class definition is identical to your original Cell 2, so it's kept concise here)\n    \"\"\"\n    def __init__(self, data_dict, active_streams, label_key=\"label\"):\n        self.active_streams = active_streams\n        self.label_key = label_key\n        if self.label_key not in data_dict or not data_dict[self.label_key]:\n            raise ValueError(f\"Label key '{self.label_key}' missing/empty.\")\n        self.num_samples = len(data_dict[self.label_key])\n        if self.num_samples == 0: print(\"Warning: BalancedDataset initialized with zero samples.\")\n        self.features = {}\n        for stream in self.active_streams:\n            if stream in data_dict and data_dict[stream]:\n                try: self.features[stream] = torch.tensor(np.asarray(data_dict[stream]), dtype=torch.float32)\n                except ValueError as e: raise ValueError(f\"Error converting stream '{stream}': {e}\")\n            else: raise KeyError(f\"Stream '{stream}' missing or empty in data.\")\n        try: self.labels = torch.tensor([lbl[0] for lbl in data_dict[self.label_key]], dtype=torch.long)\n        except (IndexError, TypeError) as e: raise ValueError(f\"Error converting labels: {e}\")\n        for stream in self.active_streams:\n            if len(self.features[stream]) != self.num_samples:\n                raise ValueError(f\"Len mismatch: '{stream}' ({len(self.features[stream])}) vs labels ({self.num_samples})\")\n\n    def __len__(self): return self.num_samples\n    def __getitem__(self, idx):\n        feature_dict = {s: self.features[s][idx] for s in self.active_streams}\n        label = self.labels[idx]\n        return feature_dict, label\n\n\nclass Attention(nn.Module):\n    # (This class definition is identical to your original Cell 2)\n    def __init__(self, hidden_dim, attention_dim):\n        super().__init__()\n        self.attention_net = nn.Sequential(\n            nn.Linear(hidden_dim, attention_dim), nn.Tanh(), nn.Linear(attention_dim, 1)\n        )\n    def forward(self, lstm_output):\n        att_scores = self.attention_net(lstm_output).squeeze(2)\n        att_weights = torch.softmax(att_scores, dim=1)\n        context_vector = torch.sum(lstm_output * att_weights.unsqueeze(2), dim=1)\n        return context_vector, att_weights\n\n# -----------------------------------------------------------------------------#\n#                  ***  MODEL WITH WEIGHTED AVERAGE FUSION  ***                #\n# -----------------------------------------------------------------------------\n\n\nclass MultiStreamWeightedAvgLSTM(nn.Module):\n    # (This class definition is identical to your original Cell 2)\n    def __init__(\n        self, input_sizes, lstm_hidden_size, num_lstm_layers,\n        num_classes, attention_dim, dropout_rate, stream_names=None,\n    ):\n        super().__init__()\n        if not stream_names: raise ValueError(\"stream_names cannot be empty.\")\n        self.stream_names = stream_names\n        self.num_active_streams = len(stream_names)\n        self.lstm_output_dim = lstm_hidden_size * 2\n        self.lstms = nn.ModuleDict()\n        self.attentions = nn.ModuleDict()\n        print(f\"Initializing Weighted-Avg model with streams: {self.stream_names}\")\n        for name in self.stream_names:\n            if name not in input_sizes: raise KeyError(f\"Input size for stream '{name}' not provided.\")\n            in_size = input_sizes[name]\n            print(f\"  â€“ Adding stream '{name}' (input {in_size})\")\n            self.lstms[name] = nn.LSTM(\n                in_size, lstm_hidden_size, num_lstm_layers, batch_first=True,\n                dropout=dropout_rate if num_lstm_layers > 1 else 0, bidirectional=True,\n            )\n            self.attentions[name] = Attention(self.lstm_output_dim, attention_dim)\n        self.fusion_weights = nn.Parameter(torch.ones(self.num_active_streams))\n        fused_dim = self.lstm_output_dim\n        self.dropout = nn.Dropout(dropout_rate)\n        inter_dim = max(num_classes * 4, fused_dim // 2)\n        self.fc1 = nn.Linear(fused_dim, inter_dim)\n        self.relu = nn.ReLU()\n        self.fc2 = nn.Linear(inter_dim, num_classes)\n\n    def forward(self, x):\n        ctx_vecs = []\n        for name in self.stream_names:\n            if name not in x: # Should not happen if DataLoader passes correct streams\n                zero_ctx = torch.zeros(x[next(iter(x))].shape[0], self.lstm_output_dim, device=x[next(iter(x))].device)\n                ctx_vecs.append(zero_ctx)\n                continue\n            lstm_out, _ = self.lstms[name](x[name])\n            context_vector, _ = self.attentions[name](lstm_out)\n            ctx_vecs.append(context_vector)\n        if len(ctx_vecs) != self.num_active_streams:\n            raise RuntimeError(f\"context_vectors({len(ctx_vecs)}) != num_streams({self.num_active_streams})\")\n        stacked = torch.stack(ctx_vecs, dim=1)\n        weights = torch.softmax(self.fusion_weights, dim=0).view(1, -1, 1)\n        fused = torch.sum(stacked * weights, dim=1)\n        out = self.dropout(fused)\n        out = self.relu(self.fc1(out))\n        out = self.dropout(out)\n        logits = self.fc2(out)\n        return logits\n\n\n# -----------------------------------------------------------------------------#\n#                       Training / evaluation helpers                          #\n# -----------------------------------------------------------------------------\n\n\ndef train_epoch(model, dataloader, optimizer, criterion, device):\n    model.train()\n    total_loss = 0.0\n    all_preds, all_labels = [], []\n    active_model_streams = model.stream_names # Streams the model expects\n\n    for feats_batch, labels_batch in tqdm(dataloader, desc=\"Training\", leave=False):\n        # Ensure only streams the model was initialized with are passed\n        inputs = {name: feats_batch[name].to(device) for name in active_model_streams if name in feats_batch}\n        labels = labels_batch.to(device)\n\n        optimizer.zero_grad()\n        outputs = model(inputs)\n        loss = criterion(outputs, labels)\n        loss.backward()\n        optimizer.step()\n\n        total_loss += loss.item()\n        all_preds.extend(torch.argmax(outputs, 1).cpu().numpy())\n        all_labels.extend(labels.cpu().numpy())\n\n    return total_loss / max(1, len(dataloader)), accuracy_score(all_labels, all_preds)\n\n\ndef evaluate_epoch(model, dataloader, criterion, device):\n    model.eval()\n    total_loss = 0.0\n    all_labels, all_preds, all_probs = [], [], []\n    active_model_streams = model.stream_names # Streams the model expects\n\n    with torch.no_grad():\n        for feats_batch, labels_batch in tqdm(dataloader, desc=\"Evaluating\", leave=False):\n            # Ensure only streams the model was initialized with are passed\n            inputs = {name: feats_batch[name].to(device) for name in active_model_streams if name in feats_batch}\n            labels = labels_batch.to(device)\n\n            outputs = model(inputs)\n            loss = criterion(outputs, labels)\n            total_loss += loss.item()\n\n            probs = torch.softmax(outputs, 1)\n            preds = torch.argmax(probs, 1)\n\n            all_labels.extend(labels.cpu().numpy())\n            all_preds.extend(preds.cpu().numpy())\n            all_probs.extend(probs.cpu().numpy())\n\n    avg_loss = total_loss / max(1, len(dataloader))\n    all_probs_np = np.asarray(all_probs)\n    all_labels_np = np.asarray(all_labels)\n    all_preds_np = np.asarray(all_preds)\n\n    acc = accuracy_score(all_labels_np, all_preds_np)\n    prec, rec, f1, _ = precision_recall_fscore_support(\n        all_labels_np, all_preds_np, average=\"binary\", pos_label=1, zero_division=0\n    )\n    auc = (\n        roc_auc_score(all_labels_np, all_probs_np[:, 1])\n        if len(np.unique(all_labels_np)) > 1 and all_probs_np.shape[1] > 1\n        else float(\"nan\")\n    )\n\n    return {\n        \"loss\": avg_loss, \"accuracy\": acc, \"precision\": prec,\n        \"recall\": rec, \"f1\": f1, \"auc\": auc,\n    }\n\n\ndef get_predictions_and_labels(model, dataloader, device):\n    model.eval()\n    labels_all, preds_all = [], []\n    active_model_streams = model.stream_names\n\n    with torch.no_grad():\n        for feats_batch, labels_batch in tqdm(dataloader, desc=\"Generating CM Data\", leave=False):\n            inputs = {name: feats_batch[name].to(device) for name in active_model_streams if name in feats_batch}\n            outputs = model(inputs)\n            preds = torch.argmax(outputs, 1)\n            labels_all.extend(labels_batch.cpu().numpy())\n            preds_all.extend(preds.cpu().numpy())\n\n    return np.asarray(labels_all), np.asarray(preds_all)\n\n\n# -----------------------------------------------------------------------------#\n#                            Main execution block                              #\n# -----------------------------------------------------------------------------\n\n\nif __name__ == \"__main__\" and \"__file__\" not in locals(): # Check if running in notebook or script\n    print(\"--- Running Model Training/Evaluation with Weighted Fusion ---\")\n    print(f\"Active Streams for this run: {ACTIVE_STREAMS}\")\n\n    # ------------------ load balanced data & scalers -------------------------\n    print(\"\\nLoading balanced training data & scalers â€¦\")\n    try:\n        with open(BALANCED_DATA_PKL_PATH, \"rb\") as f:\n            balanced_train_data_dict = pickle.load(f)\n        with open(SCALERS_PKL_PATH, \"rb\") as f:\n            scalers = pickle.load(f)\n        print(\"   âœ“ Pre-processed data loaded.\")\n    except FileNotFoundError as e:\n        print(f\"ERROR: {e}. Run the data preparation cell first.\")\n        sys.exit(1)\n    except Exception as e:\n        print(f\"Error loading pre-processed data: {e}\")\n        sys.exit(1)\n\n    # -------------------------- load PIE database ----------------------------\n    print(\"\\nLoading PIE database cache for validation â€¦\")\n    if not os.path.exists(PIE_DATABASE_CACHE_PATH):\n        print(f\"ERROR: PIE database cache not found at {PIE_DATABASE_CACHE_PATH}\")\n        sys.exit(1)\n    try:\n        with open(PIE_DATABASE_CACHE_PATH, \"rb\") as f:\n            pie_database = pickle.load(f)\n        print(\"   âœ“ PIE database loaded.\")\n    except Exception as e:\n        print(f\"Error loading PIE database: {e}\")\n        sys.exit(1)\n\n    # ------------------- create datasets / dataloaders -----------------------\n    print(\"\\nCreating Datasets and DataLoaders â€¦\")\n    try:\n        # Train dataset uses only ACTIVE_STREAMS\n        train_dataset = BalancedDataset(\n            balanced_train_data_dict, ACTIVE_STREAMS, label_key=\"label\"\n        )\n        del balanced_train_data_dict # Free memory\n        gc.collect()\n\n        # Validation dataset needs to be able to provide ALL streams,\n        # as different experiments might use different ACTIVE_STREAMS subsets.\n        # The PIEDataset's 'active_streams' param dictates what it processes.\n        val_dataset = PIEDataset(\n            pie_database, VAL_SETS_STR, POSE_DATA_DIR, SEQ_LEN, PRED_LEN,\n            scalers, active_streams=ALL_POSSIBLE_STREAMS # Val PIEDataset can provide any stream\n        )\n        print(f\"Train dataset size: {len(train_dataset)}\")\n        print(f\"Validation dataset size: {len(val_dataset)}\")\n\n    except Exception as e:\n        print(f\"Error creating datasets: {e}\")\n        raise\n\n    if len(train_dataset) == 0:\n        print(\"ERROR: Training dataset is empty. Exiting.\")\n        sys.exit(1)\n    if len(val_dataset) == 0:\n        print(\"ERROR: Validation dataset is empty. Exiting.\")\n        sys.exit(1)\n\n\n    train_loader = DataLoader(\n        train_dataset, batch_size=BATCH_SIZE, shuffle=True,\n        num_workers=2, pin_memory=True,\n    )\n    val_loader = DataLoader(\n        val_dataset, batch_size=BATCH_SIZE, shuffle=False,\n        num_workers=2, pin_memory=True,\n    )\n    print(\"   âœ“ DataLoaders ready.\")\n    del pie_database # Free memory\n    gc.collect()\n\n    # ------------------------- initialise the model --------------------------\n    print(\"\\nInitialising model â€¦\")\n    current_input_sizes = {}\n    SPECIAL_NAME_MAP = {\n        \"TRAFFIC_LIGHT\": \"TL_STATE\", \"STATIC_CONTEXT\": \"STATIC\",\n        \"EGO_SPEED\": \"EGO_SPEED\", \"EGO_ACC\": \"EGO_ACC\", \"EGO_GYRO\": \"EGO_GYRO\",\n        \"PED_ACTION\": \"PED_ACTION\", \"PED_LOOK\": \"PED_LOOK\", \"PED_OCCLUSION\": \"PED_OCC\",\n    }\n    for s_name in ACTIVE_STREAMS: # Model is built ONLY with active streams\n        const_name_suffix = SPECIAL_NAME_MAP.get(s_name.upper(), s_name.upper())\n        if s_name == \"bbox\": const_name_suffix = \"BBOX\"\n        elif s_name == \"pose\": const_name_suffix = \"POSE\"\n        full_const_name = f\"INPUT_SIZE_{const_name_suffix}\"\n\n        if full_const_name not in globals():\n            raise ValueError(f\"Input-size constant {full_const_name} for stream '{s_name}' not found.\")\n        current_input_sizes[s_name] = globals()[full_const_name]\n\n    model = MultiStreamWeightedAvgLSTM(\n        current_input_sizes, LSTM_HIDDEN_SIZE, NUM_LSTM_LAYERS,\n        NUM_CLASSES, ATTENTION_DIM, DROPOUT_RATE,\n        stream_names=ACTIVE_STREAMS, # Pass only the streams this model instance will use\n    ).to(DEVICE)\n\n    print(\"\\n--- Model architecture ---\")\n    print(model)\n    total_params = sum(p.numel() for p in model.parameters() if p.requires_grad)\n    print(f\"Trainable parameters: {total_params:,}\")\n    print(\"-\" * 30)\n\n    # ---------------- loss / optimiser / scheduler --------------------------\n    print(\"\\nCalculating class weights (for balanced dataset, should be ~1.0 each) â€¦\")\n    train_labels_list = train_dataset.labels.tolist() # Assuming BalancedDataset has .labels\n    n_class0 = train_labels_list.count(0)\n    n_class1 = train_labels_list.count(1)\n    total_samples = len(train_labels_list)\n\n    if total_samples == 0: w0, w1 = 1.0, 1.0\n    elif n_class0 == 0: w0, w1 = 0.0, 1.0 # Should not happen with balanced data\n    elif n_class1 == 0: w0, w1 = 1.0, 0.0 # Should not happen\n    else:\n        w0 = total_samples / (2.0 * n_class0)\n        w1 = total_samples / (2.0 * n_class1)\n\n    class_weights_tensor = torch.tensor([w0, w1], dtype=torch.float32).to(DEVICE)\n    print(f\"Loss weights â†’ Class 0: {w0:.2f}, Class 1: {w1:.2f}\")\n\n    criterion = nn.CrossEntropyLoss(weight=class_weights_tensor)\n    # Using AdamW for better weight decay handling\n    optimizer = optim.AdamW(model.parameters(), lr=LEARNING_RATE, weight_decay=WEIGHT_DECAY)\n    # LR Scheduler\n    scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(\n        optimizer, mode='max', factor=SCHEDULER_FACTOR,\n        patience=SCHEDULER_PATIENCE, verbose=True\n    )\n\n    best_val_f1 = -1.0\n    epochs_no_improve = 0 # For early stopping\n    history = {\"train_loss\": [], \"val_loss\": [], \"train_acc\": [], \"val_acc\": [], \"val_f1\": []}\n    best_model_path = f\"best_model_weighted_{'_'.join(sorted(ACTIVE_STREAMS))}.pth\" # Simpler name initially\n\n    # --------------------------- training loop -------------------------------\n    print(\"\\n--- Starting training ---\")\n    for epoch in range(NUM_EPOCHS):\n        t0 = time.time()\n\n        train_loss, train_acc = train_epoch(model, train_loader, optimizer, criterion, DEVICE)\n        val_metrics = evaluate_epoch(model, val_loader, criterion, DEVICE)\n\n        history[\"train_loss\"].append(train_loss)\n        history[\"val_loss\"].append(val_metrics[\"loss\"])\n        history[\"train_acc\"].append(train_acc)\n        history[\"val_acc\"].append(val_metrics[\"accuracy\"])\n        history[\"val_f1\"].append(val_metrics[\"f1\"])\n\n        epoch_time = time.time() - t0\n        print(f\"\\nEpoch {epoch + 1:02d}/{NUM_EPOCHS} â€“ {epoch_time:.1f}s - Current LR: {optimizer.param_groups[0]['lr']:.1e}\")\n        print(f\"  Train Loss: {train_loss:.4f} | Train Acc: {train_acc:.4f}\")\n        print(f\"  Val   Loss: {val_metrics['loss']:.4f} | Val Acc: {val_metrics['accuracy']:.4f}\")\n        print(f\"  Val   Prec: {val_metrics['precision']:.4f} | Rec: {val_metrics['recall']:.4f} | F1: {val_metrics['f1']:.4f} | AUC: {val_metrics['auc']:.4f}\")\n\n        # Step the scheduler with validation F1\n        scheduler.step(val_metrics[\"f1\"])\n\n        # Early stopping and best model saving\n        if val_metrics[\"f1\"] > best_val_f1:\n            best_val_f1 = val_metrics[\"f1\"]\n            # Update best_model_path to include epoch for clarity if multiple bests are saved over time due to fluctuations\n            current_best_path = f\"best_model_weighted_{'_'.join(sorted(ACTIVE_STREAMS))}_ep{epoch + 1}_f1_{best_val_f1:.4f}.pth\"\n            torch.save(model.state_dict(), current_best_path)\n            best_model_path = current_best_path # Store the path of the actually best model\n            print(f\"  âœ“ New best model saved â†’ {best_model_path}\")\n            epochs_no_improve = 0\n        else:\n            epochs_no_improve += 1\n            print(f\"  Validation F1 did not improve for {epochs_no_improve} epoch(s).\")\n\n        if epochs_no_improve >= EARLY_STOPPING_PATIENCE:\n            print(f\"\\nEarly stopping triggered after {epoch + 1} epochs due to no improvement in val F1 for {EARLY_STOPPING_PATIENCE} epochs.\")\n            break\n        \n        if optimizer.param_groups[0]['lr'] < 1e-7: # Stop if LR becomes too small\n            print(f\"\\nStopping training as learning rate {optimizer.param_groups[0]['lr']:.1e} is too low.\")\n            break\n\n\n    print(\"\\n--- Training finished ---\")\n\n    # --------------------------- plots ---------------------------------------\n    print(\"\\nPlotting training curves â€¦\")\n    num_actual_epochs = len(history[\"train_loss\"])\n    epochs_range = range(1, num_actual_epochs + 1)\n\n    fig, ax = plt.subplots(1, 2, figsize=(14, 6))\n    fig.suptitle(f\"Training History ({'_'.join(sorted(ACTIVE_STREAMS))})\", fontsize=16)\n\n    ax[0].plot(epochs_range, history[\"train_loss\"], label=\"Train Loss\", marker='o', linestyle='-')\n    ax[0].plot(epochs_range, history[\"val_loss\"], label=\"Val Loss\", marker='o', linestyle='-')\n    ax[0].set_xlabel(\"Epoch\")\n    ax[0].set_ylabel(\"Loss\")\n    ax[0].set_title(\"Loss Curve\")\n    ax[0].legend()\n    ax[0].grid(True, linestyle='--', alpha=0.7)\n\n    ax[1].plot(epochs_range, history[\"train_acc\"], label=\"Train Acc\", marker='s', linestyle='-')\n    ax[1].plot(epochs_range, history[\"val_acc\"], label=\"Val Acc\", marker='s', linestyle='-')\n    ax[1].plot(epochs_range, history[\"val_f1\"], label=\"Val F1\", marker='^', linestyle='--')\n    ax[1].set_xlabel(\"Epoch\")\n    ax[1].set_ylabel(\"Metric Value\")\n    ax[1].set_title(\"Accuracy & F1-Score\")\n    ax[1].legend()\n    ax[1].grid(True, linestyle='--', alpha=0.7)\n\n    plt.tight_layout(rect=[0, 0.03, 1, 0.95]) # Adjust layout to make space for suptitle\n    plt.show()\n\n    # ------------------- final evaluation (best model) -----------------------\n    print(\"\\n--- Final Evaluation on Validation set using Best Model ---\")\n    if os.path.exists(best_model_path):\n        try:\n            print(f\"Loading best model from: {best_model_path}\")\n            # Re-initialize model to ensure correct architecture if needed, then load state_dict\n            # (though current_model should be fine if training didn't corrupt it)\n            model.load_state_dict(torch.load(best_model_path, map_location=DEVICE))\n        except Exception as e:\n            print(f\"Warning: Could not load best model from {best_model_path} ({e}). Evaluating with last epoch parameters.\")\n    else:\n        print(f\"Warning: Best model path '{best_model_path}' not found. Evaluating with last epoch parameters.\")\n\n    final_val_metrics = evaluate_epoch(model, val_loader, criterion, DEVICE) # Re-evaluate best model\n    y_true_val, y_pred_val = get_predictions_and_labels(model, val_loader, DEVICE)\n    cm_val = confusion_matrix(y_true_val, y_pred_val, labels=[0, 1])\n\n    print(\"\\n--- Final Validation Metrics (Best Model) ---\")\n    for k, v in final_val_metrics.items():\n        print(f\"{k:<10}: {v:.4f}\")\n    print(f\"(Achieved best validation F1: {best_val_f1:.4f} during training at {best_model_path})\")\n\n    disp = ConfusionMatrixDisplay(confusion_matrix=cm_val, display_labels=[\"Not Crossing (0)\", \"Crossing (1)\"])\n    disp.plot(cmap=plt.cm.Blues, values_format='d')\n    plt.title(\"Confusion Matrix - Validation Set (Best Model)\")\n    plt.show()\n\n    # ------------------- inspect learned fusion weights ----------------------\n    if hasattr(model, \"fusion_weights\") and model.fusion_weights is not None:\n        final_weights = torch.softmax(model.fusion_weights, 0).detach().cpu().numpy()\n        print(\"\\n--- Learned Fusion Weights (from best model) ---\")\n        for stream_name_w, weight_val in zip(model.stream_names, final_weights):\n            print(f\"{stream_name_w:<20}: {weight_val:.4f}\")\n        print(\"-\" * 30)\n    else:\n        print(\"\\n--- Fusion weights not available or model does not use them. ---\")\n\n    print(\"\\n--- Script complete ---\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T10:39:02.521376Z","iopub.execute_input":"2025-05-08T10:39:02.521849Z","iopub.status.idle":"2025-05-08T11:20:41.205110Z","shell.execute_reply.started":"2025-05-08T10:39:02.521807Z","shell.execute_reply":"2025-05-08T11:20:41.204110Z"}},"outputs":[{"name":"stdout","text":"--- Running Weighted Average Fusion With Active Streams: ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'static_context'] ---\nUsing device: cuda\n--- Running Model Training/Evaluation with Weighted Fusion ---\nActive Streams for this run: ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'static_context']\n\nLoading balanced training data & scalers â€¦\n   âœ“ Pre-processed data loaded.\n\nLoading PIE database cache for validation â€¦\n   âœ“ PIE database loaded.\n\nCreating Datasets and DataLoaders â€¦\nTrain dataset size: 109934\nValidation dataset size: 77288\n   âœ“ DataLoaders ready.\n\nInitialising model â€¦\nInitializing Weighted-Avg model with streams: ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'static_context']\n  â€“ Adding stream 'bbox' (input 4)\n  â€“ Adding stream 'ped_action' (input 1)\n  â€“ Adding stream 'ped_look' (input 1)\n  â€“ Adding stream 'ego_speed' (input 1)\n  â€“ Adding stream 'ego_acc' (input 2)\n  â€“ Adding stream 'static_context' (input 23)\n\n--- Model architecture ---\nMultiStreamWeightedAvgLSTM(\n  (lstms): ModuleDict(\n    (bbox): LSTM(4, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n    (ped_action): LSTM(1, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n    (ped_look): LSTM(1, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n    (ego_speed): LSTM(1, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n    (ego_acc): LSTM(2, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n    (static_context): LSTM(23, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n  )\n  (attentions): ModuleDict(\n    (bbox): Attention(\n      (attention_net): Sequential(\n        (0): Linear(in_features=512, out_features=128, bias=True)\n        (1): Tanh()\n        (2): Linear(in_features=128, out_features=1, bias=True)\n      )\n    )\n    (ped_action): Attention(\n      (attention_net): Sequential(\n        (0): Linear(in_features=512, out_features=128, bias=True)\n        (1): Tanh()\n        (2): Linear(in_features=128, out_features=1, bias=True)\n      )\n    )\n    (ped_look): Attention(\n      (attention_net): Sequential(\n        (0): Linear(in_features=512, out_features=128, bias=True)\n        (1): Tanh()\n        (2): Linear(in_features=128, out_features=1, bias=True)\n      )\n    )\n    (ego_speed): Attention(\n      (attention_net): Sequential(\n        (0): Linear(in_features=512, out_features=128, bias=True)\n        (1): Tanh()\n        (2): Linear(in_features=128, out_features=1, bias=True)\n      )\n    )\n    (ego_acc): Attention(\n      (attention_net): Sequential(\n        (0): Linear(in_features=512, out_features=128, bias=True)\n        (1): Tanh()\n        (2): Linear(in_features=128, out_features=1, bias=True)\n      )\n    )\n    (static_context): Attention(\n      (attention_net): Sequential(\n        (0): Linear(in_features=512, out_features=128, bias=True)\n        (1): Tanh()\n        (2): Linear(in_features=128, out_features=1, bias=True)\n      )\n    )\n  )\n  (dropout): Dropout(p=0.3, inplace=False)\n  (fc1): Linear(in_features=512, out_features=256, bias=True)\n  (relu): ReLU()\n  (fc2): Linear(in_features=256, out_features=2, bias=True)\n)\nTrainable parameters: 13,224,206\n------------------------------\n\nCalculating class weights (for balanced dataset, should be ~1.0 each) â€¦\nLoss weights â†’ Class 0: 1.00, Class 1: 1.00\n\n--- Starting training ---\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/torch/optim/lr_scheduler.py:62: UserWarning: The verbose parameter is deprecated. Please use get_last_lr() to access the learning rate.\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Training:   0%|          | 0/3436 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":""}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":""}},"metadata":{}},{"name":"stdout","text":"\nEpoch 01/30 â€“ 319.5s - Current LR: 1.0e-04\n  Train Loss: 0.2735 | Train Acc: 0.8811\n  Val   Loss: 0.1669 | Val Acc: 0.9243\n  Val   Prec: 0.7076 | Rec: 0.8602 | F1: 0.7765 | AUC: 0.9708\n  âœ“ New best model saved â†’ best_model_weighted_bbox_ego_acc_ego_speed_ped_action_ped_look_static_context_ep1_f1_0.7765.pth\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Training:   0%|          | 0/3436 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":""}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":""}},"metadata":{}},{"name":"stdout","text":"\nEpoch 02/30 â€“ 320.1s - Current LR: 1.0e-04\n  Train Loss: 0.2127 | Train Acc: 0.9089\n  Val   Loss: 0.1544 | Val Acc: 0.9382\n  Val   Prec: 0.7574 | Rec: 0.8761 | F1: 0.8125 | AUC: 0.9772\n  âœ“ New best model saved â†’ best_model_weighted_bbox_ego_acc_ego_speed_ped_action_ped_look_static_context_ep2_f1_0.8125.pth\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Training:   0%|          | 0/3436 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":""}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":""}},"metadata":{}},{"name":"stdout","text":"\nEpoch 03/30 â€“ 321.8s - Current LR: 1.0e-04\n  Train Loss: 0.1920 | Train Acc: 0.9208\n  Val   Loss: 0.1647 | Val Acc: 0.9372\n  Val   Prec: 0.7583 | Rec: 0.8649 | F1: 0.8081 | AUC: 0.9749\n  Validation F1 did not improve for 1 epoch(s).\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Training:   0%|          | 0/3436 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":""}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":""}},"metadata":{}},{"name":"stdout","text":"\nEpoch 04/30 â€“ 319.6s - Current LR: 1.0e-04\n  Train Loss: 0.1709 | Train Acc: 0.9317\n  Val   Loss: 0.1889 | Val Acc: 0.9320\n  Val   Prec: 0.7353 | Rec: 0.8673 | F1: 0.7959 | AUC: 0.9746\n  Validation F1 did not improve for 2 epoch(s).\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Training:   0%|          | 0/3436 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":""}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":""}},"metadata":{}},{"name":"stdout","text":"\nEpoch 05/30 â€“ 320.2s - Current LR: 1.0e-04\n  Train Loss: 0.1522 | Train Acc: 0.9403\n  Val   Loss: 0.1911 | Val Acc: 0.9316\n  Val   Prec: 0.7297 | Rec: 0.8778 | F1: 0.7969 | AUC: 0.9713\n  Validation F1 did not improve for 3 epoch(s).\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Training:   0%|          | 0/3436 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":""}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":""}},"metadata":{}},{"name":"stdout","text":"\nEpoch 06/30 â€“ 321.0s - Current LR: 1.0e-05\n  Train Loss: 0.1269 | Train Acc: 0.9522\n  Val   Loss: 0.1907 | Val Acc: 0.9371\n  Val   Prec: 0.7609 | Rec: 0.8580 | F1: 0.8065 | AUC: 0.9713\n  Validation F1 did not improve for 4 epoch(s).\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Training:   0%|          | 0/3436 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":""}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":""}},"metadata":{}},{"name":"stdout","text":"\nEpoch 07/30 â€“ 321.4s - Current LR: 1.0e-05\n  Train Loss: 0.1204 | Train Acc: 0.9553\n  Val   Loss: 0.1962 | Val Acc: 0.9355\n  Val   Prec: 0.7574 | Rec: 0.8504 | F1: 0.8012 | AUC: 0.9702\n  Validation F1 did not improve for 5 epoch(s).\n\nEarly stopping triggered after 7 epochs due to no improvement in val F1 for 5 epochs.\n\n--- Training finished ---\n\nPlotting training curves â€¦\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1400x600 with 2 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"\n--- Final Evaluation on Validation set using Best Model ---\nLoading best model from: best_model_weighted_bbox_ego_acc_ego_speed_ped_action_ped_look_static_context_ep2_f1_0.8125.pth\n","output_type":"stream"},{"name":"stderr","text":"<ipython-input-1-720533514871>:753: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  model.load_state_dict(torch.load(best_model_path, map_location=DEVICE))\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":""}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Generating CM Data:   0%|          | 0/2416 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":""}},"metadata":{}},{"name":"stdout","text":"\n--- Final Validation Metrics (Best Model) ---\nloss      : 0.1544\naccuracy  : 0.9382\nprecision : 0.7574\nrecall    : 0.8761\nf1        : 0.8125\nauc       : 0.9772\n(Achieved best validation F1: 0.8125 during training at best_model_weighted_bbox_ego_acc_ego_speed_ped_action_ped_look_static_context_ep2_f1_0.8125.pth)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"\n--- Learned Fusion Weights (from best model) ---\nbbox                : 0.1687\nped_action          : 0.1679\nped_look            : 0.1630\nego_speed           : 0.1664\nego_acc             : 0.1656\nstatic_context      : 0.1683\n------------------------------\n\n--- Script complete ---\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}