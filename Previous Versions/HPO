{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e425e634",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-13T13:56:48.336994Z",
     "iopub.status.busy": "2025-05-13T13:56:48.336613Z",
     "iopub.status.idle": "2025-05-13T13:56:55.003823Z",
     "shell.execute_reply": "2025-05-13T13:56:55.002840Z"
    },
    "papermill": {
     "duration": 6.675269,
     "end_time": "2025-05-13T13:56:55.005554",
     "exception": false,
     "start_time": "2025-05-13T13:56:48.330285",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cloning into 'PIE'...\r\n",
      "remote: Enumerating objects: 178, done.\u001b[K\r\n",
      "remote: Counting objects: 100% (93/93), done.\u001b[K\r\n",
      "remote: Compressing objects: 100% (74/74), done.\u001b[K\r\n",
      "remote: Total 178 (delta 32), reused 75 (delta 17), pack-reused 85 (from 1)\u001b[K\r\n",
      "Receiving objects: 100% (178/178), 144.63 MiB | 36.37 MiB/s, done.\r\n",
      "Resolving deltas: 100% (73/73), done.\r\n",
      "Updating files: 100% (41/41), done.\r\n",
      "unzip:  cannot find or open /content/PIE/annotations/annotations.zip, /content/PIE/annotations/annotations.zip.zip or /content/PIE/annotations/annotations.zip.ZIP.\r\n",
      "unzip:  cannot find or open /content/PIE/annotations/annotations_vehicle.zip, /content/PIE/annotations/annotations_vehicle.zip.zip or /content/PIE/annotations/annotations_vehicle.zip.ZIP.\r\n"
     ]
    }
   ],
   "source": [
    "!git clone https://github.com/aras62/PIE.git\n",
    "!unzip /content/PIE/annotations/annotations.zip -d /content/PIE\n",
    "!unzip /content/PIE/annotations/annotations_vehicle.zip -d /content/PIE\n",
    "# !git clone https://github.com/hustvl/YOLOP.git\n",
    "!mkdir /kaggle/working/PIE/content"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0b021057",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-13T13:56:55.018276Z",
     "iopub.status.busy": "2025-05-13T13:56:55.017978Z",
     "iopub.status.idle": "2025-05-13T13:57:00.598351Z",
     "shell.execute_reply": "2025-05-13T13:57:00.597424Z"
    },
    "papermill": {
     "duration": 5.588204,
     "end_time": "2025-05-13T13:57:00.599998",
     "exception": false,
     "start_time": "2025-05-13T13:56:55.011794",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.0/1.0 MB\u001b[0m \u001b[31m16.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h"
     ]
    }
   ],
   "source": [
    "!pip install -q ultralytics opencv-python-headless "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "700d325b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-13T13:57:00.612876Z",
     "iopub.status.busy": "2025-05-13T13:57:00.612560Z",
     "iopub.status.idle": "2025-05-13T13:57:06.748624Z",
     "shell.execute_reply": "2025-05-13T13:57:06.747922Z"
    },
    "papermill": {
     "duration": 6.144105,
     "end_time": "2025-05-13T13:57:06.750316",
     "exception": false,
     "start_time": "2025-05-13T13:57:00.606211",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Creating new Ultralytics Settings v0.0.6 file ✅ \n",
      "View Ultralytics Settings with 'yolo settings' or at '/root/.config/Ultralytics/settings.json'\n",
      "Update Settings with 'yolo settings key=value', i.e. 'yolo settings runs_dir=path/to/dir'. For help see https://docs.ultralytics.com/quickstart/#ultralytics-settings.\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "import xml.etree.ElementTree as ET\n",
    "import os\n",
    "import numpy as np\n",
    "from sklearn.metrics import accuracy_score, precision_recall_fscore_support, roc_auc_score, confusion_matrix, ConfusionMatrixDisplay\n",
    "from tqdm.notebook import tqdm\n",
    "import random\n",
    "import math\n",
    "import zipfile\n",
    "import cv2\n",
    "from ultralytics import YOLO\n",
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "cd252e6e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-13T13:57:06.762714Z",
     "iopub.status.busy": "2025-05-13T13:57:06.762362Z",
     "iopub.status.idle": "2025-05-13T13:57:08.284198Z",
     "shell.execute_reply": "2025-05-13T13:57:08.283177Z"
    },
    "papermill": {
     "duration": 1.529266,
     "end_time": "2025-05-13T13:57:08.285550",
     "exception": false,
     "start_time": "2025-05-13T13:57:06.756284",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unzipped successfully.\n"
     ]
    }
   ],
   "source": [
    "zip_path = \"/kaggle/working/PIE/annotations/annotations.zip\"\n",
    "extract_to = \"/kaggle/working/PIE/annotations/\"\n",
    "\n",
    "if os.path.exists(extract_to + 'annotations'):\n",
    "    print(\"Exists already. Not unzipping.\")\n",
    "else:\n",
    "    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n",
    "        zip_ref.extractall(extract_to)\n",
    "    print(\"Unzipped successfully.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e46be5c6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-13T13:57:08.298260Z",
     "iopub.status.busy": "2025-05-13T13:57:08.298009Z",
     "iopub.status.idle": "2025-05-13T13:57:09.017041Z",
     "shell.execute_reply": "2025-05-13T13:57:09.015999Z"
    },
    "papermill": {
     "duration": 0.726797,
     "end_time": "2025-05-13T13:57:09.018562",
     "exception": false,
     "start_time": "2025-05-13T13:57:08.291765",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unzipped successfully.\n"
     ]
    }
   ],
   "source": [
    "zip_path = \"/kaggle/working/PIE/annotations/annotations_vehicle.zip\"\n",
    "extract_to = \"/kaggle/working/PIE/annotations/\"\n",
    "\n",
    "if os.path.exists(extract_to + 'annotations_vehicle'):\n",
    "    print(\"Exists already. Not unzipping.\")\n",
    "else:\n",
    "    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n",
    "        zip_ref.extractall(extract_to)\n",
    "    print(\"Unzipped successfully.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b1e27300",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-13T13:57:09.030953Z",
     "iopub.status.busy": "2025-05-13T13:57:09.030653Z",
     "iopub.status.idle": "2025-05-13T13:57:09.043344Z",
     "shell.execute_reply": "2025-05-13T13:57:09.042510Z"
    },
    "papermill": {
     "duration": 0.020259,
     "end_time": "2025-05-13T13:57:09.044615",
     "exception": false,
     "start_time": "2025-05-13T13:57:09.024356",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unzipped successfully.\n"
     ]
    }
   ],
   "source": [
    "zip_path = \"/kaggle/working/PIE/annotations/annotations_attributes.zip\"\n",
    "extract_to = \"/kaggle/working/PIE/annotations/\"\n",
    "\n",
    "if os.path.exists(extract_to + \"annotations_attributes\"):\n",
    "    print(\"Exists already. Not unzipping.\")\n",
    "else:\n",
    "    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n",
    "        zip_ref.extractall(extract_to)\n",
    "    print(\"Unzipped successfully.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7f2499d6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-13T13:57:09.057399Z",
     "iopub.status.busy": "2025-05-13T13:57:09.057169Z",
     "iopub.status.idle": "2025-05-13T14:10:46.614670Z",
     "shell.execute_reply": "2025-05-13T14:10:46.613805Z"
    },
    "papermill": {
     "duration": 817.571159,
     "end_time": "2025-05-13T14:10:46.621596",
     "exception": false,
     "start_time": "2025-05-13T13:57:09.050437",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- CELL 1: DATA PREPARATION ---\n",
      "Loading PIE database cache …\n",
      "✓ PIE DB loaded.\n",
      "\n",
      "Computing scalers …\n",
      "Scalers: {'ego_speed_mean': 13.428368358531902, 'ego_speed_std': 13.306451814881573, 'accX_mean': -0.028068299916188515, 'accX_std': 0.07827638994593288, 'accY_mean': -0.5235171297788667, 'accY_std': 0.8514409917161664, 'gyroZ_mean': -0.037905654051963104, 'gyroZ_std': 4.475510697376237}\n",
      "\n",
      "Extracting training sequences (all streams) …\n",
      "Loading pose PKLs …\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "27c527f397854b9ab0b8072c3ac0987d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4f2265fe6e654755a07f5fca0878ad0e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "610e1d52c7b14d96a94bdc217eec7558",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enumerating sequences …\n",
      "Total sequences: 333454\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c1b99da5fc7b4fffb57ca6a3a527e009",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "seq:   0%|          | 0/333454 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Raw training samples: 333454\n",
      "Balanced: 1s=54967 | 0s=54967\n",
      "\n",
      "Saving balanced data …\n",
      "✓ /kaggle/working/balanced_train_data.pkl\n",
      "Saving scalers …\n",
      "✓ /kaggle/working/scalers.pkl\n",
      "\n",
      "--- CELL 1: DATA PREPARATION COMPLETE ---\n"
     ]
    }
   ],
   "source": [
    "# -----------------------------------------------------------------------------\n",
    "# CELL 1: DATA PREPARATION & BALANCING  (run once before training)\n",
    "# -----------------------------------------------------------------------------\n",
    "#  This cell:\n",
    "#    1. Loads (or regenerates) the PIE database\n",
    "#    2. Computes per-signal standardisation scalers\n",
    "#    3. Extracts ALL training sequences for every stream\n",
    "#    4. Balances the dataset 50 / 50 on the crossing label\n",
    "#    5. Writes two pickles:\n",
    "#         - /kaggle/working/balanced_train_data.pkl\n",
    "#         - /kaggle/working/scalers.pkl\n",
    "# -----------------------------------------------------------------------------\n",
    "\n",
    "import os\n",
    "import sys\n",
    "import time\n",
    "import pickle\n",
    "import gc\n",
    "from pathlib import Path\n",
    "\n",
    "import cv2                               # used internally by PIE utilities\n",
    "import numpy as np\n",
    "import torch\n",
    "from torch.utils.data import Dataset\n",
    "from tqdm.notebook import tqdm\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                                PIE utilities                                 #\n",
    "# -----------------------------------------------------------------------------#\n",
    "pie_utilities_path = \"/kaggle/working/PIE/utilities\"\n",
    "if pie_utilities_path not in sys.path:\n",
    "    sys.path.insert(0, pie_utilities_path)\n",
    "\n",
    "try:\n",
    "    from pie_data import PIE\n",
    "except ImportError as e:\n",
    "    print(\n",
    "        f\"[WARN] Could not import PIE from {pie_utilities_path}. \"\n",
    "        f\"If the DB cache already exists this is fine.\\n→ {e}\"\n",
    "    )\n",
    "    PIE = None\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                              configuration                                   #\n",
    "# -----------------------------------------------------------------------------#\n",
    "PIE_ROOT_PATH           = \"/kaggle/working/PIE\"\n",
    "POSE_DATA_DIR           = \"/kaggle/input/pose-data/extracted_poses2\"\n",
    "PIE_DATABASE_CACHE_PATH = \"/kaggle/input/pie-database/pie_database.pkl\"\n",
    "\n",
    "TRAIN_SETS_STR = [\"set01\", \"set02\", \"set04\"]\n",
    "\n",
    "BALANCED_DATA_PKL_PATH  = \"/kaggle/working/balanced_train_data.pkl\"\n",
    "SCALERS_PKL_PATH        = \"/kaggle/working/scalers.pkl\"\n",
    "\n",
    "# Streams used throughout the project ----------------------------------------\n",
    "ALL_POSSIBLE_STREAMS = [\n",
    "    \"bbox\",\n",
    "    \"pose\",\n",
    "    \"ego_speed\",\n",
    "    \"ego_acc\",\n",
    "    \"ego_gyro\",\n",
    "    \"ped_action\",\n",
    "    \"ped_look\",\n",
    "    \"ped_occlusion\",\n",
    "    \"traffic_light\",\n",
    "    \"static_context\",\n",
    "]\n",
    "\n",
    "# Feature sizes & categorical constants --------------------------------------\n",
    "SEQ_LEN, PRED_LEN = 30, 1\n",
    "\n",
    "INPUT_SIZE_BBOX       = 4\n",
    "INPUT_SIZE_POSE       = 34\n",
    "INPUT_SIZE_EGO_SPEED  = 1\n",
    "INPUT_SIZE_EGO_ACC    = 2\n",
    "INPUT_SIZE_EGO_GYRO   = 1\n",
    "INPUT_SIZE_PED_ACTION = 1\n",
    "INPUT_SIZE_PED_LOOK   = 1\n",
    "INPUT_SIZE_PED_OCC    = 1\n",
    "INPUT_SIZE_TL_STATE   = 4\n",
    "\n",
    "NUM_SIGNALIZED_CATS   = 4\n",
    "NUM_INTERSECTION_CATS = 5\n",
    "NUM_AGE_CATS          = 4\n",
    "NUM_GENDER_CATS       = 3\n",
    "NUM_TRAFFIC_DIR_CATS  = 2\n",
    "\n",
    "LANE_CATEGORIES = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 4, 7: 4, 8: 4}\n",
    "NUM_LANE_CATS   = len(set(LANE_CATEGORIES.values()))\n",
    "\n",
    "INPUT_SIZE_STATIC = (\n",
    "    NUM_SIGNALIZED_CATS\n",
    "    + NUM_INTERSECTION_CATS\n",
    "    + NUM_AGE_CATS\n",
    "    + NUM_GENDER_CATS\n",
    "    + NUM_TRAFFIC_DIR_CATS\n",
    "    + NUM_LANE_CATS\n",
    ")  # → 23\n",
    "\n",
    "TL_STATE_MAP = {\"__undefined__\": 0, \"red\": 1, \"yellow\": 2, \"green\": 3}\n",
    "NUM_TL_STATES = len(TL_STATE_MAP)\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                               helper utils                                   #\n",
    "# -----------------------------------------------------------------------------#\n",
    "\n",
    "\n",
    "def to_one_hot(index: int, num_classes: int) -> np.ndarray:\n",
    "    vec = np.zeros(num_classes, dtype=np.float32)\n",
    "    vec[int(np.clip(index, 0, num_classes - 1))] = 1.0\n",
    "    return vec\n",
    "\n",
    "\n",
    "def balance_samples_count(seq_data: dict, label_key: str, seed: int = 42) -> dict:\n",
    "    \"\"\"Undersample majority class so positive and negative labels are equal.\"\"\"\n",
    "    labels = [lbl[0] for lbl in seq_data[label_key]]\n",
    "    n_pos  = int(np.sum(labels))\n",
    "    n_neg  = len(labels) - n_pos\n",
    "\n",
    "    if n_pos == n_neg:\n",
    "        print(\"Dataset already balanced.\")\n",
    "        return seq_data.copy()\n",
    "\n",
    "    majority_label    = 0 if n_neg > n_pos else 1\n",
    "    minority_count    = min(n_pos, n_neg)\n",
    "    majority_indices  = np.where(np.array(labels) == majority_label)[0]\n",
    "    minority_indices  = np.where(np.array(labels) != majority_label)[0]\n",
    "\n",
    "    rng = np.random.default_rng(seed)\n",
    "    keep_majority = rng.choice(majority_indices, size=minority_count, replace=False)\n",
    "    final_indices = np.concatenate([minority_indices, keep_majority])\n",
    "    rng.shuffle(final_indices)\n",
    "\n",
    "    balanced = {}\n",
    "    for k, v in seq_data.items():\n",
    "        balanced[k] = [v[i] for i in final_indices]\n",
    "\n",
    "    print(f\"Balanced: 1s={minority_count} | 0s={minority_count}\")\n",
    "    return balanced\n",
    "\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                                PIEDataset                                    #\n",
    "# -----------------------------------------------------------------------------#\n",
    "class PIEDataset(Dataset):\n",
    "    \"\"\"\n",
    "    Lightweight dataset that can generate any subset of the PIE feature streams.\n",
    "    \"\"\"\n",
    "\n",
    "    def __init__(\n",
    "        self,\n",
    "        pie_db: dict,\n",
    "        set_names: list[str],\n",
    "        pose_dir: str,\n",
    "        seq_len: int,\n",
    "        pred_len: int,\n",
    "        scalers: dict,\n",
    "        streams_to_generate: list[str],\n",
    "    ):\n",
    "        self.pie_db            = pie_db\n",
    "        self.set_names         = set_names\n",
    "        self.pose_dir          = pose_dir\n",
    "        self.seq_len           = seq_len\n",
    "        self.pred_len          = pred_len\n",
    "        self.scalers           = scalers\n",
    "        self.streams           = streams_to_generate\n",
    "        self._input_sizes      = self._build_input_size_map()\n",
    "        self.all_pose_data     = {}\n",
    "        self.sequences         = []\n",
    "\n",
    "        if \"pose\" in self.streams:\n",
    "            self._load_pose_pkls()\n",
    "        self._enumerate_sequences()\n",
    "\n",
    "    # ------------------------ internal helpers -------------------------------\n",
    "    def _build_input_size_map(self) -> dict:\n",
    "        special = {\n",
    "            \"TRAFFIC_LIGHT\": \"TL_STATE\",\n",
    "            \"STATIC_CONTEXT\": \"STATIC\",\n",
    "            \"EGO_SPEED\": \"EGO_SPEED\",\n",
    "            \"EGO_ACC\": \"EGO_ACC\",\n",
    "            \"EGO_GYRO\": \"EGO_GYRO\",\n",
    "            \"PED_ACTION\": \"PED_ACTION\",\n",
    "            \"PED_LOOK\": \"PED_LOOK\",\n",
    "            \"PED_OCCLUSION\": \"PED_OCC\",\n",
    "        }\n",
    "        sizes = {}\n",
    "        for s in ALL_POSSIBLE_STREAMS:\n",
    "            const = f\"INPUT_SIZE_{special.get(s.upper(), s.upper())}\"\n",
    "            if s == \"bbox\":\n",
    "                const = \"INPUT_SIZE_BBOX\"\n",
    "            elif s == \"pose\":\n",
    "                const = \"INPUT_SIZE_POSE\"\n",
    "            sizes[s] = globals().get(const, 1)\n",
    "        return sizes\n",
    "\n",
    "    def _load_pose_pkls(self):\n",
    "        print(\"Loading pose PKLs …\")\n",
    "        for set_id in self.set_names:\n",
    "            set_dir = Path(self.pose_dir) / set_id\n",
    "            if not set_dir.is_dir():\n",
    "                continue\n",
    "            self.all_pose_data[set_id] = {}\n",
    "            for pkl_path in tqdm(set_dir.glob(f\"{set_id}_*_poses.pkl\"), leave=False):\n",
    "                try:\n",
    "                    with open(pkl_path, \"rb\") as fp:\n",
    "                        loaded = pickle.load(fp)\n",
    "                except Exception as e:\n",
    "                    print(f\"[pose load] {pkl_path}: {e}\")\n",
    "                    continue\n",
    "\n",
    "                if len(loaded) != 1:\n",
    "                    continue\n",
    "                (key, data), *_ = loaded.items()\n",
    "                vid = \"_\".join(key.split(\"_\")[1:])\n",
    "                if vid in self.pie_db.get(set_id, {}):\n",
    "                    self.all_pose_data[set_id][vid] = data\n",
    "\n",
    "    def _enumerate_sequences(self):\n",
    "        print(\"Enumerating sequences …\")\n",
    "        for set_id in self.set_names:\n",
    "            for vid, vdb in self.pie_db.get(set_id, {}).items():\n",
    "                for pid, pdb in vdb.get(\"ped_annotations\", {}).items():\n",
    "                    frames = pdb.get(\"frames\", [])\n",
    "                    if len(frames) < self.seq_len + self.pred_len:\n",
    "                        continue\n",
    "                    frames = sorted(frames)\n",
    "                    for i in range(len(frames) - self.seq_len - self.pred_len + 1):\n",
    "                        start = frames[i]\n",
    "                        obs_end = frames[i + self.seq_len - 1]\n",
    "                        if obs_end - start != self.seq_len - 1:\n",
    "                            continue\n",
    "                        target = frames[i + self.seq_len + self.pred_len - 1]\n",
    "                        if target - obs_end != self.pred_len:\n",
    "                            continue\n",
    "                        self.sequences.append((set_id, vid, pid, start))\n",
    "        print(f\"Total sequences: {len(self.sequences)}\")\n",
    "\n",
    "    # ------------------ Dataset API ------------------------------------------\n",
    "    def __len__(self):\n",
    "        return len(self.sequences)\n",
    "\n",
    "    def __getitem__(self, idx: int):\n",
    "        set_id, vid, pid, start = self.sequences[idx]\n",
    "        vdb  = self.pie_db[set_id][vid]\n",
    "        pdb  = vdb[\"ped_annotations\"][pid]\n",
    "        ego  = vdb.get(\"vehicle_annotations\", {})\n",
    "        tldb = vdb.get(\"traffic_annotations\", {})\n",
    "\n",
    "        frame_nums = list(range(start, start + self.seq_len))\n",
    "        target_f   = start + self.seq_len + self.pred_len - 1\n",
    "\n",
    "        # label ---------------------------------------------------------------\n",
    "        label = 0\n",
    "        if (\n",
    "            \"frames\" in pdb\n",
    "            and \"behavior\" in pdb\n",
    "            and \"cross\" in pdb[\"behavior\"]\n",
    "            and target_f in pdb[\"frames\"]\n",
    "        ):\n",
    "            try:\n",
    "                j = pdb[\"frames\"].index(target_f)\n",
    "                label = pdb[\"behavior\"][\"cross\"][j]\n",
    "                if label == -1:\n",
    "                    label = 0\n",
    "            except (ValueError, IndexError):\n",
    "                pass\n",
    "\n",
    "        # static context ------------------------------------------------------\n",
    "        static_vec = np.zeros(INPUT_SIZE_STATIC, np.float32)\n",
    "        if \"static_context\" in self.streams:\n",
    "            attr  = pdb.get(\"attributes\", {})\n",
    "            sig   = attr.get(\"signalized\", 0)\n",
    "            intr  = attr.get(\"intersection\", 0)\n",
    "            age   = attr.get(\"age\", 2)\n",
    "            gen   = attr.get(\"gender\", 0)\n",
    "            tdir  = int(attr.get(\"traffic_direction\", 0))\n",
    "            ln    = attr.get(\"num_lanes\", 2)\n",
    "            lncat = LANE_CATEGORIES.get(ln, LANE_CATEGORIES[max(LANE_CATEGORIES)])\n",
    "            static_vec = np.concatenate(\n",
    "                [\n",
    "                    to_one_hot(sig,  NUM_SIGNALIZED_CATS),\n",
    "                    to_one_hot(intr, NUM_INTERSECTION_CATS),\n",
    "                    to_one_hot(age,  NUM_AGE_CATS),\n",
    "                    to_one_hot(gen,  NUM_GENDER_CATS),\n",
    "                    to_one_hot(tdir, NUM_TRAFFIC_DIR_CATS),\n",
    "                    to_one_hot(lncat, NUM_LANE_CATS),\n",
    "                ]\n",
    "            ).astype(np.float32)\n",
    "\n",
    "        # per-frame feature assembly -----------------------------------------\n",
    "        feats = {s: [] for s in self.streams}\n",
    "\n",
    "        for fn in frame_nums:\n",
    "            fidx = -1\n",
    "            if \"frames\" in pdb:\n",
    "                try:\n",
    "                    fidx = pdb[\"frames\"].index(fn)\n",
    "                except ValueError:\n",
    "                    pass\n",
    "\n",
    "            ego_f = ego.get(fn, {})\n",
    "\n",
    "            # bbox ----------------------------------------------------------\n",
    "            if \"bbox\" in self.streams:\n",
    "                bb = np.zeros(INPUT_SIZE_BBOX, np.float32)\n",
    "                if (\n",
    "                    fidx != -1\n",
    "                    and \"bbox\" in pdb\n",
    "                    and len(pdb[\"bbox\"]) > fidx\n",
    "                ):\n",
    "                    try:\n",
    "                        x1, y1, x2, y2 = pdb[\"bbox\"][fidx]\n",
    "                        w_img = vdb.get(\"width\", 1920)\n",
    "                        h_img = vdb.get(\"height\", 1080)\n",
    "                        if w_img > 0 and h_img > 0:\n",
    "                            cx = ((x1 + x2) / 2) / w_img\n",
    "                            cy = ((y1 + y2) / 2) / h_img\n",
    "                            w  = (x2 - x1) / w_img\n",
    "                            h  = (y2 - y1) / h_img\n",
    "                            if 0 < w and 0 < h and 0 <= cx <= 1 and 0 <= cy <= 1:\n",
    "                                bb = np.array([cx, cy, w, h], np.float32)\n",
    "                    except Exception:\n",
    "                        pass\n",
    "                feats[\"bbox\"].append(bb)\n",
    "\n",
    "            # pose ----------------------------------------------------------\n",
    "            if \"pose\" in self.streams:\n",
    "                pvec = np.zeros(INPUT_SIZE_POSE, np.float32)\n",
    "                pose_set = self.all_pose_data.get(set_id, {}).get(vid, {})\n",
    "                p_loaded = pose_set.get(fn, {}).get(pid)\n",
    "                if (\n",
    "                    isinstance(p_loaded, np.ndarray)\n",
    "                    and p_loaded.shape == (INPUT_SIZE_POSE,)\n",
    "                ):\n",
    "                    pvec = p_loaded\n",
    "                feats[\"pose\"].append(pvec)\n",
    "\n",
    "            # ego signals ---------------------------------------------------\n",
    "            if \"ego_speed\" in self.streams:\n",
    "                s = ego_f.get(\"OBD_speed\", 0.0) or ego_f.get(\"GPS_speed\", 0.0)\n",
    "                s = (s - self.scalers.get(\"ego_speed_mean\", 0.0)) / self.scalers.get(\n",
    "                    \"ego_speed_std\", 1.0\n",
    "                )\n",
    "                feats[\"ego_speed\"].append([s])\n",
    "\n",
    "            if \"ego_acc\" in self.streams:\n",
    "                ax = ego_f.get(\"accX\", 0.0)\n",
    "                ay = ego_f.get(\"accY\", 0.0)\n",
    "                ax = (ax - self.scalers.get(\"accX_mean\", 0.0)) / self.scalers.get(\n",
    "                    \"accX_std\", 1.0\n",
    "                )\n",
    "                ay = (ay - self.scalers.get(\"accY_mean\", 0.0)) / self.scalers.get(\n",
    "                    \"accY_std\", 1.0\n",
    "                )\n",
    "                feats[\"ego_acc\"].append([ax, ay])\n",
    "\n",
    "            if \"ego_gyro\" in self.streams:\n",
    "                gz = ego_f.get(\"gyroZ\", 0.0)\n",
    "                gz = (gz - self.scalers.get(\"gyroZ_mean\", 0.0)) / self.scalers.get(\n",
    "                    \"gyroZ_std\", 1.0\n",
    "                )\n",
    "                feats[\"ego_gyro\"].append([gz])\n",
    "\n",
    "            # pedestrian behaviour -----------------------------------------\n",
    "            if \"ped_action\" in self.streams:\n",
    "                action = (\n",
    "                    pdb[\"behavior\"][\"action\"][fidx]\n",
    "                    if fidx != -1\n",
    "                    and \"behavior\" in pdb\n",
    "                    and \"action\" in pdb[\"behavior\"]\n",
    "                    and len(pdb[\"behavior\"][\"action\"]) > fidx\n",
    "                    else 0\n",
    "                )\n",
    "                feats[\"ped_action\"].append([float(action)])\n",
    "\n",
    "            if \"ped_look\" in self.streams:\n",
    "                look = (\n",
    "                    pdb[\"behavior\"][\"look\"][fidx]\n",
    "                    if fidx != -1\n",
    "                    and \"behavior\" in pdb\n",
    "                    and \"look\" in pdb[\"behavior\"]\n",
    "                    and len(pdb[\"behavior\"][\"look\"]) > fidx\n",
    "                    else 0\n",
    "                )\n",
    "                feats[\"ped_look\"].append([float(look)])\n",
    "\n",
    "            if \"ped_occlusion\" in self.streams:\n",
    "                occ = (\n",
    "                    float(pdb[\"occlusion\"][fidx]) / 2.0\n",
    "                    if fidx != -1\n",
    "                    and \"occlusion\" in pdb\n",
    "                    and len(pdb[\"occlusion\"]) > fidx\n",
    "                    else 0.0\n",
    "                )\n",
    "                feats[\"ped_occlusion\"].append([occ])\n",
    "\n",
    "            # traffic light -------------------------------------------------\n",
    "            if \"traffic_light\" in self.streams:\n",
    "                tl_state = 0\n",
    "                for obj in tldb.values():\n",
    "                    if obj.get(\"obj_class\") != \"traffic_light\":\n",
    "                        continue\n",
    "                    if \"frames\" not in obj or \"state\" not in obj:\n",
    "                        continue\n",
    "                    try:\n",
    "                        j = obj[\"frames\"].index(fn)\n",
    "                        if obj[\"state\"][j] != 0:\n",
    "                            tl_state = obj[\"state\"][j]\n",
    "                            break\n",
    "                    except (ValueError, IndexError):\n",
    "                        continue\n",
    "                feats[\"traffic_light\"].append(to_one_hot(tl_state, NUM_TL_STATES))\n",
    "\n",
    "            # static context -----------------------------------------------\n",
    "            if \"static_context\" in self.streams:\n",
    "                feats[\"static_context\"].append(static_vec)\n",
    "\n",
    "        # numpy → torch ------------------------------------------------------\n",
    "        out = {\n",
    "            s: torch.tensor(np.asarray(feats[s], np.float32), dtype=torch.float32)\n",
    "            for s in self.streams\n",
    "        }\n",
    "        return out, torch.tensor(label, dtype=torch.long)\n",
    "\n",
    "\n",
    "# =============================================================================\n",
    "#                       MAIN: build balanced training set\n",
    "# =============================================================================\n",
    "if __name__ == \"__main__\" and '__file__' not in globals(): # Avoid running this if imported\n",
    "    print(\"\\n--- CELL 1: DATA PREPARATION ---\")\n",
    "\n",
    "    # 1) load / regenerate PIE DB -------------------------------------------\n",
    "    cache = Path(PIE_DATABASE_CACHE_PATH)\n",
    "    if cache.is_file():\n",
    "        print(\"Loading PIE database cache …\")\n",
    "        with cache.open(\"rb\") as fp:\n",
    "            pie_db = pickle.load(fp)\n",
    "        print(\"✓ PIE DB loaded.\")\n",
    "    else:\n",
    "        if PIE is None:\n",
    "            raise RuntimeError(\"PIE class unavailable: cannot rebuild database.\")\n",
    "        print(\"Cache not found – regenerating PIE DB …\")\n",
    "        pie_db = PIE(data_path=PIE_ROOT_PATH, regen_database=True).generate_database()\n",
    "        if not pie_db:\n",
    "            raise RuntimeError(\"PIE DB generation failed.\")\n",
    "        print(\"✓ PIE DB generated.\")\n",
    "\n",
    "    # 2) compute scalers -----------------------------------------------------\n",
    "    print(\"\\nComputing scalers …\")\n",
    "    spd, accx, accy, gyz = [], [], [], []\n",
    "    for sid in TRAIN_SETS_STR:\n",
    "        for vid, vdb in pie_db.get(sid, {}).items():\n",
    "            for frame, e in vdb.get(\"vehicle_annotations\", {}).items():\n",
    "                s  = e.get(\"OBD_speed\", 0.0) or e.get(\"GPS_speed\", 0.0)\n",
    "                spd.append(s)\n",
    "                accx.append(e.get(\"accX\", 0.0))\n",
    "                accy.append(e.get(\"accY\", 0.0))\n",
    "                gyz.append(e.get(\"gyroZ\", 0.0))\n",
    "\n",
    "    scalers = {}\n",
    "    if spd:\n",
    "        scalers[\"ego_speed_mean\"] = float(np.mean(spd))\n",
    "        scalers[\"ego_speed_std\"]  = float(max(np.std(spd), 1e-6))\n",
    "    if accx:\n",
    "        scalers[\"accX_mean\"] = float(np.mean(accx))\n",
    "        scalers[\"accX_std\"]  = float(max(np.std(accx), 1e-6))\n",
    "        scalers[\"accY_mean\"] = float(np.mean(accy))\n",
    "        scalers[\"accY_std\"]  = float(max(np.std(accy), 1e-6))\n",
    "    if gyz:\n",
    "        scalers[\"gyroZ_mean\"] = float(np.mean(gyz))\n",
    "        scalers[\"gyroZ_std\"]  = float(max(np.std(gyz), 1e-6))\n",
    "\n",
    "    print(\"Scalers:\", scalers)\n",
    "\n",
    "    # 3) extract full training dataset --------------------------------------\n",
    "    print(\"\\nExtracting training sequences (all streams) …\")\n",
    "    full_ds = PIEDataset(\n",
    "        pie_db,\n",
    "        TRAIN_SETS_STR,\n",
    "        POSE_DATA_DIR,\n",
    "        SEQ_LEN,\n",
    "        PRED_LEN,\n",
    "        scalers,\n",
    "        ALL_POSSIBLE_STREAMS,\n",
    "    )\n",
    "\n",
    "    train_dict = {s: [] for s in ALL_POSSIBLE_STREAMS}\n",
    "    train_dict[\"label\"] = []\n",
    "\n",
    "    for i in tqdm(range(len(full_ds)), desc=\"seq\"):\n",
    "        feat, lbl = full_ds[i]\n",
    "        for s in ALL_POSSIBLE_STREAMS:\n",
    "            train_dict[s].append(feat[s].numpy())\n",
    "        train_dict[\"label\"].append([lbl.item()])\n",
    "\n",
    "    print(f\"Raw training samples: {len(train_dict['label'])}\")\n",
    "\n",
    "    # 4) balance -------------------------------------------------------------\n",
    "    balanced = balance_samples_count(train_dict, \"label\")\n",
    "    del train_dict, full_ds\n",
    "    gc.collect()\n",
    "\n",
    "    # 5) write pickles -------------------------------------------------------\n",
    "    print(\"\\nSaving balanced data …\")\n",
    "    with open(BALANCED_DATA_PKL_PATH, \"wb\") as fp:\n",
    "        pickle.dump(balanced, fp, pickle.HIGHEST_PROTOCOL)\n",
    "    print(f\"✓ {BALANCED_DATA_PKL_PATH}\")\n",
    "\n",
    "    print(\"Saving scalers …\")\n",
    "    with open(SCALERS_PKL_PATH, \"wb\") as fp:\n",
    "        pickle.dump(scalers, fp, pickle.HIGHEST_PROTOCOL)\n",
    "    print(f\"✓ {SCALERS_PKL_PATH}\")\n",
    "\n",
    "    del pie_db\n",
    "    gc.collect()\n",
    "\n",
    "    print(\"\\n--- CELL 1: DATA PREPARATION COMPLETE ---\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "0664383f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-13T14:10:46.642579Z",
     "iopub.status.busy": "2025-05-13T14:10:46.642310Z",
     "iopub.status.idle": "2025-05-13T17:03:36.782595Z",
     "shell.execute_reply": "2025-05-13T17:03:36.781371Z"
    },
    "papermill": {
     "duration": 10370.156211,
     "end_time": "2025-05-13T17:03:36.784615",
     "exception": false,
     "start_time": "2025-05-13T14:10:46.628404",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- CELL 1: Skipping data preparation, balanced data and scalers found. ---\n",
      "--- Running Weighted Average Fusion With Active Streams: ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'static_context'] ---\n",
      "Using device: cuda\n",
      "--- CELL 2: Model Training, HPO, and Evaluation on Set03 ---\n",
      "Active Streams: ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'static_context']\n",
      "\n",
      "Loading balanced training data, scalers, and PIE database …\n",
      "   ✓ Pre-processed data and PIE database loaded.\n",
      "\n",
      "Creating Datasets and DataLoaders …\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-05-13 14:10:59,046] A new study created in memory with name: no-name-4c4a781e-1b1a-4d1f-98cd-cef9ab7efbdb\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   ✓ Train DataLoader ready (109934 samples).\n",
      "   ✓ HPO Validation DataLoader ready (77288 samples for ['set05', 'set06']).\n",
      "\n",
      "--- Starting Hyperparameter Optimization (15 trials, 3 epochs/trial) ---\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7b5f582d22754cd8af03d198b3a0d003",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/15 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[I 2025-05-13 14:22:42,162] Trial 0 finished with value: 0.7974195518570829 and parameters: {'lstm_hidden_size': 256, 'num_lstm_layers': 2, 'dropout_rate': 0.2, 'learning_rate': 7.160849144555769e-05, 'attention_dim': 128}. Best is trial 0 with value: 0.7974195518570829.\n",
      "[I 2025-05-13 14:34:26,035] Trial 1 finished with value: 0.788747433264887 and parameters: {'lstm_hidden_size': 256, 'num_lstm_layers': 2, 'dropout_rate': 0.5, 'learning_rate': 8.152843673110742e-05, 'attention_dim': 128}. Best is trial 0 with value: 0.7974195518570829.\n",
      "[I 2025-05-13 14:40:39,103] Trial 2 finished with value: 0.8193734152735398 and parameters: {'lstm_hidden_size': 256, 'num_lstm_layers': 1, 'dropout_rate': 0.4, 'learning_rate': 6.893882309676892e-05, 'attention_dim': 128}. Best is trial 2 with value: 0.8193734152735398.\n",
      "[I 2025-05-13 14:52:18,348] Trial 3 finished with value: 0.8126899858714732 and parameters: {'lstm_hidden_size': 256, 'num_lstm_layers': 2, 'dropout_rate': 0.4, 'learning_rate': 5.564426587452873e-05, 'attention_dim': 64}. Best is trial 2 with value: 0.8193734152735398.\n",
      "[I 2025-05-13 15:09:06,271] Trial 4 finished with value: 0.8001954476973819 and parameters: {'lstm_hidden_size': 384, 'num_lstm_layers': 2, 'dropout_rate': 0.30000000000000004, 'learning_rate': 6.260977143530197e-05, 'attention_dim': 64}. Best is trial 2 with value: 0.8193734152735398.\n",
      "[I 2025-05-13 15:20:54,198] Trial 5 pruned. \n",
      "[I 2025-05-13 15:38:09,690] Trial 6 finished with value: 0.820928283513589 and parameters: {'lstm_hidden_size': 384, 'num_lstm_layers': 2, 'dropout_rate': 0.5, 'learning_rate': 0.00039246176690796805, 'attention_dim': 128}. Best is trial 6 with value: 0.820928283513589.\n",
      "[I 2025-05-13 15:44:54,940] Trial 7 pruned. \n",
      "[I 2025-05-13 15:56:45,250] Trial 8 pruned. \n",
      "[I 2025-05-13 16:08:35,771] Trial 9 pruned. \n",
      "[I 2025-05-13 16:16:20,100] Trial 10 finished with value: 0.8065560335996722 and parameters: {'lstm_hidden_size': 384, 'num_lstm_layers': 1, 'dropout_rate': 0.5, 'learning_rate': 0.0004505569439185639, 'attention_dim': 128}. Best is trial 6 with value: 0.820928283513589.\n",
      "[I 2025-05-13 16:21:56,732] Trial 11 finished with value: 0.8247539589324046 and parameters: {'lstm_hidden_size': 128, 'num_lstm_layers': 1, 'dropout_rate': 0.4, 'learning_rate': 0.00015617600371455447, 'attention_dim': 128}. Best is trial 11 with value: 0.8247539589324046.\n",
      "[I 2025-05-13 16:27:21,624] Trial 12 pruned. \n",
      "[I 2025-05-13 16:32:50,249] Trial 13 pruned. \n",
      "[I 2025-05-13 16:40:25,672] Trial 14 pruned. \n",
      "\n",
      "--- Hyperparameter Optimization Finished (8966.63s) ---\n",
      "Best HPO F1 score on validation set (['set05', 'set06']): 0.8248\n",
      "Best hyperparameters found:\n",
      "  lstm_hidden_size: 128\n",
      "  num_lstm_layers: 1\n",
      "  dropout_rate: 0.4\n",
      "  learning_rate: 0.00015617600371455447\n",
      "  attention_dim: 128\n",
      "\n",
      "--- Training Final Model with Best Hyperparameters ---\n",
      "\n",
      "--- Final Model Architecture ---\n",
      "Trainable parameters in final model: 1,062,798\n",
      "\n",
      "Training final model for 5 epochs with LR=1.56e-04...\n",
      "  Epoch 01/5 – 184.4s | Train Loss: 0.3019 | Val HPO Loss: 0.2293 | Val HPO F1@0.5: 0.7550\n",
      "  Epoch 02/5 – 183.9s | Train Loss: 0.2262 | Val HPO Loss: 0.2530 | Val HPO F1@0.5: 0.7507\n",
      "  Epoch 03/5 – 177.3s | Train Loss: 0.2044 | Val HPO Loss: 0.2580 | Val HPO F1@0.5: 0.7398\n",
      "  Epoch 04/5 – 169.6s | Train Loss: 0.1935 | Val HPO Loss: 0.2248 | Val HPO F1@0.5: 0.7672\n",
      "  Epoch 05/5 – 168.2s | Train Loss: 0.1864 | Val HPO Loss: 0.1789 | Val HPO F1@0.5: 0.8011\n",
      "\n",
      "--- Final Evaluation on Test Set (['set03']) ---\n",
      "   ✓ Test DataLoader ready (271078 samples for ['set03']).\n",
      "\n",
      "--- Final Metrics on Test Set (set03) with Tuned Threshold ---\n",
      "Optimal Threshold on Set03    : 0.7600\n",
      "F1-score (Maximized on Set03) : 0.7166\n",
      "Accuracy                      : 0.8962\n",
      "Precision                     : 0.7217\n",
      "Recall                        : 0.7115\n",
      "AUC                           : 0.9332\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Learned Fusion Weights (Final Model) ---\n",
      "bbox                : 0.1774\n",
      "ped_action          : 0.1699\n",
      "ped_look            : 0.1539\n",
      "ego_speed           : 0.1623\n",
      "ego_acc             : 0.1659\n",
      "static_context      : 0.1706\n",
      "------------------------------\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- CELL 2: Script complete ---\n"
     ]
    }
   ],
   "source": [
    "# -----------------------------------------------------------------------------\n",
    "# CELL 1: DATA PREPARATION & BALANCING  (run once before training)\n",
    "# -----------------------------------------------------------------------------\n",
    "#  This cell:\n",
    "#    1. Loads (or regenerates) the PIE database\n",
    "#    2. Computes per-signal standardisation scalers\n",
    "#    3. Extracts ALL training sequences for every stream\n",
    "#    4. Balances the dataset 50 / 50 on the crossing label\n",
    "#    5. Writes two pickles:\n",
    "#         - /kaggle/working/balanced_train_data.pkl\n",
    "#         - /kaggle/working/scalers.pkl\n",
    "# -----------------------------------------------------------------------------\n",
    "\n",
    "import os\n",
    "import sys\n",
    "import time\n",
    "import pickle\n",
    "import gc\n",
    "from pathlib import Path\n",
    "\n",
    "import cv2                               # used internally by PIE utilities\n",
    "import numpy as np\n",
    "import torch\n",
    "from torch.utils.data import Dataset\n",
    "from tqdm.notebook import tqdm\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                                PIE utilities                                 #\n",
    "# -----------------------------------------------------------------------------#\n",
    "pie_utilities_path = \"/kaggle/working/PIE/utilities\"\n",
    "if pie_utilities_path not in sys.path:\n",
    "    sys.path.insert(0, pie_utilities_path)\n",
    "\n",
    "try:\n",
    "    from pie_data import PIE\n",
    "except ImportError as e:\n",
    "    print(\n",
    "        f\"[WARN] Could not import PIE from {pie_utilities_path}. \"\n",
    "        f\"If the DB cache already exists this is fine.\\n→ {e}\"\n",
    "    )\n",
    "    PIE = None\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                              configuration                                   #\n",
    "# -----------------------------------------------------------------------------#\n",
    "PIE_ROOT_PATH           = \"/kaggle/working/PIE\"\n",
    "POSE_DATA_DIR           = \"/kaggle/input/pose-data/extracted_poses2\"\n",
    "PIE_DATABASE_CACHE_PATH = \"/kaggle/input/pie-database/pie_database.pkl\"\n",
    "\n",
    "TRAIN_SETS_STR = [\"set01\", \"set02\", \"set04\"] # Used for generating training data and scalers\n",
    "\n",
    "BALANCED_DATA_PKL_PATH  = \"/kaggle/working/balanced_train_data.pkl\"\n",
    "SCALERS_PKL_PATH        = \"/kaggle/working/scalers.pkl\"\n",
    "\n",
    "# Streams used throughout the project ----------------------------------------\n",
    "ALL_POSSIBLE_STREAMS = [\n",
    "    \"bbox\",\n",
    "    \"pose\",\n",
    "    \"ego_speed\",\n",
    "    \"ego_acc\",\n",
    "    \"ego_gyro\",\n",
    "    \"ped_action\",\n",
    "    \"ped_look\",\n",
    "    \"ped_occlusion\",\n",
    "    \"traffic_light\",\n",
    "    \"static_context\",\n",
    "]\n",
    "\n",
    "# Feature sizes & categorical constants --------------------------------------\n",
    "SEQ_LEN, PRED_LEN = 30, 1\n",
    "\n",
    "INPUT_SIZE_BBOX       = 4\n",
    "INPUT_SIZE_POSE       = 34\n",
    "INPUT_SIZE_EGO_SPEED  = 1\n",
    "INPUT_SIZE_EGO_ACC    = 2\n",
    "INPUT_SIZE_EGO_GYRO   = 1\n",
    "INPUT_SIZE_PED_ACTION = 1\n",
    "INPUT_SIZE_PED_LOOK   = 1\n",
    "INPUT_SIZE_PED_OCC    = 1\n",
    "INPUT_SIZE_TL_STATE   = 4\n",
    "\n",
    "NUM_SIGNALIZED_CATS   = 4\n",
    "NUM_INTERSECTION_CATS = 5\n",
    "NUM_AGE_CATS          = 4\n",
    "NUM_GENDER_CATS       = 3\n",
    "NUM_TRAFFIC_DIR_CATS  = 2\n",
    "\n",
    "LANE_CATEGORIES = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 4, 7: 4, 8: 4}\n",
    "NUM_LANE_CATS   = len(set(LANE_CATEGORIES.values()))\n",
    "\n",
    "INPUT_SIZE_STATIC = (\n",
    "    NUM_SIGNALIZED_CATS\n",
    "    + NUM_INTERSECTION_CATS\n",
    "    + NUM_AGE_CATS\n",
    "    + NUM_GENDER_CATS\n",
    "    + NUM_TRAFFIC_DIR_CATS\n",
    "    + NUM_LANE_CATS\n",
    ")  # → 23\n",
    "\n",
    "TL_STATE_MAP = {\"__undefined__\": 0, \"red\": 1, \"yellow\": 2, \"green\": 3}\n",
    "NUM_TL_STATES = len(TL_STATE_MAP)\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                               helper utils                                   #\n",
    "# -----------------------------------------------------------------------------#\n",
    "\n",
    "\n",
    "def to_one_hot(index: int, num_classes: int) -> np.ndarray:\n",
    "    vec = np.zeros(num_classes, dtype=np.float32)\n",
    "    vec[int(np.clip(index, 0, num_classes - 1))] = 1.0\n",
    "    return vec\n",
    "\n",
    "\n",
    "def balance_samples_count(seq_data: dict, label_key: str, seed: int = 42) -> dict:\n",
    "    \"\"\"Undersample majority class so positive and negative labels are equal.\"\"\"\n",
    "    labels = [lbl[0] for lbl in seq_data[label_key]]\n",
    "    n_pos  = int(np.sum(labels))\n",
    "    n_neg  = len(labels) - n_pos\n",
    "\n",
    "    if n_pos == n_neg:\n",
    "        print(\"Dataset already balanced.\")\n",
    "        return seq_data.copy()\n",
    "\n",
    "    majority_label    = 0 if n_neg > n_pos else 1\n",
    "    minority_count    = min(n_pos, n_neg)\n",
    "    majority_indices  = np.where(np.array(labels) == majority_label)[0]\n",
    "    minority_indices  = np.where(np.array(labels) != majority_label)[0]\n",
    "\n",
    "    rng = np.random.default_rng(seed)\n",
    "    keep_majority = rng.choice(majority_indices, size=minority_count, replace=False)\n",
    "    final_indices = np.concatenate([minority_indices, keep_majority])\n",
    "    rng.shuffle(final_indices)\n",
    "\n",
    "    balanced = {}\n",
    "    for k, v in seq_data.items():\n",
    "        balanced[k] = [v[i] for i in final_indices]\n",
    "\n",
    "    print(f\"Balanced: 1s={minority_count} | 0s={minority_count}\")\n",
    "    return balanced\n",
    "\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                                PIEDataset                                    #\n",
    "# -----------------------------------------------------------------------------#\n",
    "class PIEDataset(Dataset):\n",
    "    \"\"\"\n",
    "    Lightweight dataset that can generate any subset of the PIE feature streams.\n",
    "    \"\"\"\n",
    "\n",
    "    def __init__(\n",
    "        self,\n",
    "        pie_db: dict,\n",
    "        set_names: list[str],\n",
    "        pose_dir: str,\n",
    "        seq_len: int,\n",
    "        pred_len: int,\n",
    "        scalers: dict,\n",
    "        streams_to_generate: list[str],\n",
    "    ):\n",
    "        self.pie_db            = pie_db\n",
    "        self.set_names         = set_names\n",
    "        self.pose_dir          = pose_dir\n",
    "        self.seq_len           = seq_len\n",
    "        self.pred_len          = pred_len\n",
    "        self.scalers           = scalers\n",
    "        self.streams           = streams_to_generate\n",
    "        self._input_sizes      = self._build_input_size_map()\n",
    "        self.all_pose_data     = {}\n",
    "        self.sequences         = []\n",
    "\n",
    "        if \"pose\" in self.streams:\n",
    "            self._load_pose_pkls()\n",
    "        self._enumerate_sequences()\n",
    "\n",
    "    # ------------------------ internal helpers -------------------------------\n",
    "    def _build_input_size_map(self) -> dict:\n",
    "        special = {\n",
    "            \"TRAFFIC_LIGHT\": \"TL_STATE\",\n",
    "            \"STATIC_CONTEXT\": \"STATIC\",\n",
    "            \"EGO_SPEED\": \"EGO_SPEED\",\n",
    "            \"EGO_ACC\": \"EGO_ACC\",\n",
    "            \"EGO_GYRO\": \"EGO_GYRO\",\n",
    "            \"PED_ACTION\": \"PED_ACTION\",\n",
    "            \"PED_LOOK\": \"PED_LOOK\",\n",
    "            \"PED_OCCLUSION\": \"PED_OCC\",\n",
    "        }\n",
    "        sizes = {}\n",
    "        for s in ALL_POSSIBLE_STREAMS:\n",
    "            const = f\"INPUT_SIZE_{special.get(s.upper(), s.upper())}\"\n",
    "            if s == \"bbox\":\n",
    "                const = \"INPUT_SIZE_BBOX\"\n",
    "            elif s == \"pose\":\n",
    "                const = \"INPUT_SIZE_POSE\"\n",
    "            sizes[s] = globals().get(const, 1)\n",
    "        return sizes\n",
    "\n",
    "    def _load_pose_pkls(self):\n",
    "        print(f\"Loading pose PKLs for sets {self.set_names} (streams: {self.streams})…\")\n",
    "        for set_id in self.set_names:\n",
    "            set_dir = Path(self.pose_dir) / set_id\n",
    "            if not set_dir.is_dir():\n",
    "                print(f\"Warning: Pose directory not found for set {set_id}: {set_dir}\")\n",
    "                continue\n",
    "            self.all_pose_data[set_id] = {}\n",
    "            # Use tqdm only if there are files to process\n",
    "            pkl_files = list(set_dir.glob(f\"{set_id}_*_poses.pkl\"))\n",
    "            if not pkl_files:\n",
    "                print(f\"No pose PKL files found in {set_dir} matching pattern.\")\n",
    "                continue\n",
    "\n",
    "            for pkl_path in tqdm(pkl_files, desc=f\"Loading poses {set_id}\", leave=False):\n",
    "                try:\n",
    "                    with open(pkl_path, \"rb\") as fp:\n",
    "                        loaded = pickle.load(fp)\n",
    "                except Exception as e:\n",
    "                    print(f\"[pose load] {pkl_path}: {e}\")\n",
    "                    continue\n",
    "\n",
    "                if len(loaded) != 1:\n",
    "                    continue\n",
    "                (key, data), *_ = loaded.items()\n",
    "                vid = \"_\".join(key.split(\"_\")[1:])\n",
    "                if vid in self.pie_db.get(set_id, {}):\n",
    "                    self.all_pose_data[set_id][vid] = data\n",
    "\n",
    "    def _enumerate_sequences(self):\n",
    "        print(f\"Enumerating sequences for sets {self.set_names}…\")\n",
    "        for set_id in self.set_names:\n",
    "            for vid, vdb in self.pie_db.get(set_id, {}).items():\n",
    "                for pid, pdb in vdb.get(\"ped_annotations\", {}).items():\n",
    "                    frames = pdb.get(\"frames\", [])\n",
    "                    if len(frames) < self.seq_len + self.pred_len:\n",
    "                        continue\n",
    "                    frames = sorted(frames)\n",
    "                    for i in range(len(frames) - self.seq_len - self.pred_len + 1):\n",
    "                        start = frames[i]\n",
    "                        obs_end = frames[i + self.seq_len - 1]\n",
    "                        if obs_end - start != self.seq_len - 1:\n",
    "                            continue\n",
    "                        target = frames[i + self.seq_len + self.pred_len - 1]\n",
    "                        if target - obs_end != self.pred_len:\n",
    "                            continue\n",
    "                        self.sequences.append((set_id, vid, pid, start))\n",
    "        print(f\"Total sequences for {self.set_names}: {len(self.sequences)}\")\n",
    "\n",
    "    # ------------------ Dataset API ------------------------------------------\n",
    "    def __len__(self):\n",
    "        return len(self.sequences)\n",
    "\n",
    "    def __getitem__(self, idx: int):\n",
    "        set_id, vid, pid, start = self.sequences[idx]\n",
    "        vdb  = self.pie_db[set_id][vid]\n",
    "        pdb  = vdb[\"ped_annotations\"][pid]\n",
    "        ego  = vdb.get(\"vehicle_annotations\", {})\n",
    "        tldb = vdb.get(\"traffic_annotations\", {})\n",
    "\n",
    "        frame_nums = list(range(start, start + self.seq_len))\n",
    "        target_f   = start + self.seq_len + self.pred_len - 1\n",
    "\n",
    "        # label ---------------------------------------------------------------\n",
    "        label = 0\n",
    "        if (\n",
    "            \"frames\" in pdb\n",
    "            and \"behavior\" in pdb\n",
    "            and \"cross\" in pdb[\"behavior\"]\n",
    "            and target_f in pdb[\"frames\"]\n",
    "        ):\n",
    "            try:\n",
    "                j = pdb[\"frames\"].index(target_f)\n",
    "                label = pdb[\"behavior\"][\"cross\"][j]\n",
    "                if label == -1:\n",
    "                    label = 0\n",
    "            except (ValueError, IndexError):\n",
    "                pass\n",
    "\n",
    "        # static context ------------------------------------------------------\n",
    "        static_vec = np.zeros(INPUT_SIZE_STATIC, np.float32)\n",
    "        if \"static_context\" in self.streams:\n",
    "            attr  = pdb.get(\"attributes\", {})\n",
    "            sig   = attr.get(\"signalized\", 0)\n",
    "            intr  = attr.get(\"intersection\", 0)\n",
    "            age   = attr.get(\"age\", 2)\n",
    "            gen   = attr.get(\"gender\", 0)\n",
    "            tdir  = int(attr.get(\"traffic_direction\", 0))\n",
    "            ln    = attr.get(\"num_lanes\", 2)\n",
    "            lncat = LANE_CATEGORIES.get(ln, LANE_CATEGORIES[max(LANE_CATEGORIES)])\n",
    "            static_vec = np.concatenate(\n",
    "                [\n",
    "                    to_one_hot(sig,  NUM_SIGNALIZED_CATS),\n",
    "                    to_one_hot(intr, NUM_INTERSECTION_CATS),\n",
    "                    to_one_hot(age,  NUM_AGE_CATS),\n",
    "                    to_one_hot(gen,  NUM_GENDER_CATS),\n",
    "                    to_one_hot(tdir, NUM_TRAFFIC_DIR_CATS),\n",
    "                    to_one_hot(lncat, NUM_LANE_CATS),\n",
    "                ]\n",
    "            ).astype(np.float32)\n",
    "\n",
    "        # per-frame feature assembly -----------------------------------------\n",
    "        feats = {s: [] for s in self.streams}\n",
    "\n",
    "        for fn in frame_nums:\n",
    "            fidx = -1\n",
    "            if \"frames\" in pdb:\n",
    "                try:\n",
    "                    fidx = pdb[\"frames\"].index(fn)\n",
    "                except ValueError:\n",
    "                    pass\n",
    "\n",
    "            ego_f = ego.get(fn, {})\n",
    "\n",
    "            # bbox ----------------------------------------------------------\n",
    "            if \"bbox\" in self.streams:\n",
    "                bb = np.zeros(INPUT_SIZE_BBOX, np.float32)\n",
    "                if (\n",
    "                    fidx != -1\n",
    "                    and \"bbox\" in pdb\n",
    "                    and len(pdb[\"bbox\"]) > fidx\n",
    "                ):\n",
    "                    try:\n",
    "                        x1, y1, x2, y2 = pdb[\"bbox\"][fidx]\n",
    "                        w_img = vdb.get(\"width\", 1920)\n",
    "                        h_img = vdb.get(\"height\", 1080)\n",
    "                        if w_img > 0 and h_img > 0:\n",
    "                            cx = ((x1 + x2) / 2) / w_img\n",
    "                            cy = ((y1 + y2) / 2) / h_img\n",
    "                            w  = (x2 - x1) / w_img\n",
    "                            h  = (y2 - y1) / h_img\n",
    "                            if 0 < w and 0 < h and 0 <= cx <= 1 and 0 <= cy <= 1:\n",
    "                                bb = np.array([cx, cy, w, h], np.float32)\n",
    "                    except Exception:\n",
    "                        pass\n",
    "                feats[\"bbox\"].append(bb)\n",
    "\n",
    "            # pose ----------------------------------------------------------\n",
    "            if \"pose\" in self.streams:\n",
    "                pvec = np.zeros(INPUT_SIZE_POSE, np.float32)\n",
    "                pose_set = self.all_pose_data.get(set_id, {}).get(vid, {})\n",
    "                p_loaded = pose_set.get(fn, {}).get(pid)\n",
    "                if (\n",
    "                    isinstance(p_loaded, np.ndarray)\n",
    "                    and p_loaded.shape == (INPUT_SIZE_POSE,)\n",
    "                ):\n",
    "                    pvec = p_loaded\n",
    "                feats[\"pose\"].append(pvec)\n",
    "\n",
    "            # ego signals ---------------------------------------------------\n",
    "            if \"ego_speed\" in self.streams:\n",
    "                s = ego_f.get(\"OBD_speed\", 0.0) or ego_f.get(\"GPS_speed\", 0.0)\n",
    "                s = (s - self.scalers.get(\"ego_speed_mean\", 0.0)) / self.scalers.get(\n",
    "                    \"ego_speed_std\", 1.0\n",
    "                )\n",
    "                feats[\"ego_speed\"].append([s])\n",
    "\n",
    "            if \"ego_acc\" in self.streams:\n",
    "                ax = ego_f.get(\"accX\", 0.0)\n",
    "                ay = ego_f.get(\"accY\", 0.0)\n",
    "                ax = (ax - self.scalers.get(\"accX_mean\", 0.0)) / self.scalers.get(\n",
    "                    \"accX_std\", 1.0\n",
    "                )\n",
    "                ay = (ay - self.scalers.get(\"accY_mean\", 0.0)) / self.scalers.get(\n",
    "                    \"accY_std\", 1.0\n",
    "                )\n",
    "                feats[\"ego_acc\"].append([ax, ay])\n",
    "\n",
    "            if \"ego_gyro\" in self.streams:\n",
    "                gz = ego_f.get(\"gyroZ\", 0.0)\n",
    "                gz = (gz - self.scalers.get(\"gyroZ_mean\", 0.0)) / self.scalers.get(\n",
    "                    \"gyroZ_std\", 1.0\n",
    "                )\n",
    "                feats[\"ego_gyro\"].append([gz])\n",
    "\n",
    "            # pedestrian behaviour -----------------------------------------\n",
    "            if \"ped_action\" in self.streams:\n",
    "                action = (\n",
    "                    pdb[\"behavior\"][\"action\"][fidx]\n",
    "                    if fidx != -1\n",
    "                    and \"behavior\" in pdb\n",
    "                    and \"action\" in pdb[\"behavior\"]\n",
    "                    and len(pdb[\"behavior\"][\"action\"]) > fidx\n",
    "                    else 0\n",
    "                )\n",
    "                feats[\"ped_action\"].append([float(action)])\n",
    "\n",
    "            if \"ped_look\" in self.streams:\n",
    "                look = (\n",
    "                    pdb[\"behavior\"][\"look\"][fidx]\n",
    "                    if fidx != -1\n",
    "                    and \"behavior\" in pdb\n",
    "                    and \"look\" in pdb[\"behavior\"]\n",
    "                    and len(pdb[\"behavior\"][\"look\"]) > fidx\n",
    "                    else 0\n",
    "                )\n",
    "                feats[\"ped_look\"].append([float(look)])\n",
    "\n",
    "            if \"ped_occlusion\" in self.streams:\n",
    "                occ = (\n",
    "                    float(pdb[\"occlusion\"][fidx]) / 2.0\n",
    "                    if fidx != -1\n",
    "                    and \"occlusion\" in pdb\n",
    "                    and len(pdb[\"occlusion\"]) > fidx\n",
    "                    else 0.0\n",
    "                )\n",
    "                feats[\"ped_occlusion\"].append([occ])\n",
    "\n",
    "            # traffic light -------------------------------------------------\n",
    "            if \"traffic_light\" in self.streams:\n",
    "                tl_state = 0\n",
    "                for obj in tldb.values():\n",
    "                    if obj.get(\"obj_class\") != \"traffic_light\":\n",
    "                        continue\n",
    "                    if \"frames\" not in obj or \"state\" not in obj:\n",
    "                        continue\n",
    "                    try:\n",
    "                        j = obj[\"frames\"].index(fn)\n",
    "                        if obj[\"state\"][j] != 0:\n",
    "                            tl_state = obj[\"state\"][j]\n",
    "                            break\n",
    "                    except (ValueError, IndexError):\n",
    "                        continue\n",
    "                feats[\"traffic_light\"].append(to_one_hot(tl_state, NUM_TL_STATES))\n",
    "\n",
    "            # static context -----------------------------------------------\n",
    "            if \"static_context\" in self.streams:\n",
    "                feats[\"static_context\"].append(static_vec)\n",
    "\n",
    "        # numpy → torch ------------------------------------------------------\n",
    "        out = {\n",
    "            s: torch.tensor(np.asarray(feats[s], np.float32), dtype=torch.float32)\n",
    "            for s in self.streams\n",
    "        }\n",
    "        return out, torch.tensor(label, dtype=torch.long)\n",
    "\n",
    "\n",
    "# =============================================================================\n",
    "#                       MAIN: build balanced training set (Cell 1)\n",
    "# =============================================================================\n",
    "if __name__ == \"__main__\" and '__file__' not in globals() and not Path(BALANCED_DATA_PKL_PATH).exists(): # Avoid re-running if files exist\n",
    "    print(\"\\n--- CELL 1: DATA PREPARATION (Running because balanced data not found) ---\")\n",
    "\n",
    "    # 1) load / regenerate PIE DB -------------------------------------------\n",
    "    cache = Path(PIE_DATABASE_CACHE_PATH)\n",
    "    if cache.is_file():\n",
    "        print(\"Loading PIE database cache …\")\n",
    "        with cache.open(\"rb\") as fp:\n",
    "            pie_db_cell1 = pickle.load(fp) # Use a different variable name\n",
    "        print(\"✓ PIE DB loaded.\")\n",
    "    else:\n",
    "        if PIE is None:\n",
    "            raise RuntimeError(\"PIE class unavailable: cannot rebuild database.\")\n",
    "        print(\"Cache not found – regenerating PIE DB …\")\n",
    "        pie_db_cell1 = PIE(data_path=PIE_ROOT_PATH, regen_database=True).generate_database()\n",
    "        if not pie_db_cell1:\n",
    "            raise RuntimeError(\"PIE DB generation failed.\")\n",
    "        print(\"✓ PIE DB generated.\")\n",
    "\n",
    "    # 2) compute scalers -----------------------------------------------------\n",
    "    print(\"\\nComputing scalers …\")\n",
    "    spd, accx, accy, gyz = [], [], [], []\n",
    "    for sid in TRAIN_SETS_STR: # Use TRAIN_SETS_STR for scalers\n",
    "        for vid, vdb in pie_db_cell1.get(sid, {}).items():\n",
    "            for frame, e in vdb.get(\"vehicle_annotations\", {}).items():\n",
    "                s  = e.get(\"OBD_speed\", 0.0) or e.get(\"GPS_speed\", 0.0)\n",
    "                spd.append(s)\n",
    "                accx.append(e.get(\"accX\", 0.0))\n",
    "                accy.append(e.get(\"accY\", 0.0))\n",
    "                gyz.append(e.get(\"gyroZ\", 0.0))\n",
    "\n",
    "    scalers_cell1 = {} # Use a different variable name\n",
    "    if spd:\n",
    "        scalers_cell1[\"ego_speed_mean\"] = float(np.mean(spd))\n",
    "        scalers_cell1[\"ego_speed_std\"]  = float(max(np.std(spd), 1e-6))\n",
    "    if accx:\n",
    "        scalers_cell1[\"accX_mean\"] = float(np.mean(accx))\n",
    "        scalers_cell1[\"accX_std\"]  = float(max(np.std(accx), 1e-6))\n",
    "        scalers_cell1[\"accY_mean\"] = float(np.mean(accy))\n",
    "        scalers_cell1[\"accY_std\"]  = float(max(np.std(accy), 1e-6))\n",
    "    if gyz:\n",
    "        scalers_cell1[\"gyroZ_mean\"] = float(np.mean(gyz))\n",
    "        scalers_cell1[\"gyroZ_std\"]  = float(max(np.std(gyz), 1e-6))\n",
    "\n",
    "    print(\"Scalers:\", scalers_cell1)\n",
    "\n",
    "    # 3) extract full training dataset --------------------------------------\n",
    "    print(\"\\nExtracting training sequences (all streams) …\")\n",
    "    full_ds = PIEDataset(\n",
    "        pie_db_cell1,\n",
    "        TRAIN_SETS_STR, # Use TRAIN_SETS_STR for training data extraction\n",
    "        POSE_DATA_DIR,\n",
    "        SEQ_LEN,\n",
    "        PRED_LEN,\n",
    "        scalers_cell1,\n",
    "        ALL_POSSIBLE_STREAMS,\n",
    "    )\n",
    "\n",
    "    train_dict = {s: [] for s in ALL_POSSIBLE_STREAMS}\n",
    "    train_dict[\"label\"] = []\n",
    "\n",
    "    for i in tqdm(range(len(full_ds)), desc=\"seq\"):\n",
    "        feat, lbl = full_ds[i]\n",
    "        for s in ALL_POSSIBLE_STREAMS:\n",
    "            train_dict[s].append(feat[s].numpy())\n",
    "        train_dict[\"label\"].append([lbl.item()])\n",
    "\n",
    "    print(f\"Raw training samples: {len(train_dict['label'])}\")\n",
    "\n",
    "    # 4) balance -------------------------------------------------------------\n",
    "    balanced = balance_samples_count(train_dict, \"label\")\n",
    "    del train_dict, full_ds\n",
    "    gc.collect()\n",
    "\n",
    "    # 5) write pickles -------------------------------------------------------\n",
    "    print(\"\\nSaving balanced data …\")\n",
    "    with open(BALANCED_DATA_PKL_PATH, \"wb\") as fp:\n",
    "        pickle.dump(balanced, fp, pickle.HIGHEST_PROTOCOL)\n",
    "    print(f\"✓ {BALANCED_DATA_PKL_PATH}\")\n",
    "\n",
    "    print(\"Saving scalers …\")\n",
    "    with open(SCALERS_PKL_PATH, \"wb\") as fp:\n",
    "        pickle.dump(scalers_cell1, fp, pickle.HIGHEST_PROTOCOL)\n",
    "    print(f\"✓ {SCALERS_PKL_PATH}\")\n",
    "\n",
    "    del pie_db_cell1, scalers_cell1 # Clean up cell1 specific vars\n",
    "    gc.collect()\n",
    "\n",
    "    print(\"\\n--- CELL 1: DATA PREPARATION COMPLETE ---\")\n",
    "else:\n",
    "    if Path(BALANCED_DATA_PKL_PATH).exists() and Path(SCALERS_PKL_PATH).exists():\n",
    "        print(\"\\n--- CELL 1: Skipping data preparation, balanced data and scalers found. ---\")\n",
    "    else:\n",
    "        print(\"\\n--- CELL 1: ERROR - Balanced data or scalers missing, but not regenerating. Please check paths or remove existing files to force regeneration. ---\")\n",
    "\n",
    "\n",
    "# --- CELL 2: ABLATION STUDY – MODEL TRAINING AND EVALUATION (with Weighted Average Fusion, Hyperparameter Tuning, and Test on Set03) ---\n",
    "\n",
    "import os\n",
    "import sys\n",
    "import gc\n",
    "import time\n",
    "import math\n",
    "import random\n",
    "import pickle\n",
    "import torch\n",
    "import numpy as np\n",
    "import pandas as pd                      # results-summary table\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from tqdm.notebook import tqdm\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "from sklearn.metrics import (\n",
    "    accuracy_score,\n",
    "    precision_recall_fscore_support,\n",
    "    roc_auc_score,\n",
    "    confusion_matrix,\n",
    "    ConfusionMatrixDisplay,\n",
    "    f1_score # Explicitly import\n",
    ")\n",
    "import optuna # For hyperparameter tuning\n",
    "\n",
    "# --- Add PIE utilities path if necessary (adjust path) ------------------------\n",
    "pie_utilities_path = \"/kaggle/working/PIE/utilities\"\n",
    "if pie_utilities_path not in sys.path:\n",
    "    sys.path.insert(0, pie_utilities_path)\n",
    "\n",
    "try:\n",
    "    from pie_data import PIE as PIE_imported_cell2 # Rename to avoid conflict with PIE from cell1\n",
    "except ImportError as e:\n",
    "    print(f\"Warn: Could not import PIE class for Cell 2: {e}\")\n",
    "    PIE_imported_cell2 = None\n",
    "\n",
    "# --- Configuration ------------------------------------------------------------\n",
    "PIE_ROOT_PATH_CELL2 = \"/kaggle/working/PIE\" # Renamed for clarity\n",
    "POSE_DATA_DIR_CELL2 = \"/kaggle/input/pose-data/extracted_poses2\"\n",
    "PIE_DATABASE_CACHE_PATH_CELL2 = \"/kaggle/input/pie-database/pie_database.pkl\"\n",
    "\n",
    "# --- Define ALL possible streams (used by Dataset class) ----------------------\n",
    "ALL_POSSIBLE_STREAMS_CELL2 = [ # Renamed to avoid conflict if cell1 not run\n",
    "    \"bbox\",\n",
    "    \"pose\",\n",
    "    \"ego_speed\",\n",
    "    \"ego_acc\",\n",
    "    \"ego_gyro\",\n",
    "    \"ped_action\",\n",
    "    \"ped_look\",\n",
    "    \"ped_occlusion\",\n",
    "    \"traffic_light\",\n",
    "    \"static_context\",\n",
    "]\n",
    "\n",
    "# --- *** CHOOSE ACTIVE STREAMS FOR THIS EXPERIMENT *** ------------------------\n",
    "ACTIVE_STREAMS = [\n",
    "    \"bbox\",\n",
    "    \"ped_action\",\n",
    "    \"ped_look\",\n",
    "    \"ego_speed\",\n",
    "    \"ego_acc\",\n",
    "    \"static_context\",\n",
    "]\n",
    "# ------------------------------------------------------------------------------\n",
    "\n",
    "print(f\"--- Running Weighted Average Fusion With Active Streams: {ACTIVE_STREAMS} ---\")\n",
    "\n",
    "# --- Model Hyper-parameters (default, will be tuned) --------------------------\n",
    "# SEQ_LEN, PRED_LEN already defined in Cell 1, assuming they are globally accessible\n",
    "# INPUT_SIZE_* constants also from Cell 1\n",
    "\n",
    "# Default values, Optuna will override these during tuning\n",
    "DEFAULT_LSTM_HIDDEN_SIZE = 256\n",
    "DEFAULT_NUM_LSTM_LAYERS = 2\n",
    "DEFAULT_DROPOUT_RATE = 0.3\n",
    "DEFAULT_ATTENTION_DIM = 128\n",
    "NUM_CLASSES = 2 # Fixed\n",
    "\n",
    "# --- Training Hyper-parameters (default, LR will be tuned) --------------------\n",
    "DEFAULT_LEARNING_RATE = 1e-4\n",
    "BATCH_SIZE = 32 # Fixed for this example, can also be tuned\n",
    "DEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "print(f\"Using device: {DEVICE}\")\n",
    "\n",
    "# --- Optuna & Training Epochs Configuration ---\n",
    "N_OPTUNA_TRIALS = 15  # Number of hyperparameter tuning trials (adjust as needed)\n",
    "NUM_EPOCHS_TUNING = 3 # Epochs for each Optuna trial (short for speed)\n",
    "NUM_EPOCHS_FINAL_TRAINING = 5 # Epochs for training the best model (can be same as original NUM_EPOCHS)\n",
    "SEED = 42 # For reproducibility\n",
    "\n",
    "# --- Dataset splits -----------------------------------------------------------\n",
    "# VAL_SETS_STR: Used for validating models during Optuna hyperparameter search\n",
    "VAL_SETS_STR = [\"set05\", \"set06\"]\n",
    "# TEST_SET_STR: Used for final testing of the *best* model from Optuna\n",
    "TEST_SET_STR = [\"set03\"]\n",
    "\n",
    "# --- Paths for pre-processed data (from Cell 1) -------------------------------\n",
    "# BALANCED_DATA_PKL_PATH and SCALERS_PKL_PATH already defined in Cell 1\n",
    "\n",
    "# --- Set random seeds for reproducibility ---\n",
    "random.seed(SEED)\n",
    "np.random.seed(SEED)\n",
    "torch.manual_seed(SEED)\n",
    "if torch.cuda.is_available():\n",
    "    torch.cuda.manual_seed_all(SEED)\n",
    "torch.backends.cudnn.deterministic = True\n",
    "torch.backends.cudnn.benchmark = False\n",
    "\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                               Helper classes (Dataset)                       #\n",
    "# -----------------------------------------------------------------------------\n",
    "\n",
    "# Using to_one_hot from Cell 1. If Cell 1 is not run, define it here:\n",
    "if 'to_one_hot' not in globals():\n",
    "    def to_one_hot(index, num_classes):\n",
    "        vec = np.zeros(num_classes, dtype=np.float32)\n",
    "        safe_index = int(np.clip(index, 0, num_classes - 1))\n",
    "        vec[safe_index] = 1.0\n",
    "        return vec\n",
    "\n",
    "class PIEDataset_Cell2(Dataset): # Renamed to avoid conflict if Cell 1 is run in same notebook\n",
    "    \"\"\"\n",
    "    Dataset that can dynamically enable/disable streams. (Copied from original cell 2)\n",
    "    \"\"\"\n",
    "    def __init__(\n",
    "        self,\n",
    "        pie_database,\n",
    "        set_names,\n",
    "        pose_data_dir,\n",
    "        seq_len,\n",
    "        pred_len,\n",
    "        scalers=None,\n",
    "        streams_to_extract=None, # These are the streams this instance will actually load\n",
    "    ):\n",
    "        self.pie_db = pie_database\n",
    "        self.set_names = set_names\n",
    "        self.pose_data_dir = pose_data_dir\n",
    "        self.seq_len = seq_len\n",
    "        self.pred_len = pred_len\n",
    "        self.scalers = scalers or {}\n",
    "        self.streams_to_extract = streams_to_extract or ALL_POSSIBLE_STREAMS_CELL2 # Default to all if not specified\n",
    "        \n",
    "        self.sequences = []\n",
    "        self.all_pose_data = {}\n",
    "\n",
    "        self._input_sizes_for_error = self._get_input_sizes_dict() # For error handling\n",
    "\n",
    "        if \"pose\" in self.streams_to_extract:\n",
    "            self._load_pose_data()\n",
    "\n",
    "        self._generate_sequence_list()\n",
    "        if not self.sequences:\n",
    "            print(f\"Warning: PIEDataset_Cell2 init: No sequences found for sets {self.set_names} with current config.\")\n",
    "\n",
    "\n",
    "    def _get_input_sizes_dict(self): # Uses global INPUT_SIZE_* constants\n",
    "        input_sizes = {}\n",
    "        special_cases = {\n",
    "            \"TRAFFIC_LIGHT\": \"TL_STATE\", \"STATIC_CONTEXT\": \"STATIC\",\n",
    "            \"EGO_SPEED\": \"EGO_SPEED\", \"EGO_ACC\": \"EGO_ACC\", \"EGO_GYRO\": \"EGO_GYRO\",\n",
    "            \"PED_ACTION\": \"PED_ACTION\", \"PED_LOOK\": \"PED_LOOK\", \"PED_OCCLUSION\": \"PED_OCC\",\n",
    "        }\n",
    "        for stream in ALL_POSSIBLE_STREAMS_CELL2: # Check against all possible for safety\n",
    "            size_constant_name = f\"INPUT_SIZE_{stream.upper()}\"\n",
    "            suffix = special_cases.get(stream.upper())\n",
    "            if suffix: size_constant_name = f\"INPUT_SIZE_{suffix}\"\n",
    "            elif stream == \"bbox\": size_constant_name = \"INPUT_SIZE_BBOX\"\n",
    "            elif stream == \"pose\": size_constant_name = \"INPUT_SIZE_POSE\"\n",
    "            input_sizes[stream] = globals().get(size_constant_name, 1) # globals() is from Cell 1 scope\n",
    "        return input_sizes\n",
    "\n",
    "    def _load_pose_data(self):\n",
    "        # print(f\"PIEDataset_Cell2: Loading pose PKLs for sets {self.set_names} (streams_to_extract: {self.streams_to_extract})…\")\n",
    "        for set_id in self.set_names:\n",
    "            self.all_pose_data[set_id] = {}\n",
    "            pose_set_path = os.path.join(self.pose_data_dir, set_id)\n",
    "            if not os.path.isdir(pose_set_path): \n",
    "                # print(f\"PIEDataset_Cell2: Pose directory not found for set {set_id}: {pose_set_path}\")\n",
    "                continue\n",
    "            \n",
    "            pkl_files_in_set = [f for f in os.listdir(pose_set_path) if f.startswith(f\"{set_id}_\") and f.endswith(\"_poses.pkl\")]\n",
    "            if not pkl_files_in_set: \n",
    "                # print(f\"PIEDataset_Cell2: No pose PKL files found in {pose_set_path}\")\n",
    "                continue\n",
    "\n",
    "            for pkl_filename in pkl_files_in_set: # Not using tqdm here to reduce noise during HPO\n",
    "                pkl_file_path = os.path.join(pose_set_path, pkl_filename)\n",
    "                try:\n",
    "                    with open(pkl_file_path, \"rb\") as f: loaded_pkl_content = pickle.load(f)\n",
    "                except FileNotFoundError: continue\n",
    "                except Exception as e: print(f\"PIEDataset_Cell2: Error loading pose PKL {pkl_file_path}: {e}\"); continue\n",
    "                \n",
    "                if len(loaded_pkl_content) != 1: continue\n",
    "                unique_video_key, video_data = list(loaded_pkl_content.items())[0]\n",
    "                video_id = \"_\".join(unique_video_key.split(\"_\")[1:])\n",
    "                \n",
    "                if self.pie_db and set_id in self.pie_db and video_id in self.pie_db.get(set_id, {}):\n",
    "                    self.all_pose_data[set_id][video_id] = video_data\n",
    "\n",
    "    def _generate_sequence_list(self):\n",
    "        # print(f\"PIEDataset_Cell2: Enumerating sequences for sets {self.set_names}…\")\n",
    "        sequence_count = 0\n",
    "        if not self.pie_db:\n",
    "            print(f\"PIEDataset_Cell2: PIE database not available for {self.set_names}.\")\n",
    "            return\n",
    "\n",
    "        for set_id in self.set_names:\n",
    "            if set_id not in self.pie_db: continue\n",
    "            for video_id, video_data in self.pie_db[set_id].items():\n",
    "                if \"ped_annotations\" not in video_data: continue\n",
    "                for ped_id, ped_data in video_data[\"ped_annotations\"].items():\n",
    "                    frames = ped_data.get(\"frames\", [])\n",
    "                    if len(frames) < self.seq_len + self.pred_len: continue\n",
    "                    frames_sorted = sorted(frames)\n",
    "                    for i in range(len(frames_sorted) - self.seq_len - self.pred_len + 1):\n",
    "                        start_f, obs_end_f = frames_sorted[i], frames_sorted[i + self.seq_len - 1]\n",
    "                        if obs_end_f - start_f != self.seq_len - 1: continue\n",
    "                        \n",
    "                        target_idx_in_frames_sorted = i + self.seq_len + self.pred_len - 1\n",
    "                        if target_idx_in_frames_sorted >= len(frames_sorted): continue # Boundary check\n",
    "                        target_f = frames_sorted[target_idx_in_frames_sorted]\n",
    "\n",
    "                        if target_f - obs_end_f != self.pred_len: continue\n",
    "                        self.sequences.append((set_id, video_id, ped_id, start_f))\n",
    "                        sequence_count += 1\n",
    "        # print(f\"PIEDataset_Cell2: Total sequences for {self.set_names}: {sequence_count}\")\n",
    "\n",
    "\n",
    "    def __len__(self): return len(self.sequences)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        set_id, video_id, ped_id, start_frame = self.sequences[idx]\n",
    "        frame_nums = list(range(start_frame, start_frame + self.seq_len))\n",
    "        target_frame_num = start_frame + self.seq_len + self.pred_len - 1\n",
    "        \n",
    "        video_db, ped_db = {}, {}\n",
    "        if self.pie_db and set_id in self.pie_db and video_id in self.pie_db[set_id]:\n",
    "            video_db = self.pie_db[set_id][video_id]\n",
    "            ped_db = video_db.get(\"ped_annotations\", {}).get(ped_id, {})\n",
    "        \n",
    "        ego_db = video_db.get(\"vehicle_annotations\", {}) if video_db else {}\n",
    "        traffic_db = video_db.get(\"traffic_annotations\", {}) if video_db else {}\n",
    "        ped_attributes = ped_db.get(\"attributes\", {}) if ped_db else {}\n",
    "\n",
    "        feature_sequences = {s: [] for s in self.streams_to_extract}\n",
    "        label = 0\n",
    "        if ped_db and \"frames\" in ped_db and \"behavior\" in ped_db and \"cross\" in ped_db[\"behavior\"]:\n",
    "            try:\n",
    "                target_idx_in_pdb_frames = ped_db[\"frames\"].index(target_frame_num)\n",
    "                label = ped_db[\"behavior\"][\"cross\"][target_idx_in_pdb_frames]\n",
    "                if label == -1: label = 0\n",
    "            except (ValueError, IndexError): pass\n",
    "\n",
    "        static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32) # From Cell 1\n",
    "        if \"static_context\" in self.streams_to_extract:\n",
    "            sig_idx = ped_attributes.get(\"signalized\", 0)\n",
    "            int_idx = ped_attributes.get(\"intersection\", 0)\n",
    "            age_idx = ped_attributes.get(\"age\", 2) # Default to adult if missing\n",
    "            gen_idx = ped_attributes.get(\"gender\", 0) # Default to male/unknown\n",
    "            td_idx = int(ped_attributes.get(\"traffic_direction\", 0))\n",
    "            nl_val = ped_attributes.get(\"num_lanes\", 2) # Default to 2 lanes\n",
    "            nl_cat_idx = LANE_CATEGORIES.get(nl_val, LANE_CATEGORIES[max(LANE_CATEGORIES.keys())]) # Cell 1\n",
    "            \n",
    "            static_vec = np.concatenate([\n",
    "                to_one_hot(sig_idx, NUM_SIGNALIZED_CATS), to_one_hot(int_idx, NUM_INTERSECTION_CATS),\n",
    "                to_one_hot(age_idx, NUM_AGE_CATS), to_one_hot(gen_idx, NUM_GENDER_CATS),\n",
    "                to_one_hot(td_idx, NUM_TRAFFIC_DIR_CATS), to_one_hot(nl_cat_idx, NUM_LANE_CATS),\n",
    "            ]).astype(np.float32)\n",
    "            if static_vec.shape[0] != INPUT_SIZE_STATIC: # Should not happen with globals\n",
    "                static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "\n",
    "\n",
    "        for frame_num in frame_nums:\n",
    "            frame_db_idx = -1 # Index within ped_db['frames']\n",
    "            if ped_db and \"frames\" in ped_db:\n",
    "                try: frame_db_idx = ped_db[\"frames\"].index(frame_num)\n",
    "                except ValueError: pass\n",
    "            \n",
    "            ego_frame_data = ego_db.get(frame_num, {})\n",
    "\n",
    "            if \"bbox\" in self.streams_to_extract:\n",
    "                bbox_norm = np.zeros(INPUT_SIZE_BBOX, dtype=np.float32) # Cell 1\n",
    "                if ped_db and frame_db_idx!=-1 and \"bbox\" in ped_db and len(ped_db[\"bbox\"]) > frame_db_idx:\n",
    "                    try:\n",
    "                        x1,y1,x2,y2 = ped_db[\"bbox\"][frame_db_idx]\n",
    "                        img_w = video_db.get(\"width\",1920) if video_db else 1920\n",
    "                        img_h = video_db.get(\"height\",1080) if video_db else 1080\n",
    "                        if img_w > 0 and img_h > 0:\n",
    "                            cx,cy,w,h = ((x1+x2)/2)/img_w, ((y1+y2)/2)/img_h, (x2-x1)/img_w, (y2-y1)/img_h\n",
    "                            if 0<w and 0<h and 0<=cx<=1 and 0<=cy<=1: \n",
    "                                bbox_norm=np.array([cx,cy,w,h],dtype=np.float32)\n",
    "                    except Exception: pass\n",
    "                feature_sequences[\"bbox\"].append(bbox_norm)\n",
    "\n",
    "            if \"pose\" in self.streams_to_extract:\n",
    "                pose_vector = np.zeros(INPUT_SIZE_POSE, dtype=np.float32) # Cell 1\n",
    "                # Ensure all_pose_data and its nested dicts are accessed safely\n",
    "                vid_pose_data = self.all_pose_data.get(set_id, {}).get(video_id, {})\n",
    "                ped_pose_at_frame = vid_pose_data.get(frame_num, {}).get(ped_id)\n",
    "                if isinstance(ped_pose_at_frame, np.ndarray) and ped_pose_at_frame.shape == (INPUT_SIZE_POSE,):\n",
    "                    pose_vector = ped_pose_at_frame\n",
    "                feature_sequences[\"pose\"].append(pose_vector)\n",
    "\n",
    "            if \"ego_speed\" in self.streams_to_extract:\n",
    "                speed = ego_frame_data.get(\"OBD_speed\",0.0) or ego_frame_data.get(\"GPS_speed\",0.0)\n",
    "                speed_scaled = (speed - self.scalers.get(\"ego_speed_mean\",0.0)) / self.scalers.get(\"ego_speed_std\",1.0)\n",
    "                feature_sequences[\"ego_speed\"].append([speed_scaled])\n",
    "\n",
    "            if \"ego_acc\" in self.streams_to_extract:\n",
    "                ax,ay = ego_frame_data.get(\"accX\",0.0), ego_frame_data.get(\"accY\",0.0)\n",
    "                ax_s = (ax - self.scalers.get(\"accX_mean\",0.0))/self.scalers.get(\"accX_std\",1.0)\n",
    "                ay_s = (ay - self.scalers.get(\"accY_mean\",0.0))/self.scalers.get(\"accY_std\",1.0)\n",
    "                feature_sequences[\"ego_acc\"].append([ax_s, ay_s])\n",
    "\n",
    "            if \"ego_gyro\" in self.streams_to_extract:\n",
    "                gz = ego_frame_data.get(\"gyroZ\",0.0)\n",
    "                gz_s = (gz - self.scalers.get(\"gyroZ_mean\",0.0))/self.scalers.get(\"gyroZ_std\",1.0)\n",
    "                feature_sequences[\"ego_gyro\"].append([gz_s])\n",
    "\n",
    "            if \"ped_action\" in self.streams_to_extract:\n",
    "                action=0.0 # Default if not found\n",
    "                if ped_db and frame_db_idx!=-1 and \"behavior\" in ped_db and \\\n",
    "                   \"action\" in ped_db[\"behavior\"] and len(ped_db[\"behavior\"][\"action\"]) > frame_db_idx:\n",
    "                    action = float(ped_db[\"behavior\"][\"action\"][frame_db_idx])\n",
    "                feature_sequences[\"ped_action\"].append([action])\n",
    "\n",
    "            if \"ped_look\" in self.streams_to_extract:\n",
    "                look=0.0 # Default\n",
    "                if ped_db and frame_db_idx!=-1 and \"behavior\" in ped_db and \\\n",
    "                   \"look\" in ped_db[\"behavior\"] and len(ped_db[\"behavior\"][\"look\"]) > frame_db_idx:\n",
    "                    look = float(ped_db[\"behavior\"][\"look\"][frame_db_idx])\n",
    "                feature_sequences[\"ped_look\"].append([look])\n",
    "\n",
    "            if \"ped_occlusion\" in self.streams_to_extract:\n",
    "                occ=0.0 # Default\n",
    "                if ped_db and frame_db_idx!=-1 and \"occlusion\" in ped_db and \\\n",
    "                   len(ped_db[\"occlusion\"]) > frame_db_idx:\n",
    "                    occ = float(ped_db[\"occlusion\"][frame_db_idx])/2.0 # Normalize 0-2 to 0-1\n",
    "                feature_sequences[\"ped_occlusion\"].append([occ])\n",
    "            \n",
    "            if \"traffic_light\" in self.streams_to_extract:\n",
    "                state_int=0 # Default: undefined/no relevant TL\n",
    "                for _,obj_data in traffic_db.items(): # Iterate through traffic objects\n",
    "                    if obj_data.get(\"obj_class\")==\"traffic_light\" and \"frames\" in obj_data and \"state\" in obj_data:\n",
    "                        try:\n",
    "                            tl_idx_in_obj_frames = obj_data[\"frames\"].index(frame_num)\n",
    "                            if obj_data[\"state\"][tl_idx_in_obj_frames]!=0: # 0 is often undefined/irrelevant\n",
    "                                state_int=obj_data[\"state\"][tl_idx_in_obj_frames]\n",
    "                                break # Assume first relevant TL is the one\n",
    "                        except (ValueError,IndexError): continue\n",
    "                feature_sequences[\"traffic_light\"].append(to_one_hot(state_int,INPUT_SIZE_TL_STATE)) # Cell 1\n",
    "\n",
    "            if \"static_context\" in self.streams_to_extract:\n",
    "                feature_sequences[\"static_context\"].append(static_vec) # Already computed per sequence\n",
    "\n",
    "        # Convert lists of features to tensors\n",
    "        final_features = {}\n",
    "        try:\n",
    "            for stream_name in self.streams_to_extract:\n",
    "                # Ensure all sub-lists in feature_sequences[stream_name] have consistent shape before asarray\n",
    "                np_array = np.asarray(feature_sequences[stream_name], dtype=np.float32)\n",
    "                if np_array.ndim == 1 and self._input_sizes_for_error.get(stream_name,1) > 1: # handles case where list of lists might become 1D\n",
    "                     np_array = np_array.reshape(self.seq_len, -1)\n",
    "\n",
    "                expected_shape_dim1 = self._input_sizes_for_error.get(stream_name,1)\n",
    "                if np_array.shape != (self.seq_len, expected_shape_dim1):\n",
    "                     # Fallback if shapes are inconsistent, e.g. due to missing data for a frame\n",
    "                     # print(f\"Warning: Shape mismatch for stream {stream_name}. Expected {(self.seq_len, expected_shape_dim1)}, got {np_array.shape}. Using zeros.\")\n",
    "                     np_array = np.zeros((self.seq_len, expected_shape_dim1), dtype=np.float32)\n",
    "\n",
    "                final_features[stream_name] = torch.tensor(np_array, dtype=torch.float32)\n",
    "\n",
    "        except Exception as e: # Catch-all for unexpected errors during tensor conversion\n",
    "            print(f\"PIEDataset_Cell2: Error converting features for idx {idx} ({set_id},{video_id},{ped_id},{start_frame}): {e}. Returning zero tensors.\")\n",
    "            final_features = {\n",
    "                name: torch.zeros((self.seq_len, self._input_sizes_for_error.get(name, 1)), dtype=torch.float32)\n",
    "                for name in self.streams_to_extract\n",
    "            }\n",
    "            \n",
    "        return final_features, torch.tensor(label,dtype=torch.long)\n",
    "\n",
    "\n",
    "class BalancedDataset(Dataset): # For using pre-loaded balanced data\n",
    "    def __init__(self, data_dict, active_streams_list, label_key=\"label\"):\n",
    "        self.active_streams = active_streams_list # The streams the model will actually use\n",
    "        self.label_key = label_key\n",
    "        \n",
    "        if self.label_key not in data_dict or not data_dict[self.label_key]:\n",
    "            raise ValueError(f\"Label key '{self.label_key}' missing or empty in data_dict.\")\n",
    "        \n",
    "        self.num_samples = len(data_dict[self.label_key])\n",
    "        if self.num_samples == 0: \n",
    "            print(\"Warning: BalancedDataset initialized with zero samples.\")\n",
    "        \n",
    "        self.features_from_dict = {} # Stores tensors for active_streams\n",
    "        for stream in self.active_streams:\n",
    "            if stream in data_dict and data_dict[stream]:\n",
    "                try: \n",
    "                    # Data from pickle is already numpy array, convert to tensor\n",
    "                    self.features_from_dict[stream] = torch.tensor(np.asarray(data_dict[stream]),dtype=torch.float32)\n",
    "                except ValueError as e: \n",
    "                    raise ValueError(f\"Error converting stream '{stream}' from data_dict: {e}\")\n",
    "            else:\n",
    "                # This should not happen if Cell 1 ran correctly and ACTIVE_STREAMS are subset of ALL_POSSIBLE_STREAMS\n",
    "                raise KeyError(f\"Stream '{stream}' (active) missing or empty in provided data_dict.\")\n",
    "\n",
    "        try: \n",
    "            self.labels = torch.tensor([lbl[0] for lbl in data_dict[self.label_key]],dtype=torch.long)\n",
    "        except (IndexError, TypeError) as e: \n",
    "            raise ValueError(f\"Error converting labels from data_dict: {e}\")\n",
    "\n",
    "        # Sanity check lengths\n",
    "        for stream in self.active_streams:\n",
    "            if len(self.features_from_dict[stream]) != self.num_samples:\n",
    "                raise ValueError(f\"Length mismatch: Stream '{stream}' has {len(self.features_from_dict[stream])} samples, but labels have {self.num_samples}.\")\n",
    "\n",
    "    def __len__(self): return self.num_samples\n",
    "    \n",
    "    def __getitem__(self, idx):\n",
    "        # Return a dictionary of features, only for the active_streams\n",
    "        feature_dict_for_model = {s: self.features_from_dict[s][idx] for s in self.active_streams}\n",
    "        label = self.labels[idx]\n",
    "        return feature_dict_for_model, label\n",
    "\n",
    "\n",
    "class Attention(nn.Module):\n",
    "    def __init__(self, hidden_dim, attention_dim):\n",
    "        super().__init__()\n",
    "        self.attention_net = nn.Sequential(\n",
    "            nn.Linear(hidden_dim, attention_dim), nn.Tanh(), nn.Linear(attention_dim, 1),\n",
    "        )\n",
    "    def forward(self, lstm_output): # (batch, seq_len, hidden_dim*2)\n",
    "        att_scores = self.attention_net(lstm_output).squeeze(2) # (batch, seq_len)\n",
    "        att_weights = torch.softmax(att_scores, dim=1) # (batch, seq_len)\n",
    "        context_vector = torch.sum(lstm_output * att_weights.unsqueeze(2), dim=1) # (batch, hidden_dim*2)\n",
    "        return context_vector, att_weights\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                  ***  MODEL WITH WEIGHTED AVERAGE FUSION  ***                #\n",
    "# -----------------------------------------------------------------------------\n",
    "class MultiStreamWeightedAvgLSTM(nn.Module):\n",
    "    def __init__(\n",
    "        self, input_sizes_dict, lstm_hidden_size, num_lstm_layers,\n",
    "        num_classes, attention_dim, dropout_rate, active_stream_names_list=None,\n",
    "    ):\n",
    "        super().__init__()\n",
    "        if not active_stream_names_list: raise ValueError(\"active_stream_names_list cannot be empty.\")\n",
    "        \n",
    "        self.active_stream_names = active_stream_names_list\n",
    "        self.num_active_streams = len(active_stream_names_list)\n",
    "        self.lstm_output_dim = lstm_hidden_size * 2 # Bidirectional\n",
    "        \n",
    "        self.lstms, self.attentions = nn.ModuleDict(), nn.ModuleDict()\n",
    "        \n",
    "        # print(f\"Initializing Weighted-Avg model with streams: {self.active_stream_names}\")\n",
    "        for name in self.active_stream_names:\n",
    "            if name not in input_sizes_dict: \n",
    "                raise KeyError(f\"Input size for stream '{name}' not provided in input_sizes_dict.\")\n",
    "            in_size = input_sizes_dict[name]\n",
    "            # print(f\"  – Adding stream '{name}' (input size: {in_size}, LSTM hidden: {lstm_hidden_size})\")\n",
    "            self.lstms[name] = nn.LSTM(\n",
    "                in_size, lstm_hidden_size, num_lstm_layers, batch_first=True,\n",
    "                dropout=dropout_rate if num_lstm_layers > 1 else 0, bidirectional=True,\n",
    "            )\n",
    "            self.attentions[name] = Attention(self.lstm_output_dim, attention_dim)\n",
    "            \n",
    "        self.fusion_weights = nn.Parameter(torch.ones(self.num_active_streams))\n",
    "        \n",
    "        fused_representation_dim = self.lstm_output_dim # Since we average same-sized context vectors\n",
    "        \n",
    "        self.dropout_layer = nn.Dropout(dropout_rate)\n",
    "        \n",
    "        # Intermediate FC layer dimension (heuristic)\n",
    "        intermediate_fc_dim = max(num_classes * 4, fused_representation_dim // 2)\n",
    "        \n",
    "        self.fc1 = nn.Linear(fused_representation_dim, intermediate_fc_dim)\n",
    "        self.relu_activation = nn.ReLU()\n",
    "        self.fc2_final_classifier = nn.Linear(intermediate_fc_dim, num_classes)\n",
    "\n",
    "    def forward(self, x_input_dict): # x_input_dict contains {stream_name: tensor}\n",
    "        context_vectors_list = []\n",
    "        \n",
    "        for stream_name in self.active_stream_names:\n",
    "            if stream_name not in x_input_dict:\n",
    "                # This case should ideally be handled by the DataLoader ensuring all active streams are present.\n",
    "                # If a stream is truly optional and might be missing, this needs robust handling.\n",
    "                # For now, assume all active_stream_names are keys in x_input_dict.\n",
    "                # print(f\"Warning: Stream '{stream_name}' not in input dict x. Using zeros.\")\n",
    "                # Fallback: create a zero tensor. This might affect training if happens often.\n",
    "                batch_size_est = x_input_dict[next(iter(x_input_dict))].shape[0] # Get batch size from another stream\n",
    "                zero_ctx = torch.zeros(batch_size_est, self.lstm_output_dim, device=DEVICE)\n",
    "                context_vectors_list.append(zero_ctx)\n",
    "                continue\n",
    "\n",
    "            lstm_out, _ = self.lstms[stream_name](x_input_dict[stream_name])\n",
    "            context_vector, _ = self.attentions[stream_name](lstm_out)\n",
    "            context_vectors_list.append(context_vector)\n",
    "            \n",
    "        if len(context_vectors_list) != self.num_active_streams:\n",
    "            raise RuntimeError(f\"Mismatch: collected {len(context_vectors_list)} context vectors, expected {self.num_active_streams} for streams {self.active_stream_names}\")\n",
    "\n",
    "        # Stack context vectors for weighted sum: (batch, num_streams, lstm_output_dim)\n",
    "        stacked_context_vectors = torch.stack(context_vectors_list, dim=1)\n",
    "        \n",
    "        # Apply softmax to fusion_weights to make them sum to 1: (num_streams) -> (1, num_streams, 1) for broadcasting\n",
    "        normalized_fusion_weights = torch.softmax(self.fusion_weights, dim=0).view(1, -1, 1)\n",
    "        \n",
    "        # Weighted sum: (batch, num_streams, lstm_output_dim) * (1, num_streams, 1) -> sum over dim=1\n",
    "        fused_representation = torch.sum(stacked_context_vectors * normalized_fusion_weights, dim=1) # (batch, lstm_output_dim)\n",
    "        \n",
    "        # Pass through final classification layers\n",
    "        out = self.dropout_layer(fused_representation)\n",
    "        out = self.relu_activation(self.fc1(out))\n",
    "        out = self.dropout_layer(out)\n",
    "        logits = self.fc2_final_classifier(out)\n",
    "        \n",
    "        return logits\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#         Training / evaluation / Threshold Tuning helpers                     #\n",
    "# -----------------------------------------------------------------------------\n",
    "\n",
    "def get_all_probabilities_and_labels(model, dataloader, device):\n",
    "    model.eval()\n",
    "    all_true_labels, all_positive_class_probs = [], []\n",
    "    # active_streams_for_model = model.active_stream_names # Get from model instance\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for features_dict, true_labels in dataloader: # tqdm removed for less noise in HPO\n",
    "            # Ensure only active streams are passed, and they are on the correct device\n",
    "            inputs_for_model = {\n",
    "                name: features_dict[name].to(device) \n",
    "                for name in model.active_stream_names # Use model's configured streams\n",
    "                if name in features_dict # Data loader provides these\n",
    "            }\n",
    "            \n",
    "            logits = model(inputs_for_model)\n",
    "            probabilities = torch.softmax(logits, dim=1)\n",
    "\n",
    "            all_true_labels.extend(true_labels.cpu().numpy())\n",
    "            all_positive_class_probs.extend(probabilities[:, 1].cpu().numpy()) # Prob for class 1\n",
    "\n",
    "    return np.asarray(all_true_labels), np.asarray(all_positive_class_probs)\n",
    "\n",
    "\n",
    "def find_optimal_threshold(y_true, y_probs_positive_class, metric_to_optimize='f1', num_steps=100):\n",
    "    best_threshold_val = 0.5\n",
    "    best_metric_score = -1.0\n",
    "\n",
    "    if metric_to_optimize == 'f1':\n",
    "        # precision_recall_fscore_support returns (precision, recall, f1, support)\n",
    "        # We need the f1_score for the positive class (binary classification)\n",
    "        metric_function = lambda true_y, pred_y: f1_score(true_y, pred_y, pos_label=1, zero_division=0)\n",
    "    else:\n",
    "        raise ValueError(f\"Unsupported metric for threshold tuning: {metric_to_optimize}\")\n",
    "\n",
    "    # Iterate over potential thresholds\n",
    "    threshold_candidates = np.linspace(0.0, 1.0, num_steps + 1)\n",
    "\n",
    "    for current_threshold in threshold_candidates: # tqdm removed\n",
    "        # Apply current threshold to get binary predictions\n",
    "        y_pred_at_threshold = (y_probs_positive_class >= current_threshold).astype(int)\n",
    "        current_metric_score = metric_function(y_true, y_pred_at_threshold)\n",
    "\n",
    "        if current_metric_score > best_metric_score:\n",
    "            best_metric_score = current_metric_score\n",
    "            best_threshold_val = current_threshold\n",
    "        elif current_metric_score == best_metric_score: # Tie-breaking: prefer threshold closer to 0.5\n",
    "            if abs(current_threshold - 0.5) < abs(best_threshold_val - 0.5):\n",
    "                best_threshold_val = current_threshold\n",
    "    \n",
    "    # print(f\"Optimal threshold for {metric_to_optimize.upper()}: {best_threshold_val:.4f} (Max value: {best_metric_score:.4f})\")\n",
    "    return best_threshold_val, best_metric_score\n",
    "\n",
    "\n",
    "def train_epoch(model, dataloader, optimizer, criterion, device):\n",
    "    model.train()\n",
    "    current_epoch_loss = 0.0\n",
    "    # active_streams_for_model = model.active_stream_names\n",
    "\n",
    "    for features_dict, true_labels in dataloader: # tqdm removed for HPO\n",
    "        inputs_for_model = {\n",
    "            name: features_dict[name].to(device) \n",
    "            for name in model.active_stream_names if name in features_dict\n",
    "        }\n",
    "        true_labels = true_labels.to(device)\n",
    "        \n",
    "        optimizer.zero_grad()\n",
    "        logits = model(inputs_for_model)\n",
    "        loss = criterion(logits, true_labels)\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "        current_epoch_loss += loss.item()\n",
    "        \n",
    "    avg_epoch_loss = current_epoch_loss / max(1, len(dataloader))\n",
    "    return avg_epoch_loss # Accuracy calculation removed to speed up HPO, F1 is the target\n",
    "\n",
    "\n",
    "def evaluate_model_performance(model, dataloader, criterion, device, threshold_to_apply=0.5, tune_threshold_on_this_data=False):\n",
    "    \"\"\"Evaluates model, returns metrics. Can optionally tune threshold.\"\"\"\n",
    "    model.eval()\n",
    "    total_eval_loss = 0.0\n",
    "    all_true_labels_list, all_predicted_probs_list = [], []\n",
    "    # active_streams_for_model = model.active_stream_names\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for features_dict, true_labels in dataloader: # tqdm removed for HPO\n",
    "            inputs_for_model = {\n",
    "                name: features_dict[name].to(device) \n",
    "                for name in model.active_stream_names if name in features_dict\n",
    "            }\n",
    "            labels_on_gpu = true_labels.to(device)\n",
    "            \n",
    "            logits = model(inputs_for_model)\n",
    "            loss = criterion(logits, labels_on_gpu)\n",
    "            total_eval_loss += loss.item()\n",
    "            \n",
    "            probabilities = torch.softmax(logits, 1)\n",
    "            all_true_labels_list.extend(true_labels.cpu().numpy())\n",
    "            all_predicted_probs_list.extend(probabilities.cpu().numpy())\n",
    "\n",
    "    avg_eval_loss = total_eval_loss / max(1, len(dataloader))\n",
    "    \n",
    "    y_true_np = np.asarray(all_true_labels_list)\n",
    "    y_probs_all_classes_np = np.asarray(all_predicted_probs_list)\n",
    "    y_probs_positive_class_np = y_probs_all_classes_np[:, 1] # Probabilities for class 1\n",
    "\n",
    "    current_f1_score = 0.0\n",
    "    final_threshold_used = threshold_to_apply\n",
    "\n",
    "    if tune_threshold_on_this_data:\n",
    "        if len(y_true_np) > 0:\n",
    "            optimal_eval_threshold, f1_at_optimal = find_optimal_threshold(y_true_np, y_probs_positive_class_np, metric_to_optimize='f1')\n",
    "            final_threshold_used = optimal_eval_threshold\n",
    "            current_f1_score = f1_at_optimal\n",
    "            # print(f\"  (Threshold tuned on this data: {final_threshold_used:.4f} -> F1: {current_f1_score:.4f})\")\n",
    "        else: # Should not happen with proper dataset handling\n",
    "            # print(\"  (Cannot tune threshold on empty data)\")\n",
    "            current_f1_score = 0.0 # Or NaN\n",
    "    \n",
    "    # Calculate all metrics using the final_threshold_used (either fixed 0.5 or tuned)\n",
    "    y_pred_final = (y_probs_positive_class_np >= final_threshold_used).astype(int)\n",
    "    \n",
    "    acc = accuracy_score(y_true_np, y_pred_final) if len(y_true_np) > 0 else 0.0\n",
    "    prec, rec, f1_final_official, _ = precision_recall_fscore_support(\n",
    "        y_true_np, y_pred_final, average=\"binary\", pos_label=1, zero_division=0\n",
    "    ) if len(y_true_np) > 0 else (0.0,0.0,0.0,None)\n",
    "    \n",
    "    # AUC is independent of threshold\n",
    "    auc = roc_auc_score(y_true_np, y_probs_positive_class_np) if len(np.unique(y_true_np)) > 1 else float(\"nan\")\n",
    "    \n",
    "    return {\n",
    "        \"loss\": avg_eval_loss, \"accuracy\": acc, \"precision\": prec, \n",
    "        \"recall\": rec, \"f1\": f1_final_official, \"auc\": auc,\n",
    "        \"tuned_threshold_if_any\": final_threshold_used if tune_threshold_on_this_data else None,\n",
    "        \"f1_after_tuning_if_any\": current_f1_score if tune_threshold_on_this_data else None,\n",
    "        \"true_labels\": y_true_np, # For external CM plotting or further analysis\n",
    "        \"positive_class_probs\": y_probs_positive_class_np # For external threshold tuning\n",
    "    }\n",
    "\n",
    "\n",
    "# --- Global variables for Optuna objective function ---\n",
    "# These are set before calling Optuna study.\n",
    "# pie_database_global, scalers_global, balanced_train_data_global\n",
    "# train_loader_global, val_loader_for_hpo_global\n",
    "# current_input_sizes_global (derived from ACTIVE_STREAMS)\n",
    "\n",
    "pie_database_global = None\n",
    "scalers_global = None\n",
    "balanced_train_data_global = None\n",
    "train_loader_global = None\n",
    "val_loader_for_hpo_global = None\n",
    "current_input_sizes_global = None\n",
    "\n",
    "\n",
    "def objective_for_optuna(trial: optuna.Trial):\n",
    "    # Hyperparameters to tune\n",
    "    lstm_hidden_s = trial.suggest_categorical('lstm_hidden_size', [128, 256, 384]) # Adjusted choices\n",
    "    num_lstm_l = trial.suggest_int('num_lstm_layers', 1, 2) # Max 2 to keep model smaller\n",
    "    dropout_r = trial.suggest_float('dropout_rate', 0.2, 0.5, step=0.1)\n",
    "    learning_r = trial.suggest_float('learning_rate', 5e-5, 5e-4, log=True) # Adjusted range\n",
    "    attention_d = trial.suggest_categorical('attention_dim', [64, 128]) # Adjusted choices\n",
    "\n",
    "    # Create model with suggested HPs\n",
    "    model_trial = MultiStreamWeightedAvgLSTM(\n",
    "        input_sizes_dict=current_input_sizes_global, # From global scope\n",
    "        lstm_hidden_size=lstm_hidden_s,\n",
    "        num_lstm_layers=num_lstm_l,\n",
    "        num_classes=NUM_CLASSES, # Fixed\n",
    "        attention_dim=attention_d,\n",
    "        dropout_rate=dropout_r,\n",
    "        active_stream_names_list=ACTIVE_STREAMS, # Fixed for this run\n",
    "    ).to(DEVICE)\n",
    "\n",
    "    # Class weights (recalculate in case, though train_loader_global uses balanced data)\n",
    "    train_labels_list = train_loader_global.dataset.labels.tolist()\n",
    "    n_class0, n_class1 = train_labels_list.count(0), train_labels_list.count(1)\n",
    "    total_samples = len(train_labels_list)\n",
    "    \n",
    "    weight_c0, weight_c1 = (1.0,1.0)\n",
    "    if total_samples > 0 and n_class0 > 0 and n_class1 > 0 :\n",
    "        weight_c0 = total_samples / (2. * n_class0)\n",
    "        weight_c1 = total_samples / (2. * n_class1)\n",
    "    \n",
    "    criterion_trial = nn.CrossEntropyLoss(weight=torch.tensor([weight_c0, weight_c1], dtype=torch.float32).to(DEVICE))\n",
    "    optimizer_trial = optim.Adam(model_trial.parameters(), lr=learning_r)\n",
    "\n",
    "    # Training loop for this trial\n",
    "    for epoch_num in range(NUM_EPOCHS_TUNING):\n",
    "        _ = train_epoch(model_trial, train_loader_global, optimizer_trial, criterion_trial, DEVICE)\n",
    "        # No intermediate evaluation during tuning epochs to speed up, F1 on val set after all tuning epochs\n",
    "\n",
    "    # Evaluate on HPO validation set\n",
    "    # The `evaluate_model_performance` can do threshold tuning internally if requested\n",
    "    if len(val_loader_for_hpo_global.dataset) == 0:\n",
    "        print(f\"Optuna trial {trial.number}: HPO Validation dataset is empty. Returning F1=0.\")\n",
    "        return 0.0 # Or handle as Optuna pruner would\n",
    "\n",
    "    eval_results_trial = evaluate_model_performance(\n",
    "        model_trial, val_loader_for_hpo_global, criterion_trial, DEVICE, \n",
    "        tune_threshold_on_this_data=True # This will find optimal F1 on val set for HPO\n",
    "    )\n",
    "    \n",
    "    f1_for_this_trial = eval_results_trial[\"f1_after_tuning_if_any\"] if eval_results_trial[\"f1_after_tuning_if_any\"] is not None else 0.0\n",
    "\n",
    "    # Optuna pruner hook (optional, for early stopping of unpromising trials)\n",
    "    trial.report(f1_for_this_trial, step=NUM_EPOCHS_TUNING -1) # Report at the end of all tuning epochs\n",
    "    if trial.should_prune():\n",
    "        raise optuna.exceptions.TrialPruned()\n",
    "\n",
    "    return f1_for_this_trial # Optuna maximizes this\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                            Main execution block                              #\n",
    "# -----------------------------------------------------------------------------\n",
    "\n",
    "if __name__ == \"__main__\": # Ensures this runs only when script is executed directly\n",
    "    print(\"--- CELL 2: Model Training, HPO, and Evaluation on Set03 ---\")\n",
    "    print(f\"Active Streams: {ACTIVE_STREAMS}\")\n",
    "\n",
    "    # --- 1. Load pre-processed data (from Cell 1) and PIE DB ---\n",
    "    print(\"\\nLoading balanced training data, scalers, and PIE database …\")\n",
    "    try:\n",
    "        with open(BALANCED_DATA_PKL_PATH, \"rb\") as f: balanced_train_data_global = pickle.load(f)\n",
    "        with open(SCALERS_PKL_PATH, \"rb\") as f: scalers_global = pickle.load(f)\n",
    "        if not os.path.exists(PIE_DATABASE_CACHE_PATH_CELL2): \n",
    "            raise FileNotFoundError(f\"PIE db cache not found at {PIE_DATABASE_CACHE_PATH_CELL2}\")\n",
    "        with open(PIE_DATABASE_CACHE_PATH_CELL2, \"rb\") as f: pie_database_global = pickle.load(f)\n",
    "        print(\"   ✓ Pre-processed data and PIE database loaded.\")\n",
    "    except FileNotFoundError as e: \n",
    "        print(f\"ERROR: {e}. Ensure Cell 1 has run successfully and paths are correct.\"); sys.exit(1)\n",
    "    except Exception as e: \n",
    "        print(f\"Error loading data: {e}\"); sys.exit(1)\n",
    "\n",
    "    # --- 2. Prepare Datasets and DataLoaders for HPO and Final Training ---\n",
    "    print(\"\\nCreating Datasets and DataLoaders …\")\n",
    "    try:\n",
    "        # Training dataset (from balanced pickle)\n",
    "        train_dataset_obj = BalancedDataset(\n",
    "            balanced_train_data_global, \n",
    "            ACTIVE_STREAMS, # Model will use these streams\n",
    "            label_key=\"label\"\n",
    "        )\n",
    "        # Validation dataset for HPO (uses VAL_SETS_STR)\n",
    "        # PIEDataset_Cell2 needs all possible streams it *might* be asked for by any model variant.\n",
    "        # Model then picks ACTIVE_STREAMS.\n",
    "        val_dataset_for_hpo_obj = PIEDataset_Cell2(\n",
    "            pie_database_global, VAL_SETS_STR, POSE_DATA_DIR_CELL2, SEQ_LEN, PRED_LEN,\n",
    "            scalers_global, streams_to_extract=ALL_POSSIBLE_STREAMS_CELL2, \n",
    "        )\n",
    "        if len(train_dataset_obj) == 0 : raise ValueError(\"Train dataset (BalancedDataset) is empty!\")\n",
    "        if len(val_dataset_for_hpo_obj) == 0 : print(f\"Warning: HPO Validation dataset ({VAL_SETS_STR}) is empty! Check set names and PIE data.\")\n",
    "\n",
    "        train_loader_global = DataLoader(train_dataset_obj, batch_size=BATCH_SIZE, shuffle=True, num_workers=2, pin_memory=True)\n",
    "        val_loader_for_hpo_global = DataLoader(val_dataset_for_hpo_obj, batch_size=BATCH_SIZE, shuffle=False, num_workers=2, pin_memory=True)\n",
    "        print(f\"   ✓ Train DataLoader ready ({len(train_dataset_obj)} samples).\")\n",
    "        print(f\"   ✓ HPO Validation DataLoader ready ({len(val_dataset_for_hpo_obj)} samples for {VAL_SETS_STR}).\")\n",
    "\n",
    "    except Exception as e: \n",
    "        print(f\"Error creating datasets/dataloaders: {e}\"); raise\n",
    "\n",
    "    # Determine input sizes for active streams (used by model constructor)\n",
    "    current_input_sizes_global = {}\n",
    "    SPECIAL_MAP_CELL2 = { # To map stream names to global INPUT_SIZE constants\n",
    "        \"TRAFFIC_LIGHT\": \"TL_STATE\", \"STATIC_CONTEXT\": \"STATIC\", \"EGO_SPEED\": \"EGO_SPEED\",\n",
    "        \"EGO_ACC\": \"EGO_ACC\", \"EGO_GYRO\": \"EGO_GYRO\", \"PED_ACTION\": \"PED_ACTION\",\n",
    "        \"PED_LOOK\": \"PED_LOOK\", \"PED_OCCLUSION\": \"PED_OCC\",\n",
    "    }\n",
    "    for s_name in ACTIVE_STREAMS:\n",
    "        const_suffix = SPECIAL_MAP_CELL2.get(s_name.upper(), s_name.upper())\n",
    "        if s_name == \"bbox\": const_suffix = \"BBOX\"\n",
    "        elif s_name == \"pose\": const_suffix = \"POSE\"\n",
    "        size_const_name = f\"INPUT_SIZE_{const_suffix}\"\n",
    "        if size_const_name not in globals(): # Check Cell 1 globals\n",
    "            raise ValueError(f\"Input-size constant {size_const_name} for stream '{s_name}' not found in globals.\")\n",
    "        current_input_sizes_global[s_name] = globals()[size_const_name]\n",
    "    \n",
    "    # --- 3. Hyperparameter Optimization with Optuna ---\n",
    "    print(f\"\\n--- Starting Hyperparameter Optimization ({N_OPTUNA_TRIALS} trials, {NUM_EPOCHS_TUNING} epochs/trial) ---\")\n",
    "    # optuna.logging.set_verbosity(optuna.logging.WARNING) # Reduce Optuna's own logging\n",
    "    study = optuna.create_study(\n",
    "        direction=\"maximize\", # We want to maximize F1 score\n",
    "        sampler=optuna.samplers.TPESampler(seed=SEED)\n",
    "    )\n",
    "    \n",
    "    # Pass global vars by assignment before study, objective function will access them\n",
    "    # This is done above where they are defined with _global suffix\n",
    "\n",
    "    start_hpo_time = time.time()\n",
    "    study.optimize(objective_for_optuna, n_trials=N_OPTUNA_TRIALS, show_progress_bar=True)\n",
    "    hpo_duration = time.time() - start_hpo_time\n",
    "    \n",
    "    print(f\"\\n--- Hyperparameter Optimization Finished ({hpo_duration:.2f}s) ---\")\n",
    "    print(f\"Best HPO F1 score on validation set ({VAL_SETS_STR}): {study.best_value:.4f}\")\n",
    "    print(\"Best hyperparameters found:\")\n",
    "    for key, value in study.best_params.items():\n",
    "        print(f\"  {key}: {value}\")\n",
    "    \n",
    "    best_hps = study.best_params\n",
    "\n",
    "    # --- 4. Train Final Model with Best Hyperparameters ---\n",
    "    print(\"\\n--- Training Final Model with Best Hyperparameters ---\")\n",
    "    final_model = MultiStreamWeightedAvgLSTM(\n",
    "        input_sizes_dict=current_input_sizes_global,\n",
    "        lstm_hidden_size=best_hps['lstm_hidden_size'],\n",
    "        num_lstm_layers=best_hps['num_lstm_layers'],\n",
    "        num_classes=NUM_CLASSES,\n",
    "        attention_dim=best_hps['attention_dim'],\n",
    "        dropout_rate=best_hps['dropout_rate'],\n",
    "        active_stream_names_list=ACTIVE_STREAMS,\n",
    "    ).to(DEVICE)\n",
    "\n",
    "    # Print model summary\n",
    "    print(\"\\n--- Final Model Architecture ---\")\n",
    "    # print(final_model) # Can be very verbose\n",
    "    total_params_final = sum(p.numel() for p in final_model.parameters() if p.requires_grad)\n",
    "    print(f\"Trainable parameters in final model: {total_params_final:,}\")\n",
    "\n",
    "    # Optimizer and Criterion for final model\n",
    "    train_labels_final = train_loader_global.dataset.labels.tolist() # From the global loader\n",
    "    n0_final, n1_final = train_labels_final.count(0), train_labels_final.count(1)\n",
    "    total_final = len(train_labels_final)\n",
    "    w0_final, w1_final = (1.0,1.0)\n",
    "    if total_final > 0 and n0_final > 0 and n1_final > 0:\n",
    "        w0_final = total_final / (2. * n0_final)\n",
    "        w1_final = total_final / (2. * n1_final)\n",
    "    \n",
    "    class_weights_final = torch.tensor([w0_final, w1_final], dtype=torch.float32).to(DEVICE)\n",
    "    criterion_final = nn.CrossEntropyLoss(weight=class_weights_final)\n",
    "    optimizer_final = optim.Adam(final_model.parameters(), lr=best_hps['learning_rate'])\n",
    "\n",
    "    print(f\"\\nTraining final model for {NUM_EPOCHS_FINAL_TRAINING} epochs with LR={best_hps['learning_rate']:.2e}...\")\n",
    "    history_final_model = {\"train_loss\": [], \"val_loss_on_hpo_set\": [], \"val_f1_on_hpo_set\": []} # Track basic metrics\n",
    "\n",
    "    for epoch in range(NUM_EPOCHS_FINAL_TRAINING):\n",
    "        t_epoch_start = time.time()\n",
    "        final_train_loss = train_epoch(final_model, train_loader_global, optimizer_final, criterion_final, DEVICE)\n",
    "        \n",
    "        # Optional: evaluate on HPO val set during final training to monitor\n",
    "        # Using fixed 0.5 threshold for this interim check, not tuning threshold every epoch here\n",
    "        val_metrics_interim = evaluate_model_performance(\n",
    "            final_model, val_loader_for_hpo_global, criterion_final, DEVICE, threshold_to_apply=0.5 \n",
    "        )\n",
    "        \n",
    "        history_final_model[\"train_loss\"].append(final_train_loss)\n",
    "        history_final_model[\"val_loss_on_hpo_set\"].append(val_metrics_interim[\"loss\"])\n",
    "        history_final_model[\"val_f1_on_hpo_set\"].append(val_metrics_interim[\"f1\"]) # F1 at 0.5 on HPO val set\n",
    "\n",
    "        print(f\"  Epoch {epoch + 1:02d}/{NUM_EPOCHS_FINAL_TRAINING} – {time.time() - t_epoch_start:.1f}s \"\n",
    "              f\"| Train Loss: {final_train_loss:.4f} \"\n",
    "              f\"| Val HPO Loss: {val_metrics_interim['loss']:.4f} \"\n",
    "              f\"| Val HPO F1@0.5: {val_metrics_interim['f1']:.4f}\")\n",
    "\n",
    "    # --- 5. Evaluate Final Model on the Test Set (set03) ---\n",
    "    print(f\"\\n--- Final Evaluation on Test Set ({TEST_SET_STR}) ---\")\n",
    "    # Create Test DataLoader for set03\n",
    "    test_dataset_obj = PIEDataset_Cell2(\n",
    "        pie_database_global, TEST_SET_STR, POSE_DATA_DIR_CELL2, SEQ_LEN, PRED_LEN,\n",
    "        scalers_global, streams_to_extract=ALL_POSSIBLE_STREAMS_CELL2,\n",
    "    )\n",
    "    if len(test_dataset_obj) == 0:\n",
    "        print(f\"ERROR: Test dataset ({TEST_SET_STR}) is empty. Cannot perform final evaluation.\")\n",
    "    else:\n",
    "        test_loader = DataLoader(test_dataset_obj, batch_size=BATCH_SIZE, shuffle=False, num_workers=2, pin_memory=True)\n",
    "        print(f\"   ✓ Test DataLoader ready ({len(test_dataset_obj)} samples for {TEST_SET_STR}).\")\n",
    "\n",
    "        # Get probabilities and true labels from the test set (set03)\n",
    "        # The criterion_final is just for calculating loss if needed, not strictly for metrics here\n",
    "        test_eval_results = evaluate_model_performance(\n",
    "            final_model, test_loader, criterion_final, DEVICE, \n",
    "            tune_threshold_on_this_data=True # CRUCIAL: Tune threshold on set03 data to get best F1\n",
    "        )\n",
    "        \n",
    "        final_optimal_threshold_set03 = test_eval_results[\"tuned_threshold_if_any\"]\n",
    "        final_f1_set03 = test_eval_results[\"f1_after_tuning_if_any\"] # This is the F1 after tuning on set03\n",
    "        \n",
    "        # Re-calculate metrics with the tuned threshold for consistent reporting\n",
    "        y_true_set03 = test_eval_results[\"true_labels\"]\n",
    "        y_probs_pos_set03 = test_eval_results[\"positive_class_probs\"]\n",
    "        y_pred_set03_tuned = (y_probs_pos_set03 >= final_optimal_threshold_set03).astype(int)\n",
    "\n",
    "        final_accuracy_set03 = accuracy_score(y_true_set03, y_pred_set03_tuned)\n",
    "        final_precision_set03, final_recall_set03, _, = \\\n",
    "            precision_recall_fscore_support(y_true_set03, y_pred_set03_tuned, average='binary', pos_label=1, zero_division=0)[0:3]\n",
    "        final_auc_set03 = roc_auc_score(y_true_set03, y_probs_pos_set03) if len(np.unique(y_true_set03)) > 1 else float('nan')\n",
    "        \n",
    "        cm_set03_tuned = confusion_matrix(y_true_set03, y_pred_set03_tuned, labels=[0, 1])\n",
    "\n",
    "        print(\"\\n--- Final Metrics on Test Set (set03) with Tuned Threshold ---\")\n",
    "        print(f\"{'Optimal Threshold on Set03':<30}: {final_optimal_threshold_set03:.4f}\")\n",
    "        print(f\"{'F1-score (Maximized on Set03)':<30}: {final_f1_set03:.4f}\")\n",
    "        print(f\"{'Accuracy':<30}: {final_accuracy_set03:.4f}\")\n",
    "        print(f\"{'Precision':<30}: {final_precision_set03:.4f}\")\n",
    "        print(f\"{'Recall':<30}: {final_recall_set03:.4f}\")\n",
    "        print(f\"{'AUC':<30}: {final_auc_set03:.4f}\")\n",
    "\n",
    "        # Display Confusion Matrix for set03\n",
    "        ConfusionMatrixDisplay(cm_set03_tuned, display_labels=[\"Not Crossing\", \"Crossing\"]).plot(cmap=plt.cm.Blues)\n",
    "        plt.title(f\"Confusion Matrix - Test Set (set03)\\nOptimal Threshold: {final_optimal_threshold_set03:.2f}, F1: {final_f1_set03:.4f}\")\n",
    "        plt.show()\n",
    "\n",
    "        # Display learned fusion weights from the final model\n",
    "        if hasattr(final_model, \"fusion_weights\"):\n",
    "            f_weights = torch.softmax(final_model.fusion_weights, 0).detach().cpu().numpy()\n",
    "            print(\"\\n--- Learned Fusion Weights (Final Model) ---\")\n",
    "            for stream_name, weight_val in zip(final_model.active_stream_names, f_weights):\n",
    "                print(f\"{stream_name:<20}: {weight_val:.4f}\")\n",
    "            print(\"-\" * 30)\n",
    "\n",
    "    # --- 6. Plot training curves for the final model (optional) ---\n",
    "    if NUM_EPOCHS_FINAL_TRAINING > 0 :\n",
    "        fig_final, ax_final = plt.subplots(1, 2, figsize=(12, 4))\n",
    "        ax_final[0].plot(range(1, NUM_EPOCHS_FINAL_TRAINING + 1), history_final_model[\"train_loss\"], label=\"Final Model Train Loss\")\n",
    "        ax_final[0].plot(range(1, NUM_EPOCHS_FINAL_TRAINING + 1), history_final_model[\"val_loss_on_hpo_set\"], label=f\"Final Model Val Loss ({VAL_SETS_STR})\")\n",
    "        ax_final[0].set_xlabel(\"Epoch\"); ax_final[0].set_ylabel(\"Loss\"); ax_final[0].set_title(\"Final Model Loss\"); ax_final[0].legend(); ax_final[0].grid(True)\n",
    "        \n",
    "        ax_final[1].plot(range(1, NUM_EPOCHS_FINAL_TRAINING + 1), history_final_model[\"val_f1_on_hpo_set\"], label=f\"Final Model Val F1@0.5 ({VAL_SETS_STR})\")\n",
    "        ax_final[1].set_xlabel(\"Epoch\"); ax_final[1].set_ylabel(\"F1 Score @ 0.5\"); ax_final[1].set_title(f\"Final Model F1 on {VAL_SETS_STR}\"); ax_final[1].legend(); ax_final[1].grid(True)\n",
    "        plt.tight_layout(); plt.show()\n",
    "\n",
    "\n",
    "    # Clean up global variables if needed, though script end will do it\n",
    "    del pie_database_global, scalers_global, balanced_train_data_global\n",
    "    del train_loader_global, val_loader_for_hpo_global, current_input_sizes_global\n",
    "    gc.collect()\n",
    "\n",
    "    print(\"\\n--- CELL 2: Script complete ---\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 6993690,
     "sourceId": 11201333,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6993708,
     "sourceId": 11201362,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6993722,
     "sourceId": 11201388,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6993740,
     "sourceId": 11201422,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6993794,
     "sourceId": 11201506,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6993809,
     "sourceId": 11201543,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7034191,
     "sourceId": 11255589,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7127490,
     "sourceId": 11382982,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7142036,
     "sourceId": 11402679,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7333398,
     "sourceId": 11684148,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7357780,
     "sourceId": 11720877,
     "sourceType": "datasetVersion"
    },
    {
     "modelId": 279383,
     "modelInstanceId": 258142,
     "sourceId": 302300,
     "sourceType": "modelInstanceVersion"
    },
    {
     "modelId": 283333,
     "modelInstanceId": 262207,
     "sourceId": 307831,
     "sourceType": "modelInstanceVersion"
    },
    {
     "modelId": 288527,
     "modelInstanceId": 267476,
     "sourceId": 316944,
     "sourceType": "modelInstanceVersion"
    },
    {
     "modelId": 297682,
     "modelInstanceId": 276781,
     "sourceId": 329886,
     "sourceType": "modelInstanceVersion"
    },
    {
     "modelId": 297702,
     "modelInstanceId": 276800,
     "sourceId": 329908,
     "sourceType": "modelInstanceVersion"
    },
    {
     "isSourceIdPinned": true,
     "modelId": 314775,
     "modelInstanceId": 294156,
     "sourceId": 352620,
     "sourceType": "modelInstanceVersion"
    }
   ],
   "dockerImageVersionId": 30918,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 11214.606819,
   "end_time": "2025-05-13T17:03:40.251443",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-13T13:56:45.644624",
   "version": "2.6.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "029c01b9c5e941ac89ca7f6cf118c981": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "03c12b4a226948c1842e2b4bf4476307": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "10754b3843dc4a26860dd6c13281bba0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1653459da95e49159a95351c9be72b9f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_029c01b9c5e941ac89ca7f6cf118c981",
       "placeholder": "​",
       "style": "IPY_MODEL_95007bdac1da475c913a391137fe4460",
       "tabbable": null,
       "tooltip": null,
       "value": " 1/? [00:00&lt;00:00,  6.97it/s]"
      }
     },
     "16e2f5efb7f245b0bada2e0229791762": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "227c346828db444f93af0496daa7b882": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "27c527f397854b9ab0b8072c3ac0987d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_e5c10bab36e14b9fa2fa0f3d427e16e3",
        "IPY_MODEL_4a26ed73230d499bb63e39f97f760aa8",
        "IPY_MODEL_1653459da95e49159a95351c9be72b9f"
       ],
       "layout": "IPY_MODEL_aaebf0a904f445b89c2da80c146de64f",
       "tabbable": null,
       "tooltip": null
      }
     },
     "3296200b45f142a9bfe64816a93079aa": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "38b8046445824ad1902e009c4daa1721": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "3cc54b8cef1349dea5c7f3b5681ef2cb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_51e24040a4a64e088727f4911f4de2d1",
       "placeholder": "​",
       "style": "IPY_MODEL_8baa83f1b1404182ac3a49c45ae8d7b5",
       "tabbable": null,
       "tooltip": null,
       "value": ""
      }
     },
     "40064fd7e3694c7e8829155faf0b6ad9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_227c346828db444f93af0496daa7b882",
       "placeholder": "​",
       "style": "IPY_MODEL_bcfd5610f9a24f2883a196ca56c2029a",
       "tabbable": null,
       "tooltip": null,
       "value": " 2/? [00:00&lt;00:00, 15.78it/s]"
      }
     },
     "4a26ed73230d499bb63e39f97f760aa8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "info",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_fb9893d1d21f4db6ad44818128290cc3",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_7abd11ad5a6c42c39353244a4a6ff6e8",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "4bc3aea8e144486eaa1d09640702bc18": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4f2265fe6e654755a07f5fca0878ad0e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_8d626a2b189443d7860318cfbfa31ba1",
        "IPY_MODEL_ca9bb964b95f43429dfbb678cd3c043a",
        "IPY_MODEL_40064fd7e3694c7e8829155faf0b6ad9"
       ],
       "layout": "IPY_MODEL_f2356ac67d5846d3bb5c9cf3d0c87df6",
       "tabbable": null,
       "tooltip": null
      }
     },
     "51e24040a4a64e088727f4911f4de2d1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "520b04611bea4113b495749954284cb4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5660819a9e924adcaf0058e9128a9c26": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "59f4a5c07cae4e7b9d324434a5a4b5a6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_8516a70ad2674bd090c8b0e6911aa611",
       "placeholder": "​",
       "style": "IPY_MODEL_38b8046445824ad1902e009c4daa1721",
       "tabbable": null,
       "tooltip": null,
       "value": " 14/? [00:00&lt;00:00, 23.20it/s]"
      }
     },
     "5d2f9d6a651e4492a7d281bb0d0029fc": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5f8b378487aa4be4bdae6e961ed27381": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "610e1d52c7b14d96a94bdc217eec7558": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_3cc54b8cef1349dea5c7f3b5681ef2cb",
        "IPY_MODEL_84978ad883c041c18a47d39356e47445",
        "IPY_MODEL_59f4a5c07cae4e7b9d324434a5a4b5a6"
       ],
       "layout": "IPY_MODEL_bcf9d174b1eb4ca9a9bc0c4af0b80981",
       "tabbable": null,
       "tooltip": null
      }
     },
     "73027980234a46a395f92fa1bc2e6e48": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "73c1ca744d54462798d1ad6ee7962fe1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7abd11ad5a6c42c39353244a4a6ff6e8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "7b5f582d22754cd8af03d198b3a0d003": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_89d333fd5f7b4adc83d2e615eae5b506",
        "IPY_MODEL_be4cf2f104474ec29f7c24cba39939cc",
        "IPY_MODEL_cf9fd70c0e4a43d5832cdf542d0468b5"
       ],
       "layout": "IPY_MODEL_4bc3aea8e144486eaa1d09640702bc18",
       "tabbable": null,
       "tooltip": null
      }
     },
     "84978ad883c041c18a47d39356e47445": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "info",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_eb324b546f44494688dd4950eeeda56b",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_e341496c857b4db88ed0623eeff140bc",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "8516a70ad2674bd090c8b0e6911aa611": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "89d333fd5f7b4adc83d2e615eae5b506": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_10754b3843dc4a26860dd6c13281bba0",
       "placeholder": "​",
       "style": "IPY_MODEL_73027980234a46a395f92fa1bc2e6e48",
       "tabbable": null,
       "tooltip": null,
       "value": "Best trial: 11. Best value: 0.824754: 100%"
      }
     },
     "8b1b53ebb8754fa196d888ad0aa11e0a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "8baa83f1b1404182ac3a49c45ae8d7b5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "8d626a2b189443d7860318cfbfa31ba1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_d5b3f6fac07c43e09eb711e7ea9986e2",
       "placeholder": "​",
       "style": "IPY_MODEL_9656717d21b7428199ca4c8d86e3796e",
       "tabbable": null,
       "tooltip": null,
       "value": ""
      }
     },
     "95007bdac1da475c913a391137fe4460": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "9656717d21b7428199ca4c8d86e3796e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "9681bd02bd184a3bbb24a6a65a89f28f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a0e803962d2449a3b6fa730741856dcf": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "aaade724ef0346f3bd0c6bb451003e76": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "aaebf0a904f445b89c2da80c146de64f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "b59afb393eac4a60915d32e75637dd32": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "b93a0aee3bf8433b9d88d5259a0c659c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ec984581133b42b8818692359973473f",
       "placeholder": "​",
       "style": "IPY_MODEL_a0e803962d2449a3b6fa730741856dcf",
       "tabbable": null,
       "tooltip": null,
       "value": "seq: 100%"
      }
     },
     "bcf9d174b1eb4ca9a9bc0c4af0b80981": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "bcfd5610f9a24f2883a196ca56c2029a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "be4cf2f104474ec29f7c24cba39939cc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3296200b45f142a9bfe64816a93079aa",
       "max": 15.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_b59afb393eac4a60915d32e75637dd32",
       "tabbable": null,
       "tooltip": null,
       "value": 15.0
      }
     },
     "c1b99da5fc7b4fffb57ca6a3a527e009": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_b93a0aee3bf8433b9d88d5259a0c659c",
        "IPY_MODEL_f61c0d7f1f004ebb8fd1de637a1664d2",
        "IPY_MODEL_dbe1ef4343744c50a6de30a72b96ddf1"
       ],
       "layout": "IPY_MODEL_520b04611bea4113b495749954284cb4",
       "tabbable": null,
       "tooltip": null
      }
     },
     "ca9bb964b95f43429dfbb678cd3c043a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "info",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_8b1b53ebb8754fa196d888ad0aa11e0a",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_5660819a9e924adcaf0058e9128a9c26",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "cf9fd70c0e4a43d5832cdf542d0468b5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_73c1ca744d54462798d1ad6ee7962fe1",
       "placeholder": "​",
       "style": "IPY_MODEL_16e2f5efb7f245b0bada2e0229791762",
       "tabbable": null,
       "tooltip": null,
       "value": " 15/15 [2:29:26&lt;00:00, 438.67s/it]"
      }
     },
     "d5b3f6fac07c43e09eb711e7ea9986e2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "dbe1ef4343744c50a6de30a72b96ddf1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_aaade724ef0346f3bd0c6bb451003e76",
       "placeholder": "​",
       "style": "IPY_MODEL_5f8b378487aa4be4bdae6e961ed27381",
       "tabbable": null,
       "tooltip": null,
       "value": " 333454/333454 [13:11&lt;00:00, 412.40it/s]"
      }
     },
     "e341496c857b4db88ed0623eeff140bc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "e5c10bab36e14b9fa2fa0f3d427e16e3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9681bd02bd184a3bbb24a6a65a89f28f",
       "placeholder": "​",
       "style": "IPY_MODEL_f39bcbdab23b46baa948e7846e84175c",
       "tabbable": null,
       "tooltip": null,
       "value": ""
      }
     },
     "eb324b546f44494688dd4950eeeda56b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "ec984581133b42b8818692359973473f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f2356ac67d5846d3bb5c9cf3d0c87df6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "f39bcbdab23b46baa948e7846e84175c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f61c0d7f1f004ebb8fd1de637a1664d2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5d2f9d6a651e4492a7d281bb0d0029fc",
       "max": 333454.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_03c12b4a226948c1842e2b4bf4476307",
       "tabbable": null,
       "tooltip": null,
       "value": 333454.0
      }
     },
     "fb9893d1d21f4db6ad44818128290cc3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
