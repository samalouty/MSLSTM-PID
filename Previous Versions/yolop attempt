{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "196edeab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-05T14:51:40.251118Z",
     "iopub.status.busy": "2025-05-05T14:51:40.250678Z",
     "iopub.status.idle": "2025-05-05T14:51:46.939937Z",
     "shell.execute_reply": "2025-05-05T14:51:46.938977Z"
    },
    "papermill": {
     "duration": 6.699589,
     "end_time": "2025-05-05T14:51:46.941623",
     "exception": false,
     "start_time": "2025-05-05T14:51:40.242034",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cloning into 'PIE'...\r\n",
      "remote: Enumerating objects: 178, done.\u001b[K\r\n",
      "remote: Counting objects: 100% (93/93), done.\u001b[K\r\n",
      "remote: Compressing objects: 100% (74/74), done.\u001b[K\r\n",
      "remote: Total 178 (delta 32), reused 75 (delta 17), pack-reused 85 (from 1)\u001b[K\r\n",
      "Receiving objects: 100% (178/178), 144.63 MiB | 36.67 MiB/s, done.\r\n",
      "Resolving deltas: 100% (73/73), done.\r\n",
      "Updating files: 100% (41/41), done.\r\n",
      "unzip:  cannot find or open /content/PIE/annotations/annotations.zip, /content/PIE/annotations/annotations.zip.zip or /content/PIE/annotations/annotations.zip.ZIP.\r\n",
      "unzip:  cannot find or open /content/PIE/annotations/annotations_vehicle.zip, /content/PIE/annotations/annotations_vehicle.zip.zip or /content/PIE/annotations/annotations_vehicle.zip.ZIP.\r\n"
     ]
    }
   ],
   "source": [
    "!git clone https://github.com/aras62/PIE.git\n",
    "!unzip /content/PIE/annotations/annotations.zip -d /content/PIE\n",
    "!unzip /content/PIE/annotations/annotations_vehicle.zip -d /content/PIE\n",
    "# !git clone https://github.com/hustvl/YOLOP.git\n",
    "!mkdir /kaggle/working/PIE/content"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7333e96e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-05T14:51:46.958375Z",
     "iopub.status.busy": "2025-05-05T14:51:46.958079Z",
     "iopub.status.idle": "2025-05-05T14:51:52.567321Z",
     "shell.execute_reply": "2025-05-05T14:51:52.566327Z"
    },
    "papermill": {
     "duration": 5.619015,
     "end_time": "2025-05-05T14:51:52.569023",
     "exception": false,
     "start_time": "2025-05-05T14:51:46.950008",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.0/1.0 MB\u001b[0m \u001b[31m17.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h"
     ]
    }
   ],
   "source": [
    "!pip install -q ultralytics opencv-python-headless "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0320a6ee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-05T14:51:52.585633Z",
     "iopub.status.busy": "2025-05-05T14:51:52.585367Z",
     "iopub.status.idle": "2025-05-05T14:51:58.652289Z",
     "shell.execute_reply": "2025-05-05T14:51:58.651568Z"
    },
    "papermill": {
     "duration": 6.076541,
     "end_time": "2025-05-05T14:51:58.653712",
     "exception": false,
     "start_time": "2025-05-05T14:51:52.577171",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Creating new Ultralytics Settings v0.0.6 file ✅ \n",
      "View Ultralytics Settings with 'yolo settings' or at '/root/.config/Ultralytics/settings.json'\n",
      "Update Settings with 'yolo settings key=value', i.e. 'yolo settings runs_dir=path/to/dir'. For help see https://docs.ultralytics.com/quickstart/#ultralytics-settings.\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "import xml.etree.ElementTree as ET\n",
    "import os\n",
    "import numpy as np\n",
    "from sklearn.metrics import accuracy_score, precision_recall_fscore_support, roc_auc_score, confusion_matrix, ConfusionMatrixDisplay\n",
    "from tqdm.notebook import tqdm\n",
    "import random\n",
    "import math\n",
    "import zipfile\n",
    "import cv2\n",
    "from ultralytics import YOLO\n",
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "127e7b49",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-05T14:51:58.671088Z",
     "iopub.status.busy": "2025-05-05T14:51:58.670647Z",
     "iopub.status.idle": "2025-05-05T14:52:00.195960Z",
     "shell.execute_reply": "2025-05-05T14:52:00.194799Z"
    },
    "papermill": {
     "duration": 1.535823,
     "end_time": "2025-05-05T14:52:00.197618",
     "exception": false,
     "start_time": "2025-05-05T14:51:58.661795",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unzipped successfully.\n"
     ]
    }
   ],
   "source": [
    "zip_path = \"/kaggle/working/PIE/annotations/annotations.zip\"\n",
    "extract_to = \"/kaggle/working/PIE/annotations/\"\n",
    "\n",
    "if os.path.exists(extract_to + 'annotations'):\n",
    "    print(\"Exists already. Not unzipping.\")\n",
    "else:\n",
    "    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n",
    "        zip_ref.extractall(extract_to)\n",
    "    print(\"Unzipped successfully.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f0784768",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-05T14:52:00.215586Z",
     "iopub.status.busy": "2025-05-05T14:52:00.215333Z",
     "iopub.status.idle": "2025-05-05T14:52:00.958164Z",
     "shell.execute_reply": "2025-05-05T14:52:00.956875Z"
    },
    "papermill": {
     "duration": 0.753537,
     "end_time": "2025-05-05T14:52:00.960011",
     "exception": false,
     "start_time": "2025-05-05T14:52:00.206474",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unzipped successfully.\n"
     ]
    }
   ],
   "source": [
    "zip_path = \"/kaggle/working/PIE/annotations/annotations_vehicle.zip\"\n",
    "extract_to = \"/kaggle/working/PIE/annotations/\"\n",
    "\n",
    "if os.path.exists(extract_to + 'annotations_vehicle'):\n",
    "    print(\"Exists already. Not unzipping.\")\n",
    "else:\n",
    "    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n",
    "        zip_ref.extractall(extract_to)\n",
    "    print(\"Unzipped successfully.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "82054733",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-05T14:52:00.987537Z",
     "iopub.status.busy": "2025-05-05T14:52:00.987263Z",
     "iopub.status.idle": "2025-05-05T14:52:01.000641Z",
     "shell.execute_reply": "2025-05-05T14:52:00.999800Z"
    },
    "papermill": {
     "duration": 0.028277,
     "end_time": "2025-05-05T14:52:01.002031",
     "exception": false,
     "start_time": "2025-05-05T14:52:00.973754",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unzipped successfully.\n"
     ]
    }
   ],
   "source": [
    "zip_path = \"/kaggle/working/PIE/annotations/annotations_attributes.zip\"\n",
    "extract_to = \"/kaggle/working/PIE/annotations/\"\n",
    "\n",
    "if os.path.exists(extract_to + \"annotations_attributes\"):\n",
    "    print(\"Exists already. Not unzipping.\")\n",
    "else:\n",
    "    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n",
    "        zip_ref.extractall(extract_to)\n",
    "    print(\"Unzipped successfully.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ad2055af",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-05T14:52:01.019302Z",
     "iopub.status.busy": "2025-05-05T14:52:01.018958Z",
     "iopub.status.idle": "2025-05-05T14:52:01.031268Z",
     "shell.execute_reply": "2025-05-05T14:52:01.030454Z"
    },
    "papermill": {
     "duration": 0.02267,
     "end_time": "2025-05-05T14:52:01.032579",
     "exception": false,
     "start_time": "2025-05-05T14:52:01.009909",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # -----------------------------------------------------------------------------\n",
    "# # CELL 1: DATA PREPARATION & BALANCING  (run once before training)\n",
    "# # -----------------------------------------------------------------------------\n",
    "# #  This cell:\n",
    "# #    1. Loads (or regenerates) the PIE database\n",
    "# #    2. Computes per-signal standardisation scalers\n",
    "# #    3. Extracts ALL training sequences for every stream\n",
    "# #    4. Balances the dataset 50 / 50 on the crossing label\n",
    "# #    5. Writes two pickles:\n",
    "# #         - /kaggle/working/balanced_train_data.pkl\n",
    "# #         - /kaggle/working/scalers.pkl\n",
    "# # -----------------------------------------------------------------------------\n",
    "\n",
    "# import os\n",
    "# import sys\n",
    "# import time\n",
    "# import pickle\n",
    "# import gc\n",
    "# from pathlib import Path\n",
    "\n",
    "# import cv2                               # used internally by PIE utilities\n",
    "# import numpy as np\n",
    "# import torch\n",
    "# from torch.utils.data import Dataset\n",
    "# from tqdm.notebook import tqdm\n",
    "\n",
    "# # -----------------------------------------------------------------------------#\n",
    "# #                                PIE utilities                                 #\n",
    "# # -----------------------------------------------------------------------------#\n",
    "# pie_utilities_path = \"/kaggle/working/PIE/utilities\"\n",
    "# if pie_utilities_path not in sys.path:\n",
    "#     sys.path.insert(0, pie_utilities_path)\n",
    "\n",
    "# try:\n",
    "#     from pie_data import PIE\n",
    "# except ImportError as e:\n",
    "#     print(\n",
    "#         f\"[WARN] Could not import PIE from {pie_utilities_path}. \"\n",
    "#         f\"If the DB cache already exists this is fine.\\n→ {e}\"\n",
    "#     )\n",
    "#     PIE = None\n",
    "\n",
    "# # -----------------------------------------------------------------------------#\n",
    "# #                              configuration                                   #\n",
    "# # -----------------------------------------------------------------------------#\n",
    "# PIE_ROOT_PATH           = \"/kaggle/working/PIE\"\n",
    "# POSE_DATA_DIR           = \"/kaggle/input/pose-data/extracted_poses2\"\n",
    "# PIE_DATABASE_CACHE_PATH = \"/kaggle/input/pie-database/pie_database.pkl\"\n",
    "\n",
    "# TRAIN_SETS_STR = [\"set01\", \"set02\", \"set04\"]\n",
    "\n",
    "# BALANCED_DATA_PKL_PATH  = \"/kaggle/working/balanced_train_data.pkl\"\n",
    "# SCALERS_PKL_PATH        = \"/kaggle/working/scalers.pkl\"\n",
    "\n",
    "# # Streams used throughout the project ----------------------------------------\n",
    "# ALL_POSSIBLE_STREAMS = [\n",
    "#     \"bbox\",\n",
    "#     \"pose\",\n",
    "#     \"ego_speed\",\n",
    "#     \"ego_acc\",\n",
    "#     \"ego_gyro\",\n",
    "#     \"ped_action\",\n",
    "#     \"ped_look\",\n",
    "#     \"ped_occlusion\",\n",
    "#     \"traffic_light\",\n",
    "#     \"static_context\",\n",
    "# ]\n",
    "\n",
    "# # Feature sizes & categorical constants --------------------------------------\n",
    "# SEQ_LEN, PRED_LEN = 30, 1\n",
    "\n",
    "# INPUT_SIZE_BBOX       = 4\n",
    "# INPUT_SIZE_POSE       = 34\n",
    "# INPUT_SIZE_EGO_SPEED  = 1\n",
    "# INPUT_SIZE_EGO_ACC    = 2\n",
    "# INPUT_SIZE_EGO_GYRO   = 1\n",
    "# INPUT_SIZE_PED_ACTION = 1\n",
    "# INPUT_SIZE_PED_LOOK   = 1\n",
    "# INPUT_SIZE_PED_OCC    = 1\n",
    "# INPUT_SIZE_TL_STATE   = 4\n",
    "\n",
    "# NUM_SIGNALIZED_CATS   = 4\n",
    "# NUM_INTERSECTION_CATS = 5\n",
    "# NUM_AGE_CATS          = 4\n",
    "# NUM_GENDER_CATS       = 3\n",
    "# NUM_TRAFFIC_DIR_CATS  = 2\n",
    "\n",
    "# LANE_CATEGORIES = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 4, 7: 4, 8: 4}\n",
    "# NUM_LANE_CATS   = len(set(LANE_CATEGORIES.values()))\n",
    "\n",
    "# INPUT_SIZE_STATIC = (\n",
    "#     NUM_SIGNALIZED_CATS\n",
    "#     + NUM_INTERSECTION_CATS\n",
    "#     + NUM_AGE_CATS\n",
    "#     + NUM_GENDER_CATS\n",
    "#     + NUM_TRAFFIC_DIR_CATS\n",
    "#     + NUM_LANE_CATS\n",
    "# )  # → 23\n",
    "\n",
    "# TL_STATE_MAP = {\"__undefined__\": 0, \"red\": 1, \"yellow\": 2, \"green\": 3}\n",
    "# NUM_TL_STATES = len(TL_STATE_MAP)\n",
    "\n",
    "# # -----------------------------------------------------------------------------#\n",
    "# #                               helper utils                                   #\n",
    "# # -----------------------------------------------------------------------------#\n",
    "\n",
    "\n",
    "# def to_one_hot(index: int, num_classes: int) -> np.ndarray:\n",
    "#     vec = np.zeros(num_classes, dtype=np.float32)\n",
    "#     vec[int(np.clip(index, 0, num_classes - 1))] = 1.0\n",
    "#     return vec\n",
    "\n",
    "\n",
    "# def balance_samples_count(seq_data: dict, label_key: str, seed: int = 42) -> dict:\n",
    "#     \"\"\"Undersample majority class so positive and negative labels are equal.\"\"\"\n",
    "#     labels = [lbl[0] for lbl in seq_data[label_key]]\n",
    "#     n_pos  = int(np.sum(labels))\n",
    "#     n_neg  = len(labels) - n_pos\n",
    "\n",
    "#     if n_pos == n_neg:\n",
    "#         print(\"Dataset already balanced.\")\n",
    "#         return seq_data.copy()\n",
    "\n",
    "#     majority_label    = 0 if n_neg > n_pos else 1\n",
    "#     minority_count    = min(n_pos, n_neg)\n",
    "#     majority_indices  = np.where(np.array(labels) == majority_label)[0]\n",
    "#     minority_indices  = np.where(np.array(labels) != majority_label)[0]\n",
    "\n",
    "#     rng = np.random.default_rng(seed)\n",
    "#     keep_majority = rng.choice(majority_indices, size=minority_count, replace=False)\n",
    "#     final_indices = np.concatenate([minority_indices, keep_majority])\n",
    "#     rng.shuffle(final_indices)\n",
    "\n",
    "#     balanced = {}\n",
    "#     for k, v in seq_data.items():\n",
    "#         balanced[k] = [v[i] for i in final_indices]\n",
    "\n",
    "#     print(f\"Balanced: 1s={minority_count} | 0s={minority_count}\")\n",
    "#     return balanced\n",
    "\n",
    "\n",
    "# # -----------------------------------------------------------------------------#\n",
    "# #                                PIEDataset                                    #\n",
    "# # -----------------------------------------------------------------------------#\n",
    "# class PIEDataset(Dataset):\n",
    "#     \"\"\"\n",
    "#     Lightweight dataset that can generate any subset of the PIE feature streams.\n",
    "#     \"\"\"\n",
    "\n",
    "#     def __init__(\n",
    "#         self,\n",
    "#         pie_db: dict,\n",
    "#         set_names: list[str],\n",
    "#         pose_dir: str,\n",
    "#         seq_len: int,\n",
    "#         pred_len: int,\n",
    "#         scalers: dict,\n",
    "#         streams_to_generate: list[str],\n",
    "#     ):\n",
    "#         self.pie_db            = pie_db\n",
    "#         self.set_names         = set_names\n",
    "#         self.pose_dir          = pose_dir\n",
    "#         self.seq_len           = seq_len\n",
    "#         self.pred_len          = pred_len\n",
    "#         self.scalers           = scalers\n",
    "#         self.streams           = streams_to_generate\n",
    "#         self._input_sizes      = self._build_input_size_map()\n",
    "#         self.all_pose_data     = {}\n",
    "#         self.sequences         = []\n",
    "\n",
    "#         if \"pose\" in self.streams:\n",
    "#             self._load_pose_pkls()\n",
    "#         self._enumerate_sequences()\n",
    "\n",
    "#     # ------------------------ internal helpers -------------------------------\n",
    "#     def _build_input_size_map(self) -> dict:\n",
    "#         special = {\n",
    "#             \"TRAFFIC_LIGHT\": \"TL_STATE\",\n",
    "#             \"STATIC_CONTEXT\": \"STATIC\",\n",
    "#             \"EGO_SPEED\": \"EGO_SPEED\",\n",
    "#             \"EGO_ACC\": \"EGO_ACC\",\n",
    "#             \"EGO_GYRO\": \"EGO_GYRO\",\n",
    "#             \"PED_ACTION\": \"PED_ACTION\",\n",
    "#             \"PED_LOOK\": \"PED_LOOK\",\n",
    "#             \"PED_OCCLUSION\": \"PED_OCC\",\n",
    "#         }\n",
    "#         sizes = {}\n",
    "#         for s in ALL_POSSIBLE_STREAMS:\n",
    "#             const = f\"INPUT_SIZE_{special.get(s.upper(), s.upper())}\"\n",
    "#             if s == \"bbox\":\n",
    "#                 const = \"INPUT_SIZE_BBOX\"\n",
    "#             elif s == \"pose\":\n",
    "#                 const = \"INPUT_SIZE_POSE\"\n",
    "#             sizes[s] = globals().get(const, 1)\n",
    "#         return sizes\n",
    "\n",
    "#     def _load_pose_pkls(self):\n",
    "#         print(\"Loading pose PKLs …\")\n",
    "#         for set_id in self.set_names:\n",
    "#             set_dir = Path(self.pose_dir) / set_id\n",
    "#             if not set_dir.is_dir():\n",
    "#                 continue\n",
    "#             self.all_pose_data[set_id] = {}\n",
    "#             for pkl_path in tqdm(set_dir.glob(f\"{set_id}_*_poses.pkl\"), leave=False):\n",
    "#                 try:\n",
    "#                     with open(pkl_path, \"rb\") as fp:\n",
    "#                         loaded = pickle.load(fp)\n",
    "#                 except Exception as e:\n",
    "#                     print(f\"[pose load] {pkl_path}: {e}\")\n",
    "#                     continue\n",
    "\n",
    "#                 if len(loaded) != 1:\n",
    "#                     continue\n",
    "#                 (key, data), *_ = loaded.items()\n",
    "#                 vid = \"_\".join(key.split(\"_\")[1:])\n",
    "#                 if vid in self.pie_db.get(set_id, {}):\n",
    "#                     self.all_pose_data[set_id][vid] = data\n",
    "\n",
    "#     def _enumerate_sequences(self):\n",
    "#         print(\"Enumerating sequences …\")\n",
    "#         for set_id in self.set_names:\n",
    "#             for vid, vdb in self.pie_db.get(set_id, {}).items():\n",
    "#                 for pid, pdb in vdb.get(\"ped_annotations\", {}).items():\n",
    "#                     frames = pdb.get(\"frames\", [])\n",
    "#                     if len(frames) < self.seq_len + self.pred_len:\n",
    "#                         continue\n",
    "#                     frames = sorted(frames)\n",
    "#                     for i in range(len(frames) - self.seq_len - self.pred_len + 1):\n",
    "#                         start = frames[i]\n",
    "#                         obs_end = frames[i + self.seq_len - 1]\n",
    "#                         if obs_end - start != self.seq_len - 1:\n",
    "#                             continue\n",
    "#                         target = frames[i + self.seq_len + self.pred_len - 1]\n",
    "#                         if target - obs_end != self.pred_len:\n",
    "#                             continue\n",
    "#                         self.sequences.append((set_id, vid, pid, start))\n",
    "#         print(f\"Total sequences: {len(self.sequences)}\")\n",
    "\n",
    "#     # ------------------ Dataset API ------------------------------------------\n",
    "#     def __len__(self):\n",
    "#         return len(self.sequences)\n",
    "\n",
    "#     def __getitem__(self, idx: int):\n",
    "#         set_id, vid, pid, start = self.sequences[idx]\n",
    "#         vdb  = self.pie_db[set_id][vid]\n",
    "#         pdb  = vdb[\"ped_annotations\"][pid]\n",
    "#         ego  = vdb.get(\"vehicle_annotations\", {})\n",
    "#         tldb = vdb.get(\"traffic_annotations\", {})\n",
    "\n",
    "#         frame_nums = list(range(start, start + self.seq_len))\n",
    "#         target_f   = start + self.seq_len + self.pred_len - 1\n",
    "\n",
    "#         # label ---------------------------------------------------------------\n",
    "#         label = 0\n",
    "#         if (\n",
    "#             \"frames\" in pdb\n",
    "#             and \"behavior\" in pdb\n",
    "#             and \"cross\" in pdb[\"behavior\"]\n",
    "#             and target_f in pdb[\"frames\"]\n",
    "#         ):\n",
    "#             try:\n",
    "#                 j = pdb[\"frames\"].index(target_f)\n",
    "#                 label = pdb[\"behavior\"][\"cross\"][j]\n",
    "#                 if label == -1:\n",
    "#                     label = 0\n",
    "#             except (ValueError, IndexError):\n",
    "#                 pass\n",
    "\n",
    "#         # static context ------------------------------------------------------\n",
    "#         static_vec = np.zeros(INPUT_SIZE_STATIC, np.float32)\n",
    "#         if \"static_context\" in self.streams:\n",
    "#             attr  = pdb.get(\"attributes\", {})\n",
    "#             sig   = attr.get(\"signalized\", 0)\n",
    "#             intr  = attr.get(\"intersection\", 0)\n",
    "#             age   = attr.get(\"age\", 2)\n",
    "#             gen   = attr.get(\"gender\", 0)\n",
    "#             tdir  = int(attr.get(\"traffic_direction\", 0))\n",
    "#             ln    = attr.get(\"num_lanes\", 2)\n",
    "#             lncat = LANE_CATEGORIES.get(ln, LANE_CATEGORIES[max(LANE_CATEGORIES)])\n",
    "#             static_vec = np.concatenate(\n",
    "#                 [\n",
    "#                     to_one_hot(sig,  NUM_SIGNALIZED_CATS),\n",
    "#                     to_one_hot(intr, NUM_INTERSECTION_CATS),\n",
    "#                     to_one_hot(age,  NUM_AGE_CATS),\n",
    "#                     to_one_hot(gen,  NUM_GENDER_CATS),\n",
    "#                     to_one_hot(tdir, NUM_TRAFFIC_DIR_CATS),\n",
    "#                     to_one_hot(lncat, NUM_LANE_CATS),\n",
    "#                 ]\n",
    "#             ).astype(np.float32)\n",
    "\n",
    "#         # per-frame feature assembly -----------------------------------------\n",
    "#         feats = {s: [] for s in self.streams}\n",
    "\n",
    "#         for fn in frame_nums:\n",
    "#             fidx = -1\n",
    "#             if \"frames\" in pdb:\n",
    "#                 try:\n",
    "#                     fidx = pdb[\"frames\"].index(fn)\n",
    "#                 except ValueError:\n",
    "#                     pass\n",
    "\n",
    "#             ego_f = ego.get(fn, {})\n",
    "\n",
    "#             # bbox ----------------------------------------------------------\n",
    "#             if \"bbox\" in self.streams:\n",
    "#                 bb = np.zeros(INPUT_SIZE_BBOX, np.float32)\n",
    "#                 if (\n",
    "#                     fidx != -1\n",
    "#                     and \"bbox\" in pdb\n",
    "#                     and len(pdb[\"bbox\"]) > fidx\n",
    "#                 ):\n",
    "#                     try:\n",
    "#                         x1, y1, x2, y2 = pdb[\"bbox\"][fidx]\n",
    "#                         w_img = vdb.get(\"width\", 1920)\n",
    "#                         h_img = vdb.get(\"height\", 1080)\n",
    "#                         if w_img > 0 and h_img > 0:\n",
    "#                             cx = ((x1 + x2) / 2) / w_img\n",
    "#                             cy = ((y1 + y2) / 2) / h_img\n",
    "#                             w  = (x2 - x1) / w_img\n",
    "#                             h  = (y2 - y1) / h_img\n",
    "#                             if 0 < w and 0 < h and 0 <= cx <= 1 and 0 <= cy <= 1:\n",
    "#                                 bb = np.array([cx, cy, w, h], np.float32)\n",
    "#                     except Exception:\n",
    "#                         pass\n",
    "#                 feats[\"bbox\"].append(bb)\n",
    "\n",
    "#             # pose ----------------------------------------------------------\n",
    "#             if \"pose\" in self.streams:\n",
    "#                 pvec = np.zeros(INPUT_SIZE_POSE, np.float32)\n",
    "#                 pose_set = self.all_pose_data.get(set_id, {}).get(vid, {})\n",
    "#                 p_loaded = pose_set.get(fn, {}).get(pid)\n",
    "#                 if (\n",
    "#                     isinstance(p_loaded, np.ndarray)\n",
    "#                     and p_loaded.shape == (INPUT_SIZE_POSE,)\n",
    "#                 ):\n",
    "#                     pvec = p_loaded\n",
    "#                 feats[\"pose\"].append(pvec)\n",
    "\n",
    "#             # ego signals ---------------------------------------------------\n",
    "#             if \"ego_speed\" in self.streams:\n",
    "#                 s = ego_f.get(\"OBD_speed\", 0.0) or ego_f.get(\"GPS_speed\", 0.0)\n",
    "#                 s = (s - self.scalers.get(\"ego_speed_mean\", 0.0)) / self.scalers.get(\n",
    "#                     \"ego_speed_std\", 1.0\n",
    "#                 )\n",
    "#                 feats[\"ego_speed\"].append([s])\n",
    "\n",
    "#             if \"ego_acc\" in self.streams:\n",
    "#                 ax = ego_f.get(\"accX\", 0.0)\n",
    "#                 ay = ego_f.get(\"accY\", 0.0)\n",
    "#                 ax = (ax - self.scalers.get(\"accX_mean\", 0.0)) / self.scalers.get(\n",
    "#                     \"accX_std\", 1.0\n",
    "#                 )\n",
    "#                 ay = (ay - self.scalers.get(\"accY_mean\", 0.0)) / self.scalers.get(\n",
    "#                     \"accY_std\", 1.0\n",
    "#                 )\n",
    "#                 feats[\"ego_acc\"].append([ax, ay])\n",
    "\n",
    "#             if \"ego_gyro\" in self.streams:\n",
    "#                 gz = ego_f.get(\"gyroZ\", 0.0)\n",
    "#                 gz = (gz - self.scalers.get(\"gyroZ_mean\", 0.0)) / self.scalers.get(\n",
    "#                     \"gyroZ_std\", 1.0\n",
    "#                 )\n",
    "#                 feats[\"ego_gyro\"].append([gz])\n",
    "\n",
    "#             # pedestrian behaviour -----------------------------------------\n",
    "#             if \"ped_action\" in self.streams:\n",
    "#                 action = (\n",
    "#                     pdb[\"behavior\"][\"action\"][fidx]\n",
    "#                     if fidx != -1\n",
    "#                     and \"behavior\" in pdb\n",
    "#                     and \"action\" in pdb[\"behavior\"]\n",
    "#                     and len(pdb[\"behavior\"][\"action\"]) > fidx\n",
    "#                     else 0\n",
    "#                 )\n",
    "#                 feats[\"ped_action\"].append([float(action)])\n",
    "\n",
    "#             if \"ped_look\" in self.streams:\n",
    "#                 look = (\n",
    "#                     pdb[\"behavior\"][\"look\"][fidx]\n",
    "#                     if fidx != -1\n",
    "#                     and \"behavior\" in pdb\n",
    "#                     and \"look\" in pdb[\"behavior\"]\n",
    "#                     and len(pdb[\"behavior\"][\"look\"]) > fidx\n",
    "#                     else 0\n",
    "#                 )\n",
    "#                 feats[\"ped_look\"].append([float(look)])\n",
    "\n",
    "#             if \"ped_occlusion\" in self.streams:\n",
    "#                 occ = (\n",
    "#                     float(pdb[\"occlusion\"][fidx]) / 2.0\n",
    "#                     if fidx != -1\n",
    "#                     and \"occlusion\" in pdb\n",
    "#                     and len(pdb[\"occlusion\"]) > fidx\n",
    "#                     else 0.0\n",
    "#                 )\n",
    "#                 feats[\"ped_occlusion\"].append([occ])\n",
    "\n",
    "#             # traffic light -------------------------------------------------\n",
    "#             if \"traffic_light\" in self.streams:\n",
    "#                 tl_state = 0\n",
    "#                 for obj in tldb.values():\n",
    "#                     if obj.get(\"obj_class\") != \"traffic_light\":\n",
    "#                         continue\n",
    "#                     if \"frames\" not in obj or \"state\" not in obj:\n",
    "#                         continue\n",
    "#                     try:\n",
    "#                         j = obj[\"frames\"].index(fn)\n",
    "#                         if obj[\"state\"][j] != 0:\n",
    "#                             tl_state = obj[\"state\"][j]\n",
    "#                             break\n",
    "#                     except (ValueError, IndexError):\n",
    "#                         continue\n",
    "#                 feats[\"traffic_light\"].append(to_one_hot(tl_state, NUM_TL_STATES))\n",
    "\n",
    "#             # static context -----------------------------------------------\n",
    "#             if \"static_context\" in self.streams:\n",
    "#                 feats[\"static_context\"].append(static_vec)\n",
    "\n",
    "#         # numpy → torch ------------------------------------------------------\n",
    "#         out = {\n",
    "#             s: torch.tensor(np.asarray(feats[s], np.float32), dtype=torch.float32)\n",
    "#             for s in self.streams\n",
    "#         }\n",
    "#         return out, torch.tensor(label, dtype=torch.long)\n",
    "\n",
    "\n",
    "# # =============================================================================\n",
    "# #                       MAIN: build balanced training set\n",
    "# # =============================================================================\n",
    "# if __name__ == \"__main__\":\n",
    "#     print(\"\\n--- DATA PREPARATION ---\")\n",
    "\n",
    "#     # 1) load / regenerate PIE DB -------------------------------------------\n",
    "#     cache = Path(PIE_DATABASE_CACHE_PATH)\n",
    "#     if cache.is_file():\n",
    "#         print(\"Loading PIE database cache …\")\n",
    "#         with cache.open(\"rb\") as fp:\n",
    "#             pie_db = pickle.load(fp)\n",
    "#         print(\"✓ PIE DB loaded.\")\n",
    "#     else:\n",
    "#         if PIE is None:\n",
    "#             raise RuntimeError(\"PIE class unavailable: cannot rebuild database.\")\n",
    "#         print(\"Cache not found – regenerating PIE DB …\")\n",
    "#         pie_db = PIE(data_path=PIE_ROOT_PATH, regen_database=True).generate_database()\n",
    "#         if not pie_db:\n",
    "#             raise RuntimeError(\"PIE DB generation failed.\")\n",
    "#         print(\"✓ PIE DB generated.\")\n",
    "\n",
    "#     # 2) compute scalers -----------------------------------------------------\n",
    "#     print(\"\\nComputing scalers …\")\n",
    "#     spd, accx, accy, gyz = [], [], [], []\n",
    "#     for sid in TRAIN_SETS_STR:\n",
    "#         for vid, vdb in pie_db.get(sid, {}).items():\n",
    "#             for frame, e in vdb.get(\"vehicle_annotations\", {}).items():\n",
    "#                 s  = e.get(\"OBD_speed\", 0.0) or e.get(\"GPS_speed\", 0.0)\n",
    "#                 spd.append(s)\n",
    "#                 accx.append(e.get(\"accX\", 0.0))\n",
    "#                 accy.append(e.get(\"accY\", 0.0))\n",
    "#                 gyz.append(e.get(\"gyroZ\", 0.0))\n",
    "\n",
    "#     scalers = {}\n",
    "#     if spd:\n",
    "#         scalers[\"ego_speed_mean\"] = float(np.mean(spd))\n",
    "#         scalers[\"ego_speed_std\"]  = float(max(np.std(spd), 1e-6))\n",
    "#     if accx:\n",
    "#         scalers[\"accX_mean\"] = float(np.mean(accx))\n",
    "#         scalers[\"accX_std\"]  = float(max(np.std(accx), 1e-6))\n",
    "#         scalers[\"accY_mean\"] = float(np.mean(accy))\n",
    "#         scalers[\"accY_std\"]  = float(max(np.std(accy), 1e-6))\n",
    "#     if gyz:\n",
    "#         scalers[\"gyroZ_mean\"] = float(np.mean(gyz))\n",
    "#         scalers[\"gyroZ_std\"]  = float(max(np.std(gyz), 1e-6))\n",
    "\n",
    "#     print(\"Scalers:\", scalers)\n",
    "\n",
    "#     # 3) extract full training dataset --------------------------------------\n",
    "#     print(\"\\nExtracting training sequences (all streams) …\")\n",
    "#     full_ds = PIEDataset(\n",
    "#         pie_db,\n",
    "#         TRAIN_SETS_STR,\n",
    "#         POSE_DATA_DIR,\n",
    "#         SEQ_LEN,\n",
    "#         PRED_LEN,\n",
    "#         scalers,\n",
    "#         ALL_POSSIBLE_STREAMS,\n",
    "#     )\n",
    "\n",
    "#     train_dict = {s: [] for s in ALL_POSSIBLE_STREAMS}\n",
    "#     train_dict[\"label\"] = []\n",
    "\n",
    "#     for i in tqdm(range(len(full_ds)), desc=\"seq\"):\n",
    "#         feat, lbl = full_ds[i]\n",
    "#         for s in ALL_POSSIBLE_STREAMS:\n",
    "#             train_dict[s].append(feat[s].numpy())\n",
    "#         train_dict[\"label\"].append([lbl.item()])\n",
    "\n",
    "#     print(f\"Raw training samples: {len(train_dict['label'])}\")\n",
    "\n",
    "#     # 4) balance -------------------------------------------------------------\n",
    "#     balanced = balance_samples_count(train_dict, \"label\")\n",
    "#     del train_dict, full_ds\n",
    "#     gc.collect()\n",
    "\n",
    "#     # 5) write pickles -------------------------------------------------------\n",
    "#     print(\"\\nSaving balanced data …\")\n",
    "#     with open(BALANCED_DATA_PKL_PATH, \"wb\") as fp:\n",
    "#         pickle.dump(balanced, fp, pickle.HIGHEST_PROTOCOL)\n",
    "#     print(f\"✓ {BALANCED_DATA_PKL_PATH}\")\n",
    "\n",
    "#     print(\"Saving scalers …\")\n",
    "#     with open(SCALERS_PKL_PATH, \"wb\") as fp:\n",
    "#         pickle.dump(scalers, fp, pickle.HIGHEST_PROTOCOL)\n",
    "#     print(f\"✓ {SCALERS_PKL_PATH}\")\n",
    "\n",
    "#     del pie_db\n",
    "#     gc.collect()\n",
    "\n",
    "#     print(\"\\n--- DATA PREPARATION COMPLETE ---\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ebfe06e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-05T14:52:01.050139Z",
     "iopub.status.busy": "2025-05-05T14:52:01.049797Z",
     "iopub.status.idle": "2025-05-05T14:52:01.069023Z",
     "shell.execute_reply": "2025-05-05T14:52:01.068192Z"
    },
    "papermill": {
     "duration": 0.029941,
     "end_time": "2025-05-05T14:52:01.070299",
     "exception": false,
     "start_time": "2025-05-05T14:52:01.040358",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # --- CELL 2: ABLATION STUDY – MODEL TRAINING AND EVALUATION (with Weighted Average Fusion) ---\n",
    "\n",
    "# import os\n",
    "# import sys\n",
    "# import gc\n",
    "# import time\n",
    "# import math\n",
    "# import random\n",
    "# import pickle\n",
    "# import torch\n",
    "# import numpy as np\n",
    "# import pandas as pd                      # results-summary table\n",
    "# import torch.nn as nn\n",
    "# import torch.optim as optim\n",
    "# import matplotlib.pyplot as plt\n",
    "# import seaborn as sns\n",
    "# from tqdm.notebook import tqdm\n",
    "# from torch.utils.data import Dataset, DataLoader\n",
    "# from sklearn.metrics import (\n",
    "#     accuracy_score,\n",
    "#     precision_recall_fscore_support,\n",
    "#     roc_auc_score,\n",
    "#     confusion_matrix,\n",
    "#     ConfusionMatrixDisplay,\n",
    "# )\n",
    "\n",
    "# # --- Add PIE utilities path if necessary (adjust path) ------------------------\n",
    "# pie_utilities_path = \"/kaggle/working/PIE/utilities\"\n",
    "# if pie_utilities_path not in sys.path:\n",
    "#     sys.path.insert(0, pie_utilities_path)\n",
    "\n",
    "# try:\n",
    "#     from pie_data import PIE\n",
    "# except ImportError as e:\n",
    "#     print(f\"Warn: Could not import PIE class: {e}\")\n",
    "#     PIE = None\n",
    "\n",
    "# # --- Configuration ------------------------------------------------------------\n",
    "# PIE_ROOT_PATH = \"/kaggle/working/PIE\"\n",
    "# POSE_DATA_DIR = \"/kaggle/input/pose-data/extracted_poses2\"\n",
    "# PIE_DATABASE_CACHE_PATH = \"/kaggle/input/pie-database/pie_database.pkl\"\n",
    "\n",
    "# # --- Define ALL possible streams (used by Dataset class) ----------------------\n",
    "# ALL_POSSIBLE_STREAMS = [\n",
    "#     \"bbox\",\n",
    "#     \"pose\",\n",
    "#     \"ego_speed\",\n",
    "#     \"ego_acc\",\n",
    "#     \"ego_gyro\",\n",
    "#     \"ped_action\",\n",
    "#     \"ped_look\",\n",
    "#     \"ped_occlusion\",\n",
    "#     \"traffic_light\",\n",
    "#     \"static_context\",\n",
    "# ]\n",
    "\n",
    "# # --- *** CHOOSE ACTIVE STREAMS FOR THIS EXPERIMENT *** ------------------------\n",
    "# ACTIVE_STREAMS = [\n",
    "#     \"bbox\",\n",
    "#     \"pose\",\n",
    "#     \"ego_speed\",\n",
    "#     \"ego_acc\",\n",
    "#     \"ego_gyro\",\n",
    "#     \"ped_action\",\n",
    "#     \"ped_look\",\n",
    "#     \"ped_occlusion\",\n",
    "#     \"traffic_light\",\n",
    "#     \"static_context\",\n",
    "# ]\n",
    "# # ------------------------------------------------------------------------------\n",
    "\n",
    "# print(f\"--- Running Weighted Average Fusion With Active Streams: {ACTIVE_STREAMS} ---\")\n",
    "\n",
    "# # --- Model Hyper-parameters ---------------------------------------------------\n",
    "# SEQ_LEN, PRED_LEN = 30, 1\n",
    "# INPUT_SIZE_BBOX = 4\n",
    "# INPUT_SIZE_POSE = 34\n",
    "# INPUT_SIZE_EGO_SPEED = 1\n",
    "# INPUT_SIZE_EGO_ACC = 2\n",
    "# INPUT_SIZE_EGO_GYRO = 1\n",
    "# INPUT_SIZE_PED_ACTION = 1\n",
    "# INPUT_SIZE_PED_LOOK = 1\n",
    "# INPUT_SIZE_PED_OCC = 1\n",
    "# INPUT_SIZE_TL_STATE = 4\n",
    "# NUM_SIGNALIZED_CATS = 4\n",
    "# NUM_INTERSECTION_CATS = 5\n",
    "# NUM_AGE_CATS = 4\n",
    "# NUM_GENDER_CATS = 3\n",
    "# NUM_TRAFFIC_DIR_CATS = 2\n",
    "# LANE_CATEGORIES = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 4, 7: 4, 8: 4}\n",
    "# NUM_LANE_CATS = len(set(LANE_CATEGORIES.values()))\n",
    "# INPUT_SIZE_STATIC = (\n",
    "#     NUM_SIGNALIZED_CATS\n",
    "#     + NUM_INTERSECTION_CATS\n",
    "#     + NUM_AGE_CATS\n",
    "#     + NUM_GENDER_CATS\n",
    "#     + NUM_TRAFFIC_DIR_CATS\n",
    "#     + NUM_LANE_CATS\n",
    "# )\n",
    "\n",
    "# LSTM_HIDDEN_SIZE = 256\n",
    "# NUM_LSTM_LAYERS = 2\n",
    "# DROPOUT_RATE = 0.3\n",
    "# NUM_CLASSES = 2\n",
    "# ATTENTION_DIM = 128\n",
    "\n",
    "# # --- Training Hyper-parameters ------------------------------------------------\n",
    "# LEARNING_RATE = 1e-4\n",
    "# BATCH_SIZE = 32\n",
    "# NUM_EPOCHS = 30  \n",
    "# DEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# print(f\"Using device: {DEVICE}\")\n",
    "\n",
    "# # --- Dataset splits -----------------------------------------------------------\n",
    "# VAL_SETS_STR = [\"set05\", \"set06\"]\n",
    "\n",
    "# # --- Paths for pre-processed data --------------------------------------------\n",
    "# BALANCED_DATA_PKL_PATH = \"/kaggle/working/balanced_train_data.pkl\"\n",
    "# SCALERS_PKL_PATH = \"/kaggle/working/scalers.pkl\"\n",
    "\n",
    "# # -----------------------------------------------------------------------------#\n",
    "# #                               Helper classes                                #\n",
    "# # -----------------------------------------------------------------------------\n",
    "\n",
    "\n",
    "# def to_one_hot(index, num_classes):\n",
    "#     vec = np.zeros(num_classes, dtype=np.float32)\n",
    "#     safe_index = int(np.clip(index, 0, num_classes - 1))\n",
    "#     vec[safe_index] = 1.0\n",
    "#     return vec\n",
    "\n",
    "\n",
    "# class PIEDataset(Dataset):\n",
    "#     \"\"\"\n",
    "#     Dataset that can dynamically enable/disable streams.\n",
    "#     \"\"\"\n",
    "\n",
    "#     def __init__(\n",
    "#         self,\n",
    "#         pie_database,\n",
    "#         set_names,\n",
    "#         pose_data_dir,\n",
    "#         seq_len,\n",
    "#         pred_len,\n",
    "#         scalers=None,\n",
    "#         active_streams=None,\n",
    "#     ):\n",
    "#         self.pie_db = pie_database\n",
    "#         self.set_names = set_names\n",
    "#         self.pose_data_dir = pose_data_dir\n",
    "#         self.seq_len = seq_len\n",
    "#         self.pred_len = pred_len\n",
    "#         self.scalers = scalers or {}\n",
    "#         self.active_streams = active_streams or ALL_POSSIBLE_STREAMS\n",
    "#         self.sequences = []\n",
    "#         self.all_pose_data = {}\n",
    "\n",
    "#         self._input_sizes_for_error = self._get_input_sizes_dict()\n",
    "\n",
    "#         if \"pose\" in self.active_streams:\n",
    "#             self._load_pose_data()\n",
    "\n",
    "#         self._generate_sequence_list()\n",
    "#         if not self.sequences:\n",
    "#             raise ValueError(f\"Dataset init failed: No sequences for {self.set_names}\")\n",
    "\n",
    "#     # --------------------------------------------------------------------- #\n",
    "#     #                        internal helper methods                        #\n",
    "#     # --------------------------------------------------------------------- #\n",
    "\n",
    "#     def _get_input_sizes_dict(self):\n",
    "#         \"\"\"\n",
    "#         Build a dict {stream_name: feature_size}.\n",
    "#         \"\"\"\n",
    "#         input_sizes = {}\n",
    "#         special_cases = {\n",
    "#             \"TRAFFIC_LIGHT\": \"TL_STATE\",\n",
    "#             \"STATIC_CONTEXT\": \"STATIC\",\n",
    "#             \"EGO_SPEED\": \"EGO_SPEED\",\n",
    "#             \"EGO_ACC\": \"EGO_ACC\",\n",
    "#             \"EGO_GYRO\": \"EGO_GYRO\",\n",
    "#             \"PED_ACTION\": \"PED_ACTION\",\n",
    "#             \"PED_LOOK\": \"PED_LOOK\",\n",
    "#             \"PED_OCCLUSION\": \"PED_OCC\",\n",
    "#         }\n",
    "\n",
    "#         for stream in ALL_POSSIBLE_STREAMS:\n",
    "#             size_constant_name = f\"INPUT_SIZE_{stream.upper()}\"\n",
    "#             stream_upper_key = stream.upper()\n",
    "#             suffix = special_cases.get(stream_upper_key)\n",
    "\n",
    "#             if suffix:\n",
    "#                 size_constant_name = f\"INPUT_SIZE_{suffix}\"\n",
    "#             elif stream == \"bbox\":\n",
    "#                 size_constant_name = \"INPUT_SIZE_BBOX\"\n",
    "#             elif stream == \"pose\":\n",
    "#                 size_constant_name = \"INPUT_SIZE_POSE\"\n",
    "\n",
    "#             input_sizes[stream] = globals().get(size_constant_name, 1)\n",
    "\n",
    "#         return input_sizes\n",
    "\n",
    "#     def _load_pose_data(self):\n",
    "#         \"\"\"\n",
    "#         Load pose dictionaries once per dataset instance.\n",
    "#         \"\"\"\n",
    "#         sets_loaded_count = 0\n",
    "#         for set_id in self.set_names:\n",
    "#             self.all_pose_data[set_id] = {}\n",
    "#             pose_set_path = os.path.join(self.pose_data_dir, set_id)\n",
    "#             if not os.path.isdir(pose_set_path):\n",
    "#                 continue\n",
    "\n",
    "#             pkl_files_in_set = [\n",
    "#                 f\n",
    "#                 for f in os.listdir(pose_set_path)\n",
    "#                 if f.startswith(f\"{set_id}_\") and f.endswith(\"_poses.pkl\")\n",
    "#             ]\n",
    "#             if not pkl_files_in_set:\n",
    "#                 continue\n",
    "\n",
    "#             loaded_video_count = 0\n",
    "#             for pkl_filename in pkl_files_in_set:\n",
    "#                 pkl_file_path = os.path.join(pose_set_path, pkl_filename)\n",
    "#                 try:\n",
    "#                     with open(pkl_file_path, \"rb\") as f:\n",
    "#                         loaded_pkl_content = pickle.load(f)\n",
    "#                 except FileNotFoundError:\n",
    "#                     continue\n",
    "#                 except Exception as e:\n",
    "#                     print(f\"Error loading pose PKL {pkl_file_path}: {e}\")\n",
    "#                     continue\n",
    "\n",
    "#                 # Every pose-PKL contains a single key (video), by convention\n",
    "#                 if len(loaded_pkl_content) != 1:\n",
    "#                     continue\n",
    "\n",
    "#                 unique_video_key, video_data = list(loaded_pkl_content.items())[0]\n",
    "#                 video_id = \"_\".join(unique_video_key.split(\"_\")[1:])\n",
    "#                 if video_id in self.pie_db.get(set_id, {}):\n",
    "#                     self.all_pose_data[set_id][video_id] = video_data\n",
    "#                     loaded_video_count += 1\n",
    "\n",
    "#             if loaded_video_count > 0:\n",
    "#                 sets_loaded_count += 1\n",
    "\n",
    "#     def _generate_sequence_list(self):\n",
    "#         \"\"\"\n",
    "#         Enumerate every sliding window that satisfies length + prediction horizon.\n",
    "#         \"\"\"\n",
    "#         sequence_count = 0\n",
    "#         for set_id in self.set_names:\n",
    "#             if set_id not in self.pie_db:\n",
    "#                 continue\n",
    "#             for video_id, video_data in self.pie_db[set_id].items():\n",
    "#                 if \"ped_annotations\" not in video_data:\n",
    "#                     continue\n",
    "#                 for ped_id, ped_data in video_data[\"ped_annotations\"].items():\n",
    "#                     frames = ped_data.get(\"frames\", [])\n",
    "#                     if len(frames) < self.seq_len + self.pred_len:\n",
    "#                         continue\n",
    "\n",
    "#                     frames_sorted = sorted(frames)\n",
    "#                     for i in range(len(frames_sorted) - self.seq_len - self.pred_len + 1):\n",
    "#                         start_f = frames_sorted[i]\n",
    "#                         obs_end_f = frames_sorted[i + self.seq_len - 1]\n",
    "\n",
    "#                         # consecutiveness check\n",
    "#                         if obs_end_f - start_f != self.seq_len - 1:\n",
    "#                             continue\n",
    "\n",
    "#                         target_idx = i + self.seq_len + self.pred_len - 1\n",
    "#                         if target_idx >= len(frames_sorted):\n",
    "#                             continue\n",
    "\n",
    "#                         target_f = frames_sorted[target_idx]\n",
    "#                         if target_f - obs_end_f != self.pred_len:\n",
    "#                             continue\n",
    "\n",
    "#                         self.sequences.append((set_id, video_id, ped_id, start_f))\n",
    "#                         sequence_count += 1\n",
    "\n",
    "#         print(f\"Dataset initialized with {sequence_count} sequences for sets {self.set_names}.\")\n",
    "\n",
    "#     # --------------------------------------------------------------------- #\n",
    "#     #                              overrides                                #\n",
    "#     # --------------------------------------------------------------------- #\n",
    "\n",
    "#     def __len__(self):\n",
    "#         return len(self.sequences)\n",
    "\n",
    "#     def __getitem__(self, idx):\n",
    "#         \"\"\"\n",
    "#         Returns:\n",
    "#             features_dict   {stream_name: Tensor(seq_len, feat_dim)}\n",
    "#             label_tensor    Tensor([])\n",
    "#         \"\"\"\n",
    "#         set_id, video_id, ped_id, start_frame = self.sequences[idx]\n",
    "#         frame_nums = list(range(start_frame, start_frame + self.seq_len))\n",
    "#         target_frame_num = start_frame + self.seq_len + self.pred_len - 1\n",
    "\n",
    "#         # convenient aliases\n",
    "#         video_db = self.pie_db.get(set_id, {}).get(video_id, {})\n",
    "#         ped_db = video_db.get(\"ped_annotations\", {}).get(ped_id, {})\n",
    "#         ego_db = video_db.get(\"vehicle_annotations\", {})\n",
    "#         traffic_db = video_db.get(\"traffic_annotations\", {})\n",
    "#         ped_attributes = ped_db.get(\"attributes\", {})\n",
    "\n",
    "#         feature_sequences = {s: [] for s in self.active_streams}\n",
    "#         label = 0\n",
    "\n",
    "#         if (\n",
    "#             \"frames\" in ped_db\n",
    "#             and \"behavior\" in ped_db\n",
    "#             and \"cross\" in ped_db[\"behavior\"]\n",
    "#         ):\n",
    "#             try:\n",
    "#                 target_idx = ped_db[\"frames\"].index(target_frame_num)\n",
    "#                 label = ped_db[\"behavior\"][\"cross\"][target_idx]\n",
    "#                 if label == -1:\n",
    "#                     label = 0\n",
    "#             except (ValueError, IndexError):\n",
    "#                 pass\n",
    "\n",
    "#         # --- static context ------------------------------------------------\n",
    "#         static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "#         if \"static_context\" in self.active_streams:\n",
    "#             sig_idx = ped_attributes.get(\"signalized\", 0)\n",
    "#             int_idx = ped_attributes.get(\"intersection\", 0)\n",
    "#             age_idx = ped_attributes.get(\"age\", 2)\n",
    "#             gen_idx = ped_attributes.get(\"gender\", 0)\n",
    "#             td_idx = int(ped_attributes.get(\"traffic_direction\", 0))\n",
    "#             nl_val = ped_attributes.get(\"num_lanes\", 2)\n",
    "#             nl_cat_idx = LANE_CATEGORIES.get(\n",
    "#                 nl_val, LANE_CATEGORIES[max(LANE_CATEGORIES.keys())]\n",
    "#             )\n",
    "\n",
    "#             static_vec = np.concatenate(\n",
    "#                 [\n",
    "#                     to_one_hot(sig_idx, NUM_SIGNALIZED_CATS),\n",
    "#                     to_one_hot(int_idx, NUM_INTERSECTION_CATS),\n",
    "#                     to_one_hot(age_idx, NUM_AGE_CATS),\n",
    "#                     to_one_hot(gen_idx, NUM_GENDER_CATS),\n",
    "#                     to_one_hot(td_idx, NUM_TRAFFIC_DIR_CATS),\n",
    "#                     to_one_hot(nl_cat_idx, NUM_LANE_CATS),\n",
    "#                 ]\n",
    "#             )\n",
    "\n",
    "#             if static_vec.shape[0] != INPUT_SIZE_STATIC:\n",
    "#                 static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "\n",
    "#         # -------------------------------------------------------------------\n",
    "#         #                    per-frame feature extraction                    #\n",
    "#         # -------------------------------------------------------------------\n",
    "#         for frame_num in frame_nums:\n",
    "#             frame_db_idx = -1\n",
    "#             if \"frames\" in ped_db:\n",
    "#                 try:\n",
    "#                     frame_db_idx = ped_db[\"frames\"].index(frame_num)\n",
    "#                 except ValueError:\n",
    "#                     pass\n",
    "\n",
    "#             ego_frame_data = ego_db.get(frame_num, {})\n",
    "\n",
    "#             # ---------- bbox ------------------------------------------------\n",
    "#             if \"bbox\" in self.active_streams:\n",
    "#                 bbox_norm = np.zeros(INPUT_SIZE_BBOX, dtype=np.float32)\n",
    "#                 if (\n",
    "#                     frame_db_idx != -1\n",
    "#                     and \"bbox\" in ped_db\n",
    "#                     and len(ped_db[\"bbox\"]) > frame_db_idx\n",
    "#                 ):\n",
    "#                     try:\n",
    "#                         x1, y1, x2, y2 = ped_db[\"bbox\"][frame_db_idx]\n",
    "#                         img_w = video_db.get(\"width\", 1920)\n",
    "#                         img_h = video_db.get(\"height\", 1080)\n",
    "#                         if img_w > 0 and img_h > 0:\n",
    "#                             cx = ((x1 + x2) / 2) / img_w\n",
    "#                             cy = ((y1 + y2) / 2) / img_h\n",
    "#                             w = (x2 - x1) / img_w\n",
    "#                             h = (y2 - y1) / img_h\n",
    "#                             if 0 < w and 0 < h and 0 <= cx <= 1 and 0 <= cy <= 1:\n",
    "#                                 bbox_norm = np.array([cx, cy, w, h], dtype=np.float32)\n",
    "#                     except Exception:\n",
    "#                         pass\n",
    "\n",
    "#                 feature_sequences[\"bbox\"].append(bbox_norm)\n",
    "\n",
    "#             # ---------- pose -----------------------------------------------\n",
    "#             if \"pose\" in self.active_streams:\n",
    "#                 pose_vector = np.zeros(INPUT_SIZE_POSE, dtype=np.float32)\n",
    "#                 vid_pose = self.all_pose_data.get(set_id, {}).get(video_id, {})\n",
    "#                 frame_pose = vid_pose.get(frame_num, {})\n",
    "#                 loaded_pose = frame_pose.get(ped_id)\n",
    "\n",
    "#                 if (\n",
    "#                     loaded_pose is not None\n",
    "#                     and isinstance(loaded_pose, np.ndarray)\n",
    "#                     and loaded_pose.shape == (INPUT_SIZE_POSE,)\n",
    "#                 ):\n",
    "#                     pose_vector = loaded_pose\n",
    "\n",
    "#                 feature_sequences[\"pose\"].append(pose_vector)\n",
    "\n",
    "#             # ---------- ego-speed ------------------------------------------\n",
    "#             if \"ego_speed\" in self.active_streams:\n",
    "#                 speed = ego_frame_data.get(\"OBD_speed\", 0.0)\n",
    "#                 if speed == 0.0:\n",
    "#                     speed = ego_frame_data.get(\"GPS_speed\", 0.0)\n",
    "\n",
    "#                 speed_scaled = (\n",
    "#                     speed - self.scalers.get(\"ego_speed_mean\", 0.0)\n",
    "#                 ) / self.scalers.get(\"ego_speed_std\", 1.0)\n",
    "#                 feature_sequences[\"ego_speed\"].append([speed_scaled])\n",
    "\n",
    "#             # ---------- ego-acc --------------------------------------------\n",
    "#             if \"ego_acc\" in self.active_streams:\n",
    "#                 acc_x = ego_frame_data.get(\"accX\", 0.0)\n",
    "#                 acc_y = ego_frame_data.get(\"accY\", 0.0)\n",
    "#                 acc_x_scaled = (\n",
    "#                     acc_x - self.scalers.get(\"accX_mean\", 0.0)\n",
    "#                 ) / self.scalers.get(\"accX_std\", 1.0)\n",
    "#                 acc_y_scaled = (\n",
    "#                     acc_y - self.scalers.get(\"accY_mean\", 0.0)\n",
    "#                 ) / self.scalers.get(\"accY_std\", 1.0)\n",
    "#                 feature_sequences[\"ego_acc\"].append([acc_x_scaled, acc_y_scaled])\n",
    "\n",
    "#             # ---------- ego-gyro -------------------------------------------\n",
    "#             if \"ego_gyro\" in self.active_streams:\n",
    "#                 gyro_z = ego_frame_data.get(\"gyroZ\", 0.0)\n",
    "#                 gyro_z_scaled = (\n",
    "#                     gyro_z - self.scalers.get(\"gyroZ_mean\", 0.0)\n",
    "#                 ) / self.scalers.get(\"gyroZ_std\", 1.0)\n",
    "#                 feature_sequences[\"ego_gyro\"].append([gyro_z_scaled])\n",
    "\n",
    "#             # ---------- ped_action -----------------------------------------\n",
    "#             if \"ped_action\" in self.active_streams:\n",
    "#                 action = 0\n",
    "#                 if (\n",
    "#                     frame_db_idx != -1\n",
    "#                     and \"behavior\" in ped_db\n",
    "#                     and \"action\" in ped_db[\"behavior\"]\n",
    "#                     and len(ped_db[\"behavior\"][\"action\"]) > frame_db_idx\n",
    "#                 ):\n",
    "#                     action = ped_db[\"behavior\"][\"action\"][frame_db_idx]\n",
    "#                 feature_sequences[\"ped_action\"].append([float(action)])\n",
    "\n",
    "#             # ---------- ped_look -------------------------------------------\n",
    "#             if \"ped_look\" in self.active_streams:\n",
    "#                 look = 0\n",
    "#                 if (\n",
    "#                     frame_db_idx != -1\n",
    "#                     and \"behavior\" in ped_db\n",
    "#                     and \"look\" in ped_db[\"behavior\"]\n",
    "#                     and len(ped_db[\"behavior\"][\"look\"]) > frame_db_idx\n",
    "#                 ):\n",
    "#                     look = ped_db[\"behavior\"][\"look\"][frame_db_idx]\n",
    "#                 feature_sequences[\"ped_look\"].append([float(look)])\n",
    "\n",
    "#             # ---------- ped_occlusion --------------------------------------\n",
    "#             if \"ped_occlusion\" in self.active_streams:\n",
    "#                 occ = 0.0\n",
    "#                 if (\n",
    "#                     frame_db_idx != -1\n",
    "#                     and \"occlusion\" in ped_db\n",
    "#                     and len(ped_db[\"occlusion\"]) > frame_db_idx\n",
    "#                 ):\n",
    "#                     occ_val = ped_db[\"occlusion\"][frame_db_idx]\n",
    "#                     occ = float(occ_val) / 2.0\n",
    "#                 feature_sequences[\"ped_occlusion\"].append([occ])\n",
    "\n",
    "#             # ---------- traffic_light --------------------------------------\n",
    "#             if \"traffic_light\" in self.active_streams:\n",
    "#                 state_int = 0\n",
    "#                 for obj_id, obj_data in traffic_db.items():\n",
    "#                     if (\n",
    "#                         obj_data.get(\"obj_class\") == \"traffic_light\"\n",
    "#                         and \"frames\" in obj_data\n",
    "#                         and \"state\" in obj_data\n",
    "#                     ):\n",
    "#                         try:\n",
    "#                             tl_idx = obj_data[\"frames\"].index(frame_num)\n",
    "#                             state_val = obj_data[\"state\"][tl_idx]\n",
    "#                             if state_val != 0:\n",
    "#                                 state_int = state_val\n",
    "#                                 break\n",
    "#                         except (ValueError, IndexError):\n",
    "#                             continue\n",
    "#                 feature_sequences[\"traffic_light\"].append(\n",
    "#                     to_one_hot(state_int, INPUT_SIZE_TL_STATE)\n",
    "#                 )\n",
    "\n",
    "#             # ---------- static_context (per-frame replicate) ---------------\n",
    "#             if \"static_context\" in self.active_streams:\n",
    "#                 feature_sequences[\"static_context\"].append(static_vec)\n",
    "\n",
    "#         # -------------------------------------------------------------------\n",
    "#         # convert to tensors / safe fallback\n",
    "#         # -------------------------------------------------------------------\n",
    "#         features = {}\n",
    "#         try:\n",
    "#             for name in self.active_streams:\n",
    "#                 features[name] = torch.tensor(\n",
    "#                     np.asarray(feature_sequences[name], dtype=np.float32),\n",
    "#                     dtype=torch.float32,\n",
    "#                 )\n",
    "#         except Exception as e:\n",
    "#             print(f\"Error converting features idx {idx}: {e}. Returning zeros.\")\n",
    "#             features = {\n",
    "#                 name: torch.zeros(\n",
    "#                     (self.seq_len, self._input_sizes_for_error.get(name, 1)),\n",
    "#                     dtype=torch.float32,\n",
    "#                 )\n",
    "#                 for name in self.active_streams\n",
    "#             }\n",
    "\n",
    "#         return features, torch.tensor(label, dtype=torch.long)\n",
    "\n",
    "\n",
    "# class BalancedDataset(Dataset):\n",
    "#     \"\"\"\n",
    "#     Memory-based balanced dataset generated by the prep notebook cell.\n",
    "#     \"\"\"\n",
    "\n",
    "#     def __init__(self, data_dict, active_streams, label_key=\"label\"):\n",
    "#         self.active_streams = active_streams\n",
    "#         self.label_key = label_key\n",
    "\n",
    "#         if self.label_key not in data_dict or not data_dict[self.label_key]:\n",
    "#             raise ValueError(f\"Label key '{self.label_key}' missing/empty.\")\n",
    "\n",
    "#         self.num_samples = len(data_dict[self.label_key])\n",
    "#         if self.num_samples == 0:\n",
    "#             print(\"Warning: BalancedDataset initialized with zero samples.\")\n",
    "\n",
    "#         # convert every requested stream to tensor\n",
    "#         self.features = {}\n",
    "#         for stream in self.active_streams:\n",
    "#             if stream in data_dict and data_dict[stream]:\n",
    "#                 try:\n",
    "#                     self.features[stream] = torch.tensor(\n",
    "#                         np.asarray(data_dict[stream]), dtype=torch.float32\n",
    "#                     )\n",
    "#                 except ValueError as e:\n",
    "#                     raise ValueError(f\"Error converting stream '{stream}': {e}\")\n",
    "#             else:\n",
    "#                 raise KeyError(f\"Stream '{stream}' missing or empty in data.\")\n",
    "\n",
    "#         try:\n",
    "#             self.labels = torch.tensor(\n",
    "#                 [lbl[0] for lbl in data_dict[self.label_key]], dtype=torch.long\n",
    "#             )\n",
    "#         except (IndexError, TypeError) as e:\n",
    "#             raise ValueError(f\"Error converting labels: {e}\")\n",
    "\n",
    "#         for stream in self.active_streams:\n",
    "#             if len(self.features[stream]) != self.num_samples:\n",
    "#                 raise ValueError(\n",
    "#                     f\"Len mismatch: '{stream}' ({len(self.features[stream])}) vs labels ({self.num_samples})\"\n",
    "#                 )\n",
    "\n",
    "#     def __len__(self):\n",
    "#         return self.num_samples\n",
    "\n",
    "#     def __getitem__(self, idx):\n",
    "#         feature_dict = {s: self.features[s][idx] for s in self.active_streams}\n",
    "#         label = self.labels[idx]\n",
    "#         return feature_dict, label\n",
    "\n",
    "\n",
    "# class Attention(nn.Module):\n",
    "#     def __init__(self, hidden_dim, attention_dim):\n",
    "#         super().__init__()\n",
    "#         self.attention_net = nn.Sequential(\n",
    "#             nn.Linear(hidden_dim, attention_dim),\n",
    "#             nn.Tanh(),\n",
    "#             nn.Linear(attention_dim, 1),\n",
    "#         )\n",
    "\n",
    "#     def forward(self, lstm_output):\n",
    "#         att_scores = self.attention_net(lstm_output).squeeze(2)\n",
    "#         att_weights = torch.softmax(att_scores, dim=1)\n",
    "#         context_vector = torch.sum(lstm_output * att_weights.unsqueeze(2), dim=1)\n",
    "#         return context_vector, att_weights\n",
    "\n",
    "\n",
    "# # -----------------------------------------------------------------------------#\n",
    "# #                  ***  MODEL WITH WEIGHTED AVERAGE FUSION  ***                #\n",
    "# # -----------------------------------------------------------------------------\n",
    "\n",
    "\n",
    "# class MultiStreamWeightedAvgLSTM(nn.Module):\n",
    "#     def __init__(\n",
    "#         self,\n",
    "#         input_sizes,\n",
    "#         lstm_hidden_size,\n",
    "#         num_lstm_layers,\n",
    "#         num_classes,\n",
    "#         attention_dim,\n",
    "#         dropout_rate,\n",
    "#         stream_names=None,\n",
    "#     ):\n",
    "#         super().__init__()\n",
    "\n",
    "#         if not stream_names:\n",
    "#             raise ValueError(\"stream_names cannot be empty.\")\n",
    "#         self.stream_names = stream_names\n",
    "#         self.num_active_streams = len(stream_names)\n",
    "#         self.lstm_output_dim = lstm_hidden_size * 2  # Bi-LSTM doubles hidden\n",
    "\n",
    "#         self.lstms = nn.ModuleDict()\n",
    "#         self.attentions = nn.ModuleDict()\n",
    "\n",
    "#         print(f\"Initializing Weighted-Avg model with streams: {self.stream_names}\")\n",
    "\n",
    "#         for name in self.stream_names:\n",
    "#             if name not in input_sizes:\n",
    "#                 raise KeyError(f\"Input size for stream '{name}' not provided.\")\n",
    "\n",
    "#             in_size = input_sizes[name]\n",
    "#             print(f\"  – Adding stream '{name}' (input {in_size})\")\n",
    "\n",
    "#             self.lstms[name] = nn.LSTM(\n",
    "#                 in_size,\n",
    "#                 lstm_hidden_size,\n",
    "#                 num_lstm_layers,\n",
    "#                 batch_first=True,\n",
    "#                 dropout=dropout_rate if num_lstm_layers > 1 else 0,\n",
    "#                 bidirectional=True,\n",
    "#             )\n",
    "#             self.attentions[name] = Attention(self.lstm_output_dim, attention_dim)\n",
    "\n",
    "#         # learnable fusion weights (one per stream)\n",
    "#         self.fusion_weights = nn.Parameter(torch.ones(self.num_active_streams))\n",
    "\n",
    "#         # classification head\n",
    "#         fused_dim = self.lstm_output_dim\n",
    "#         self.dropout = nn.Dropout(dropout_rate)\n",
    "#         inter_dim = max(num_classes * 4, fused_dim // 2)\n",
    "#         self.fc1 = nn.Linear(fused_dim, inter_dim)\n",
    "#         self.relu = nn.ReLU()\n",
    "#         self.fc2 = nn.Linear(inter_dim, num_classes)\n",
    "\n",
    "#     # --------------------------------------------------------------------- #\n",
    "\n",
    "#     def forward(self, x):\n",
    "#         # gather context vectors ------------------------------------------------\n",
    "#         ctx_vecs = []\n",
    "#         for name in self.stream_names:\n",
    "#             if name not in x:\n",
    "#                 # gracefully handle a missing stream during inference\n",
    "#                 zero_ctx = torch.zeros(\n",
    "#                     x[next(iter(x))].shape[0],\n",
    "#                     self.lstm_output_dim,\n",
    "#                     device=x[next(iter(x))].device,\n",
    "#                 )\n",
    "#                 ctx_vecs.append(zero_ctx)\n",
    "#                 continue\n",
    "\n",
    "#             lstm_out, _ = self.lstms[name](x[name])\n",
    "#             context_vector, _ = self.attentions[name](lstm_out)\n",
    "#             ctx_vecs.append(context_vector)\n",
    "\n",
    "#         if len(ctx_vecs) != self.num_active_streams:\n",
    "#             raise RuntimeError(\n",
    "#                 f\"context_vectors({len(ctx_vecs)}) != num_streams({self.num_active_streams})\"\n",
    "#             )\n",
    "\n",
    "#         # weighted average fusion ---------------------------------------------\n",
    "#         stacked = torch.stack(ctx_vecs, dim=1)  # (B, N, D)\n",
    "#         weights = torch.softmax(self.fusion_weights, dim=0).view(1, -1, 1)\n",
    "#         fused = torch.sum(stacked * weights, dim=1)\n",
    "\n",
    "#         # classification head --------------------------------------------------\n",
    "#         out = self.dropout(fused)\n",
    "#         out = self.relu(self.fc1(out))\n",
    "#         out = self.dropout(out)\n",
    "#         logits = self.fc2(out)\n",
    "#         return logits\n",
    "\n",
    "\n",
    "# # -----------------------------------------------------------------------------#\n",
    "# #                       Training / evaluation helpers                          #\n",
    "# # -----------------------------------------------------------------------------\n",
    "\n",
    "\n",
    "# def train_epoch(model, dataloader, optimizer, criterion, device):\n",
    "#     model.train()\n",
    "#     total_loss = 0.0\n",
    "#     all_preds, all_labels = [], []\n",
    "#     active = model.stream_names\n",
    "\n",
    "#     for feats, labels in tqdm(dataloader, desc=\"Training\", leave=False):\n",
    "#         inputs = {n: feats[n].to(device) for n in active if n in feats}\n",
    "#         labels = labels.to(device)\n",
    "\n",
    "#         optimizer.zero_grad()\n",
    "#         outputs = model(inputs)\n",
    "#         loss = criterion(outputs, labels)\n",
    "#         loss.backward()\n",
    "#         optimizer.step()\n",
    "\n",
    "#         total_loss += loss.item()\n",
    "#         all_preds.extend(torch.argmax(outputs, 1).cpu().numpy())\n",
    "#         all_labels.extend(labels.cpu().numpy())\n",
    "\n",
    "#     return total_loss / max(1, len(dataloader)), accuracy_score(all_labels, all_preds)\n",
    "\n",
    "\n",
    "# def evaluate_epoch(model, dataloader, criterion, device):\n",
    "#     model.eval()\n",
    "#     total_loss = 0.0\n",
    "#     all_labels, all_preds, all_probs = [], [], []\n",
    "#     active = model.stream_names\n",
    "\n",
    "#     with torch.no_grad():\n",
    "#         for feats, labels in tqdm(dataloader, desc=\"Evaluating\", leave=False):\n",
    "#             inputs = {n: feats[n].to(device) for n in active if n in feats}\n",
    "#             labels = labels.to(device)\n",
    "\n",
    "#             outputs = model(inputs)\n",
    "#             loss = criterion(outputs, labels)\n",
    "#             total_loss += loss.item()\n",
    "\n",
    "#             probs = torch.softmax(outputs, 1)\n",
    "#             preds = torch.argmax(probs, 1)\n",
    "\n",
    "#             all_labels.extend(labels.cpu().numpy())\n",
    "#             all_preds.extend(preds.cpu().numpy())\n",
    "#             all_probs.extend(probs.cpu().numpy())\n",
    "\n",
    "#     avg_loss = total_loss / max(1, len(dataloader))\n",
    "#     all_probs = np.asarray(all_probs)\n",
    "#     all_labels = np.asarray(all_labels)\n",
    "#     all_preds = np.asarray(all_preds)\n",
    "\n",
    "#     acc = accuracy_score(all_labels, all_preds)\n",
    "#     prec, rec, f1, _ = precision_recall_fscore_support(\n",
    "#         all_labels, all_preds, average=\"binary\", pos_label=1, zero_division=0\n",
    "#     )\n",
    "#     auc = (\n",
    "#         roc_auc_score(all_labels, all_probs[:, 1])\n",
    "#         if len(np.unique(all_labels)) > 1\n",
    "#         else float(\"nan\")\n",
    "#     )\n",
    "\n",
    "#     return {\n",
    "#         \"loss\": avg_loss,\n",
    "#         \"accuracy\": acc,\n",
    "#         \"precision\": prec,\n",
    "#         \"recall\": rec,\n",
    "#         \"f1\": f1,\n",
    "#         \"auc\": auc,\n",
    "#     }\n",
    "\n",
    "\n",
    "# def get_predictions_and_labels(model, dataloader, device):\n",
    "#     model.eval()\n",
    "#     labels_all, preds_all = [], []\n",
    "#     active = model.stream_names\n",
    "\n",
    "#     with torch.no_grad():\n",
    "#         for feats, labels in tqdm(dataloader, desc=\"Generating CM Data\", leave=False):\n",
    "#             inputs = {n: feats[n].to(device) for n in active if n in feats}\n",
    "#             outputs = model(inputs)\n",
    "#             preds = torch.argmax(outputs, 1)\n",
    "#             labels_all.extend(labels.cpu().numpy())\n",
    "#             preds_all.extend(preds.cpu().numpy())\n",
    "\n",
    "#     return np.asarray(labels_all), np.asarray(preds_all)\n",
    "\n",
    "\n",
    "# # -----------------------------------------------------------------------------#\n",
    "# #                            Main execution block                              #\n",
    "# # -----------------------------------------------------------------------------\n",
    "\n",
    "\n",
    "# if __name__ == \"__main__\":\n",
    "#     print(\"--- Running Model Training/Evaluation with Weighted Fusion ---\")\n",
    "#     print(f\"Active Streams: {ACTIVE_STREAMS}\")\n",
    "\n",
    "#     # ------------------ load balanced data & scalers -------------------------\n",
    "#     print(\"\\nLoading balanced training data …\")\n",
    "#     try:\n",
    "#         with open(BALANCED_DATA_PKL_PATH, \"rb\") as f:\n",
    "#             balanced_train_data_dict = pickle.load(f)\n",
    "#         with open(SCALERS_PKL_PATH, \"rb\") as f:\n",
    "#             scalers = pickle.load(f)\n",
    "#         print(\"   ✓ pre-processed data loaded.\")\n",
    "#     except FileNotFoundError as e:\n",
    "#         print(f\"ERROR: {e}.  Run the preprocessing cell first.\")\n",
    "#         sys.exit(1)\n",
    "#     except Exception as e:\n",
    "#         print(f\"Error loading pre-processed data: {e}\")\n",
    "#         sys.exit(1)\n",
    "\n",
    "#     # -------------------------- load PIE database ----------------------------\n",
    "#     print(\"\\nLoading PIE database cache for validation …\")\n",
    "#     if not os.path.exists(PIE_DATABASE_CACHE_PATH):\n",
    "#         raise FileNotFoundError(\"PIE database cache not found.\")\n",
    "\n",
    "#     try:\n",
    "#         with open(PIE_DATABASE_CACHE_PATH, \"rb\") as f:\n",
    "#             pie_database = pickle.load(f)\n",
    "#     except Exception as e:\n",
    "#         raise RuntimeError(f\"Failed to load PIE database: {e}\")\n",
    "#     print(\"   ✓ PIE database loaded.\")\n",
    "\n",
    "#     # ------------------- create datasets / dataloaders -----------------------\n",
    "#     print(\"\\nCreating Datasets and DataLoaders …\")\n",
    "#     try:\n",
    "#         train_dataset = BalancedDataset(\n",
    "#             balanced_train_data_dict, ACTIVE_STREAMS, label_key=\"label\"\n",
    "#         )\n",
    "#         del balanced_train_data_dict\n",
    "\n",
    "#         val_dataset = PIEDataset(\n",
    "#             pie_database,\n",
    "#             VAL_SETS_STR,\n",
    "#             POSE_DATA_DIR,\n",
    "#             SEQ_LEN,\n",
    "#             PRED_LEN,\n",
    "#             scalers,\n",
    "#             ALL_POSSIBLE_STREAMS,  # provide all streams for val\n",
    "#         )\n",
    "#     except Exception as e:\n",
    "#         print(f\"Error creating datasets: {e}\")\n",
    "#         raise\n",
    "\n",
    "#     if len(train_dataset) == 0 or len(val_dataset) == 0:\n",
    "#         raise ValueError(\"One of the datasets is empty!\")\n",
    "\n",
    "#     train_loader = DataLoader(\n",
    "#         train_dataset,\n",
    "#         batch_size=BATCH_SIZE,\n",
    "#         shuffle=True,\n",
    "#         num_workers=2,\n",
    "#         pin_memory=True,\n",
    "#     )\n",
    "#     val_loader = DataLoader(\n",
    "#         val_dataset,\n",
    "#         batch_size=BATCH_SIZE,\n",
    "#         shuffle=False,\n",
    "#         num_workers=2,\n",
    "#         pin_memory=True,\n",
    "#     )\n",
    "#     print(\"   ✓ DataLoaders ready.\")\n",
    "#     del pie_database\n",
    "#     gc.collect()\n",
    "\n",
    "#     # ------------------------- initialise the model --------------------------\n",
    "#     print(\"\\nInitialising model …\")\n",
    "#     current_input_sizes = {}\n",
    "#     SPECIAL = {\n",
    "#         \"TRAFFIC_LIGHT\": \"TL_STATE\",\n",
    "#         \"STATIC_CONTEXT\": \"STATIC\",\n",
    "#         \"EGO_SPEED\": \"EGO_SPEED\",\n",
    "#         \"EGO_ACC\": \"EGO_ACC\",\n",
    "#         \"EGO_GYRO\": \"EGO_GYRO\",\n",
    "#         \"PED_ACTION\": \"PED_ACTION\",\n",
    "#         \"PED_LOOK\": \"PED_LOOK\",\n",
    "#         \"PED_OCCLUSION\": \"PED_OCC\",\n",
    "#     }\n",
    "\n",
    "#     for s in ACTIVE_STREAMS:\n",
    "#         name = f\"INPUT_SIZE_{SPECIAL.get(s.upper(), s.upper())}\"\n",
    "#         if s == \"bbox\":\n",
    "#             name = \"INPUT_SIZE_BBOX\"\n",
    "#         elif s == \"pose\":\n",
    "#             name = \"INPUT_SIZE_POSE\"\n",
    "\n",
    "#         if name not in globals():\n",
    "#             raise ValueError(f\"Input-size constant {name} not found.\")\n",
    "\n",
    "#         current_input_sizes[s] = globals()[name]\n",
    "\n",
    "#     model = MultiStreamWeightedAvgLSTM(\n",
    "#         current_input_sizes,\n",
    "#         LSTM_HIDDEN_SIZE,\n",
    "#         NUM_LSTM_LAYERS,\n",
    "#         NUM_CLASSES,\n",
    "#         ATTENTION_DIM,\n",
    "#         DROPOUT_RATE,\n",
    "#         stream_names=ACTIVE_STREAMS,\n",
    "#     ).to(DEVICE)\n",
    "\n",
    "#     print(\"\\n--- Model architecture ---\")\n",
    "#     print(model)\n",
    "#     total_params = sum(p.numel() for p in model.parameters() if p.requires_grad)\n",
    "#     print(f\"Trainable parameters: {total_params:,}\")\n",
    "#     print(\"-\" * 30)\n",
    "\n",
    "#     # ---------------- loss / optimiser --------------------------------------\n",
    "#     print(\"\\nCalculating class weights …\")\n",
    "#     train_labels = train_dataset.labels.tolist()\n",
    "#     n0, n1 = train_labels.count(0), train_labels.count(1)\n",
    "#     total = len(train_labels)\n",
    "#     if total == 0:\n",
    "#         w0, w1 = 1.0, 1.0\n",
    "#     elif n0 == 0:\n",
    "#         w0, w1 = 0.0, 1.0\n",
    "#     elif n1 == 0:\n",
    "#         w0, w1 = 1.0, 0.0\n",
    "#     else:\n",
    "#         w0, w1 = total / (2.0 * n0), total / (2.0 * n1)\n",
    "\n",
    "#     class_weights = torch.tensor([w0, w1], dtype=torch.float32).to(DEVICE)\n",
    "#     print(f\"Loss weights → 0: {w0:.2f}, 1: {w1:.2f}\")\n",
    "\n",
    "#     criterion = nn.CrossEntropyLoss(weight=class_weights)\n",
    "#     optimizer = optim.Adam(model.parameters(), lr=LEARNING_RATE)\n",
    "\n",
    "#     best_val_f1 = -1.0\n",
    "#     history = {\"train_loss\": [], \"val_loss\": [], \"train_acc\": [], \"val_acc\": [], \"val_f1\": []}\n",
    "#     best_model_path = \"\"\n",
    "\n",
    "#     # --------------------------- training loop -------------------------------\n",
    "#     print(\"\\n--- Starting training ---\")\n",
    "#     for epoch in range(NUM_EPOCHS):\n",
    "#         t0 = time.time()\n",
    "\n",
    "#         train_loss, train_acc = train_epoch(model, train_loader, optimizer, criterion, DEVICE)\n",
    "#         metrics = evaluate_epoch(model, val_loader, criterion, DEVICE)\n",
    "\n",
    "#         history[\"train_loss\"].append(train_loss)\n",
    "#         history[\"val_loss\"].append(metrics[\"loss\"])\n",
    "#         history[\"train_acc\"].append(train_acc)\n",
    "#         history[\"val_acc\"].append(metrics[\"accuracy\"])\n",
    "#         history[\"val_f1\"].append(metrics[\"f1\"])\n",
    "\n",
    "#         print(f\"\\nEpoch {epoch + 1:02d}/{NUM_EPOCHS} – {time.time() - t0:.1f}s\")\n",
    "#         print(f\"  train loss {train_loss:.4f} | acc {train_acc:.4f}\")\n",
    "#         print(f\"  val   loss {metrics['loss']:.4f} | acc {metrics['accuracy']:.4f}\")\n",
    "#         print(\n",
    "#             f\"           prec {metrics['precision']:.4f} | rec {metrics['recall']:.4f} | f1 {metrics['f1']:.4f} | auc {metrics['auc']:.4f}\"\n",
    "#         )\n",
    "\n",
    "#         if metrics[\"f1\"] > best_val_f1:\n",
    "#             best_val_f1 = metrics[\"f1\"]\n",
    "#             best_model_path = f\"best_model_weighted_{'_'.join(sorted(ACTIVE_STREAMS))}_ep{epoch + 1}.pth\"\n",
    "#             torch.save(model.state_dict(), best_model_path)\n",
    "#             print(f\"  ✓ new best model saved → {best_model_path} (F1 {best_val_f1:.4f})\")\n",
    "\n",
    "#     print(\"\\n--- Training finished ---\")\n",
    "\n",
    "#     # --------------------------- plots ---------------------------------------\n",
    "#     print(\"\\nPlotting training curves …\")\n",
    "#     fig, ax = plt.subplots(1, 2, figsize=(12, 5))\n",
    "\n",
    "#     ax[0].plot(range(1, NUM_EPOCHS + 1), history[\"train_loss\"], label=\"Train\")\n",
    "#     ax[0].plot(range(1, NUM_EPOCHS + 1), history[\"val_loss\"], label=\"Val\")\n",
    "#     ax[0].set_xlabel(\"Epoch\")\n",
    "#     ax[0].set_ylabel(\"Loss\")\n",
    "#     ax[0].set_title(\"Loss curve\")\n",
    "#     ax[0].legend()\n",
    "#     ax[0].grid(True)\n",
    "\n",
    "#     ax[1].plot(range(1, NUM_EPOCHS + 1), history[\"train_acc\"], label=\"Train Acc\")\n",
    "#     ax[1].plot(range(1, NUM_EPOCHS + 1), history[\"val_acc\"], label=\"Val Acc\")\n",
    "#     ax[1].plot(range(1, NUM_EPOCHS + 1), history[\"val_f1\"], \"--\", label=\"Val F1\")\n",
    "#     ax[1].set_xlabel(\"Epoch\")\n",
    "#     ax[1].set_ylabel(\"Metric\")\n",
    "#     ax[1].set_title(\"Accuracy & F1\")\n",
    "#     ax[1].legend()\n",
    "#     ax[1].grid(True)\n",
    "\n",
    "#     plt.tight_layout()\n",
    "#     plt.show()\n",
    "\n",
    "#     # ------------------- final evaluation (best model) -----------------------\n",
    "#     print(\"\\n--- Final Evaluation on Validation set ---\")\n",
    "#     if best_model_path and os.path.exists(best_model_path):\n",
    "#         try:\n",
    "#             model.load_state_dict(torch.load(best_model_path, map_location=DEVICE))\n",
    "#             print(f\"Loaded best model: {best_model_path}\")\n",
    "#         except Exception as e:\n",
    "#             print(f\"Warning: could not load best model ({e}).  Using last epoch params.\")\n",
    "#     else:\n",
    "#         print(\"Warning: best model not found, using last epoch parameters.\")\n",
    "\n",
    "#     final_metrics = evaluate_epoch(model, val_loader, criterion, DEVICE)\n",
    "#     y_true, y_pred = get_predictions_and_labels(model, val_loader, DEVICE)\n",
    "#     cm = confusion_matrix(y_true, y_pred, labels=[0, 1])\n",
    "\n",
    "#     print(\"\\n--- Final metrics (Weighted Avg Fusion) ---\")\n",
    "#     for k, v in final_metrics.items():\n",
    "#         print(f\"{k:<10}: {v:.4f}\")\n",
    "\n",
    "#     print(f\"(Best validation F1 during training: {best_val_f1:.4f})\")\n",
    "\n",
    "#     ConfusionMatrixDisplay(cm, display_labels=[\"Not Crossing\", \"Crossing\"]).plot(\n",
    "#         cmap=plt.cm.Blues\n",
    "#     )\n",
    "#     plt.title(\"Confusion Matrix\")\n",
    "#     plt.show()\n",
    "\n",
    "#     # ------------------- inspect learned fusion weights ----------------------\n",
    "#     if hasattr(model, \"fusion_weights\"):\n",
    "#         w = torch.softmax(model.fusion_weights, 0).detach().cpu().numpy()\n",
    "#         print(\"\\n--- Learned fusion weights ---\")\n",
    "#         for stream, weight in zip(model.stream_names, w):\n",
    "#             print(f\"{stream:<15}: {weight:.4f}\")\n",
    "#         print(\"-\" * 30)\n",
    "\n",
    "#     print(\"\\n--- Script complete ---\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "1a02b120",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-05T14:52:01.087785Z",
     "iopub.status.busy": "2025-05-05T14:52:01.087523Z",
     "iopub.status.idle": "2025-05-05T15:06:05.381110Z",
     "shell.execute_reply": "2025-05-05T15:06:05.380122Z"
    },
    "papermill": {
     "duration": 844.311956,
     "end_time": "2025-05-05T15:06:05.390301",
     "exception": false,
     "start_time": "2025-05-05T14:52:01.078345",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data will be prepared for streams: ['bbox', 'pose', 'ego_speed', 'ego_acc', 'ego_gyro', 'ped_action', 'ped_look', 'ped_occlusion', 'traffic_light', 'static_context', 'yolop']\n",
      "--- Running Data Preparation ---\n",
      "Loading PIE database cache …\n",
      "Calculating standardization parameters …\n",
      "Initializing full training dataset …\n",
      "\n",
      "Loading YOLOP data for sets: ['set01', 'set02', 'set04'] from /kaggle/input/yolop-data/yolop features\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c9cb85eb0ea741a8ac561003f39e32db",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Loading YOLOP PKLs:   0%|          | 0/53 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Finished loading YOLOP data. Found 23 relevant files out of 23 expected for sets ['set01', 'set02', 'set04'].\n",
      "Data loaded for 3 sets.\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "8adcd6df7d414ff29784881f854c558f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Generating sequences:   0%|          | 0/3 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Extracting data for balancing …\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "6e0d6bdb8db14ca5babadd10dfce5b70",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Extracting:   0%|          | 0/333454 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---------------------------------------------------------\n",
      "Balancing samples based on 'label' key\n",
      "Unbalanced: Positive (1): 54967 | Negative (0): 278487\n",
      "Undersampling majority class (0) to 54967\n",
      "Balanced:   Positive (1): 54967 | Negative (0): 54967\n",
      "---------------------------------------------------------\n",
      "Saving balanced data …\n",
      "--- Data preparation complete ---\n"
     ]
    }
   ],
   "source": [
    "# --- CELL 1: DATA PREPARATION & BALANCING (Including YOLOP – Run Once) ---\n",
    "import torch\n",
    "from torch.utils.data import Dataset\n",
    "import os\n",
    "import numpy as np\n",
    "from tqdm.notebook import tqdm\n",
    "import random\n",
    "import pickle\n",
    "import time\n",
    "import sys\n",
    "import gc\n",
    "import cv2  # required for PIE class\n",
    "\n",
    "# --- Add PIE utilities path ---\n",
    "pie_utilities_path = '/kaggle/working/PIE/utilities'\n",
    "if pie_utilities_path not in sys.path:\n",
    "    sys.path.insert(0, pie_utilities_path)\n",
    "try:\n",
    "    from pie_data import PIE\n",
    "except ImportError as e:\n",
    "    print(f\"Warn: Could not import PIE class: {e}.  Database must exist.\")\n",
    "    PIE = None\n",
    "\n",
    "# --- Configuration ---\n",
    "PIE_ROOT_PATH = '/kaggle/working/PIE'\n",
    "POSE_DATA_DIR = '/kaggle/input/pose-data/extracted_poses2'\n",
    "PIE_DATABASE_CACHE_PATH = '/kaggle/input/pie-database/pie_database.pkl'\n",
    "YOLOP_FEATURE_DIR = '/kaggle/input/yolop-data/yolop features'  # setXX/setYY_vidZZ_yolop_features.pkl\n",
    "\n",
    "# --- Streams ---\n",
    "ALL_POSSIBLE_STREAMS = [\n",
    "    'bbox', 'pose', 'ego_speed', 'ego_acc', 'ego_gyro',\n",
    "    'ped_action', 'ped_look', 'ped_occlusion', 'traffic_light',\n",
    "    'static_context', 'yolop'\n",
    "]\n",
    "print(f\"Data will be prepared for streams: {ALL_POSSIBLE_STREAMS}\")\n",
    "\n",
    "# --- Sizes & constants ---\n",
    "SEQ_LEN = 30\n",
    "PRED_LEN = 1\n",
    "INPUT_SIZE_BBOX = 4\n",
    "INPUT_SIZE_POSE = 34\n",
    "INPUT_SIZE_EGO_SPEED = 1\n",
    "INPUT_SIZE_EGO_ACC = 2\n",
    "INPUT_SIZE_EGO_GYRO = 1\n",
    "INPUT_SIZE_PED_ACTION = 1\n",
    "INPUT_SIZE_PED_LOOK = 1\n",
    "INPUT_SIZE_PED_OCC = 1\n",
    "INPUT_SIZE_TL_STATE = 4\n",
    "\n",
    "NUM_SIGNALIZED_CATS = 4\n",
    "NUM_INTERSECTION_CATS = 5\n",
    "NUM_AGE_CATS = 4\n",
    "NUM_GENDER_CATS = 3\n",
    "NUM_TRAFFIC_DIR_CATS = 2\n",
    "LANE_CATEGORIES = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 4, 7: 4, 8: 4}\n",
    "NUM_LANE_CATS = len(set(LANE_CATEGORIES.values()))\n",
    "INPUT_SIZE_STATIC = (\n",
    "    NUM_SIGNALIZED_CATS + NUM_INTERSECTION_CATS + NUM_AGE_CATS +\n",
    "    NUM_GENDER_CATS + NUM_TRAFFIC_DIR_CATS + NUM_LANE_CATS\n",
    ")\n",
    "\n",
    "# YOLOP feature size\n",
    "GRID_SIZE = 3\n",
    "YOLOP_DRIVABLE_FEATURES_DIM = GRID_SIZE * GRID_SIZE\n",
    "YOLOP_LANE_FEATURES_DIM = GRID_SIZE * GRID_SIZE\n",
    "YOLOP_OBJECT_FEATURES_DIM = 2\n",
    "INPUT_SIZE_YOLOP = (\n",
    "    YOLOP_DRIVABLE_FEATURES_DIM + YOLOP_LANE_FEATURES_DIM + YOLOP_OBJECT_FEATURES_DIM\n",
    ")\n",
    "\n",
    "# --- Dataset splits ---\n",
    "TRAIN_SETS_STR = ['set01', 'set02', 'set04']\n",
    "\n",
    "# --- Label/state maps ---\n",
    "TL_STATE_MAP = {'__undefined__': 0, 'red': 1, 'yellow': 2, 'green': 3}\n",
    "NUM_TL_STATES = len(TL_STATE_MAP)\n",
    "\n",
    "# --- Output paths ---\n",
    "BALANCED_DATA_PKL_PATH = \"/kaggle/working/balanced_train_data_with_yolop.pkl\"\n",
    "SCALERS_PKL_PATH = \"/kaggle/working/scalers.pkl\"\n",
    "\n",
    "# --- Helpers ---------------------------------------------------------------\n",
    "def to_one_hot(index, num_classes):\n",
    "    vec = np.zeros(num_classes, dtype=np.float32)\n",
    "    safe_index = int(np.clip(index, 0, num_classes - 1))\n",
    "    vec[safe_index] = 1.0\n",
    "    return vec\n",
    "\n",
    "\n",
    "def balance_samples_count(seq_data, label_type, random_seed=42):\n",
    "    print('---------------------------------------------------------')\n",
    "    print(f\"Balancing samples based on '{label_type}' key\")\n",
    "\n",
    "    if label_type not in seq_data:\n",
    "        raise KeyError(f\"Label type '{label_type}' not found.\")\n",
    "\n",
    "    try:\n",
    "        gt_labels = [lbl[0] for lbl in seq_data[label_type]]\n",
    "    except (IndexError, TypeError):\n",
    "        raise ValueError(\n",
    "            f\"Labels under '{label_type}' not in expected format [[label_val]].\"\n",
    "        )\n",
    "\n",
    "    if not all(l in [0, 1] for l in gt_labels):\n",
    "        print(\"Warning: labels contain values other than 0 or 1.\")\n",
    "\n",
    "    num_pos = np.count_nonzero(gt_labels)\n",
    "    num_neg = len(gt_labels) - num_pos\n",
    "    new_seq_data = {}\n",
    "\n",
    "    if num_neg == num_pos:\n",
    "        print(\"Samples already balanced.\")\n",
    "        return seq_data.copy()\n",
    "\n",
    "    majority_label = 0 if num_neg > num_pos else 1\n",
    "    minority_count = min(num_neg, num_pos)\n",
    "    print(\n",
    "        f\"Unbalanced: Positive (1): {num_pos} | Negative (0): {num_neg}\\n\"\n",
    "        f\"Undersampling majority class ({majority_label}) to {minority_count}\"\n",
    "    )\n",
    "\n",
    "    majority_idx = np.where(np.array(gt_labels) == majority_label)[0]\n",
    "    minority_idx = np.where(np.array(gt_labels) != majority_label)[0]\n",
    "    np.random.seed(random_seed)\n",
    "    keep_majority = np.random.choice(majority_idx, minority_count, replace=False)\n",
    "    final_idx = np.concatenate((minority_idx, keep_majority))\n",
    "    np.random.shuffle(final_idx)\n",
    "\n",
    "    for k, v_list in seq_data.items():\n",
    "        if isinstance(v_list, list) and len(v_list) == len(gt_labels):\n",
    "            try:\n",
    "                if v_list and isinstance(v_list[0], np.ndarray):\n",
    "                    v_array = np.array(v_list)\n",
    "                    new_seq_data[k] = list(v_array[final_idx])\n",
    "                else:\n",
    "                    new_seq_data[k] = [v_list[i] for i in final_idx]\n",
    "            except Exception as e:\n",
    "                print(f\"Error processing key '{k}': {e}.  Skipped.\")\n",
    "                new_seq_data[k] = []\n",
    "        else:\n",
    "            new_seq_data[k] = v_list\n",
    "\n",
    "    new_gt = [lbl[0] for lbl in new_seq_data[label_type]]\n",
    "    final_pos = np.count_nonzero(new_gt)\n",
    "    final_neg = len(new_gt) - final_pos\n",
    "    print(f\"Balanced:   Positive (1): {final_pos} | Negative (0): {final_neg}\")\n",
    "    print('---------------------------------------------------------')\n",
    "    return new_seq_data\n",
    "\n",
    "\n",
    "# --- Dataset class ---------------------------------------------------------\n",
    "class PIEDataset(Dataset):\n",
    "    def __init__(\n",
    "        self,\n",
    "        pie_database,\n",
    "        set_names,\n",
    "        pose_data_dir,\n",
    "        yolop_data_dir,\n",
    "        seq_len,\n",
    "        pred_len,\n",
    "        scalers=None,\n",
    "        streams_to_generate=None,\n",
    "    ):\n",
    "        self.pie_db = pie_database\n",
    "        self.set_names = set_names\n",
    "        self.pose_data_dir = pose_data_dir\n",
    "        self.yolop_data_dir = yolop_data_dir\n",
    "        self.seq_len = seq_len\n",
    "        self.pred_len = pred_len\n",
    "        self.scalers = scalers or {}\n",
    "        self.streams_to_generate = streams_to_generate or ALL_POSSIBLE_STREAMS\n",
    "        self.sequences = []\n",
    "        self.all_pose_data = {}\n",
    "        self.all_yolop_data = {}\n",
    "        self._input_sizes_for_error = self._get_input_sizes_dict()\n",
    "\n",
    "        if 'pose' in self.streams_to_generate:\n",
    "            self._load_pose_data()\n",
    "        if 'yolop' in self.streams_to_generate:\n",
    "            self._load_yolop_data()\n",
    "\n",
    "        self._generate_sequence_list()\n",
    "\n",
    "        if not self.sequences:\n",
    "            raise ValueError(f\"No sequences found for sets {self.set_names}\")\n",
    "\n",
    "    # ------------------------------------------------------------------\n",
    "    def _get_input_sizes_dict(self):\n",
    "        input_sizes = {}\n",
    "        special = {\n",
    "            'TRAFFIC_LIGHT': 'TL_STATE',\n",
    "            'STATIC_CONTEXT': 'STATIC',\n",
    "            'EGO_SPEED': 'EGO_SPEED',\n",
    "            'EGO_ACC': 'EGO_ACC',\n",
    "            'EGO_GYRO': 'EGO_GYRO',\n",
    "            'PED_ACTION': 'PED_ACTION',\n",
    "            'PED_LOOK': 'PED_LOOK',\n",
    "            'PED_OCCLUSION': 'PED_OCC',\n",
    "            'YOLOP': 'YOLOP',\n",
    "        }\n",
    "        for stream in ALL_POSSIBLE_STREAMS:\n",
    "            size_name = f'INPUT_SIZE_{stream.upper()}'\n",
    "            key = stream.upper()\n",
    "            suffix = special.get(key)\n",
    "            if suffix:\n",
    "                size_name = f'INPUT_SIZE_{suffix}'\n",
    "            elif stream == 'bbox':\n",
    "                size_name = 'INPUT_SIZE_BBOX'\n",
    "            elif stream == 'pose':\n",
    "                size_name = 'INPUT_SIZE_POSE'\n",
    "\n",
    "            input_sizes[stream] = globals().get(size_name, 1)\n",
    "\n",
    "        return input_sizes\n",
    "\n",
    "    # ------------------------------------------------------------------\n",
    "    def _load_pose_data(self):\n",
    "        for set_id in self.set_names:\n",
    "            self.all_pose_data[set_id] = {}\n",
    "            set_path = os.path.join(self.pose_data_dir, set_id)\n",
    "            if not os.path.isdir(set_path):\n",
    "                continue\n",
    "            pkl_files = [\n",
    "                f for f in os.listdir(set_path)\n",
    "                if f.startswith(f\"{set_id}_\") and f.endswith(\"_poses.pkl\")\n",
    "            ]\n",
    "            for pkl_name in pkl_files:\n",
    "                pkl_path = os.path.join(set_path, pkl_name)\n",
    "                try:\n",
    "                    with open(pkl_path, 'rb') as f:\n",
    "                        content = pickle.load(f)\n",
    "                    if len(content) != 1:\n",
    "                        continue\n",
    "                    uniq_key, video_data = list(content.items())[0]\n",
    "                    vid = \"_\".join(uniq_key.split('_')[1:])\n",
    "                    if vid in self.pie_db.get(set_id, {}):\n",
    "                        self.all_pose_data[set_id][vid] = video_data\n",
    "                except Exception as e:\n",
    "                    print(f\"Pose load error {pkl_path}: {e}\")\n",
    "\n",
    "    # ------------------------------------------------------------------\n",
    "    \n",
    "\n",
    "    def _load_yolop_data(self): # New method to load YOLOP features\n",
    "        print(f\"\\nLoading YOLOP data for sets: {self.set_names} from {self.yolop_data_dir}\")\n",
    "        sets_loaded_count = 0\n",
    "        # Initialize dictionaries for all sets requested by this dataset instance\n",
    "        for set_id in self.set_names:\n",
    "            self.all_yolop_data[set_id] = {}\n",
    "\n",
    "        if not os.path.isdir(self.yolop_data_dir):\n",
    "            print(f\"Error: YOLOP feature directory not found: {self.yolop_data_dir}\")\n",
    "            return\n",
    "\n",
    "        try:\n",
    "            all_pkl_files = [f for f in os.listdir(self.yolop_data_dir)\n",
    "                             if f.endswith(\"_yolop_features.pkl\")]\n",
    "        except Exception as e:\n",
    "            print(f\"Error listing files in YOLOP directory {self.yolop_data_dir}: {e}\")\n",
    "            return\n",
    "\n",
    "        if not all_pkl_files:\n",
    "            print(f\"Warning: No '*_yolop_features.pkl' files found directly in {self.yolop_data_dir}\")\n",
    "\n",
    "        # --- Initialize count BEFORE the loop ---\n",
    "        loaded_file_count = 0\n",
    "        files_for_needed_sets = 0\n",
    "        # ---\n",
    "\n",
    "        for pkl_filename in tqdm(all_pkl_files, desc=\"Loading YOLOP PKLs\"):\n",
    "            try:\n",
    "                parts = pkl_filename.replace(\"_yolop_features.pkl\", \"\").split('_')\n",
    "                set_id_from_file = parts[0]\n",
    "                video_id = \"_\".join(parts[1:])\n",
    "            except IndexError:\n",
    "                print(f\"Warning: Could not parse set/video ID from filename: {pkl_filename}\")\n",
    "                continue\n",
    "\n",
    "            if set_id_from_file in self.set_names:\n",
    "                files_for_needed_sets += 1\n",
    "                pkl_file_path = os.path.join(self.yolop_data_dir, pkl_filename)\n",
    "                try:\n",
    "                    with open(pkl_file_path, 'rb') as f:\n",
    "                        loaded_pkl_content = pickle.load(f)\n",
    "\n",
    "                    if len(loaded_pkl_content) != 1:\n",
    "                        print(f\"Warn: PKL {pkl_filename} format issue (expected 1 key). Skip.\")\n",
    "                        continue\n",
    "\n",
    "                    unique_video_key, video_data = list(loaded_pkl_content.items())[0]\n",
    "                    expected_key = f\"{set_id_from_file}_{video_id}\"\n",
    "                    if unique_video_key != expected_key:\n",
    "                         print(f\"Warn: Key mismatch in {pkl_filename}. Expected '{expected_key}', found '{unique_video_key}'. Trying to use found key.\")\n",
    "\n",
    "                    self.all_yolop_data[set_id_from_file][video_id] = video_data\n",
    "                    loaded_file_count += 1 # Increment only on success\n",
    "\n",
    "                except FileNotFoundError:\n",
    "                     print(f\"Warn: YOLOP feature file not found during loading: {pkl_file_path}\")\n",
    "                except Exception as e:\n",
    "                    print(f\"Error loading YOLOP PKL {pkl_file_path}: {e}\")\n",
    "\n",
    "        print(f\"Finished loading YOLOP data. Found {loaded_file_count} relevant files out of {files_for_needed_sets} expected for sets {self.set_names}.\")\n",
    "        if loaded_file_count > 0:\n",
    "             actual_sets_loaded = sum(1 for s in self.set_names if s in self.all_yolop_data and self.all_yolop_data[s])\n",
    "             print(f\"Data loaded for {actual_sets_loaded} sets.\")\n",
    "    # ------------------------------------------------------------------\n",
    "    def _generate_sequence_list(self):\n",
    "        for set_id in tqdm(self.set_names, desc=\"Generating sequences\"):\n",
    "            if set_id not in self.pie_db:\n",
    "                continue\n",
    "            for video_id, video_data in self.pie_db[set_id].items():\n",
    "                ped_ann = video_data.get('ped_annotations', {})\n",
    "                for ped_id, ped_data in ped_ann.items():\n",
    "                    if 'frames' not in ped_data or len(ped_data['frames']) < self.seq_len + self.pred_len:\n",
    "                        continue\n",
    "                    frames_sorted = sorted(ped_data['frames'])\n",
    "                    for i in range(len(frames_sorted) - self.seq_len - self.pred_len + 1):\n",
    "                        start_f = frames_sorted[i]\n",
    "                        end_obs = frames_sorted[i + self.seq_len - 1]\n",
    "                        if end_obs - start_f != self.seq_len - 1:\n",
    "                            continue\n",
    "                        target_idx = i + self.seq_len + self.pred_len - 1\n",
    "                        target_f = frames_sorted[target_idx]\n",
    "                        if target_f - end_obs != self.pred_len:\n",
    "                            continue\n",
    "                        self.sequences.append((set_id, video_id, ped_id, start_f))\n",
    "\n",
    "    # ------------------------------------------------------------------\n",
    "    def __len__(self):\n",
    "        return len(self.sequences)\n",
    "\n",
    "    # ------------------------------------------------------------------\n",
    "    def __getitem__(self, idx):\n",
    "        set_id, video_id, ped_id, start_frame = self.sequences[idx]\n",
    "        frame_nums = list(range(start_frame, start_frame + self.seq_len))\n",
    "        target_frame_num = start_frame + self.seq_len + self.pred_len - 1\n",
    "\n",
    "        video_db = self.pie_db.get(set_id, {}).get(video_id, {})\n",
    "        ped_db = video_db.get('ped_annotations', {}).get(ped_id, {})\n",
    "        ego_db = video_db.get('vehicle_annotations', {})\n",
    "        traffic_db = video_db.get('traffic_annotations', {})\n",
    "        ped_attr = ped_db.get('attributes', {})\n",
    "\n",
    "        feat_seq = {s: [] for s in self.streams_to_generate}\n",
    "        label = 0\n",
    "\n",
    "        if 'frames' in ped_db and 'behavior' in ped_db and 'cross' in ped_db['behavior']:\n",
    "            try:\n",
    "                idx_target = ped_db['frames'].index(target_frame_num)\n",
    "                label = ped_db['behavior']['cross'][idx_target]\n",
    "                if label == -1:\n",
    "                    label = 0\n",
    "            except (ValueError, IndexError):\n",
    "                pass\n",
    "\n",
    "        static_vec = None\n",
    "        if 'static_context' in self.streams_to_generate:\n",
    "            sig_idx = ped_attr.get('signalized', 0)\n",
    "            int_idx = ped_attr.get('intersection', 0)\n",
    "            age_idx = ped_attr.get('age', 2)\n",
    "            gen_idx = ped_attr.get('gender', 0)\n",
    "            td_idx = int(ped_attr.get('traffic_direction', 0))\n",
    "            nl_val = ped_attr.get('num_lanes', 2)\n",
    "            nl_idx = LANE_CATEGORIES.get(nl_val, LANE_CATEGORIES[max(LANE_CATEGORIES)])\n",
    "            static_vec = np.concatenate([\n",
    "                to_one_hot(sig_idx, NUM_SIGNALIZED_CATS),\n",
    "                to_one_hot(int_idx, NUM_INTERSECTION_CATS),\n",
    "                to_one_hot(age_idx, NUM_AGE_CATS),\n",
    "                to_one_hot(gen_idx, NUM_GENDER_CATS),\n",
    "                to_one_hot(td_idx, NUM_TRAFFIC_DIR_CATS),\n",
    "                to_one_hot(nl_idx, NUM_LANE_CATS),\n",
    "            ]).astype(np.float32)\n",
    "            if static_vec.shape[0] != INPUT_SIZE_STATIC:\n",
    "                static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "\n",
    "        for frame in frame_nums:\n",
    "            frame_idx = -1\n",
    "            if 'frames' in ped_db:\n",
    "                try:\n",
    "                    frame_idx = ped_db['frames'].index(frame)\n",
    "                except ValueError:\n",
    "                    pass\n",
    "\n",
    "            ego = ego_db.get(frame, {})\n",
    "\n",
    "            # ------------------------------ bbox\n",
    "            if 'bbox' in self.streams_to_generate:\n",
    "                bbox_norm = np.zeros(INPUT_SIZE_BBOX, dtype=np.float32)\n",
    "                if frame_idx != -1 and 'bbox' in ped_db and len(ped_db['bbox']) > frame_idx:\n",
    "                    try:\n",
    "                        x1, y1, x2, y2 = ped_db['bbox'][frame_idx]\n",
    "                        iw = video_db.get('width', 1920)\n",
    "                        ih = video_db.get('height', 1080)\n",
    "                        if iw > 0 and ih > 0:\n",
    "                            cx = ((x1 + x2) / 2) / iw\n",
    "                            cy = ((y1 + y2) / 2) / ih\n",
    "                            w = (x2 - x1) / iw\n",
    "                            h = (y2 - y1) / ih\n",
    "                            if 0 <= cx <= 1 and 0 <= cy <= 1 and w > 0 and h > 0:\n",
    "                                bbox_norm = np.array([cx, cy, w, h], dtype=np.float32)\n",
    "                    except Exception:\n",
    "                        pass\n",
    "                feat_seq['bbox'].append(bbox_norm)\n",
    "\n",
    "            # ------------------------------ pose\n",
    "            if 'pose' in self.streams_to_generate:\n",
    "                pose_vec = np.zeros(INPUT_SIZE_POSE, dtype=np.float32)\n",
    "                pose_vid = self.all_pose_data.get(set_id, {}).get(video_id, {})\n",
    "                pose_frame = pose_vid.get(frame, {})\n",
    "                loaded_pose = pose_frame.get(ped_id)\n",
    "                if (\n",
    "                    loaded_pose is not None\n",
    "                    and isinstance(loaded_pose, np.ndarray)\n",
    "                    and loaded_pose.shape == (INPUT_SIZE_POSE,)\n",
    "                ):\n",
    "                    pose_vec = loaded_pose\n",
    "                feat_seq['pose'].append(pose_vec)\n",
    "\n",
    "            # ------------------------------ ego_speed\n",
    "            if 'ego_speed' in self.streams_to_generate:\n",
    "                speed = ego.get('OBD_speed', 0.0) or ego.get('GPS_speed', 0.0)\n",
    "                sp_scaled = (\n",
    "                    speed - self.scalers.get('ego_speed_mean', 0.0)\n",
    "                ) / self.scalers.get('ego_speed_std', 1.0)\n",
    "                feat_seq['ego_speed'].append([sp_scaled])\n",
    "\n",
    "            # ------------------------------ ego_acc\n",
    "            if 'ego_acc' in self.streams_to_generate:\n",
    "                accX = ego.get('accX', 0.0)\n",
    "                accY = ego.get('accY', 0.0)\n",
    "                accX_s = (accX - self.scalers.get('accX_mean', 0.0)) / self.scalers.get('accX_std', 1.0)\n",
    "                accY_s = (accY - self.scalers.get('accY_mean', 0.0)) / self.scalers.get('accY_std', 1.0)\n",
    "                feat_seq['ego_acc'].append([accX_s, accY_s])\n",
    "\n",
    "            # ------------------------------ ego_gyro\n",
    "            if 'ego_gyro' in self.streams_to_generate:\n",
    "                gyroZ = ego.get('gyroZ', 0.0)\n",
    "                gyroZ_s = (gyroZ - self.scalers.get('gyroZ_mean', 0.0)) / self.scalers.get('gyroZ_std', 1.0)\n",
    "                feat_seq['ego_gyro'].append([gyroZ_s])\n",
    "\n",
    "            # ------------------------------ ped_action\n",
    "            if 'ped_action' in self.streams_to_generate:\n",
    "                action = 0\n",
    "                if (\n",
    "                    frame_idx != -1\n",
    "                    and 'behavior' in ped_db\n",
    "                    and 'action' in ped_db['behavior']\n",
    "                    and len(ped_db['behavior']['action']) > frame_idx\n",
    "                ):\n",
    "                    action = ped_db['behavior']['action'][frame_idx]\n",
    "                feat_seq['ped_action'].append([float(action)])\n",
    "\n",
    "            # ------------------------------ ped_look\n",
    "            if 'ped_look' in self.streams_to_generate:\n",
    "                look = 0\n",
    "                if (\n",
    "                    frame_idx != -1\n",
    "                    and 'behavior' in ped_db\n",
    "                    and 'look' in ped_db['behavior']\n",
    "                    and len(ped_db['behavior']['look']) > frame_idx\n",
    "                ):\n",
    "                    look = ped_db['behavior']['look'][frame_idx]\n",
    "                feat_seq['ped_look'].append([float(look)])\n",
    "\n",
    "            # ------------------------------ ped_occlusion\n",
    "            if 'ped_occlusion' in self.streams_to_generate:\n",
    "                occ = 0.0\n",
    "                if (\n",
    "                    frame_idx != -1\n",
    "                    and 'occlusion' in ped_db\n",
    "                    and len(ped_db['occlusion']) > frame_idx\n",
    "                ):\n",
    "                    occ_val = ped_db['occlusion'][frame_idx]\n",
    "                    occ = float(occ_val) / 2.0\n",
    "                feat_seq['ped_occlusion'].append([occ])\n",
    "\n",
    "            # ------------------------------ traffic_light\n",
    "            if 'traffic_light' in self.streams_to_generate:\n",
    "                state_int = 0\n",
    "                for obj_id, obj in traffic_db.items():\n",
    "                    if (\n",
    "                        obj.get('obj_class') == 'traffic_light'\n",
    "                        and 'frames' in obj and 'state' in obj\n",
    "                    ):\n",
    "                        try:\n",
    "                            tl_idx = obj['frames'].index(frame)\n",
    "                            state_val = obj['state'][tl_idx]\n",
    "                            if state_val != 0:\n",
    "                                state_int = state_val\n",
    "                                break\n",
    "                        except (ValueError, IndexError):\n",
    "                            continue\n",
    "                feat_seq['traffic_light'].append(to_one_hot(state_int, NUM_TL_STATES))\n",
    "\n",
    "            # ------------------------------ static_context\n",
    "            if 'static_context' in self.streams_to_generate:\n",
    "                feat_seq['static_context'].append(\n",
    "                    static_vec if static_vec is not None else np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "                )\n",
    "\n",
    "            # ------------------------------ YOLOP\n",
    "            if 'yolop' in self.streams_to_generate:\n",
    "                yolop_vec = np.zeros(INPUT_SIZE_YOLOP, dtype=np.float32)\n",
    "                if set_id in self.all_yolop_data and video_id in self.all_yolop_data[set_id]:\n",
    "                    frame_yolo = self.all_yolop_data[set_id][video_id].get(frame, {})\n",
    "                    loaded_yolo = frame_yolo.get(ped_id)\n",
    "                    if (\n",
    "                        loaded_yolo is not None\n",
    "                        and isinstance(loaded_yolo, np.ndarray)\n",
    "                        and loaded_yolo.shape == (INPUT_SIZE_YOLOP,)\n",
    "                    ):\n",
    "                        yolop_vec = loaded_yolo\n",
    "                feat_seq['yolop'].append(yolop_vec)\n",
    "\n",
    "        features = {}\n",
    "        try:\n",
    "            for s in self.streams_to_generate:\n",
    "                features[s] = torch.tensor(np.array(feat_seq[s], dtype=np.float32))\n",
    "        except Exception as e:\n",
    "            print(f\"Tensor conversion error idx {idx}: {e}\")\n",
    "            features = {\n",
    "                name: torch.zeros(\n",
    "                    (self.seq_len, self._input_sizes_for_error.get(name, 1)),\n",
    "                    dtype=torch.float32,\n",
    "                )\n",
    "                for name in self.streams_to_generate\n",
    "            }\n",
    "\n",
    "        return features, torch.tensor(label, dtype=torch.long)\n",
    "\n",
    "\n",
    "# --- Main data-preparation execution ---------------------------------------\n",
    "if __name__ == '__main__':\n",
    "\n",
    "    print(\"--- Running Data Preparation ---\")\n",
    "\n",
    "    # Load or create PIE database\n",
    "    if not os.path.exists(PIE_DATABASE_CACHE_PATH):\n",
    "        if PIE is None:\n",
    "            raise ImportError(\"PIE class not imported.\")\n",
    "        print(\"Generating PIE database cache …\")\n",
    "        pie_intf = PIE(data_path=PIE_ROOT_PATH, regen_database=True)\n",
    "        pie_database = pie_intf.generate_database()\n",
    "        if not pie_database:\n",
    "            raise RuntimeError(\"Failed to generate PIE database.\")\n",
    "    else:\n",
    "        print(\"Loading PIE database cache …\")\n",
    "        with open(PIE_DATABASE_CACHE_PATH, 'rb') as f:\n",
    "            pie_database = pickle.load(f)\n",
    "\n",
    "    # Standardization scalers\n",
    "    print(\"Calculating standardization parameters …\")\n",
    "    all_sp, all_ax, all_ay, all_gz = [], [], [], []\n",
    "    for set_id in TRAIN_SETS_STR:\n",
    "        for vid, vdata in pie_database.get(set_id, {}).items():\n",
    "            for _, ego in vdata.get('vehicle_annotations', {}).items():\n",
    "                speed = ego.get('OBD_speed', 0.0) or ego.get('GPS_speed', 0.0)\n",
    "                all_sp.append(speed)\n",
    "                all_ax.append(ego.get('accX', 0.0))\n",
    "                all_ay.append(ego.get('accY', 0.0))\n",
    "                all_gz.append(ego.get('gyroZ', 0.0))\n",
    "\n",
    "    scalers = {}\n",
    "    if all_sp:\n",
    "        scalers['ego_speed_mean'] = np.mean(all_sp)\n",
    "        scalers['ego_speed_std'] = max(np.std(all_sp), 1e-6)\n",
    "    if all_ax:\n",
    "        scalers['accX_mean'] = np.mean(all_ax)\n",
    "        scalers['accX_std'] = max(np.std(all_ax), 1e-6)\n",
    "        scalers['accY_mean'] = np.mean(all_ay)\n",
    "        scalers['accY_std'] = max(np.std(all_ay), 1e-6)\n",
    "    if all_gz:\n",
    "        scalers['gyroZ_mean'] = np.mean(all_gz)\n",
    "        scalers['gyroZ_std'] = max(np.std(all_gz), 1e-6)\n",
    "\n",
    "    print(\"Initializing full training dataset …\")\n",
    "    full_train_ds = PIEDataset(\n",
    "        pie_database,\n",
    "        TRAIN_SETS_STR,\n",
    "        POSE_DATA_DIR,\n",
    "        YOLOP_FEATURE_DIR,\n",
    "        SEQ_LEN,\n",
    "        PRED_LEN,\n",
    "        scalers,\n",
    "        ALL_POSSIBLE_STREAMS,\n",
    "    )\n",
    "\n",
    "    # Extract all features for balancing\n",
    "    print(\"Extracting data for balancing …\")\n",
    "    data_dict = {s: [] for s in ALL_POSSIBLE_STREAMS}\n",
    "    data_dict['label'] = []\n",
    "    for i in tqdm(range(len(full_train_ds)), desc=\"Extracting\"):\n",
    "        feats, lbl = full_train_ds[i]\n",
    "        for s in ALL_POSSIBLE_STREAMS:\n",
    "            data_dict[s].append(feats[s].numpy())\n",
    "        data_dict['label'].append([lbl.item()])\n",
    "\n",
    "    balanced_dict = balance_samples_count(data_dict, 'label')\n",
    "\n",
    "    # Save outputs\n",
    "    print(\"Saving balanced data …\")\n",
    "    with open(BALANCED_DATA_PKL_PATH, 'wb') as f:\n",
    "        pickle.dump(balanced_dict, f, pickle.HIGHEST_PROTOCOL)\n",
    "    with open(SCALERS_PKL_PATH, 'wb') as f:\n",
    "        pickle.dump(scalers, f, pickle.HIGHEST_PROTOCOL)\n",
    "\n",
    "    del pie_database, full_train_ds, balanced_dict\n",
    "    gc.collect()\n",
    "    print(\"--- Data preparation complete ---\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e0d585cf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-05T15:06:05.445276Z",
     "iopub.status.busy": "2025-05-05T15:06:05.444901Z",
     "iopub.status.idle": "2025-05-05T15:59:16.210821Z",
     "shell.execute_reply": "2025-05-05T15:59:16.209778Z"
    },
    "papermill": {
     "duration": 3190.813959,
     "end_time": "2025-05-05T15:59:16.212550",
     "exception": false,
     "start_time": "2025-05-05T15:06:05.398591",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "All possible streams: ['bbox', 'pose', 'ego_speed', 'ego_acc', 'ego_gyro', 'ped_action', 'ped_look', 'ped_occlusion', 'traffic_light', 'static_context', 'yolop']\n",
      "--- Running Experiment With Active Streams: ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'yolop'] ---\n",
      "Using device: cuda\n",
      "--- Skipping Data Preparation: Loading Pre-Saved Files ---\n",
      "\n",
      "Loading balanced training data from: /kaggle/working/balanced_train_data_with_yolop.pkl\n",
      "Loading scalers from: /kaggle/working/scalers.pkl\n",
      " -> Pre-processed data loaded successfully.\n",
      "\n",
      "======================================================================\n",
      "--- Running Model Training and Evaluation ---\n",
      "Active Streams for this run: ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'yolop']\n",
      "----------------------------------------------------------------------\n",
      "\n",
      "Loading PIE database cache for Validation Dataset...\n",
      " -> PIE database loaded successfully for validation.\n",
      "\n",
      "Creating Datasets and DataLoaders...\n",
      "\n",
      "Loading pose data for sets: ['set05'] from /kaggle/input/pose-data/extracted_poses2\n",
      "Finished loading pose data for 1 relevant sets.\n",
      "\n",
      "Loading YOLOP data for sets: ['set05'] from /kaggle/input/yolop-data/yolop features\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7b354314152a47a49b0af46edb69950c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Loading YOLOP PKLs:   0%|          | 0/53 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Finished loading YOLOP data. Found 2 relevant files out of 2 possible for sets ['set05'].\n",
      "Data successfully loaded for 1 sets.\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c802e0e953e84cf4b0addfa1380c0275",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Generating Sequences for ['set05']:   0%|          | 0/1 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset initialized with 4160 sequences from 16 pedestrians for sets ['set05'].\n",
      "DataLoaders created. Train batches: 3435, Val batches: 130\n",
      "\n",
      "Initializing model...\n",
      "Initializing model with streams: ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'yolop']\n",
      "  - Adding stream 'bbox' with input size 4\n",
      "  - Adding stream 'ped_action' with input size 1\n",
      "  - Adding stream 'ped_look' with input size 1\n",
      "  - Adding stream 'ego_speed' with input size 1\n",
      "  - Adding stream 'ego_acc' with input size 2\n",
      "  - Adding stream 'yolop' with input size 20\n",
      "  Combined feature dimension: 3072\n",
      "\n",
      "--- Model Architecture ---\n",
      "MultiStreamAdaptiveLSTM(\n",
      "  (lstms): ModuleDict(\n",
      "    (bbox): LSTM(4, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "    (ped_action): LSTM(1, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "    (ped_look): LSTM(1, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "    (ego_speed): LSTM(1, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "    (ego_acc): LSTM(2, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "    (yolop): LSTM(20, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "  )\n",
      "  (attentions): ModuleDict(\n",
      "    (bbox): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "    (ped_action): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "    (ped_look): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "    (ego_speed): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "    (ego_acc): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "    (yolop): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "  )\n",
      "  (dropout): Dropout(p=0.3, inplace=False)\n",
      "  (fc1): Linear(in_features=3072, out_features=1536, bias=True)\n",
      "  (relu): ReLU()\n",
      "  (fc2): Linear(in_features=1536, out_features=2, bias=True)\n",
      ")\n",
      "Total Trainable Parameters: 17,809,416\n",
      "------------------------------\n",
      "\n",
      "Calculating Class Weights for Loss Function...\n",
      "Using Calculated Class Weights for Loss: 0=1.00, 1=1.00\n",
      "\n",
      "--- Starting Training ---\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b2948fc137a44e1982333de435c2b55f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3435 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ee53dbb73e0c4877b78a084fcf8be336",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/130 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Epoch 1/15 (211.11 sec) ---\n",
      "  Train Loss: 0.2958, Train Acc: 0.8723\n",
      "  Val Loss:   0.2466, Val Acc:  0.8786\n",
      "  Val Prec:   0.7599, Recall: 0.9226, F1: 0.8334\n",
      "  Val AUC:    0.9702\n",
      "  >> Saved new best model to best_model_bbox_ego_acc_ego_speed_ped_action_ped_look_yolop_ep1.pth (F1: 0.8334)\n",
      "------------------------------\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e9cb3dea028c4122855a3ddaa03a5f9c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3435 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0feb7b6c4e88494bb5f34ab458a98a7d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/130 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Epoch 2/15 (210.22 sec) ---\n",
      "  Train Loss: 0.2355, Train Acc: 0.8998\n",
      "  Val Loss:   0.2780, Val Acc:  0.8656\n",
      "  Val Prec:   0.8320, Recall: 0.7414, F1: 0.7841\n",
      "  Val AUC:    0.9490\n",
      "------------------------------\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "dea39d1f7f0a4074aad37b606dd281e1",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3435 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0ea1a29f011842d0a80c6c848c367dce",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/130 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Epoch 3/15 (210.69 sec) ---\n",
      "  Train Loss: 0.2004, Train Acc: 0.9190\n",
      "  Val Loss:   0.3515, Val Acc:  0.8288\n",
      "  Val Prec:   0.8646, Recall: 0.5690, F1: 0.6863\n",
      "  Val AUC:    0.9446\n",
      "------------------------------\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0b0e6a2cb0e9453da5a997a3d4806802",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3435 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "bd67b5a771504896bca18c47ed6fa929",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/130 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Epoch 4/15 (210.70 sec) ---\n",
      "  Train Loss: 0.1679, Train Acc: 0.9344\n",
      "  Val Loss:   0.3583, Val Acc:  0.8517\n",
      "  Val Prec:   0.8701, Recall: 0.6457, F1: 0.7413\n",
      "  Val AUC:    0.9524\n",
      "------------------------------\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a15e43fb2dce4828ace1284718f7417a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3435 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "146f6f987c0647879598fc6555c1fad7",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/130 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Epoch 5/15 (209.88 sec) ---\n",
      "  Train Loss: 0.1408, Train Acc: 0.9467\n",
      "  Val Loss:   0.5814, Val Acc:  0.8214\n",
      "  Val Prec:   0.8344, Recall: 0.5705, F1: 0.6777\n",
      "  Val AUC:    0.9153\n",
      "------------------------------\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0725984095524c3e802512451bfc8623",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3435 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "30820146017b41b69df5ad89dc1eb58a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/130 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Epoch 6/15 (210.49 sec) ---\n",
      "  Train Loss: 0.1233, Train Acc: 0.9546\n",
      "  Val Loss:   0.7194, Val Acc:  0.8087\n",
      "  Val Prec:   0.8464, Recall: 0.5113, F1: 0.6375\n",
      "  Val AUC:    0.9130\n",
      "------------------------------\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f1d63719322546289a18e2964c698626",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3435 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "6089b2e2655742de882dd0e1b9ff5743",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/130 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Epoch 7/15 (209.73 sec) ---\n",
      "  Train Loss: 0.1061, Train Acc: 0.9617\n",
      "  Val Loss:   0.6776, Val Acc:  0.7714\n",
      "  Val Prec:   0.8065, Recall: 0.4018, F1: 0.5363\n",
      "  Val AUC:    0.9227\n",
      "------------------------------\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3ed9c7bd4dd54babb305807a7c933154",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3435 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7c6bea6bdad94621b8577c0f154ba4a0",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/130 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Epoch 8/15 (210.45 sec) ---\n",
      "  Train Loss: 0.0948, Train Acc: 0.9657\n",
      "  Val Loss:   0.6218, Val Acc:  0.7894\n",
      "  Val Prec:   0.8205, Recall: 0.4609, F1: 0.5903\n",
      "  Val AUC:    0.9374\n",
      "------------------------------\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "8bbe35d457f2454cad43850f83061504",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3435 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1feb7d2975b34fa09d2e330ed70a2d04",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/130 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Epoch 9/15 (209.57 sec) ---\n",
      "  Train Loss: 0.0857, Train Acc: 0.9695\n",
      "  Val Loss:   0.8561, Val Acc:  0.7892\n",
      "  Val Prec:   0.8475, Recall: 0.4383, F1: 0.5778\n",
      "  Val AUC:    0.9388\n",
      "------------------------------\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "24b578a4a5d24aa7935939b09fb7fe04",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3435 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "9a964ba73ad442b280c76f2922583a84",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/130 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Epoch 10/15 (208.90 sec) ---\n",
      "  Train Loss: 0.0781, Train Acc: 0.9729\n",
      "  Val Loss:   1.0305, Val Acc:  0.7755\n",
      "  Val Prec:   0.9143, Recall: 0.3506, F1: 0.5069\n",
      "  Val AUC:    0.9143\n",
      "------------------------------\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f9d7bb9c22e94de4ae749e52b20c073f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3435 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0956b9a3e491452ea6dafe827266ec21",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/130 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Epoch 11/15 (209.09 sec) ---\n",
      "  Train Loss: 0.0687, Train Acc: 0.9761\n",
      "  Val Loss:   1.1868, Val Acc:  0.7519\n",
      "  Val Prec:   0.8687, Recall: 0.2900, F1: 0.4348\n",
      "  Val AUC:    0.9206\n",
      "------------------------------\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "936512b0a496496bba5096e4d0f02511",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3435 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7e47e58358f34e82abee60f869c4714f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/130 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Epoch 12/15 (209.58 sec) ---\n",
      "  Train Loss: 0.0630, Train Acc: 0.9785\n",
      "  Val Loss:   1.1253, Val Acc:  0.7498\n",
      "  Val Prec:   0.8254, Recall: 0.3039, F1: 0.4442\n",
      "  Val AUC:    0.9327\n",
      "------------------------------\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "9d15a3388e094816abf5a8155840acc6",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3435 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d65509b9139f49daa7d034a80716fb5a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/130 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Epoch 13/15 (210.10 sec) ---\n",
      "  Train Loss: 0.0590, Train Acc: 0.9796\n",
      "  Val Loss:   1.3280, Val Acc:  0.7296\n",
      "  Val Prec:   0.7773, Recall: 0.2498, F1: 0.3781\n",
      "  Val AUC:    0.9171\n",
      "------------------------------\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "cdba551d9be24a73b3a7840a7164cc9c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3435 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "5dff0ce840294b1da2bad6d4227ecf9c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/130 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Epoch 14/15 (210.49 sec) ---\n",
      "  Train Loss: 0.0546, Train Acc: 0.9813\n",
      "  Val Loss:   1.3449, Val Acc:  0.7332\n",
      "  Val Prec:   0.7659, Recall: 0.2725, F1: 0.4019\n",
      "  Val AUC:    0.9069\n",
      "------------------------------\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7824c682762f442abc2c0ef590561533",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3435 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a3cc32ffcc114e7a8d183e43cf37d2be",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/130 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Epoch 15/15 (210.76 sec) ---\n",
      "  Train Loss: 0.0523, Train Acc: 0.9820\n",
      "  Val Loss:   0.9146, Val Acc:  0.7538\n",
      "  Val Prec:   0.8142, Recall: 0.3265, F1: 0.4661\n",
      "  Val AUC:    0.9330\n",
      "------------------------------\n",
      "--- Training Finished ---\n",
      "\n",
      "--- Plotting Training History ---\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Final Evaluation on Validation Set using Best Model ---\n",
      "Loading best saved model 'best_model_bbox_ego_acc_ego_speed_ped_action_ped_look_yolop_ep1.pth'\n",
      " -> Best model loaded successfully.\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "5c55ab393bef4d58a36e9bb58ce411a2",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/130 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ecaf635c40e9415ab592961485d6bb2c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Generating CM Data:   0%|          | 0/130 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Final Performance Metrics ---\n",
      "  Streams:   bbox, ped_action, ped_look, ego_speed, ego_acc, yolop\n",
      "  Accuracy:  0.8786\n",
      "  Precision: 0.7599\n",
      "  Recall:    0.9226\n",
      "  F1 Score:  0.8334\n",
      "  AUC:       0.9702\n",
      "  Loss:      0.2466\n",
      "  (Best Validation F1 during training: 0.8334 - from model 'best_model_bbox_ego_acc_ego_speed_ped_action_ped_look_yolop_ep1.pth')\n",
      "\n",
      "--- Confusion Matrix ---\n"
     ]
    },
    {
     "data": {
      "image/png": "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MBjQr18/DBw4MMsrSERERJSbmT1mql+/fur/69Wrh1OnTuHgwYPw8/NDUFBQllaOiIiIch5n82mzaJ0pAPDx8YGPj09W1IWIiIhyIUu76vJ4LJW5YGrGjBmZPmDv3r1fuDJERESU+/DnZLRlKpiaNm1apg6mKAqDKSIiInqtZCqYSpu9R3nTpe2T+TNAlGf1/+/JnK4CUbZIehj/0s5lhReYsfbU/nmZxWOmiIiIKG9jN5+2vB4sEhEREWUrtkwRERGRJkUBrDib75kYTBEREZEmKwuDKUv2fRWwm4+IiIjIAi8UTO3cuRMffvghqlWrhn///RcA8N133+HPP//M0soRERFRzuMPHWszO5j66aefEBYWBltbWxw+fBiJiYkAgNjYWIwbNy7LK0hEREQ5K62bz5ItLzM7mPryyy8xd+5cfP3117CxsVHTQ0NDcejQoSytHBEREVFuZ/YA9OjoaNSsWTNdupOTE+7du5cVdSIiIqJchL/Np83slikPDw+cOXMmXfqff/4JX1/fLKkUERER5R5WimLxlpeZHUx17doVffr0wb59+6AoCq5evYply5ZhwIAB6NatW3bUkYiIiHKQVRZseZnZ3XxDhgyB0WhE3bp18fDhQ9SsWRN6vR4DBgxAr169sqOORERERLmW2cGUoij4/PPPMXDgQJw5cwbx8fEoU6YM8ufPnx31IyIiohzGMVPaXngFdJ1OhzJlymRlXYiIiCgXsoJl456skLejKbODqTp16mguvrV161aLKkRERET0KjE7mAoODjZ5nJycjCNHjuDvv/9GeHh4VtWLiIiIcgl282kzO5iaNm1ahukjR45EfHy8xRUiIiKi3IU/dKwty2Yrfvjhh/jmm2+y6nBEREREr4QXHoD+tD179sBgMGTV4YiIiCiXUBRYNACd3XxPadmypcljEcG1a9dw4MABDBs2LMsqRkRERLkDx0xpMzuYcnJyMnlsZWWFgIAAjB49Gg0aNMiyihERERG9CswKplJTU9GpUycEBgaiQIEC2VUnIiIiykU4AF2bWQPQra2t0aBBA9y7dy+bqkNERES5jZIF//Iys2fzlStXDufOncuOuhAREVEulNYyZcmWl5kdTH355ZcYMGAA1q9fj2vXriEuLs5kIyIiInqdZHrM1OjRo/HZZ5+hcePGAIC3337b5GdlRASKoiA1NTXra0lE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3VCtWjXY29sjPDwco0ePfvGL0MBgioiIiDS97N/m+/777zXzDQYDIiMjERkZ+cwyPj4+2Lhxo5lnfjEMpoiIiEgbf+lYEwegExEREVmALVNERESkKSd+m+9VwmCKiIiItFk4AD2Px1Ls5iMiIiKyBFumiIiISBPHn2tjMEVERETaGE1pYjcfERERkQXYMkVERESaOJtPG4MpIiIi0vSyf07mVcNuPiIiIiILsGWKiIiINHH8uTYGU0RERKSN0ZQmBlNERESkiQPQtXHMFBEREZEF2DJFREREmhRYOJsvy2qSOzGYIiIiIk0cMqWN3XxEREREFmDLFBEREWniop3aGEwRERHRc7CjTwu7+YiIiIgswJYpIiIi0sRuPm0MpoiIiEgTO/m0sZuPiIiIyAJsmSIiIiJN7ObTxmCKiIiINPG3+bQxmCIiIiJtHDSliWOmiIiIiCzAlikiIiLSxIYpbQymiIiISBMHoGtjNx8RERGRBdgyRURERJo4m08bgykiIiLSxkFTmtjNR0RERGQBtkwRERGRJjZMaWMwRURERJo4m08bu/mIiIiILMCWKSIiInoOy2bz5fWOPgZTREREpIndfNrYzUdERERkAQZTRERERBZgNx8RERFpYjefNgZTREREpIk/J6ON3XxEREREFmDLFBEREWliN582BlNERESkiT8no43dfEREREQWYMsUERERaWPTlCYGU0RERKSJs/m0sZuPiIiIyAJsmSIiIiJNnM2njcEUERERaeKQKW0MpoiIiEgboylNHDNFREREZAG2TBEREZEmzubTxmCKiIiINHEAujYGU68xEQEA3I+Ly+GaEGWfpIfxOV0FomyR9OjxvZ32WZ6d4iz8nrB0/9yOwdRr7P79+wAAv+LeOVwTIiJ6Uffv34eTk1O2HFun08HDwwMls+B7wsPDAzqdLgtqlfso8jJCWsqVjEYjrl69CgcHByh5vQ02F4iLi4O3tzcuX74MR0fHnK4OUZbjPf5yiQju378PLy8vWFll33yyhIQEJCUlWXwcnU4Hg8GQBTXKfdgy9RqzsrJCkSJFcroarx1HR0d+0VCexnv85cmuFqknGQyGPBsEZRUujUBERERkAQZTRERERBZgMEX0kuj1eowYMQJ6vT6nq0KULXiP0+uKA9CJiIiILMCWKSIiIiILMJgiIiIisgCDKSIiIiILMJgi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\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Script Complete ---\n"
     ]
    }
   ],
   "source": [
    "# --- IMPORTS ---\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import Dataset, DataLoader, Subset # Import Subset\n",
    "import xml.etree.ElementTree as ET\n",
    "import os\n",
    "import numpy as np\n",
    "from sklearn.metrics import accuracy_score, precision_recall_fscore_support, roc_auc_score, confusion_matrix, ConfusionMatrixDisplay\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from tqdm.notebook import tqdm\n",
    "import random\n",
    "import math\n",
    "import zipfile\n",
    "import cv2\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import pickle\n",
    "import time\n",
    "import sys\n",
    "import gc\n",
    "\n",
    "# --- Add PIE utilities path if necessary (adjust path) ---\n",
    "pie_utilities_path = '/kaggle/working/PIE/utilities'\n",
    "if pie_utilities_path not in sys.path:\n",
    "    sys.path.insert(0, pie_utilities_path)\n",
    "PIE = None # Declare PIE before try block\n",
    "try:\n",
    "    from pie_data import PIE\n",
    "except ImportError as e:\n",
    "    print(f\"Warning: Could not import PIE class from {pie_utilities_path}. Database must already exist. Error: {e}\")\n",
    "    # PIE remains None, handled later if needed\n",
    "\n",
    "# --- Configuration ---\n",
    "PIE_ROOT_PATH = '/kaggle/working/PIE'\n",
    "VIDEO_INPUT_DIR = '/kaggle/input'\n",
    "POSE_DATA_DIR = '/kaggle/input/pose-data/extracted_poses2'\n",
    "PIE_DATABASE_CACHE_PATH = '/kaggle/input/pie-database/pie_database.pkl'\n",
    "YOLOP_FEATURE_DIR = '/kaggle/input/yolop-data/yolop features'\n",
    "\n",
    "# --- Define ALL possible streams (used by Dataset class) ---\n",
    "ALL_POSSIBLE_STREAMS = [\n",
    "    'bbox', 'pose', 'ego_speed', 'ego_acc', 'ego_gyro',\n",
    "    'ped_action', 'ped_look', 'ped_occlusion', 'traffic_light', 'static_context',\n",
    "    'yolop'\n",
    "]\n",
    "print(f\"All possible streams: {ALL_POSSIBLE_STREAMS}\")\n",
    "\n",
    "# --- *** CHOOSE ACTIVE STREAMS FOR THIS EXPERIMENT RUN *** ---\n",
    "ACTIVE_STREAMS = [\n",
    "    'bbox',\n",
    "    'ped_action',\n",
    "    'ped_look',\n",
    "    'ego_speed',\n",
    "    'ego_acc',\n",
    "    'yolop'\n",
    "]\n",
    "print(f\"--- Running Experiment With Active Streams: {ACTIVE_STREAMS} ---\")\n",
    "# --- *** END ACTIVE STREAM SELECTION *** ---\n",
    "\n",
    "# --- Model Hyperparameters ---\n",
    "SEQ_LEN = 30\n",
    "PRED_LEN = 1\n",
    "# --- Input Sizes ---\n",
    "INPUT_SIZE_BBOX = 4\n",
    "INPUT_SIZE_POSE = 34\n",
    "INPUT_SIZE_EGO_SPEED = 1\n",
    "INPUT_SIZE_EGO_ACC = 2\n",
    "INPUT_SIZE_EGO_GYRO = 1\n",
    "INPUT_SIZE_PED_ACTION = 1\n",
    "INPUT_SIZE_PED_LOOK = 1\n",
    "INPUT_SIZE_PED_OCC = 1\n",
    "INPUT_SIZE_TL_STATE = 4\n",
    "NUM_SIGNALIZED_CATS = 4\n",
    "NUM_INTERSECTION_CATS = 5\n",
    "NUM_AGE_CATS = 4\n",
    "NUM_GENDER_CATS = 3\n",
    "NUM_TRAFFIC_DIR_CATS = 2\n",
    "LANE_CATEGORIES = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 4, 7:4, 8:4}\n",
    "NUM_LANE_CATS = len(set(LANE_CATEGORIES.values()))\n",
    "INPUT_SIZE_STATIC = NUM_SIGNALIZED_CATS + NUM_INTERSECTION_CATS + NUM_AGE_CATS + NUM_GENDER_CATS + NUM_TRAFFIC_DIR_CATS + NUM_LANE_CATS\n",
    "GRID_SIZE = 3\n",
    "INPUT_SIZE_YOLOP = GRID_SIZE**2 * 2 + 2 # 20\n",
    "\n",
    "LSTM_HIDDEN_SIZE = 256\n",
    "NUM_LSTM_LAYERS = 2\n",
    "DROPOUT_RATE = 0.3\n",
    "NUM_CLASSES = 2\n",
    "ATTENTION_DIM = 128\n",
    "\n",
    "# --- Training Hyperparameters ---\n",
    "LEARNING_RATE = 1e-4\n",
    "BATCH_SIZE = 32\n",
    "NUM_EPOCHS = 15\n",
    "DEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "print(f\"Using device: {DEVICE}\")\n",
    "\n",
    "# --- Dataset Splits ---\n",
    "TRAIN_SETS_STR = ['set01', 'set02', 'set04', 'set06']\n",
    "VAL_SETS_STR = ['set05']\n",
    "\n",
    "# --- Mappings ---\n",
    "TL_STATE_MAP = {'__undefined__': 0, 'red': 1, 'yellow': 2, 'green': 3}\n",
    "NUM_TL_STATES = len(TL_STATE_MAP)\n",
    "SIGNALIZED_MAP = {'n/a': 0, 'C': 1, 'S': 2, 'CS': 3}\n",
    "INTERSECTION_MAP = {'midblock': 0, 'T': 1, 'T-left': 2, 'T-right': 3, 'four-way': 4}\n",
    "AGE_MAP = {'child': 0, 'young': 1, 'adult': 2, 'senior': 3}\n",
    "GENDER_MAP = {'n/a': 0, 'female': 1, 'male': 2}\n",
    "TRAFFIC_DIR_MAP = {'OW': 0, 'TW': 1}\n",
    "\n",
    "# --- Output Files (for intermediate balanced data/scalers) ---\n",
    "BALANCED_DATA_PKL_PATH = \"/kaggle/working/balanced_train_data_with_yolop.pkl\"\n",
    "SCALERS_PKL_PATH = \"/kaggle/working/scalers.pkl\"\n",
    "\n",
    "# --- Helper: One-Hot Encoding ---\n",
    "def to_one_hot(index, num_classes):\n",
    "    vec = np.zeros(num_classes, dtype=np.float32)\n",
    "    safe_index = int(np.clip(index, 0, num_classes - 1))\n",
    "    vec[safe_index] = 1.0\n",
    "    return vec\n",
    "\n",
    "# --- Balancing Function ---\n",
    "def balance_samples_count(seq_data, label_type, random_seed=42):\n",
    "    print('---------------------------------------------------------')\n",
    "    print(f\"Balancing samples based on '{label_type}' key\")\n",
    "    if label_type not in seq_data: raise KeyError(f\"Label type '{label_type}' not found.\")\n",
    "\n",
    "    gt_labels = [] # Initialize before try block\n",
    "    try:\n",
    "        gt_labels = [lbl[0] for lbl in seq_data[label_type]]\n",
    "    except (IndexError, TypeError) as e:\n",
    "        raise ValueError(f\"Labels under '{label_type}' not in expected format [[label_val]]. Original error: {e}\") from e\n",
    "\n",
    "    if not gt_labels: # Check if gt_labels was successfully populated\n",
    "        print(f\"Warning: No valid labels found under key '{label_type}'. Cannot balance.\")\n",
    "        return seq_data.copy() # Return original data if labels are missing/malformed\n",
    "\n",
    "    if not all(isinstance(l, (int, float)) and l in [0, 1] for l in gt_labels):\n",
    "        print(f\"Warning: Labels for balancing contain values other than 0 or 1 or are not numeric.\")\n",
    "        # Decide how to handle non 0/1 labels if necessary, here we proceed assuming they exist\n",
    "\n",
    "    num_pos_samples = np.count_nonzero(np.array(gt_labels)); num_neg_samples = len(gt_labels) - num_pos_samples\n",
    "    new_seq_data = {}\n",
    "    if num_neg_samples == num_pos_samples:\n",
    "        print('Samples already balanced.'); return seq_data.copy()\n",
    "    else:\n",
    "        print(f'Unbalanced: Positive (1): {num_pos_samples} | Negative (0): {num_neg_samples}')\n",
    "        majority_label = 0 if num_neg_samples > num_pos_samples else 1\n",
    "        minority_count = min(num_neg_samples, num_pos_samples); print(f\"Undersampling majority class ({majority_label}) to match count ({minority_count}).\")\n",
    "        majority_indices = np.where(np.array(gt_labels) == majority_label)[0]; minority_indices = np.where(np.array(gt_labels) != majority_label)[0]\n",
    "        np.random.seed(random_seed); keep_majority_indices = np.random.choice(majority_indices, size=minority_count, replace=False)\n",
    "        final_indices = np.concatenate((minority_indices, keep_majority_indices)); np.random.shuffle(final_indices)\n",
    "\n",
    "        for k, v_list in seq_data.items():\n",
    "            if isinstance(v_list, list) and len(v_list) == len(gt_labels):\n",
    "                 try:\n",
    "                     # Check if list contains numpy arrays before converting the whole list\n",
    "                     if v_list and isinstance(v_list[0], np.ndarray):\n",
    "                         # Ensure all elements are arrays of compatible shape if needed,\n",
    "                         # or handle potential errors during conversion\n",
    "                         try:\n",
    "                             v_array = np.array(v_list) # This might fail if arrays have different shapes\n",
    "                             new_seq_data[k] = list(v_array[final_indices])\n",
    "                         except ValueError as ve:\n",
    "                             print(f\"Warning: Could not convert list for key '{k}' to single NumPy array due to varying shapes/types. Processing element-wise. Error: {ve}\")\n",
    "                             # Fallback to list comprehension if conversion fails\n",
    "                             new_seq_data[k] = [v_list[i] for i in final_indices]\n",
    "                     else:\n",
    "                         # Simple list comprehension for non-array lists\n",
    "                         new_seq_data[k] = [v_list[i] for i in final_indices]\n",
    "                 except Exception as e:\n",
    "                     # Catch any other unexpected errors during processing\n",
    "                     print(f\"Error processing key '{k}' during balancing: {e}. Assigning empty list.\")\n",
    "                     new_seq_data[k] = []\n",
    "            else:\n",
    "                 # Keep lists that don't match the label length (e.g., metadata)\n",
    "                 print(f\"Warn: Skipping key '{k}' in balancing (length mismatch or not a list).\")\n",
    "                 new_seq_data[k] = v_list # Keep original\n",
    "\n",
    "        if label_type in new_seq_data:\n",
    "            # Recalculate counts from the balanced data\n",
    "            new_gt_labels = []\n",
    "            try:\n",
    "                new_gt_labels = [lbl[0] for lbl in new_seq_data[label_type]]\n",
    "                final_pos = np.count_nonzero(np.array(new_gt_labels)); final_neg = len(new_gt_labels) - final_pos;\n",
    "                print(f'Balanced:   Positive (1): {final_pos} | Negative (0): {final_neg}')\n",
    "            except (IndexError, TypeError, ValueError) as e:\n",
    "                 print(f\"Error verifying balanced labels for key '{label_type}': {e}\")\n",
    "        else:\n",
    "            print(\"Error: Label key lost during balancing process.\")\n",
    "        print('---------------------------------------------------------')\n",
    "        return new_seq_data\n",
    "\n",
    "# --- Dataset Class ---\n",
    "class PIEDataset(Dataset):\n",
    "    def __init__(self, pie_database, set_names, pose_data_dir, yolop_data_dir, seq_len, pred_len, scalers=None, streams_to_generate=None):\n",
    "        self.pie_db = pie_database; self.set_names = set_names; self.pose_data_dir = pose_data_dir; self.yolop_data_dir = yolop_data_dir\n",
    "        self.seq_len = seq_len; self.pred_len = pred_len; self.scalers = scalers or {};\n",
    "        self.streams_to_generate = streams_to_generate or ALL_POSSIBLE_STREAMS\n",
    "        self.sequences = []; self.all_pose_data = {}; self.all_yolop_data = {}\n",
    "        self._input_sizes_for_error = self._get_input_sizes_dict()\n",
    "        if 'pose' in self.streams_to_generate: self._load_pose_data()\n",
    "        if 'yolop' in self.streams_to_generate: self._load_yolop_data()\n",
    "        self._generate_sequence_list()\n",
    "        if not self.sequences: raise ValueError(f\"Dataset init failed: No sequences generated for sets {self.set_names}\")\n",
    "\n",
    "    def _get_input_sizes_dict(self):\n",
    "        input_sizes = {}; special_cases = {'TRAFFIC_LIGHT': 'TL_STATE', 'STATIC_CONTEXT': 'STATIC', 'EGO_SPEED': 'EGO_SPEED', 'EGO_ACC': 'EGO_ACC', 'EGO_GYRO': 'EGO_GYRO', 'PED_ACTION': 'PED_ACTION', 'PED_LOOK': 'PED_LOOK', 'PED_OCCLUSION': 'PED_OCC', 'YOLOP':'YOLOP'}\n",
    "        for stream in ALL_POSSIBLE_STREAMS:\n",
    "            size_constant_name = f'INPUT_SIZE_{stream.upper()}'; stream_upper_key = stream.upper(); suffix = special_cases.get(stream_upper_key)\n",
    "            if suffix: size_constant_name = f'INPUT_SIZE_{suffix}'\n",
    "            elif stream == 'bbox': size_constant_name = 'INPUT_SIZE_BBOX'\n",
    "            elif stream == 'pose': size_constant_name = 'INPUT_SIZE_POSE'\n",
    "            if size_constant_name in globals(): input_sizes[stream] = globals()[size_constant_name]\n",
    "            else: input_sizes[stream] = 1 # Default size if constant not found\n",
    "        return input_sizes\n",
    "\n",
    "    def _load_pose_data(self):\n",
    "        print(f\"\\nLoading pose data for sets: {self.set_names} from {self.pose_data_dir}\"); sets_loaded_count = 0\n",
    "        for set_id in self.set_names:\n",
    "            self.all_pose_data[set_id] = {}; pose_set_path = os.path.join(self.pose_data_dir, set_id)\n",
    "            if not os.path.isdir(pose_set_path):\n",
    "                # print(f\"Warning: Pose directory not found for set {set_id}: {pose_set_path}\") # Optional warning\n",
    "                continue\n",
    "            pkl_files_in_set = [f for f in os.listdir(pose_set_path) if f.startswith(f\"{set_id}_\") and f.endswith(\"_poses.pkl\")];\n",
    "            if not pkl_files_in_set:\n",
    "                # print(f\"Warning: No pose pkl files found in {pose_set_path}\") # Optional warning\n",
    "                continue;\n",
    "            loaded_video_count = 0\n",
    "            for pkl_filename in pkl_files_in_set:\n",
    "                pkl_file_path = os.path.join(pose_set_path, pkl_filename);\n",
    "                try:\n",
    "                    with open(pkl_file_path, 'rb') as f: loaded_pkl_content = pickle.load(f)\n",
    "                    if not isinstance(loaded_pkl_content, dict) or len(loaded_pkl_content) != 1:\n",
    "                         print(f\"Warning: Unexpected format in pose PKL {pkl_file_path}. Skipping.\")\n",
    "                         continue\n",
    "                    unique_video_key, video_data = list(loaded_pkl_content.items())[0]; video_id = \"_\".join(unique_video_key.split('_')[1:])\n",
    "                    # Check if this video is actually in our PIE database for this set\n",
    "                    if set_id in self.pie_db and video_id in self.pie_db[set_id]:\n",
    "                         self.all_pose_data[set_id][video_id] = video_data; loaded_video_count += 1\n",
    "                    # else: # Optional: Warn if pose data exists but video isn't in DB\n",
    "                    #    print(f\"Debug: Pose data found for {set_id}/{video_id} but video not in main pie_db. Skipping.\")\n",
    "                except FileNotFoundError:\n",
    "                    # This specific error is less likely now due to os.listdir, but keep for robustness\n",
    "                    print(f\"Warning: Pose file not found during loading (should not happen after listdir): {pkl_file_path}\")\n",
    "                except pickle.UnpicklingError as pe:\n",
    "                     print(f\"Error unpickling pose file {pkl_file_path}: {pe}. Skipping.\")\n",
    "                except Exception as e:\n",
    "                     print(f\"Error loading or processing pose PKL {pkl_file_path}: {e}\")\n",
    "            if loaded_video_count > 0: sets_loaded_count += 1\n",
    "        print(f\"Finished loading pose data for {sets_loaded_count} relevant sets.\")\n",
    "\n",
    "    def _load_yolop_data(self):\n",
    "        print(f\"\\nLoading YOLOP data for sets: {self.set_names} from {self.yolop_data_dir}\"); sets_loaded_count = 0\n",
    "        for set_id in self.set_names: self.all_yolop_data[set_id] = {} # Initialize dict for each set\n",
    "\n",
    "        if not os.path.isdir(self.yolop_data_dir):\n",
    "            print(f\"Error: YOLOP feature directory not found: {self.yolop_data_dir}\"); return\n",
    "\n",
    "        all_pkl_files = [] # Initialize before try block\n",
    "        try:\n",
    "            all_pkl_files = [f for f in os.listdir(self.yolop_data_dir) if f.endswith(\"_yolop_features.pkl\")]\n",
    "        except FileNotFoundError: # More specific than general Exception\n",
    "             print(f\"Error: YOLOP feature directory not found when listing files: {self.yolop_data_dir}\"); return\n",
    "        except PermissionError:\n",
    "             print(f\"Error: Permission denied when listing files in YOLOP directory {self.yolop_data_dir}\"); return\n",
    "        except Exception as e:\n",
    "             print(f\"Error listing files in YOLOP directory {self.yolop_data_dir}: {e}\"); return\n",
    "\n",
    "        if not all_pkl_files: print(f\"Warning: No '*_yolop_features.pkl' files found directly in {self.yolop_data_dir}\")\n",
    "\n",
    "        loaded_file_count = 0; files_for_needed_sets = 0\n",
    "        for pkl_filename in tqdm(all_pkl_files, desc=\"Loading YOLOP PKLs\"):\n",
    "            set_id_from_file = None # Initialize before try\n",
    "            video_id = None # Initialize before try\n",
    "            try:\n",
    "                parts = pkl_filename.replace(\"_yolop_features.pkl\", \"\").split('_');\n",
    "                if len(parts) < 2: # Need at least setX_videoY\n",
    "                     raise IndexError(\"Filename does not contain enough parts for set and video ID.\")\n",
    "                set_id_from_file = parts[0]; video_id = \"_\".join(parts[1:])\n",
    "            except IndexError as e: # Catch specific error\n",
    "                print(f\"Warning: Could not parse set/video ID from filename '{pkl_filename}': {e}. Skipping.\"); continue\n",
    "\n",
    "            if set_id_from_file in self.set_names:\n",
    "                files_for_needed_sets += 1; pkl_file_path = os.path.join(self.yolop_data_dir, pkl_filename)\n",
    "                try:\n",
    "                    with open(pkl_file_path, 'rb') as f: loaded_pkl_content = pickle.load(f)\n",
    "                    # Basic validation of loaded content structure\n",
    "                    if not isinstance(loaded_pkl_content, dict) or len(loaded_pkl_content) != 1:\n",
    "                        print(f\"Warn: PKL {pkl_filename} has unexpected format (expected dict with 1 item). Skip.\"); continue\n",
    "                    unique_video_key, video_data = list(loaded_pkl_content.items())[0]\n",
    "                    # Key doesn't strictly need to match video_id if format is {internal_key: data}\n",
    "                    # Ensure the set_id exists in the outer dictionary\n",
    "                    if set_id_from_file not in self.all_yolop_data:\n",
    "                        self.all_yolop_data[set_id_from_file] = {}\n",
    "                    self.all_yolop_data[set_id_from_file][video_id] = video_data; loaded_file_count += 1\n",
    "                except FileNotFoundError:\n",
    "                    print(f\"Warn: YOLOP feature file not found during loading: {pkl_file_path}\")\n",
    "                except pickle.UnpicklingError as pe:\n",
    "                     print(f\"Error unpickling YOLOP file {pkl_file_path}: {pe}. Skipping.\")\n",
    "                except Exception as e:\n",
    "                    print(f\"Error loading or processing YOLOP PKL {pkl_file_path}: {e}\")\n",
    "\n",
    "        print(f\"Finished loading YOLOP data. Found {loaded_file_count} relevant files out of {files_for_needed_sets} possible for sets {self.set_names}.\")\n",
    "        if loaded_file_count > 0:\n",
    "            actual_sets_loaded = sum(1 for s in self.set_names if s in self.all_yolop_data and self.all_yolop_data[s])\n",
    "            print(f\"Data successfully loaded for {actual_sets_loaded} sets.\")\n",
    "\n",
    "    def _generate_sequence_list(self):\n",
    "        sequence_count = 0; ped_count = 0\n",
    "        for set_id in tqdm(self.set_names, desc=f\"Generating Sequences for {self.set_names}\"):\n",
    "            if set_id not in self.pie_db: continue\n",
    "            for video_id, video_data in self.pie_db[set_id].items():\n",
    "                if 'ped_annotations' not in video_data: continue\n",
    "                for ped_id, ped_data in video_data['ped_annotations'].items():\n",
    "                    ped_count += 1;\n",
    "                    if 'frames' not in ped_data or not isinstance(ped_data['frames'], list) or len(ped_data['frames']) < self.seq_len + self.pred_len: continue\n",
    "                    # Ensure frames are sorted and integers\n",
    "                    try:\n",
    "                        sorted_frames = sorted([int(f) for f in ped_data['frames']])\n",
    "                    except (ValueError, TypeError):\n",
    "                        print(f\"Warning: Non-integer or unsortable frame numbers for {set_id}/{video_id}/{ped_id}. Skipping ped.\")\n",
    "                        continue\n",
    "\n",
    "                    for i in range(len(sorted_frames) - self.seq_len - self.pred_len + 1):\n",
    "                        start_frame = sorted_frames[i]; end_frame_observe = sorted_frames[i + self.seq_len - 1]\n",
    "                        # Check for frame continuity in observation window\n",
    "                        if end_frame_observe - start_frame != self.seq_len - 1: continue\n",
    "\n",
    "                        target_frame_actual_idx = i + self.seq_len + self.pred_len - 1\n",
    "                        # Check index bounds (already implicitly handled by range end, but explicit check is fine)\n",
    "                        if target_frame_actual_idx >= len(sorted_frames): continue\n",
    "                        target_frame = sorted_frames[target_frame_actual_idx]\n",
    "\n",
    "                        # Check for frame continuity up to target frame\n",
    "                        if target_frame - end_frame_observe != self.pred_len: continue\n",
    "\n",
    "                        self.sequences.append((set_id, video_id, ped_id, start_frame)); sequence_count += 1\n",
    "        print(f\"Dataset initialized with {sequence_count} sequences from {ped_count} pedestrians for sets {self.set_names}.\")\n",
    "\n",
    "    def __len__(self): return len(self.sequences)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        set_id, video_id, ped_id, start_frame = self.sequences[idx];\n",
    "        frame_nums = list(range(start_frame, start_frame + self.seq_len));\n",
    "        target_frame_num = start_frame + self.seq_len + self.pred_len - 1\n",
    "\n",
    "        # Safely access nested dictionary structure\n",
    "        video_db = self.pie_db.get(set_id, {}).get(video_id, {});\n",
    "        ped_db = video_db.get('ped_annotations', {}).get(ped_id, {});\n",
    "        ego_db = video_db.get('vehicle_annotations', {});\n",
    "        traffic_db = video_db.get('traffic_annotations', {});\n",
    "        ped_attributes = ped_db.get('attributes', {})\n",
    "\n",
    "        feature_sequences = {stream: [] for stream in self.streams_to_generate};\n",
    "        label = 0 # Default label\n",
    "\n",
    "        # --- Safely Extract Label ---\n",
    "        target_frame_db_idx = -1 # Initialize before try\n",
    "        if 'frames' in ped_db and isinstance(ped_db['frames'], list) and \\\n",
    "           'behavior' in ped_db and isinstance(ped_db['behavior'], dict) and \\\n",
    "           'cross' in ped_db['behavior'] and isinstance(ped_db['behavior']['cross'], list):\n",
    "            try:\n",
    "                # Ensure target_frame_num is comparable to elements in ped_db['frames']\n",
    "                target_frame_num_comp = int(target_frame_num) # Or str if frames are strings\n",
    "                target_frame_db_idx = ped_db['frames'].index(target_frame_num_comp)\n",
    "                if target_frame_db_idx < len(ped_db['behavior']['cross']):\n",
    "                    label_val = ped_db['behavior']['cross'][target_frame_db_idx];\n",
    "                    # Handle potential non-integer labels or placeholder -1\n",
    "                    if isinstance(label_val, (int, float)) and label_val == 1:\n",
    "                        label = 1\n",
    "                    else:\n",
    "                        label = 0 # Treat -1 or other values as 0 (not crossing)\n",
    "                # else: label remains 0 if index out of bounds for 'cross' list\n",
    "            except (ValueError, TypeError, IndexError) as e:\n",
    "                 # ValueError if target_frame_num not in list\n",
    "                 # TypeError if list contains non-comparable types\n",
    "                 # IndexError if list is empty or other issues (less likely here)\n",
    "                 # print(f\"Debug: Label not found for idx {idx}, frame {target_frame_num}. Error: {e}\") # Optional debug\n",
    "                 label = 0 # Keep default label if lookup fails\n",
    "\n",
    "        # --- Extract Static Context ---\n",
    "        static_vec = None # Initialize before conditional block\n",
    "        if 'static_context' in self.streams_to_generate:\n",
    "            # Use .get with defaults for safety\n",
    "            sig_idx = SIGNALIZED_MAP.get(ped_attributes.get('signalized', 'n/a'), 0)\n",
    "            int_idx = INTERSECTION_MAP.get(ped_attributes.get('intersection', 'midblock'), 0)\n",
    "            age_idx = AGE_MAP.get(ped_attributes.get('age', 'adult'), 2)\n",
    "            gen_idx = GENDER_MAP.get(ped_attributes.get('gender', 'n/a'), 0)\n",
    "            td_val = ped_attributes.get('traffic_direction', 'OW')\n",
    "            td_idx = TRAFFIC_DIR_MAP.get(td_val, 0)\n",
    "            nl_val = ped_attributes.get('num_lanes', 2)\n",
    "            # Ensure nl_val is usable as a key or default\n",
    "            nl_cat_idx = LANE_CATEGORIES.get(int(nl_val), LANE_CATEGORIES[max(LANE_CATEGORIES.keys())]) if isinstance(nl_val, (int, str)) and str(nl_val).isdigit() else LANE_CATEGORIES[max(LANE_CATEGORIES.keys())]\n",
    "\n",
    "            try:\n",
    "                static_features_list = [\n",
    "                    to_one_hot(sig_idx, NUM_SIGNALIZED_CATS), to_one_hot(int_idx, NUM_INTERSECTION_CATS),\n",
    "                    to_one_hot(age_idx, NUM_AGE_CATS), to_one_hot(gen_idx, NUM_GENDER_CATS),\n",
    "                    to_one_hot(td_idx, NUM_TRAFFIC_DIR_CATS), to_one_hot(nl_cat_idx, NUM_LANE_CATS)\n",
    "                ]\n",
    "                static_vec = np.concatenate(static_features_list)\n",
    "                if static_vec.shape[0] != INPUT_SIZE_STATIC:\n",
    "                    print(f\"Warning: Static vector size mismatch for idx {idx}. Expected {INPUT_SIZE_STATIC}, got {static_vec.shape[0]}. Using zeros.\")\n",
    "                    static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "            except Exception as e:\n",
    "                 print(f\"Error creating static context vector for idx {idx}: {e}. Using zeros.\")\n",
    "                 static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "\n",
    "\n",
    "        # --- Extract Sequential Features ---\n",
    "        for frame_num in frame_nums:\n",
    "            frame_db_idx = -1 # Default index if frame not found for ped\n",
    "            if 'frames' in ped_db and isinstance(ped_db['frames'], list):\n",
    "                 try:\n",
    "                     frame_num_comp = int(frame_num) # Or str if frames are strings\n",
    "                     frame_db_idx = ped_db['frames'].index(frame_num_comp)\n",
    "                 except (ValueError, TypeError):\n",
    "                     pass # Keep frame_db_idx as -1 if frame not found or type mismatch\n",
    "\n",
    "            ego_frame_data = ego_db.get(frame_num, {}) # Use .get for safety\n",
    "\n",
    "            # --- Bbox ---\n",
    "            if 'bbox' in self.streams_to_generate:\n",
    "                bbox_norm = np.zeros(INPUT_SIZE_BBOX, dtype=np.float32); # Default\n",
    "                if frame_db_idx != -1 and 'bbox' in ped_db and isinstance(ped_db['bbox'], list) and len(ped_db['bbox']) > frame_db_idx:\n",
    "                     try:\n",
    "                         bbox_coords = ped_db['bbox'][frame_db_idx]\n",
    "                         # Check if bbox_coords is a valid list/tuple of 4 numbers\n",
    "                         if isinstance(bbox_coords, (list, tuple)) and len(bbox_coords) == 4 and all(isinstance(n, (int, float)) for n in bbox_coords):\n",
    "                             x1, y1, x2, y2 = bbox_coords\n",
    "                             img_w = video_db.get('width', 1920); img_h = video_db.get('height', 1080)\n",
    "                             # Ensure width/height are valid numbers > 0\n",
    "                             if isinstance(img_w, (int, float)) and img_w > 0 and isinstance(img_h, (int, float)) and img_h > 0:\n",
    "                                 cx = ((x1 + x2) / 2) / img_w; cy = ((y1 + y2) / 2) / img_h;\n",
    "                                 w = (x2 - x1) / img_w; h = (y2 - y1) / img_h;\n",
    "                                 # Basic validation of normalized coordinates\n",
    "                                 if w>0 and h>0 and 0<=cx<=1 and 0<=cy<=1:\n",
    "                                     bbox_norm = np.array([cx, cy, w, h], dtype=np.float32)\n",
    "                                 # else: print(f\"Debug: Invalid normalized bbox values idx {idx} frame {frame_num}\") # Optional debug\n",
    "                         # else: print(f\"Debug: Invalid bbox data format idx {idx} frame {frame_num}\") # Optional debug\n",
    "                     except (TypeError, ValueError, ZeroDivisionError) as e: # Catch specific errors\n",
    "                          # TypeError if coords are not numbers, ValueError if unpacking fails (less likely with check)\n",
    "                          # ZeroDivisionError if img_w/h is 0\n",
    "                          print(f\"Warn: Error processing bbox idx {idx} frame {frame_num}: {e}. Using zeros.\")\n",
    "                          bbox_norm = np.zeros(INPUT_SIZE_BBOX, dtype=np.float32) # Ensure default on error\n",
    "                     except Exception as e: # Catch any other unexpected error\n",
    "                          print(f\"Warn: Unexpected error processing bbox idx {idx} frame {frame_num}: {e}. Using zeros.\")\n",
    "                          bbox_norm = np.zeros(INPUT_SIZE_BBOX, dtype=np.float32)\n",
    "                feature_sequences['bbox'].append(bbox_norm)\n",
    "\n",
    "            # --- Pose ---\n",
    "            if 'pose' in self.streams_to_generate:\n",
    "                pose_vector = np.zeros(INPUT_SIZE_POSE, dtype=np.float32); # Default\n",
    "                # Safely access nested pose data structure\n",
    "                vid_pose_data = self.all_pose_data.get(set_id, {}).get(video_id, {});\n",
    "                frame_pose_data = vid_pose_data.get(frame_num, {});\n",
    "                loaded_pose = frame_pose_data.get(ped_id)\n",
    "                if loaded_pose is not None and isinstance(loaded_pose, np.ndarray) and loaded_pose.shape == (INPUT_SIZE_POSE,):\n",
    "                    pose_vector = loaded_pose # Use loaded data if valid\n",
    "                feature_sequences['pose'].append(pose_vector)\n",
    "\n",
    "            # --- Ego Speed ---\n",
    "            if 'ego_speed' in self.streams_to_generate:\n",
    "                speed = 0.0 # Default\n",
    "                try:\n",
    "                    obd_speed = ego_frame_data.get('OBD_speed')\n",
    "                    gps_speed = ego_frame_data.get('GPS_speed')\n",
    "                    # Prioritize OBD, fallback to GPS, ensure numeric\n",
    "                    if isinstance(obd_speed, (int, float)) and obd_speed > 0: # Often 0 means unavailable\n",
    "                        speed = float(obd_speed)\n",
    "                    elif isinstance(gps_speed, (int, float)):\n",
    "                        speed = float(gps_speed)\n",
    "                    # Apply scaling safely\n",
    "                    mean = self.scalers.get('ego_speed_mean', 0.0)\n",
    "                    std = self.scalers.get('ego_speed_std', 1.0)\n",
    "                    speed_scaled = (speed - mean) / std if std != 0 else 0.0\n",
    "                except Exception as e:\n",
    "                     print(f\"Warn: Error processing ego_speed idx {idx} frame {frame_num}: {e}. Using 0.\")\n",
    "                     speed_scaled = 0.0\n",
    "                feature_sequences['ego_speed'].append([speed_scaled])\n",
    "\n",
    "            # --- Ego Acc ---\n",
    "            if 'ego_acc' in self.streams_to_generate:\n",
    "                accX_scaled, accY_scaled = 0.0, 0.0 # Defaults\n",
    "                try:\n",
    "                    accX = float(ego_frame_data.get('accX', 0.0)) # Ensure float\n",
    "                    accY = float(ego_frame_data.get('accY', 0.0)) # Ensure float\n",
    "                    accX_mean = self.scalers.get('accX_mean', 0.0); accX_std = self.scalers.get('accX_std', 1.0)\n",
    "                    accY_mean = self.scalers.get('accY_mean', 0.0); accY_std = self.scalers.get('accY_std', 1.0)\n",
    "                    accX_scaled = (accX - accX_mean) / accX_std if accX_std != 0 else 0.0\n",
    "                    accY_scaled = (accY - accY_mean) / accY_std if accY_std != 0 else 0.0\n",
    "                except Exception as e:\n",
    "                    print(f\"Warn: Error processing ego_acc idx {idx} frame {frame_num}: {e}. Using 0,0.\")\n",
    "                    accX_scaled, accY_scaled = 0.0, 0.0\n",
    "                feature_sequences['ego_acc'].append([accX_scaled, accY_scaled])\n",
    "\n",
    "            # --- Ego Gyro ---\n",
    "            if 'ego_gyro' in self.streams_to_generate:\n",
    "                gyroZ_scaled = 0.0 # Default\n",
    "                try:\n",
    "                    gyroZ = float(ego_frame_data.get('gyroZ', 0.0)) # Ensure float\n",
    "                    mean = self.scalers.get('gyroZ_mean', 0.0); std = self.scalers.get('gyroZ_std', 1.0)\n",
    "                    gyroZ_scaled = (gyroZ - mean) / std if std != 0 else 0.0\n",
    "                except Exception as e:\n",
    "                     print(f\"Warn: Error processing ego_gyro idx {idx} frame {frame_num}: {e}. Using 0.\")\n",
    "                     gyroZ_scaled = 0.0\n",
    "                feature_sequences['ego_gyro'].append([gyroZ_scaled])\n",
    "\n",
    "            # --- Ped Action ---\n",
    "            if 'ped_action' in self.streams_to_generate:\n",
    "                action = 0.0 # Default\n",
    "                if frame_db_idx != -1 and 'behavior' in ped_db and isinstance(ped_db['behavior'], dict) and \\\n",
    "                   'action' in ped_db['behavior'] and isinstance(ped_db['behavior']['action'], list) and \\\n",
    "                   len(ped_db['behavior']['action']) > frame_db_idx:\n",
    "                   try:\n",
    "                       action_val = ped_db['behavior']['action'][frame_db_idx]\n",
    "                       action = float(action_val) # Convert to float, handle potential errors\n",
    "                   except (ValueError, TypeError) as e:\n",
    "                       print(f\"Warn: Invalid ped_action value idx {idx} frame {frame_num}: {action_val}. Error: {e}. Using 0.\")\n",
    "                       action = 0.0\n",
    "                feature_sequences['ped_action'].append([action])\n",
    "\n",
    "            # --- Ped Look ---\n",
    "            if 'ped_look' in self.streams_to_generate:\n",
    "                look = 0.0 # Default\n",
    "                if frame_db_idx != -1 and 'behavior' in ped_db and isinstance(ped_db['behavior'], dict) and \\\n",
    "                   'look' in ped_db['behavior'] and isinstance(ped_db['behavior']['look'], list) and \\\n",
    "                   len(ped_db['behavior']['look']) > frame_db_idx:\n",
    "                   try:\n",
    "                       look_val = ped_db['behavior']['look'][frame_db_idx]\n",
    "                       look = float(look_val) # Convert to float\n",
    "                   except (ValueError, TypeError) as e:\n",
    "                       print(f\"Warn: Invalid ped_look value idx {idx} frame {frame_num}: {look_val}. Error: {e}. Using 0.\")\n",
    "                       look = 0.0\n",
    "                feature_sequences['ped_look'].append([look])\n",
    "\n",
    "            # --- Ped Occlusion ---\n",
    "            if 'ped_occlusion' in self.streams_to_generate:\n",
    "                occ = 0.0; # Default (no occlusion)\n",
    "                if frame_db_idx != -1 and 'occlusion' in ped_db and isinstance(ped_db['occlusion'], list) and \\\n",
    "                   len(ped_db['occlusion']) > frame_db_idx:\n",
    "                   try:\n",
    "                       occ_val = ped_db['occlusion'][frame_db_idx];\n",
    "                       # Assuming occlusion is 0, 1, 2 -> map to 0.0, 0.5, 1.0\n",
    "                       occ = float(occ_val) / 2.0 if isinstance(occ_val, (int, float)) else 0.0\n",
    "                   except (ValueError, TypeError) as e:\n",
    "                        print(f\"Warn: Invalid ped_occlusion value idx {idx} frame {frame_num}: {occ_val}. Error: {e}. Using 0.\")\n",
    "                        occ = 0.0\n",
    "                feature_sequences['ped_occlusion'].append([occ])\n",
    "\n",
    "            # --- Traffic Light ---\n",
    "            if 'traffic_light' in self.streams_to_generate:\n",
    "                state_int = 0 # Default state (__undefined__)\n",
    "                if isinstance(traffic_db, dict): # Check traffic_db is a dict\n",
    "                    for obj_id, obj_data in traffic_db.items():\n",
    "                         if isinstance(obj_data, dict) and obj_data.get('obj_class') == 'traffic_light' and \\\n",
    "                            'frames' in obj_data and isinstance(obj_data['frames'], list) and \\\n",
    "                            'state' in obj_data and isinstance(obj_data['state'], list):\n",
    "                              try:\n",
    "                                  frame_num_comp = int(frame_num) # Ensure comparable type\n",
    "                                  tl_frame_idx = obj_data['frames'].index(frame_num_comp);\n",
    "                                  if tl_frame_idx < len(obj_data['state']):\n",
    "                                      state_val = obj_data['state'][tl_frame_idx];\n",
    "                                      # Use the state if it's defined (non-zero)\n",
    "                                      if state_val in TL_STATE_MAP and state_val != 0:\n",
    "                                          state_int = TL_STATE_MAP[state_val] if isinstance(state_val, str) else int(state_val) # Handle both str/int keys if needed\n",
    "                                          break # Found relevant TL state for this frame\n",
    "                              except (ValueError, TypeError, IndexError):\n",
    "                                  continue # Frame not found for this TL or other error, check next TL\n",
    "                feature_sequences['traffic_light'].append(to_one_hot(state_int, NUM_TL_STATES))\n",
    "\n",
    "            # --- Static Context (Append per frame) ---\n",
    "            if 'static_context' in self.streams_to_generate:\n",
    "                # Use the static_vec calculated once outside the loop\n",
    "                feature_sequences['static_context'].append(static_vec if static_vec is not None else np.zeros(INPUT_SIZE_STATIC, dtype=np.float32))\n",
    "\n",
    "            # --- YOLOP Feature Extraction Logic ---\n",
    "            if 'yolop' in self.streams_to_generate:\n",
    "                yolop_vector = np.zeros(INPUT_SIZE_YOLOP, dtype=np.float32) # Default zeros\n",
    "                # Safely access nested yolop data\n",
    "                if set_id in self.all_yolop_data and video_id in self.all_yolop_data[set_id]:\n",
    "                    frame_yolop_data = self.all_yolop_data[set_id][video_id].get(frame_num, {})\n",
    "                    loaded_yolop = frame_yolop_data.get(ped_id)\n",
    "                    # Validate loaded data\n",
    "                    if loaded_yolop is not None and isinstance(loaded_yolop, np.ndarray) and loaded_yolop.shape == (INPUT_SIZE_YOLOP,):\n",
    "                        yolop_vector = loaded_yolop\n",
    "                feature_sequences['yolop'].append(yolop_vector)\n",
    "\n",
    "        # --- Convert sequences to Tensors ---\n",
    "        features = {};\n",
    "        try:\n",
    "            for stream_name in self.streams_to_generate:\n",
    "                 if stream_name in feature_sequences:\n",
    "                      # Convert list of numpy arrays/scalars to a single numpy array before tensor conversion\n",
    "                      np_array_feature = np.array(feature_sequences[stream_name], dtype=np.float32)\n",
    "                      # Check shape consistency (optional but good)\n",
    "                      expected_shape = (self.seq_len, self._input_sizes_for_error.get(stream_name, 1))\n",
    "                      if np_array_feature.shape != expected_shape:\n",
    "                           # Handle shape mismatch: print warning, pad/truncate, or raise error\n",
    "                           # Here, we'll print a warning and try to use it anyway if the first dim matches\n",
    "                           print(f\"Warning: Feature shape mismatch for '{stream_name}' idx {idx}. Expected {expected_shape}, got {np_array_feature.shape}. Trying to proceed.\")\n",
    "                           if np_array_feature.shape[0] != self.seq_len:\n",
    "                               # If sequence length is wrong, this is critical, create zeros\n",
    "                               print(f\"Error: Critical shape mismatch (sequence length) for '{stream_name}' idx {idx}. Using zeros.\")\n",
    "                               features[stream_name] = torch.zeros(expected_shape, dtype=torch.float32)\n",
    "                           else:\n",
    "                               # If only feature dim mismatches, maybe adaptable? Or force zeros?\n",
    "                               print(f\"Warning: Feature dimension mismatch for '{stream_name}' idx {idx}. Using zeros.\")\n",
    "                               features[stream_name] = torch.zeros(expected_shape, dtype=torch.float32)\n",
    "                               # Or try reshaping if possible? features[stream_name] = torch.tensor(np_array_feature.reshape(expected_shape), dtype=torch.float32)\n",
    "                      else:\n",
    "                           features[stream_name] = torch.tensor(np_array_feature, dtype=torch.float32)\n",
    "                 else:\n",
    "                      # This case should not happen if initialized correctly, but handle defensively\n",
    "                      print(f\"Warning: Stream '{stream_name}' requested but not found in feature_sequences for idx {idx}. Adding zeros.\")\n",
    "                      expected_shape = (self.seq_len, self._input_sizes_for_error.get(stream_name, 1))\n",
    "                      features[stream_name] = torch.zeros(expected_shape, dtype=torch.float32)\n",
    "\n",
    "        except (ValueError, TypeError) as e: # Catch specific numpy/tensor conversion errors\n",
    "             print(f\"Error converting features to tensor for idx {idx}: {e}. Returning dummy zeros.\")\n",
    "             # Ensure dummy features have correct shapes based on _input_sizes_for_error\n",
    "             features = { name: torch.zeros((self.seq_len, self._input_sizes_for_error.get(name, 1)), dtype=torch.float32)\n",
    "                          for name in self.streams_to_generate }\n",
    "             label = 0 # Return default label with dummy features\n",
    "\n",
    "        return features, torch.tensor(label, dtype=torch.long)\n",
    "\n",
    "\n",
    "# --- Wrapper Dataset for Balanced Data ---\n",
    "class BalancedDataset(Dataset):\n",
    "    def __init__(self, data_dict, active_streams, label_key='label'):\n",
    "        self.active_streams = active_streams\n",
    "        self.label_key = label_key\n",
    "        if self.label_key not in data_dict or not data_dict[self.label_key]:\n",
    "             raise ValueError(f\"Label key '{self.label_key}' missing or empty in provided data_dict.\")\n",
    "\n",
    "        self.num_samples = len(data_dict[self.label_key])\n",
    "        if self.num_samples == 0:\n",
    "            print(\"Warning: BalancedDataset initialized with zero samples.\")\n",
    "            # Initialize features/labels as empty tensors to avoid errors later if len=0\n",
    "            self.features = {stream: torch.empty(0) for stream in self.active_streams}\n",
    "            self.labels = torch.empty(0, dtype=torch.long)\n",
    "            return # Exit early if no samples\n",
    "\n",
    "        self.features = {}\n",
    "        for stream in self.active_streams:\n",
    "             if stream in data_dict and data_dict[stream] is not None: # Check stream exists and is not None\n",
    "                 try:\n",
    "                     # Convert list of numpy arrays (expected from balancing) to a single tensor\n",
    "                     stream_data_np = np.array(data_dict[stream])\n",
    "                     self.features[stream] = torch.tensor(stream_data_np, dtype=torch.float32)\n",
    "                 except ValueError as e:\n",
    "                      # Handle cases where np.array fails (e.g., inconsistent shapes within the list)\n",
    "                      raise ValueError(f\"Error converting balanced data for stream '{stream}' to tensor. Inconsistent shapes? Error: {e}\") from e\n",
    "                 except TypeError as e:\n",
    "                     raise TypeError(f\"Error converting balanced data for stream '{stream}' to tensor. Invalid data types? Error: {e}\") from e\n",
    "                 except Exception as e: # Catch other unexpected errors\n",
    "                      raise RuntimeError(f\"Unexpected error creating tensor for balanced stream '{stream}': {e}\") from e\n",
    "\n",
    "                 # Check length consistency after successful tensor creation\n",
    "                 if len(self.features[stream]) != self.num_samples:\n",
    "                     raise ValueError(f\"Length mismatch after tensor creation: Stream '{stream}' ({len(self.features[stream])}) vs Labels ({self.num_samples})\")\n",
    "\n",
    "             else:\n",
    "                  # If an active stream is missing or None in the balanced data, it's an error\n",
    "                  raise KeyError(f\"Active stream '{stream}' requested but missing or None in the balanced data dictionary.\")\n",
    "\n",
    "        try:\n",
    "            # Ensure labels are correctly extracted (assuming list of lists like [[0], [1]])\n",
    "            self.labels = torch.tensor([lbl[0] for lbl in data_dict[self.label_key]], dtype=torch.long)\n",
    "            if len(self.labels) != self.num_samples:\n",
    "                 raise ValueError(f\"Length mismatch after label processing: Labels ({len(self.labels)}) vs Expected ({self.num_samples})\")\n",
    "        except (IndexError, TypeError) as e:\n",
    "             raise ValueError(f\"Error processing labels from balanced data. Expected list of single-element lists (e.g., [[0], [1]]). Error: {e}\") from e\n",
    "        except Exception as e:\n",
    "             raise RuntimeError(f\"Unexpected error creating label tensor from balanced data: {e}\") from e\n",
    "\n",
    "    def __len__(self):\n",
    "        return self.num_samples\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        if idx >= self.num_samples:\n",
    "             raise IndexError(\"Index out of bounds\")\n",
    "        # Return only features for streams active in this run\n",
    "        try:\n",
    "            feature_dict = {stream: self.features[stream][idx] for stream in self.active_streams if stream in self.features}\n",
    "        except KeyError as e:\n",
    "             raise KeyError(f\"Active stream '{e}' not found in self.features during __getitem__ for index {idx}. This should not happen if init was successful.\") from e\n",
    "        label = self.labels[idx]\n",
    "        return feature_dict, label\n",
    "\n",
    "\n",
    "# --- Model Architecture ---\n",
    "class Attention(nn.Module):\n",
    "    def __init__(self, hidden_dim, attention_dim):\n",
    "        super(Attention, self).__init__()\n",
    "        # Basic validation\n",
    "        if not isinstance(hidden_dim, int) or hidden_dim <= 0:\n",
    "            raise ValueError(\"hidden_dim must be a positive integer\")\n",
    "        if not isinstance(attention_dim, int) or attention_dim <= 0:\n",
    "            raise ValueError(\"attention_dim must be a positive integer\")\n",
    "\n",
    "        self.attention_net = nn.Sequential(\n",
    "            nn.Linear(hidden_dim, attention_dim),\n",
    "            nn.Tanh(),\n",
    "            nn.Linear(attention_dim, 1)\n",
    "        )\n",
    "\n",
    "    def forward(self, lstm_output):\n",
    "        # lstm_output shape: (batch, seq_len, hidden_dim * num_directions)\n",
    "        if lstm_output.ndim != 3:\n",
    "             raise ValueError(f\"Expected lstm_output to have 3 dimensions (batch, seq, hidden), got {lstm_output.ndim}\")\n",
    "        try:\n",
    "            att_scores = self.attention_net(lstm_output).squeeze(2) # (batch, seq_len)\n",
    "            if att_scores.shape[0] != lstm_output.shape[0] or att_scores.shape[1] != lstm_output.shape[1]:\n",
    "                 raise RuntimeError(\"Attention scores shape mismatch after squeeze.\")\n",
    "            att_weights = torch.softmax(att_scores, dim=1) # (batch, seq_len)\n",
    "            # Weighted sum: (batch, seq_len, hidden) * (batch, seq_len, 1) -> sum along seq_len dim\n",
    "            context_vector = torch.sum(lstm_output * att_weights.unsqueeze(2), dim=1) # (batch, hidden)\n",
    "        except Exception as e:\n",
    "             print(f\"Error during Attention forward pass: {e}\")\n",
    "             # Depending on desired robustness, could return zeros or re-raise\n",
    "             raise RuntimeError(\"Failed in Attention forward pass\") from e\n",
    "        return context_vector, att_weights\n",
    "\n",
    "class MultiStreamAdaptiveLSTM(nn.Module):\n",
    "    def __init__(self, input_sizes, lstm_hidden_size, num_lstm_layers, num_classes, attention_dim, dropout_rate, stream_names=['bbox', 'pose']):\n",
    "        super(MultiStreamAdaptiveLSTM, self).__init__()\n",
    "        if not stream_names:\n",
    "            raise ValueError(\"stream_names cannot be empty.\")\n",
    "        if not isinstance(input_sizes, dict):\n",
    "            raise TypeError(\"input_sizes must be a dictionary.\")\n",
    "        self.stream_names = stream_names\n",
    "        self.lstms = nn.ModuleDict()\n",
    "        self.attentions = nn.ModuleDict()\n",
    "        print(f\"Initializing model with streams: {self.stream_names}\")\n",
    "\n",
    "        num_active_streams = 0 # Count streams successfully added\n",
    "        for name in self.stream_names:\n",
    "            if name not in input_sizes:\n",
    "                # Option 1: Raise error if a requested stream is missing config\n",
    "                raise KeyError(f\"Input size for stream '{name}' not provided in input_sizes dictionary.\")\n",
    "                # Option 2: Warn and skip (might lead to downstream errors if logic expects it)\n",
    "                # print(f\"Warning: Input size for stream '{name}' not provided. Skipping this stream.\")\n",
    "                # continue\n",
    "\n",
    "            current_input_size = input_sizes[name]\n",
    "            if not isinstance(current_input_size, int) or current_input_size <= 0:\n",
    "                 raise ValueError(f\"Invalid input size ({current_input_size}) for stream '{name}'. Must be a positive integer.\")\n",
    "\n",
    "            print(f\"  - Adding stream '{name}' with input size {current_input_size}\")\n",
    "            try:\n",
    "                self.lstms[name] = nn.LSTM(\n",
    "                    current_input_size, lstm_hidden_size, num_lstm_layers,\n",
    "                    batch_first=True, dropout=dropout_rate if num_lstm_layers > 1 else 0,\n",
    "                    bidirectional=True # Assuming bidirectional based on Attention hidden_dim * 2\n",
    "                )\n",
    "                self.attentions[name] = Attention(lstm_hidden_size * 2 , attention_dim) # *2 for bidirectional\n",
    "                num_active_streams += 1\n",
    "            except Exception as e:\n",
    "                 print(f\"Error initializing LSTM/Attention for stream '{name}': {e}\")\n",
    "                 raise # Re-raise to stop model creation if a part fails\n",
    "\n",
    "        if num_active_streams == 0:\n",
    "             raise ValueError(\"No streams were successfully initialized in the model.\")\n",
    "\n",
    "        combined_feature_dim = lstm_hidden_size * 2 * num_active_streams # *2 for bidirectional\n",
    "        print(f\"  Combined feature dimension: {combined_feature_dim}\")\n",
    "\n",
    "        # Classifier layers\n",
    "        self.dropout = nn.Dropout(dropout_rate)\n",
    "        # Ensure intermediate_dim is reasonable\n",
    "        intermediate_dim = max(num_classes * 2, combined_feature_dim // 2, 16) # Added min size\n",
    "        self.fc1 = nn.Linear(combined_feature_dim, intermediate_dim)\n",
    "        self.relu = nn.ReLU()\n",
    "        self.fc2 = nn.Linear(intermediate_dim, num_classes)\n",
    "\n",
    "    def forward(self, x):\n",
    "        if not isinstance(x, dict):\n",
    "             raise TypeError(f\"Input 'x' must be a dictionary of stream tensors, got {type(x)}\")\n",
    "\n",
    "        stream_context_vectors = []\n",
    "        stream_att_weights = {} # Optional: if needed for analysis\n",
    "\n",
    "        processed_streams = 0\n",
    "        for name in self.stream_names: # Iterate through streams model was configured for\n",
    "            if name not in x:\n",
    "                # This indicates a problem upstream (DataLoader/Dataset didn't provide expected data)\n",
    "                raise KeyError(f\"Input dictionary 'x' is missing expected stream '{name}' during forward pass.\")\n",
    "                # Alternative (more robust, less strict): warn and skip\n",
    "                # print(f\"Warning: Stream '{name}' expected but not found in input batch. Skipping.\")\n",
    "                # continue\n",
    "\n",
    "            stream_input = x[name]\n",
    "            # Basic validation of input tensor for this stream\n",
    "            if not isinstance(stream_input, torch.Tensor):\n",
    "                 raise TypeError(f\"Input for stream '{name}' must be a torch.Tensor, got {type(stream_input)}\")\n",
    "            if stream_input.ndim != 3: # Expect (batch, seq_len, feature_dim)\n",
    "                 raise ValueError(f\"Input tensor for stream '{name}' has incorrect dimensions ({stream_input.ndim}). Expected 3 (batch, seq, feature).\")\n",
    "\n",
    "            try:\n",
    "                lstm_out, _ = self.lstms[name](stream_input) # (batch, seq_len, hidden*2)\n",
    "                context_vector, attention_weights = self.attentions[name](lstm_out) # (batch, hidden*2)\n",
    "                stream_context_vectors.append(context_vector)\n",
    "                # stream_att_weights[name] = attention_weights # Optional storage\n",
    "                processed_streams += 1\n",
    "            except Exception as e:\n",
    "                 print(f\"Error processing stream '{name}' in forward pass: {e}\")\n",
    "                 raise RuntimeError(f\"Failed during LSTM/Attention for stream '{name}'\") from e\n",
    "\n",
    "        # Check if any streams were actually processed (especially important if skipping was allowed)\n",
    "        if not stream_context_vectors:\n",
    "            raise RuntimeError(\"No stream outputs generated during forward pass. Input might be missing all expected streams.\")\n",
    "        if processed_streams != len(self.stream_names):\n",
    "             print(f\"Warning: Only processed {processed_streams}/{len(self.stream_names)} expected streams.\") # Should not happen if KeyErrors are raised\n",
    "\n",
    "        try:\n",
    "            fused_features = torch.cat(stream_context_vectors, dim=1) # Concatenate along feature dimension\n",
    "            # Check shape after concat: (batch, sum_of_context_vector_dims)\n",
    "            # Expected dim = num_active_streams * lstm_hidden_size * 2\n",
    "            expected_fused_dim = processed_streams * self.lstms[self.stream_names[0]].hidden_size * 2 # Get hidden size from one LSTM\n",
    "            if fused_features.shape[1] != expected_fused_dim:\n",
    "                 raise RuntimeError(f\"Fused feature dimension mismatch. Expected {expected_fused_dim}, got {fused_features.shape[1]}\")\n",
    "\n",
    "            # Pass through classifier\n",
    "            out = self.dropout(fused_features)\n",
    "            out = self.relu(self.fc1(out))\n",
    "            out = self.dropout(out)\n",
    "            logits = self.fc2(out)\n",
    "        except Exception as e:\n",
    "             print(f\"Error during final classification layers: {e}\")\n",
    "             raise RuntimeError(\"Failed in classifier part of forward pass\") from e\n",
    "\n",
    "        return logits\n",
    "\n",
    "# --- Training and Evaluation Functions ---\n",
    "def train_epoch(model, dataloader, optimizer, criterion, device):\n",
    "    model.train()\n",
    "    total_loss = 0.0\n",
    "    all_preds = []\n",
    "    all_labels = []\n",
    "    active_streams = model.stream_names # Get streams the model expects\n",
    "\n",
    "    batch_num = 0\n",
    "    for features, labels in tqdm(dataloader, desc=\"Training\", leave=False):\n",
    "        batch_num += 1\n",
    "        # Ensure features is a dict and move only expected streams to device\n",
    "        if not isinstance(features, dict):\n",
    "            print(f\"Error: Expected features to be a dict in batch {batch_num}, got {type(features)}. Skipping batch.\")\n",
    "            continue\n",
    "        input_features = {}\n",
    "        try:\n",
    "            for name in active_streams:\n",
    "                if name not in features:\n",
    "                    raise KeyError(f\"Required stream '{name}' missing from batch {batch_num}.\")\n",
    "                input_features[name] = features[name].to(device)\n",
    "            labels = labels.to(device)\n",
    "        except KeyError as e:\n",
    "            print(f\"Error preparing batch {batch_num}: {e}. Skipping.\")\n",
    "            continue\n",
    "        except Exception as e:\n",
    "            print(f\"Error moving batch {batch_num} to device {device}: {e}. Skipping.\")\n",
    "            continue\n",
    "\n",
    "        try:\n",
    "            optimizer.zero_grad()\n",
    "            outputs = model(input_features) # Shape: (batch_size, num_classes)\n",
    "            # Ensure labels have the correct shape for CrossEntropyLoss (batch_size)\n",
    "            if labels.ndim != 1:\n",
    "                 labels = labels.squeeze() # Attempt to fix if shape is (batch_size, 1)\n",
    "                 if labels.ndim != 1:\n",
    "                      raise ValueError(f\"Labels have incorrect shape {labels.shape} for CrossEntropyLoss in batch {batch_num}.\")\n",
    "\n",
    "            loss = criterion(outputs, labels)\n",
    "            loss.backward()\n",
    "            # Optional: Gradient clipping\n",
    "            # torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=1.0)\n",
    "            optimizer.step()\n",
    "\n",
    "            total_loss += loss.item()\n",
    "            with torch.no_grad(): # Ensure preds calculation doesn't track gradients\n",
    "                 preds = torch.argmax(outputs, dim=1)\n",
    "                 all_preds.extend(preds.cpu().numpy())\n",
    "                 all_labels.extend(labels.cpu().numpy())\n",
    "\n",
    "        except Exception as e:\n",
    "            print(f\"Error during training step for batch {batch_num}: {e}\")\n",
    "            # Decide whether to skip batch or re-raise\n",
    "            # Skipping might hide persistent issues\n",
    "            # raise e # Option: Stop training on error\n",
    "\n",
    "    avg_loss = total_loss / max(1, len(dataloader)) # Avoid division by zero if dataloader is empty\n",
    "    accuracy = 0.0\n",
    "    if all_labels: # Calculate accuracy only if some batches were processed\n",
    "       try:\n",
    "           accuracy = accuracy_score(all_labels, all_preds)\n",
    "       except ValueError as e:\n",
    "           print(f\"Error calculating training accuracy: {e}. Labels: {np.unique(all_labels)}, Preds: {np.unique(all_preds)}\")\n",
    "\n",
    "    return avg_loss, accuracy\n",
    "\n",
    "def evaluate_epoch(model, dataloader, criterion, device):\n",
    "    model.eval()\n",
    "    total_loss = 0.0\n",
    "    all_labels = []\n",
    "    all_preds = []\n",
    "    all_probs = []\n",
    "    active_streams = model.stream_names\n",
    "\n",
    "    batch_num = 0\n",
    "    with torch.no_grad():\n",
    "        for features, labels in tqdm(dataloader, desc=\"Evaluating\", leave=False):\n",
    "            batch_num += 1\n",
    "            if not isinstance(features, dict):\n",
    "                print(f\"Error: Expected features to be a dict in eval batch {batch_num}, got {type(features)}. Skipping.\")\n",
    "                continue\n",
    "            input_features = {}\n",
    "            try:\n",
    "                for name in active_streams:\n",
    "                    if name not in features:\n",
    "                        raise KeyError(f\"Required stream '{name}' missing from eval batch {batch_num}.\")\n",
    "                    input_features[name] = features[name].to(device)\n",
    "                labels = labels.to(device)\n",
    "            except KeyError as e:\n",
    "                print(f\"Error preparing eval batch {batch_num}: {e}. Skipping.\")\n",
    "                continue\n",
    "            except Exception as e:\n",
    "                print(f\"Error moving eval batch {batch_num} to device {device}: {e}. Skipping.\")\n",
    "                continue\n",
    "\n",
    "            try:\n",
    "                outputs = model(input_features)\n",
    "                # Ensure labels have the correct shape\n",
    "                if labels.ndim != 1:\n",
    "                     labels = labels.squeeze()\n",
    "                     if labels.ndim != 1:\n",
    "                          raise ValueError(f\"Labels have incorrect shape {labels.shape} for loss calculation in eval batch {batch_num}.\")\n",
    "\n",
    "                loss = criterion(outputs, labels)\n",
    "                total_loss += loss.item()\n",
    "\n",
    "                probs = torch.softmax(outputs, dim=1)\n",
    "                preds = torch.argmax(probs, dim=1)\n",
    "\n",
    "                all_labels.extend(labels.cpu().numpy())\n",
    "                all_preds.extend(preds.cpu().numpy())\n",
    "                all_probs.extend(probs.cpu().numpy()) # Store probabilities for AUC\n",
    "\n",
    "            except Exception as e:\n",
    "                 print(f\"Error during evaluation step for batch {batch_num}: {e}\")\n",
    "                 # Continue evaluation if one batch fails? Or stop?\n",
    "                 # continue\n",
    "\n",
    "    avg_loss = total_loss / max(1, len(dataloader))\n",
    "    # Initialize metrics with default values\n",
    "    accuracy, precision, recall, f1, auc = 0.0, 0.0, 0.0, 0.0, float('nan')\n",
    "\n",
    "    if not all_labels: # Check if any data was processed\n",
    "        print(\"Warning: No labels collected during evaluation. Returning zero/NaN metrics.\")\n",
    "        return {'loss': avg_loss, 'accuracy': accuracy, 'precision': precision, 'recall': recall, 'f1': f1, 'auc': auc}\n",
    "\n",
    "    try:\n",
    "        all_probs = np.array(all_probs)\n",
    "        all_labels = np.array(all_labels)\n",
    "        all_preds = np.array(all_preds)\n",
    "\n",
    "        accuracy = accuracy_score(all_labels, all_preds)\n",
    "        precision, recall, f1, _ = precision_recall_fscore_support(all_labels, all_preds, average='binary', pos_label=1, zero_division=0)\n",
    "\n",
    "        # Calculate AUC only if both classes are present in true labels\n",
    "        if len(np.unique(all_labels)) > 1:\n",
    "            # Ensure probabilities correspond to the positive class (class 1)\n",
    "            if all_probs.shape[1] == 2:\n",
    "                 auc = roc_auc_score(all_labels, all_probs[:, 1])\n",
    "            else:\n",
    "                 print(f\"Warning: Probability array has unexpected shape {all_probs.shape}. Cannot calculate AUC.\")\n",
    "                 auc = float('nan')\n",
    "        else:\n",
    "            print(\"Warning: Only one class present in ground truth labels during evaluation. AUC is not defined.\")\n",
    "            auc = float('nan') # AUC is not defined for single-class data\n",
    "\n",
    "    except ValueError as e:\n",
    "        print(f\"Error calculating evaluation metrics: {e}\")\n",
    "        # This might happen if shapes mismatch or other sklearn issues\n",
    "    except Exception as e:\n",
    "        print(f\"Unexpected error calculating evaluation metrics: {e}\")\n",
    "\n",
    "\n",
    "    return {'loss': avg_loss, 'accuracy': accuracy, 'precision': precision, 'recall': recall, 'f1': f1, 'auc': auc}\n",
    "\n",
    "def get_predictions_and_labels(model, dataloader, device):\n",
    "    model.eval()\n",
    "    all_labels = []\n",
    "    all_preds = []\n",
    "    active_streams = model.stream_names\n",
    "\n",
    "    batch_num = 0\n",
    "    with torch.no_grad():\n",
    "        for features, labels in tqdm(dataloader, desc=\"Generating CM Data\", leave=False):\n",
    "             batch_num += 1\n",
    "             if not isinstance(features, dict):\n",
    "                 print(f\"Error: Expected features to be a dict in CM batch {batch_num}, got {type(features)}. Skipping.\")\n",
    "                 continue\n",
    "             input_features = {}\n",
    "             try:\n",
    "                 for name in active_streams:\n",
    "                     if name not in features:\n",
    "                         raise KeyError(f\"Required stream '{name}' missing from CM batch {batch_num}.\")\n",
    "                     input_features[name] = features[name].to(device)\n",
    "                 labels = labels.to(device)\n",
    "             except KeyError as e:\n",
    "                 print(f\"Error preparing CM batch {batch_num}: {e}. Skipping.\")\n",
    "                 continue\n",
    "             except Exception as e:\n",
    "                 print(f\"Error moving CM batch {batch_num} to device {device}: {e}. Skipping.\")\n",
    "                 continue\n",
    "\n",
    "             try:\n",
    "                 outputs = model(input_features)\n",
    "                 preds = torch.argmax(outputs, dim=1)\n",
    "                 all_labels.extend(labels.cpu().numpy())\n",
    "                 all_preds.extend(preds.cpu().numpy())\n",
    "             except Exception as e:\n",
    "                  print(f\"Error during prediction for CM data batch {batch_num}: {e}\")\n",
    "                  # continue\n",
    "\n",
    "    return np.array(all_labels), np.array(all_preds)\n",
    "\n",
    "# --- Main Execution Block ---\n",
    "if __name__ == '__main__':\n",
    "\n",
    "    # --- Step 1: Data Preparation ---\n",
    "    run_data_prep = not (os.path.exists(BALANCED_DATA_PKL_PATH) and os.path.exists(SCALERS_PKL_PATH))\n",
    "\n",
    "    # Declare variables used in both branches before the conditional block\n",
    "    pie_database = None\n",
    "    scalers = {}\n",
    "    balanced_train_data_dict = None\n",
    "\n",
    "    if run_data_prep:\n",
    "        print(\"--- Running Data Preparation ---\")\n",
    "        # --- Generate/Load PIE Database ---\n",
    "        print(f\"Checking for PIE database cache at: {PIE_DATABASE_CACHE_PATH}\")\n",
    "        if not os.path.exists(PIE_DATABASE_CACHE_PATH):\n",
    "            if PIE is None: # Check if import failed earlier\n",
    "                 raise ImportError(\"PIE class could not be imported, and database cache does not exist. Cannot generate database.\")\n",
    "            print(\"PIE database cache not found. Generating...\");\n",
    "            try:\n",
    "                 # Assuming PIE class needs initialization parameters like data_path\n",
    "                 pie_dataset_interface = PIE(data_path=PIE_ROOT_PATH, regen_database=True) # Adjust params as needed\n",
    "                 pie_database = pie_dataset_interface.generate_database()\n",
    "                 if not pie_database: raise RuntimeError(\"PIE database generation returned empty.\")\n",
    "                 print(\"PIE database generated successfully.\")\n",
    "                 # Optional: Save the generated database\n",
    "                 # try:\n",
    "                 #     with open(PIE_DATABASE_CACHE_PATH.replace('.pkl', '_newly_generated.pkl'), 'wb') as f: # Save with different name\n",
    "                 #         pickle.dump(pie_database, f, pickle.HIGHEST_PROTOCOL)\n",
    "                 #     print(f\"Saved newly generated database.\")\n",
    "                 # except Exception as e:\n",
    "                 #     print(f\"Error saving newly generated PIE database: {e}\")\n",
    "\n",
    "            except Exception as e:\n",
    "                 raise RuntimeError(f\"Failed to initialize or run PIE database generation: {e}\") from e\n",
    "        else:\n",
    "            print(\"Loading PIE database from cache...\")\n",
    "            try:\n",
    "                with open(PIE_DATABASE_CACHE_PATH, 'rb') as f: pie_database = pickle.load(f)\n",
    "                print(\"PIE database loaded successfully.\")\n",
    "                if not isinstance(pie_database, dict) or not pie_database: # Basic validation\n",
    "                     raise ValueError(\"Loaded PIE database is not a valid dictionary or is empty.\")\n",
    "            except FileNotFoundError:\n",
    "                 raise FileNotFoundError(f\"PIE database cache file not found at {PIE_DATABASE_CACHE_PATH} despite os.path.exists being true initially.\")\n",
    "            except pickle.UnpicklingError as pe:\n",
    "                 raise RuntimeError(f\"Failed to unpickle PIE database from {PIE_DATABASE_CACHE_PATH}: {pe}\") from pe\n",
    "            except Exception as e:\n",
    "                 raise RuntimeError(f\"Failed to load PIE database from cache: {e}\") from e\n",
    "\n",
    "        if pie_database is None: # Should have been caught by exceptions, but double check\n",
    "             raise RuntimeError(\"PIE Database is None after generation/loading attempt.\")\n",
    "\n",
    "        # --- Calculate Standardization Parameters ---\n",
    "        print(\"\\nCalculating standardization parameters from training set...\")\n",
    "        all_train_ego_speeds = []; all_train_accX = []; all_train_accY = []; all_train_gyroZ = []\n",
    "        # Check if pie_database is a dictionary before iterating\n",
    "        if isinstance(pie_database, dict):\n",
    "            for set_id in TRAIN_SETS_STR:\n",
    "                 if set_id in pie_database and isinstance(pie_database[set_id], dict):\n",
    "                     for video_id, video_data in pie_database[set_id].items():\n",
    "                          if isinstance(video_data, dict) and 'vehicle_annotations' in video_data and isinstance(video_data['vehicle_annotations'], dict):\n",
    "                               for frame_num, ego_frame_data in video_data['vehicle_annotations'].items():\n",
    "                                   if isinstance(ego_frame_data, dict): # Check ego data is a dict\n",
    "                                        try: # Safely get and convert values\n",
    "                                             obd_speed = ego_frame_data.get('OBD_speed')\n",
    "                                             gps_speed = ego_frame_data.get('GPS_speed')\n",
    "                                             speed = 0.0\n",
    "                                             if isinstance(obd_speed, (int, float)) and obd_speed > 0:\n",
    "                                                  speed = float(obd_speed)\n",
    "                                             elif isinstance(gps_speed, (int, float)):\n",
    "                                                  speed = float(gps_speed)\n",
    "                                             all_train_ego_speeds.append(speed)\n",
    "\n",
    "                                             accX = float(ego_frame_data.get('accX', 0.0))\n",
    "                                             accY = float(ego_frame_data.get('accY', 0.0))\n",
    "                                             gyroZ = float(ego_frame_data.get('gyroZ', 0.0))\n",
    "                                             all_train_accX.append(accX); all_train_accY.append(accY); all_train_gyroZ.append(gyroZ)\n",
    "                                        except (TypeError, ValueError) as e:\n",
    "                                             print(f\"Warning: Invalid data type for ego stats in {set_id}/{video_id}/frame {frame_num}. Skipping frame. Error: {e}\")\n",
    "        else:\n",
    "             print(\"Warning: pie_database is not a dictionary. Cannot calculate scalers.\")\n",
    "\n",
    "\n",
    "        scalers = {} # Initialize scalers dict\n",
    "        try:\n",
    "            if all_train_ego_speeds:\n",
    "                 mean_speed = np.mean(all_train_ego_speeds); std_speed = np.std(all_train_ego_speeds)\n",
    "                 scalers['ego_speed_mean'] = mean_speed; scalers['ego_speed_std'] = std_speed if std_speed > 1e-6 else 1.0;\n",
    "                 print(f\"  Ego Speed: Mean={scalers['ego_speed_mean']:.2f}, Std={scalers['ego_speed_std']:.2f}\")\n",
    "            if all_train_accX: # Assume accY exists if accX does\n",
    "                 mean_accX = np.mean(all_train_accX); std_accX = np.std(all_train_accX)\n",
    "                 mean_accY = np.mean(all_train_accY); std_accY = np.std(all_train_accY)\n",
    "                 scalers['accX_mean'] = mean_accX; scalers['accX_std'] = std_accX if std_accX > 1e-6 else 1.0;\n",
    "                 scalers['accY_mean'] = mean_accY; scalers['accY_std'] = std_accY if std_accY > 1e-6 else 1.0;\n",
    "                 print(f\"  Ego AccX: Mean={scalers['accX_mean']:.2f}, Std={scalers['accX_std']:.2f}\"); print(f\"  Ego AccY: Mean={scalers['accY_mean']:.2f}, Std={scalers['accY_std']:.2f}\")\n",
    "            if all_train_gyroZ:\n",
    "                 mean_gyroZ = np.mean(all_train_gyroZ); std_gyroZ = np.std(all_train_gyroZ)\n",
    "                 scalers['gyroZ_mean'] = mean_gyroZ; scalers['gyroZ_std'] = std_gyroZ if std_gyroZ > 1e-6 else 1.0;\n",
    "                 print(f\"  Ego GyroZ: Mean={scalers['gyroZ_mean']:.2f}, Std={scalers['gyroZ_std']:.2f}\")\n",
    "        except Exception as e:\n",
    "             print(f\"Error calculating scaler statistics: {e}\") # Catch potential numpy errors\n",
    "        print(\"Standardization parameters calculation finished.\")\n",
    "\n",
    "        # --- Initialize FULL Training Dataset ---\n",
    "        print(\"\\nInitializing full training dataset (for extraction/balancing)...\")\n",
    "        full_train_dataset = None # Initialize before try block\n",
    "        try:\n",
    "            full_train_dataset = PIEDataset(pie_database, TRAIN_SETS_STR, POSE_DATA_DIR, YOLOP_FEATURE_DIR, SEQ_LEN, PRED_LEN, scalers, ALL_POSSIBLE_STREAMS)\n",
    "            if len(full_train_dataset) == 0:\n",
    "                 # This isn't necessarily an error, could be no valid sequences found\n",
    "                 print(\"Warning: Full Train Dataset initialization resulted in 0 sequences.\")\n",
    "                 # Depending on requirements, could raise ValueError here or allow proceeding\n",
    "                 # raise ValueError(\"Full Train Dataset loading resulted in 0 sequences.\")\n",
    "        except Exception as e:\n",
    "             print(f\"Error initializing full training dataset: {e}\")\n",
    "             raise # Re-raise critical error\n",
    "\n",
    "\n",
    "        # --- Prepare and Balance Training Data ---\n",
    "        print(\"\\nExtracting ALL stream data from training set for balancing...\")\n",
    "        training_data_dict = {stream: [] for stream in ALL_POSSIBLE_STREAMS}; training_data_dict['label'] = []\n",
    "        # Proceed only if full_train_dataset was created and has items\n",
    "        if full_train_dataset and len(full_train_dataset) > 0:\n",
    "            num_extraction_errors = 0\n",
    "            for i in tqdm(range(len(full_train_dataset)), desc=\"Extracting data\"):\n",
    "                 try:\n",
    "                     features, label = full_train_dataset[i] # __getitem__ might raise errors\n",
    "                     # Validate features dictionary\n",
    "                     if not isinstance(features, dict):\n",
    "                          raise TypeError(f\"__getitem__ returned features of type {type(features)}, expected dict.\")\n",
    "                     for stream_name in ALL_POSSIBLE_STREAMS:\n",
    "                         if stream_name in features and features[stream_name] is not None:\n",
    "                              # Convert tensor back to numpy for storage in dict (if not already numpy)\n",
    "                              feature_data = features[stream_name]\n",
    "                              if isinstance(feature_data, torch.Tensor):\n",
    "                                   training_data_dict[stream_name].append(feature_data.cpu().numpy())\n",
    "                              elif isinstance(feature_data, np.ndarray):\n",
    "                                   training_data_dict[stream_name].append(feature_data)\n",
    "                              else:\n",
    "                                   raise TypeError(f\"Feature data for stream '{stream_name}' is type {type(feature_data)}, expected Tensor or ndarray.\")\n",
    "                         else:\n",
    "                              # If a stream is missing from __getitem__ output, record it and add zeros\n",
    "                              print(f\"Warn: Stream '{stream_name}' missing from __getitem__ output for idx {i}. Appending zeros.\")\n",
    "                              # Determine expected feature size for the zeros array\n",
    "                              expected_size = full_train_dataset._input_sizes_for_error.get(stream_name, 1)\n",
    "                              training_data_dict[stream_name].append(np.zeros((SEQ_LEN, expected_size), dtype=np.float32))\n",
    "                     # Append label\n",
    "                     training_data_dict['label'].append([label.item()]) # Assuming label is a 0-dim tensor\n",
    "\n",
    "                 except Exception as e:\n",
    "                     num_extraction_errors += 1\n",
    "                     print(f\"Error extracting data for index {i}: {e}. Skipping item.\")\n",
    "                     # Optionally add placeholder data or just skip\n",
    "                     if num_extraction_errors > len(full_train_dataset) * 0.1: # Stop if too many errors\n",
    "                          print(\"Error: Excessive errors during data extraction. Aborting.\")\n",
    "                          raise RuntimeError(\"Too many errors during data extraction.\") from e\n",
    "\n",
    "            print(f\"Data extraction finished. Original training samples considered: {len(full_train_dataset)}, Errors encountered: {num_extraction_errors}\")\n",
    "            print(f\"Samples successfully extracted: {len(training_data_dict['label'])}\")\n",
    "\n",
    "            if not training_data_dict['label']: # Check if any data was actually extracted\n",
    "                 print(\"Error: No data was successfully extracted. Cannot proceed with balancing.\")\n",
    "                 # Handle this case: maybe exit or raise an error\n",
    "                 sys.exit(\"Exiting due to lack of extracted data.\")\n",
    "            else:\n",
    "                 # --- Balance Data ---\n",
    "                 label_key_for_balancing = 'label'\n",
    "                 try:\n",
    "                     balanced_train_data_dict = balance_samples_count(training_data_dict, label_type=label_key_for_balancing)\n",
    "                 except Exception as e:\n",
    "                      print(f\"Error during sample balancing: {e}\")\n",
    "                      raise # Balancing is critical, re-raise\n",
    "\n",
    "        else:\n",
    "             print(\"Skipping data extraction and balancing because full_train_dataset is empty or None.\")\n",
    "             balanced_train_data_dict = {} # Ensure it's an empty dict if skipped\n",
    "\n",
    "        # --- Cleanup ---\n",
    "        del training_data_dict # Free memory\n",
    "        if full_train_dataset: del full_train_dataset\n",
    "\n",
    "\n",
    "        # --- Save Balanced Data and Scalers ---\n",
    "        if balanced_train_data_dict: # Only save if balancing happened and produced data\n",
    "            print(f\"\\nSaving balanced training data to: {BALANCED_DATA_PKL_PATH}\")\n",
    "            try:\n",
    "                with open(BALANCED_DATA_PKL_PATH, 'wb') as f: pickle.dump(balanced_train_data_dict, f, pickle.HIGHEST_PROTOCOL)\n",
    "                print(\" -> Balanced data saved.\")\n",
    "            except pickle.PicklingError as pe: print(f\"  Error pickling balanced data: {pe}\")\n",
    "            except Exception as e: print(f\"  Error saving balanced data: {e}\")\n",
    "        else:\n",
    "             print(\"\\nSkipping saving balanced data (was not generated or is empty).\")\n",
    "\n",
    "        if scalers: # Only save if scalers were calculated\n",
    "            print(f\"\\nSaving scalers to: {SCALERS_PKL_PATH}\")\n",
    "            try:\n",
    "                with open(SCALERS_PKL_PATH, 'wb') as f: pickle.dump(scalers, f, pickle.HIGHEST_PROTOCOL)\n",
    "                print(\" -> Scalers saved.\")\n",
    "            except pickle.PicklingError as pe: print(f\"  Error pickling scalers: {pe}\")\n",
    "            except Exception as e: print(f\"  Error saving scalers: {e}\")\n",
    "        else:\n",
    "             print(\"\\nSkipping saving scalers (were not calculated or are empty).\")\n",
    "\n",
    "        # Delete PIE db only if it was loaded/generated in this block\n",
    "        if 'pie_database' in locals() and pie_database is not None: del pie_database\n",
    "        gc.collect()\n",
    "        print(\"\\n--- Data Preparation and Balancing Completed ---\")\n",
    "\n",
    "    else: # Data prep files should exist, load them\n",
    "        print(\"--- Skipping Data Preparation: Loading Pre-Saved Files ---\")\n",
    "        print(f\"\\nLoading balanced training data from: {BALANCED_DATA_PKL_PATH}\")\n",
    "        print(f\"Loading scalers from: {SCALERS_PKL_PATH}\")\n",
    "        try:\n",
    "            if not os.path.exists(BALANCED_DATA_PKL_PATH):\n",
    "                 raise FileNotFoundError(f\"Balanced data file not found: {BALANCED_DATA_PKL_PATH}\")\n",
    "            with open(BALANCED_DATA_PKL_PATH, 'rb') as f: balanced_train_data_dict = pickle.load(f)\n",
    "\n",
    "            if not os.path.exists(SCALERS_PKL_PATH):\n",
    "                 raise FileNotFoundError(f\"Scalers file not found: {SCALERS_PKL_PATH}\")\n",
    "            with open(SCALERS_PKL_PATH, 'rb') as f: scalers = pickle.load(f)\n",
    "\n",
    "            # Basic validation of loaded data\n",
    "            if not isinstance(balanced_train_data_dict, dict):\n",
    "                 raise TypeError(f\"Loaded balanced data is not a dictionary (type: {type(balanced_train_data_dict)}).\")\n",
    "            if not isinstance(scalers, dict):\n",
    "                 raise TypeError(f\"Loaded scalers data is not a dictionary (type: {type(scalers)}).\")\n",
    "\n",
    "            print(\" -> Pre-processed data loaded successfully.\")\n",
    "\n",
    "        except FileNotFoundError as e:\n",
    "             print(f\"ERROR: Required pre-processed file not found: {e}. Cannot continue without running the data preparation phase.\")\n",
    "             sys.exit(1) # Exit script\n",
    "        except pickle.UnpicklingError as pe:\n",
    "             print(f\"ERROR: Failed to unpickle pre-processed data: {pe}. Files might be corrupted. Re-run prep phase.\")\n",
    "             sys.exit(1)\n",
    "        except Exception as e:\n",
    "             print(f\"ERROR: Unexpected error loading pre-processed data: {e}\")\n",
    "             sys.exit(1)\n",
    "\n",
    "        # Ensure loaded variables are not None before proceeding\n",
    "        if balanced_train_data_dict is None or scalers is None:\n",
    "             print(\"ERROR: Loading pre-processed data resulted in None variables. Cannot continue.\")\n",
    "             sys.exit(1)\n",
    "\n",
    "\n",
    "    # --- Step 2: Model Training and Evaluation ---\n",
    "    print(\"\\n\" + \"=\"*70)\n",
    "    print(\"--- Running Model Training and Evaluation ---\")\n",
    "    print(f\"Active Streams for this run: {ACTIVE_STREAMS}\")\n",
    "    print(\"-\" * 70)\n",
    "\n",
    "    # --- Load Full PIE Database (needed for Validation Dataset) ---\n",
    "    # This needs to happen regardless of whether data prep ran or not\n",
    "    print(\"\\nLoading PIE database cache for Validation Dataset...\")\n",
    "    if pie_database is None: # Check if it needs loading (wasn't loaded/kept from prep phase)\n",
    "        if not os.path.exists(PIE_DATABASE_CACHE_PATH):\n",
    "             raise FileNotFoundError(f\"PIE database cache not found at {PIE_DATABASE_CACHE_PATH}. Required for Validation Dataset.\")\n",
    "        try:\n",
    "            with open(PIE_DATABASE_CACHE_PATH, 'rb') as f: pie_database = pickle.load(f)\n",
    "            print(\" -> PIE database loaded successfully for validation.\")\n",
    "            if not isinstance(pie_database, dict) or not pie_database: # Basic validation\n",
    "                 raise ValueError(\"Loaded PIE database for validation is not a valid dictionary or is empty.\")\n",
    "        except FileNotFoundError: # Should be caught by os.path.exists, but defensive check\n",
    "             raise FileNotFoundError(f\"PIE database cache file not found at {PIE_DATABASE_CACHE_PATH} when loading for validation.\")\n",
    "        except pickle.UnpicklingError as pe:\n",
    "             raise RuntimeError(f\"Failed to unpickle PIE database for validation from {PIE_DATABASE_CACHE_PATH}: {pe}\") from pe\n",
    "        except Exception as e:\n",
    "             raise RuntimeError(f\"Failed to load PIE database for validation: {e}\") from e\n",
    "\n",
    "    if pie_database is None: # Final check\n",
    "         raise RuntimeError(\"PIE Database is still None before creating Validation Dataset.\")\n",
    "\n",
    "\n",
    "    # --- Create Datasets and DataLoaders ---\n",
    "    print(\"\\nCreating Datasets and DataLoaders...\")\n",
    "    train_dataset, val_dataset = None, None # Initialize before try\n",
    "    train_loader, val_loader = None, None # Initialize before try\n",
    "    try:\n",
    "        # Ensure balanced data dict is valid before creating dataset\n",
    "        if not balanced_train_data_dict or 'label' not in balanced_train_data_dict or not balanced_train_data_dict['label']:\n",
    "             raise ValueError(\"Balanced training data dictionary is invalid or missing labels. Cannot create training dataset.\")\n",
    "        train_dataset = BalancedDataset(balanced_train_data_dict, ACTIVE_STREAMS, label_key='label')\n",
    "\n",
    "        # Free memory associated with the large dictionary now\n",
    "        del balanced_train_data_dict\n",
    "        gc.collect()\n",
    "\n",
    "        # Validation dataset needs the PIE database and scalers\n",
    "        if not pie_database: raise ValueError(\"PIE database is None, cannot create validation dataset.\")\n",
    "        if not scalers: print(\"Warning: Scalers dictionary is empty when creating validation dataset.\") # Non-fatal?\n",
    "\n",
    "        val_dataset = PIEDataset(pie_database, VAL_SETS_STR, POSE_DATA_DIR, YOLOP_FEATURE_DIR, SEQ_LEN, PRED_LEN, scalers, ALL_POSSIBLE_STREAMS)\n",
    "\n",
    "        if len(train_dataset) == 0: print(\"Warning: Training dataset is empty after initialization.\") # Potentially problematic\n",
    "        if len(val_dataset) == 0: print(\"Warning: Validation dataset is empty after initialization.\") # Potentially problematic\n",
    "        # Decide if empty datasets should halt execution\n",
    "        if len(train_dataset) == 0 or len(val_dataset) == 0:\n",
    "            raise ValueError(\"Cannot proceed with empty Training or Validation dataset.\")\n",
    "\n",
    "        # Create DataLoaders\n",
    "        # Consider adding persistent_workers=True if num_workers > 0 for efficiency\n",
    "        train_loader = DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True, num_workers=min(2, os.cpu_count()), pin_memory=True, drop_last=True) # drop_last can help with batch norm stability\n",
    "        val_loader = DataLoader(val_dataset, batch_size=BATCH_SIZE, shuffle=False, num_workers=min(2, os.cpu_count()), pin_memory=True)\n",
    "        print(f\"DataLoaders created. Train batches: {len(train_loader)}, Val batches: {len(val_loader)}\")\n",
    "\n",
    "    except (ValueError, KeyError, TypeError, RuntimeError, Exception) as e: # Catch specific and general errors\n",
    "        print(f\"FATAL ERROR creating Datasets or DataLoaders: {e}\")\n",
    "        # Potentially print more context here if needed\n",
    "        raise # Re-raise to stop execution\n",
    "\n",
    "    # Free memory again - PIE database might be large\n",
    "    del pie_database\n",
    "    gc.collect()\n",
    "\n",
    "    # --- Initialize Model ---\n",
    "    print(\"\\nInitializing model...\")\n",
    "    model = None # Initialize before try block\n",
    "    try:\n",
    "        current_input_sizes = {}\n",
    "        for stream in ACTIVE_STREAMS: # Based on ACTIVE_STREAMS for this run\n",
    "            size_constant_name = f'INPUT_SIZE_{stream.upper()}'\n",
    "            special_cases = {'TRAFFIC_LIGHT': 'TL_STATE','STATIC_CONTEXT': 'STATIC','EGO_SPEED': 'EGO_SPEED','EGO_ACC': 'EGO_ACC','EGO_GYRO': 'EGO_GYRO','PED_ACTION': 'PED_ACTION','PED_LOOK': 'PED_LOOK','PED_OCCLUSION': 'PED_OCC', 'YOLOP':'YOLOP'}\n",
    "            stream_upper_key = stream.upper(); suffix = special_cases.get(stream_upper_key)\n",
    "            if suffix: size_constant_name = f'INPUT_SIZE_{suffix}'\n",
    "            elif stream == 'bbox': size_constant_name = 'INPUT_SIZE_BBOX'\n",
    "            elif stream == 'pose': size_constant_name = 'INPUT_SIZE_POSE'\n",
    "            # Add other stream-specific mappings if necessary\n",
    "\n",
    "            if size_constant_name in globals():\n",
    "                 input_size = globals()[size_constant_name]\n",
    "                 if not isinstance(input_size, int) or input_size <= 0:\n",
    "                      raise ValueError(f\"Invalid input size ({input_size}) retrieved for constant {size_constant_name} (stream {stream}).\")\n",
    "                 current_input_sizes[stream] = input_size\n",
    "            else:\n",
    "                 raise ValueError(f\"Input size constant '{size_constant_name}' not found in globals for active stream '{stream}'\")\n",
    "\n",
    "        # Ensure all active streams have a size\n",
    "        if len(current_input_sizes) != len(ACTIVE_STREAMS):\n",
    "             missing_streams = set(ACTIVE_STREAMS) - set(current_input_sizes.keys())\n",
    "             raise ValueError(f\"Input sizes could not be determined for all active streams. Missing: {missing_streams}\")\n",
    "\n",
    "        model = MultiStreamAdaptiveLSTM(\n",
    "            input_sizes=current_input_sizes,\n",
    "            lstm_hidden_size=LSTM_HIDDEN_SIZE,\n",
    "            num_lstm_layers=NUM_LSTM_LAYERS,\n",
    "            num_classes=NUM_CLASSES,\n",
    "            attention_dim=ATTENTION_DIM,\n",
    "            dropout_rate=DROPOUT_RATE,\n",
    "            stream_names=ACTIVE_STREAMS # Pass only active streams the model should use\n",
    "        ).to(DEVICE)\n",
    "\n",
    "        print(\"\\n--- Model Architecture ---\"); print(model);\n",
    "        num_params = sum(p.numel() for p in model.parameters() if p.requires_grad);\n",
    "        print(f\"Total Trainable Parameters: {num_params:,}\"); print(\"-\" * 30)\n",
    "\n",
    "    except (KeyError, ValueError, TypeError, RuntimeError, Exception) as e:\n",
    "         print(f\"FATAL ERROR initializing model: {e}\")\n",
    "         raise # Re-raise to stop execution\n",
    "\n",
    "    # --- Class Weighting & Optimizer ---\n",
    "    print(\"\\nCalculating Class Weights for Loss Function...\")\n",
    "    class_weights = torch.tensor([1.0, 1.0], dtype=torch.float32).to(DEVICE) # Default weights\n",
    "    try:\n",
    "        # Ensure train_dataset exists and has labels\n",
    "        if train_dataset and hasattr(train_dataset, 'labels') and len(train_dataset.labels) > 0:\n",
    "            balanced_train_labels_list = train_dataset.labels.cpu().numpy() # Get labels from balanced dataset instance\n",
    "            count_0 = np.count_nonzero(balanced_train_labels_list == 0);\n",
    "            count_1 = np.count_nonzero(balanced_train_labels_list == 1);\n",
    "            total = len(balanced_train_labels_list)\n",
    "\n",
    "            if total > 0 and count_0 > 0 and count_1 > 0: # Ensure counts are valid\n",
    "                weight_0 = total / (2.0 * count_0); weight_1 = total / (2.0 * count_1)\n",
    "                class_weights = torch.tensor([weight_0, weight_1], dtype=torch.float32).to(DEVICE)\n",
    "                print(f\"Using Calculated Class Weights for Loss: 0={weight_0:.2f}, 1={weight_1:.2f}\")\n",
    "            elif total > 0:\n",
    "                 print(f\"Warning: Only one class present in balanced training labels (0: {count_0}, 1: {count_1}). Using default weights [1.0, 1.0].\")\n",
    "            else:\n",
    "                 print(\"Warning: Training dataset has no labels. Using default weights [1.0, 1.0].\")\n",
    "        else:\n",
    "            print(\"Warning: Could not access labels from training dataset. Using default weights [1.0, 1.0].\")\n",
    "\n",
    "    except Exception as e:\n",
    "         print(f\"Error calculating class weights: {e}. Using default weights [1.0, 1.0].\")\n",
    "\n",
    "\n",
    "    # Initialize criterion and optimizer only if model exists\n",
    "    criterion = None\n",
    "    optimizer = None\n",
    "    if model:\n",
    "         try:\n",
    "             criterion = nn.CrossEntropyLoss(weight=class_weights)\n",
    "             optimizer = optim.Adam(model.parameters(), lr=LEARNING_RATE)\n",
    "         except Exception as e:\n",
    "              print(f\"FATAL ERROR creating criterion or optimizer: {e}\")\n",
    "              raise # Stop execution\n",
    "    else:\n",
    "         raise RuntimeError(\"Model was not initialized. Cannot create criterion/optimizer.\")\n",
    "\n",
    "\n",
    "    best_val_f1 = -1.0; train_losses, val_losses = [], []; train_accs, val_accs = [], []; val_f1s = []\n",
    "    best_epoch_path = \"\" # Initialize before loop\n",
    "\n",
    "\n",
    "    # --- Training Loop ---\n",
    "    print(\"\\n--- Starting Training ---\")\n",
    "    if not train_loader or not val_loader:\n",
    "         raise RuntimeError(\"DataLoaders are not available. Cannot start training.\")\n",
    "\n",
    "    for epoch in range(NUM_EPOCHS):\n",
    "        epoch_start_time = time.time()\n",
    "        try:\n",
    "            train_loss, train_acc = train_epoch(model, train_loader, optimizer, criterion, DEVICE)\n",
    "            val_metrics = evaluate_epoch(model, val_loader, criterion, DEVICE)\n",
    "            epoch_duration = time.time() - epoch_start_time\n",
    "\n",
    "            # Store metrics\n",
    "            train_losses.append(train_loss); val_losses.append(val_metrics['loss'])\n",
    "            train_accs.append(train_acc); val_accs.append(val_metrics['accuracy'])\n",
    "            val_f1s.append(val_metrics['f1'])\n",
    "\n",
    "            print(f\"--- Epoch {epoch+1}/{NUM_EPOCHS} ({epoch_duration:.2f} sec) ---\")\n",
    "            print(f\"  Train Loss: {train_loss:.4f}, Train Acc: {train_acc:.4f}\")\n",
    "            print(f\"  Val Loss:   {val_metrics.get('loss', float('nan')):.4f}, Val Acc:  {val_metrics.get('accuracy', float('nan')):.4f}\") # Use .get for safety\n",
    "            print(f\"  Val Prec:   {val_metrics.get('precision', float('nan')):.4f}, Recall: {val_metrics.get('recall', float('nan')):.4f}, F1: {val_metrics.get('f1', float('nan')):.4f}\")\n",
    "            print(f\"  Val AUC:    {val_metrics.get('auc', float('nan')):.4f}\") # AUC might be nan\n",
    "\n",
    "            # Save best model based on validation F1\n",
    "            current_f1 = val_metrics.get('f1', -1.0) # Default to -1 if F1 is missing/NaN\n",
    "            if not np.isnan(current_f1) and current_f1 > best_val_f1:\n",
    "                best_val_f1 = current_f1\n",
    "                # Ensure active streams string is filesystem-safe\n",
    "                safe_streams_str = \"_\".join(sorted(ACTIVE_STREAMS)).replace('/', '_').replace('\\\\', '_')\n",
    "                current_best_epoch_path = f'best_model_{safe_streams_str}_ep{epoch+1}.pth'\n",
    "                try:\n",
    "                    torch.save(model.state_dict(), current_best_epoch_path)\n",
    "                    # Clean up previous best model file if it exists? Optional.\n",
    "                    # if best_epoch_path and os.path.exists(best_epoch_path):\n",
    "                    #     os.remove(best_epoch_path)\n",
    "                    best_epoch_path = current_best_epoch_path # Store path to the new best model\n",
    "                    print(f\"  >> Saved new best model to {best_epoch_path} (F1: {best_val_f1:.4f})\")\n",
    "                except Exception as e:\n",
    "                     print(f\"  >> Error saving model checkpoint {current_best_epoch_path}: {e}\")\n",
    "            print(\"-\" * 30)\n",
    "\n",
    "        except KeyboardInterrupt:\n",
    "             print(\"\\nTraining interrupted by user.\")\n",
    "             break # Exit training loop\n",
    "        except Exception as e:\n",
    "             print(f\"\\n--- ERROR DURING EPOCH {epoch+1} ---\")\n",
    "             print(f\"Error: {e}\")\n",
    "             # Option: break the loop, or try to continue?\n",
    "             # For stability, breaking might be safer if the error is persistent (e.g., OOM)\n",
    "             print(\"Stopping training due to error.\")\n",
    "             import traceback\n",
    "             traceback.print_exc() # Print stack trace for debugging\n",
    "             break\n",
    "\n",
    "    print(\"--- Training Finished ---\")\n",
    "\n",
    "    # --- Plotting ---\n",
    "    print(\"\\n--- Plotting Training History ---\")\n",
    "    try:\n",
    "        # Ensure metrics lists are not empty before plotting\n",
    "        if train_losses and val_losses and train_accs and val_accs and val_f1s:\n",
    "            fig, axes = plt.subplots(1, 2, figsize=(12, 5))\n",
    "            epochs_range = range(1, len(train_losses) + 1) # Use actual number of completed epochs\n",
    "\n",
    "            axes[0].plot(epochs_range, train_losses, label='Train Loss')\n",
    "            axes[0].plot(epochs_range, val_losses, label='Val Loss')\n",
    "            axes[0].set_xlabel('Epoch'); axes[0].set_ylabel('Loss'); axes[0].set_title('Loss Curve'); axes[0].legend(); axes[0].grid(True)\n",
    "\n",
    "            axes[1].plot(epochs_range, train_accs, label='Train Accuracy')\n",
    "            axes[1].plot(epochs_range, val_accs, label='Val Accuracy')\n",
    "            axes[1].plot(epochs_range, val_f1s, label='Val F1-Score', linestyle='--')\n",
    "            axes[1].set_xlabel('Epoch'); axes[1].set_ylabel('Metric'); axes[1].set_title('Accuracy & F1-Score Curve'); axes[1].legend(); axes[1].grid(True)\n",
    "\n",
    "            plt.tight_layout(); plt.show()\n",
    "        else:\n",
    "             print(\"Skipping plotting - insufficient metric data collected.\")\n",
    "    except Exception as e:\n",
    "         print(f\"Error generating plots: {e}\")\n",
    "\n",
    "\n",
    "    # --- Final Evaluation ---\n",
    "    print(\"\\n--- Final Evaluation on Validation Set using Best Model ---\")\n",
    "    final_metrics = {} # Initialize before try\n",
    "    true_labels, pred_labels = np.array([]), np.array([]) # Initialize before try\n",
    "    try:\n",
    "        # Check if a best model was saved and exists\n",
    "        if best_epoch_path and os.path.exists(best_epoch_path):\n",
    "            print(f\"Loading best saved model '{best_epoch_path}'\")\n",
    "            try:\n",
    "                # Load state dict onto the correct device\n",
    "                state_dict = torch.load(best_epoch_path, map_location=DEVICE)\n",
    "                model.load_state_dict(state_dict)\n",
    "                print(\" -> Best model loaded successfully.\")\n",
    "            except FileNotFoundError:\n",
    "                 print(f\"Warn: Best model file '{best_epoch_path}' not found despite check. Evaluating final model state.\")\n",
    "            except Exception as e:\n",
    "                 print(f\"Warn: Error loading best model state_dict from {best_epoch_path}: {e}. Evaluating final model state.\")\n",
    "        else:\n",
    "             print(f\"Warning: No best model saved or found at '{best_epoch_path}'. Evaluating final model state from training end.\")\n",
    "\n",
    "        # Perform final evaluation\n",
    "        if model and val_loader and criterion:\n",
    "             final_metrics = evaluate_epoch(model, val_loader, criterion, DEVICE)\n",
    "             true_labels, pred_labels = get_predictions_and_labels(model, val_loader, DEVICE)\n",
    "        else:\n",
    "             print(\"Error: Model, validation loader, or criterion not available for final evaluation.\")\n",
    "             # Set final metrics to NaN/empty if evaluation cannot run\n",
    "             final_metrics = {'accuracy': float('nan'), 'precision': float('nan'), 'recall': float('nan'), 'f1': float('nan'), 'auc': float('nan'), 'loss': float('nan')}\n",
    "             true_labels, pred_labels = np.array([]), np.array([])\n",
    "\n",
    "\n",
    "        # Display results\n",
    "        print(\"\\n--- Final Performance Metrics ---\")\n",
    "        print(f\"  Streams:   {', '.join(ACTIVE_STREAMS)}\")\n",
    "        print(f\"  Accuracy:  {final_metrics.get('accuracy', float('nan')):.4f}\")\n",
    "        print(f\"  Precision: {final_metrics.get('precision', float('nan')):.4f}\")\n",
    "        print(f\"  Recall:    {final_metrics.get('recall', float('nan')):.4f}\")\n",
    "        print(f\"  F1 Score:  {final_metrics.get('f1', float('nan')):.4f}\")\n",
    "        print(f\"  AUC:       {final_metrics.get('auc', float('nan')):.4f}\")\n",
    "        print(f\"  Loss:      {final_metrics.get('loss', float('nan')):.4f}\")\n",
    "        if best_epoch_path:\n",
    "             print(f\"  (Best Validation F1 during training: {best_val_f1:.4f} - from model '{os.path.basename(best_epoch_path)}')\")\n",
    "        else:\n",
    "             print(f\"  (Best Validation F1 during training: {best_val_f1:.4f} - model file not saved/found)\")\n",
    "\n",
    "\n",
    "        # Plot Confusion Matrix\n",
    "        if true_labels.size > 0 and pred_labels.size > 0: # Ensure labels were generated\n",
    "             print(\"\\n--- Confusion Matrix ---\")\n",
    "             try:\n",
    "                 cm = confusion_matrix(true_labels, pred_labels, labels=[0, 1]) # Explicitly define labels\n",
    "                 labels_display = ['Not Crossing', 'Crossing']\n",
    "                 disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=labels_display);\n",
    "                 disp.plot(cmap=plt.cm.Blues);\n",
    "                 plt.title(f'CM ({\", \".join(ACTIVE_STREAMS)})');\n",
    "                 plt.show()\n",
    "             except ValueError as e:\n",
    "                  print(f\"Error generating confusion matrix: {e}\")\n",
    "                  print(f\"True labels unique: {np.unique(true_labels)}, Pred labels unique: {np.unique(pred_labels)}\")\n",
    "             except Exception as e:\n",
    "                  print(f\"Unexpected error generating confusion matrix display: {e}\")\n",
    "        else:\n",
    "             print(\"Skipping confusion matrix - no prediction data available.\")\n",
    "\n",
    "    except Exception as e:\n",
    "         print(f\"\\n--- ERROR DURING FINAL EVALUATION ---\")\n",
    "         print(f\"Error: {e}\")\n",
    "         import traceback\n",
    "         traceback.print_exc()\n",
    "\n",
    "\n",
    "    print(\"\\n--- Script Complete ---\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "09df06f3",
   "metadata": {
    "papermill": {
     "duration": 0.014772,
     "end_time": "2025-05-05T15:59:16.242625",
     "exception": false,
     "start_time": "2025-05-05T15:59:16.227853",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 6993690,
     "sourceId": 11201333,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6993708,
     "sourceId": 11201362,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6993722,
     "sourceId": 11201388,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6993740,
     "sourceId": 11201422,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6993794,
     "sourceId": 11201506,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6993809,
     "sourceId": 11201543,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7034191,
     "sourceId": 11255589,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7127490,
     "sourceId": 11382982,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7142036,
     "sourceId": 11402679,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7333398,
     "sourceId": 11684148,
     "sourceType": "datasetVersion"
    },
    {
     "modelId": 279383,
     "modelInstanceId": 258142,
     "sourceId": 302300,
     "sourceType": "modelInstanceVersion"
    },
    {
     "modelId": 283333,
     "modelInstanceId": 262207,
     "sourceId": 307831,
     "sourceType": "modelInstanceVersion"
    },
    {
     "modelId": 288527,
     "modelInstanceId": 267476,
     "sourceId": 316944,
     "sourceType": "modelInstanceVersion"
    },
    {
     "modelId": 297682,
     "modelInstanceId": 276781,
     "sourceId": 329886,
     "sourceType": "modelInstanceVersion"
    },
    {
     "modelId": 297702,
     "modelInstanceId": 276800,
     "sourceId": 329908,
     "sourceType": "modelInstanceVersion"
    },
    {
     "isSourceIdPinned": true,
     "modelId": 314775,
     "modelInstanceId": 294156,
     "sourceId": 352620,
     "sourceType": "modelInstanceVersion"
    }
   ],
   "dockerImageVersionId": 30918,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4062.371482,
   "end_time": "2025-05-05T15:59:19.891964",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-05T14:51:37.520482",
   "version": "2.6.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "0113bd8e62a145db8c287d54845dd9ef": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "011c3931fd614278a2f3fcccfcbbf25c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "029dae7523fa4a4496086d63f11059df": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c8bc0ffd6cd7464a8bdb96ccdfa5bd09",
       "max": 3435.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_030b6f77ef23455e8dbf0c33fd06f42d",
       "tabbable": null,
       "tooltip": null,
       "value": 3435.0
      }
     },
     "030b6f77ef23455e8dbf0c33fd06f42d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "046b75b4219746ddaa6e8b9b4aca5dc5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "04a9969cafae4fcd9969f630d3be6ed4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "05f7334098ae468283b70d3a2e4d6f2c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4cd21fd23c5e4573ba0bf0d7db3ce2e9",
       "placeholder": "​",
       "style": "IPY_MODEL_7a21c15542f34b99a3f2df31c52a9ceb",
       "tabbable": null,
       "tooltip": null,
       "value": " 3434/3435 [03:19&lt;00:00, 16.55it/s]"
      }
     },
     "06f9de99ae3743d6a4eb098e057cc3b8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_6b6faa1ce4c247bdb19a8699b3306db3",
       "placeholder": "​",
       "style": "IPY_MODEL_f1951af45f404b58bf013ab4e5b5d8cc",
       "tabbable": null,
       "tooltip": null,
       "value": "Extracting: 100%"
      }
     },
     "0725984095524c3e802512451bfc8623": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_5c5be073d1964e3f8cfeb762069b118d",
        "IPY_MODEL_029dae7523fa4a4496086d63f11059df",
        "IPY_MODEL_fa85c2b12318474abf1267c3af23432b"
       ],
       "layout": "IPY_MODEL_1e02932eb0344a45b24e4bb561cbd1d7",
       "tabbable": null,
       "tooltip": null
      }
     },
     "0786c4620b634303a73b4eec1cfcd51d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_58acbb5e30e34469a81c6c522b3bc374",
       "placeholder": "​",
       "style": "IPY_MODEL_c2a64bfafcb04f1e82a1d4bdf34941ed",
       "tabbable": null,
       "tooltip": null,
       "value": " 3434/3435 [03:21&lt;00:00, 16.56it/s]"
      }
     },
     "080265fa70554357873b9eb02e1fd812": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_1fc7b93fbb2249fe9b2a8ebe5686ebef",
       "placeholder": "​",
       "style": "IPY_MODEL_93faa3a0b86a4827805f9cec53c1e802",
       "tabbable": null,
       "tooltip": null,
       "value": "Generating CM Data:  99%"
      }
     },
     "085d98a902dc44f3a9de982cdca7ea6d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "086e9d97b1c540d08c3a5b3d74919516": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "0934105f9c5f4f9ca001280e852efa78": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0956b9a3e491452ea6dafe827266ec21": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_ae1ba0a573a249de8bc5b51010f709b9",
        "IPY_MODEL_eef8ea14ae564b9db9d59b5e7d9bbcf2",
        "IPY_MODEL_e6544a8e26ac4e2bb6c881d123eceac0"
       ],
       "layout": "IPY_MODEL_598c4189337a4eca976cf7a0f21d715d",
       "tabbable": null,
       "tooltip": null
      }
     },
     "0a816b779c304cc59314c9368ea0390c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "0b0e6a2cb0e9453da5a997a3d4806802": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_5cb334c8911847e1b2b2099722a1e1f8",
        "IPY_MODEL_8cc3b878f57f45e8b033399281c81be2",
        "IPY_MODEL_21d556f32b9b4b7087f84ec88d62ed4d"
       ],
       "layout": "IPY_MODEL_8489fa4b34a141668c192ad95de56b0b",
       "tabbable": null,
       "tooltip": null
      }
     },
     "0bd6d16768694bf08b6b96e712585f4b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "0bfeb4fdf4434e2eb27b0fd0c1a7043a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_d6f5b2e369b642578275f91a027cd828",
       "placeholder": "​",
       "style": "IPY_MODEL_dfb3aeac0c76455bb3d116e5977cc1d5",
       "tabbable": null,
       "tooltip": null,
       "value": " 3434/3435 [03:20&lt;00:00, 16.65it/s]"
      }
     },
     "0d44dc9653f747adb0bd76818affbf58": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_13da4d24c5164edfa9ef05ae7dc04ad7",
       "max": 130.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_6518b2a8d6864ed4949ecb8eedf39f5a",
       "tabbable": null,
       "tooltip": null,
       "value": 130.0
      }
     },
     "0da8495dc1e6443f8d7d1ddb50083f5d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0e22153b537e4d75bcc3677c81630ea6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "0e3522272f4f40179d0e00b68bac1028": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "0ea1a29f011842d0a80c6c848c367dce": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_25cfd2a3357947b0b1a741b1d65eaf80",
        "IPY_MODEL_e10bba956b92469687aa9c534f46e9d2",
        "IPY_MODEL_b140025112c343a295a0af24643008a0"
       ],
       "layout": "IPY_MODEL_bdc9d3d3862843369447ac0d1e7333fb",
       "tabbable": null,
       "tooltip": null
      }
     },
     "0fa7386d02584974917a2461cd988bf9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "0feb7b6c4e88494bb5f34ab458a98a7d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_1c12869424df4d3fb089859baa324f8f",
        "IPY_MODEL_d970eb67d3a24c899e25df711ca4cb1a",
        "IPY_MODEL_fb28a6cd59d74d398f7ec5e529436cd4"
       ],
       "layout": "IPY_MODEL_8dcc23e6aa514f218648c5ef6f314247",
       "tabbable": null,
       "tooltip": null
      }
     },
     "105d3ee837ef4f2bb9041f3078b2d983": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "10a957ef59824edc82240cd3dd7e5d97": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "10c34564f11b488882af33f8dd93fdd4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "115057979e284065a868c55ff3e81842": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "11de4e0db9f246dba1f5f7d0bc23b54c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_085d98a902dc44f3a9de982cdca7ea6d",
       "placeholder": "​",
       "style": "IPY_MODEL_c318225f04a64ea9aa96b67e7c96e372",
       "tabbable": null,
       "tooltip": null,
       "value": "Generating Sequences for [&#x27;set05&#x27;]: 100%"
      }
     },
     "12b9b371adbf495db98f5aa496547221": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_2c3c6df481f54a42926071af2627c3e2",
       "placeholder": "​",
       "style": "IPY_MODEL_54448e4683ca40bda777886577023906",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating:  98%"
      }
     },
     "13da4d24c5164edfa9ef05ae7dc04ad7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "13da57c6332f4446a2706ea01d149666": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "146f6f987c0647879598fc6555c1fad7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_f07e4f6ec77f46819c0369d67feeff3d",
        "IPY_MODEL_bb1e8cc245ee42f8973b3f540d0b24e9",
        "IPY_MODEL_b01a53f593c44d13887bf4c268688e9d"
       ],
       "layout": "IPY_MODEL_2f2705f663ea4cb080c8c95990090940",
       "tabbable": null,
       "tooltip": null
      }
     },
     "14e9f42112a243cf973cc6bec048140c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "14eceddc89544f999f5235d44ef1ad99": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "161d214dbe9d4c818cb3acb566e48732": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_28c3f0691e0a4d61889d4e101128559d",
       "placeholder": "​",
       "style": "IPY_MODEL_a62aa174c7014a1d95fd90c1593f5215",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "1671c61449c248978519dc80c6a456ae": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5261ae2f8ed047af80439bd8be25aac3",
       "max": 3435.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_a946b5d8a2ac4c5dbd811caa98929117",
       "tabbable": null,
       "tooltip": null,
       "value": 3435.0
      }
     },
     "16a6c23872ab4ab0a67765bcb6dfdab1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e2f454e8d6304feaa9f8cedaa41af443",
       "placeholder": "​",
       "style": "IPY_MODEL_22193f7e4a4647d099b39fd723d4f71a",
       "tabbable": null,
       "tooltip": null,
       "value": " 53/53 [00:01&lt;00:00, 38.48it/s]"
      }
     },
     "17447772e6a74cfb836550639dbb8d63": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "18a6cadadaf44cc1afb0272db0c1d86c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "192260ac8f934495993f30de4e2a9a39": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "1a2a6433a3a04d0ca56099a8f00e022c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "1a31e12a1d9b4c20ad2121b159a42fef": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1a82d35aa37c4692828ef1e54ce33488": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_6a1c146801084a28aaf2d87c1cb9b459",
       "max": 130.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_4c9c9275ea964406ac07f2e4de7ab08e",
       "tabbable": null,
       "tooltip": null,
       "value": 130.0
      }
     },
     "1afc84c0f9e44ee98b5afabfc26f4c14": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c0d57deee0404300bede46a234105316",
       "max": 130.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_4f454ebae46149c3a460e2ccdbe71185",
       "tabbable": null,
       "tooltip": null,
       "value": 130.0
      }
     },
     "1bc96663bbf24f8fae90ccac83d234b2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "1c12869424df4d3fb089859baa324f8f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_36d5a788795b4b0b87a67c68a3315fe2",
       "placeholder": "​",
       "style": "IPY_MODEL_17447772e6a74cfb836550639dbb8d63",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating:  98%"
      }
     },
     "1dba9c53e6d64f6aa618796a213d40db": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f52672e3d1254f7aa032bbf807a3182f",
       "placeholder": "​",
       "style": "IPY_MODEL_dc923b02158f4761a2f24ce9b46d456c",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "1e02932eb0344a45b24e4bb561cbd1d7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "1fc7b93fbb2249fe9b2a8ebe5686ebef": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1feb7d2975b34fa09d2e330ed70a2d04": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_12b9b371adbf495db98f5aa496547221",
        "IPY_MODEL_7075bd4125f8488583e7f4a6d8b73027",
        "IPY_MODEL_cb505e8bb8824c3aad876bc95fbdc2e9"
       ],
       "layout": "IPY_MODEL_c4f17561c8cf4fc4aac4beed3004b293",
       "tabbable": null,
       "tooltip": null
      }
     },
     "21c6c4c4cefc4ca98a1410770b8cc5b2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "21d556f32b9b4b7087f84ec88d62ed4d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_13da57c6332f4446a2706ea01d149666",
       "placeholder": "​",
       "style": "IPY_MODEL_37eae259048a445e99d82df32505e1a6",
       "tabbable": null,
       "tooltip": null,
       "value": " 3434/3435 [03:21&lt;00:00, 16.74it/s]"
      }
     },
     "21fa4fc65f3b4f2f99d9445e7a8a878c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "22155aa87b49466eaf77f87abe50fb73": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "22193f7e4a4647d099b39fd723d4f71a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "22d1aa2a6696423593fa9fd33e00834a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "230e1de9d55a437e8e2968aca1723641": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "235e1c8307de4fbaac76751597b01cac": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "235f455713e749fc8c501ed269ce442b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "24b578a4a5d24aa7935939b09fb7fe04": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_dfda602bfdd244b497e997816583037e",
        "IPY_MODEL_df5d743c512c46d7b895f183b6606482",
        "IPY_MODEL_4486caae0518462fa8768e16ec6e67f5"
       ],
       "layout": "IPY_MODEL_dec9c34a4fbd416d8e7046dc04fb9df4",
       "tabbable": null,
       "tooltip": null
      }
     },
     "2526c4845ead43e68d175083fda25f04": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "25cfd2a3357947b0b1a741b1d65eaf80": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4fd9d68a4533490595778b418fdb43e5",
       "placeholder": "​",
       "style": "IPY_MODEL_45d16f8edf464041b0316a5a7db9190d",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating:  98%"
      }
     },
     "263fa93b4041461096160fce270990bf": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "26f43c7d9b0b4b3d86af973e9c2d88fd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f659bfa9fcd64a0d8d2640d2e3d6f393",
       "placeholder": "​",
       "style": "IPY_MODEL_76d5688348bd4b7db1c9ebb5d34742d6",
       "tabbable": null,
       "tooltip": null,
       "value": " 333454/333454 [13:36&lt;00:00, 406.43it/s]"
      }
     },
     "27338672c1344e8f8154a4b415224e40": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "28c3f0691e0a4d61889d4e101128559d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "29c6584860b24b29a205f6d43093a12e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "2aca15dc7c68439eb16216d13072e87c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2ad3cd1387994e8c818b1908d4f5b8b8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "2bd624acced541d49c2d501209d2d2a7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "2c2c25408c1e4f2c9e156481e8a50f12": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "2c3c6df481f54a42926071af2627c3e2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2c591b30eeac4b7083095c041e13fdf5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_57cedb53623545d58a827bc1b454cdd9",
       "max": 130.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_c622e4eafba2413a8cef769566359810",
       "tabbable": null,
       "tooltip": null,
       "value": 130.0
      }
     },
     "2ccc2283e4d24b40a56ad9dfda775cab": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f9ec7e0f623040829e0e325e44857a7a",
       "placeholder": "​",
       "style": "IPY_MODEL_e85c32f2132a4980ac1941c17fce4fd6",
       "tabbable": null,
       "tooltip": null,
       "value": " 3434/3435 [03:21&lt;00:00, 16.64it/s]"
      }
     },
     "2f2705f663ea4cb080c8c95990090940": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "2f38f84370d04d17b3bfb1442cdafbc2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2fa81c2b35c14fa7b68b09ac2beb2e1c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_230e1de9d55a437e8e2968aca1723641",
       "max": 3.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_b8b5eb829bdd44c9a39452892c4907f8",
       "tabbable": null,
       "tooltip": null,
       "value": 3.0
      }
     },
     "3010139744e140b1ae1926732c5d0a25": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "307c69eb99414ad198027e79255c7d41": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_eaf2a4f9f5ca46c3b110b4948118a723",
       "max": 3435.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_457dc9b59db6445c818f5eba0e09247d",
       "tabbable": null,
       "tooltip": null,
       "value": 3435.0
      }
     },
     "30820146017b41b69df5ad89dc1eb58a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_3dca9bed25744d1aa7135fffad9d96f8",
        "IPY_MODEL_78b7ba451a8e4287a54d94dfaf172e3d",
        "IPY_MODEL_660c8a717a644d21bf54144a17ad2314"
       ],
       "layout": "IPY_MODEL_04a9969cafae4fcd9969f630d3be6ed4",
       "tabbable": null,
       "tooltip": null
      }
     },
     "313c61f3f3c5465ab356fa29a6b33de2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "31bb26d1894348caae9aef2d29984ffc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_8ba0f06d2a2b4d779617ea20ccd76265",
       "placeholder": "​",
       "style": "IPY_MODEL_75ff474cc8cd4e0daee76bade0f165e1",
       "tabbable": null,
       "tooltip": null,
       "value": " 127/130 [00:08&lt;00:00, 23.52it/s]"
      }
     },
     "3297ac29b68d4adfb73f5971485652e5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "34630daebaaf4c6586b797e37ae8e651": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f857f95eedd84cbfbb9afec883488c46",
       "placeholder": "​",
       "style": "IPY_MODEL_bc22c864ed50443cbc14caa24d62cd03",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "356b3065250d4267998d7cb4708f66cb": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3592d875d2f5474aaac263cd99e34f53": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0934105f9c5f4f9ca001280e852efa78",
       "placeholder": "​",
       "style": "IPY_MODEL_370199a2e00a43f182ef61b9f2e3ef07",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "36c84a206e164959bda828508b53ffb6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "36d5a788795b4b0b87a67c68a3315fe2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "370199a2e00a43f182ef61b9f2e3ef07": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "37eae259048a445e99d82df32505e1a6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "3b622144a47f4d7ebde093508d45ddd6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9e2bcc43096e4793ab141c0bc888e975",
       "placeholder": "​",
       "style": "IPY_MODEL_a5cefeb6ed87478eb94426840bea0f7d",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating:  98%"
      }
     },
     "3b7cb6c053b047c5aa2a73eb20ac768e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3b874256d6464d59acc576b5a713c065": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "3bf6a628d14941579fdf966222ef738d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "3c7e5641b37647ce9b73116902de5c8c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3d91473cd27040d3a74bf2054bddb2f5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3dbefffcdb984325b15dd0f747327e88": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3dca9bed25744d1aa7135fffad9d96f8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7b3358b4df144132841b82ee4a573ae3",
       "placeholder": "​",
       "style": "IPY_MODEL_0bd6d16768694bf08b6b96e712585f4b",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating:  98%"
      }
     },
     "3ed9c7bd4dd54babb305807a7c933154": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_6e30868d34284412a86b2e96c8ffcd5f",
        "IPY_MODEL_acc42ec30c2b418890775b44bd6f0519",
        "IPY_MODEL_fb235766f2dd44dea968d312ceca55d2"
       ],
       "layout": "IPY_MODEL_0a816b779c304cc59314c9368ea0390c",
       "tabbable": null,
       "tooltip": null
      }
     },
     "42be712c5ed64ea29338284468dc10e3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_10c34564f11b488882af33f8dd93fdd4",
       "placeholder": "​",
       "style": "IPY_MODEL_b9d0a2ed2e924ab4b74189b819fbde47",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "439db3ab95154d9b8d127661717afc98": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_bfaa0708f7b146269b9a2aa9f3e10844",
       "placeholder": "​",
       "style": "IPY_MODEL_abbe4b2330ee4b5894c330dde3655623",
       "tabbable": null,
       "tooltip": null,
       "value": " 3435/3435 [03:21&lt;00:00, 16.53it/s]"
      }
     },
     "444f6bff57f14425b379baea6570d9e4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_bf55b828dd704b5e82a1e0a7b22a29d5",
       "placeholder": "​",
       "style": "IPY_MODEL_2526c4845ead43e68d175083fda25f04",
       "tabbable": null,
       "tooltip": null,
       "value": " 128/130 [00:08&lt;00:00, 20.85it/s]"
      }
     },
     "4486caae0518462fa8768e16ec6e67f5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_011c3931fd614278a2f3fcccfcbbf25c",
       "placeholder": "​",
       "style": "IPY_MODEL_508608489e2f480186326d4e387e6c2c",
       "tabbable": null,
       "tooltip": null,
       "value": " 3434/3435 [03:19&lt;00:00, 16.81it/s]"
      }
     },
     "457dc9b59db6445c818f5eba0e09247d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "45d16f8edf464041b0316a5a7db9190d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "45dc5a98360742ea802f3d5b8060378f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_80dfa9b37352497a9e464bde344ddd4c",
       "placeholder": "​",
       "style": "IPY_MODEL_c302dc398bc240b6826db6686a746387",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating:  98%"
      }
     },
     "4651c600d1b04eafa4f3d83d6cd5747f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "471caa5f27f445d7a96ee2721b707331": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "47d343d78e8b473ebdc3f53b1700feaf": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_486a860a22fc4c5b9e5810811756ebc9",
       "placeholder": "​",
       "style": "IPY_MODEL_8a24a4a8e4d94a7cb0b2ee7b4c610b41",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating:  99%"
      }
     },
     "47d983e429754e759f8fe67636028953": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "48595c58d38d4991938e7810f54ebe7e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "486a860a22fc4c5b9e5810811756ebc9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4977686c21964c9a8bf5450ca82b0877": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "49ca7c48069545789fc1a75d8bb06c41": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4a5c3ecdfc0549b7bfdd8f6bf36fb093": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "4a5ec246fd9143b290bc7f5ef64f6d10": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_be457efdf8f14d00b9a052eba6f0194e",
       "max": 130.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_f8e31bde38694596b97d89f1b498cd53",
       "tabbable": null,
       "tooltip": null,
       "value": 130.0
      }
     },
     "4b3ce1efe3c745239585d50dd83fc788": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "4c9c9275ea964406ac07f2e4de7ab08e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "4cd21fd23c5e4573ba0bf0d7db3ce2e9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4d415e710d4b48569a831cb560abc9e3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_a2995eed8295432dba9969a45ddce279",
       "placeholder": "​",
       "style": "IPY_MODEL_b69d1822761a4425af3f88e93b4ded31",
       "tabbable": null,
       "tooltip": null,
       "value": " 3434/3435 [03:21&lt;00:00, 16.59it/s]"
      }
     },
     "4f454ebae46149c3a460e2ccdbe71185": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "4fd9d68a4533490595778b418fdb43e5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "508608489e2f480186326d4e387e6c2c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "513a392c574746008b972d083a6b3c27": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_8eb21c42462b4c1282389feb5fbb0173",
       "max": 3435.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_b8316a3cb84d4b09846299c695f8d6a5",
       "tabbable": null,
       "tooltip": null,
       "value": 3435.0
      }
     },
     "5261ae2f8ed047af80439bd8be25aac3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "54448e4683ca40bda777886577023906": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "54b892c1f1624ce5b73edceafc71a976": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "55e93910c3714a23a6bf379952be5064": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_6a2e0b0ed20140e78b1d59d805dcb1f5",
       "max": 130.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_f8de9ed87c5c46dbad35a1eb2eb0406e",
       "tabbable": null,
       "tooltip": null,
       "value": 130.0
      }
     },
     "5639effcbdc64024a4195c6fe87b6ac7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "577f85ec64ac486b8d1ff20f88d5959c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "57cedb53623545d58a827bc1b454cdd9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "580f61fc17a943c39adbb09d9a01a97b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "58791ab5e5fd4548b6c179081c5de5ef": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_046b75b4219746ddaa6e8b9b4aca5dc5",
       "placeholder": "​",
       "style": "IPY_MODEL_086e9d97b1c540d08c3a5b3d74919516",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "58acbb5e30e34469a81c6c522b3bc374": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5964bd5dee0640659e7b1d05819d99c5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "598c4189337a4eca976cf7a0f21d715d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "59b7a7184e12442587f444f89cdbffe3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7e3c3d1ae7744c2eb1c3e40685345381",
       "placeholder": "​",
       "style": "IPY_MODEL_a7cb801b3712494e88e81ad7ccdda99c",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "59d97719c48c4804a7d1ca17e46ad127": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "5ae4cfddd11a4e87abb71cf10b2e7810": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "5b3a5285d7fd44599dca045c62c3d12e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "5b82df678d484a9f945fa79c9bdcf302": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5ba4317e0a6744a9bbba1658f8dc70e5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5bc8b9582a694e7bb023c9e1da62477b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5c55ab393bef4d58a36e9bb58ce411a2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_1dba9c53e6d64f6aa618796a213d40db",
        "IPY_MODEL_1a82d35aa37c4692828ef1e54ce33488",
        "IPY_MODEL_818ac50360e64acb8a993d76bc616033"
       ],
       "layout": "IPY_MODEL_a194cf98cf0c4d4ca8bf03eeb39dd9af",
       "tabbable": null,
       "tooltip": null
      }
     },
     "5c5be073d1964e3f8cfeb762069b118d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_21fa4fc65f3b4f2f99d9445e7a8a878c",
       "placeholder": "​",
       "style": "IPY_MODEL_7147aa18ad774cfeba45f08488b2d63d",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "5cb334c8911847e1b2b2099722a1e1f8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_999f37080d0a42db8792936506eff9f6",
       "placeholder": "​",
       "style": "IPY_MODEL_a3ec0105c2994edaba04aa0e07a78941",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "5cd5ac1d7fc54befb32e3cd32a5ff477": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5d9baf388d174d008d75aad7d4bf4921",
       "placeholder": "​",
       "style": "IPY_MODEL_f6b104d42da04e93bd948fc4070a49af",
       "tabbable": null,
       "tooltip": null,
       "value": "Loading YOLOP PKLs: 100%"
      }
     },
     "5ce5dc85f8654beab550f9e67bbb5fa0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_941d707c43574b978aff5c8cfb3cb290",
       "placeholder": "​",
       "style": "IPY_MODEL_fe997ee4c3fd4df1a2210e057b3e8d46",
       "tabbable": null,
       "tooltip": null,
       "value": " 128/130 [00:09&lt;00:00, 23.98it/s]"
      }
     },
     "5cfb518e33254c26877d06b0d3064879": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5d9baf388d174d008d75aad7d4bf4921": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5de48750b20149bb8331fa542f4efc3c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_105d3ee837ef4f2bb9041f3078b2d983",
       "placeholder": "​",
       "style": "IPY_MODEL_3bf6a628d14941579fdf966222ef738d",
       "tabbable": null,
       "tooltip": null,
       "value": " 129/130 [00:08&lt;00:00, 24.41it/s]"
      }
     },
     "5dff0ce840294b1da2bad6d4227ecf9c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_47d343d78e8b473ebdc3f53b1700feaf",
        "IPY_MODEL_85afd254a969482d94c9eeb91a12a887",
        "IPY_MODEL_5de48750b20149bb8331fa542f4efc3c"
       ],
       "layout": "IPY_MODEL_759b6ce2ed8b4c388aab74ebeafc50f8",
       "tabbable": null,
       "tooltip": null
      }
     },
     "5e69c36551544008b6b96cb1db9db430": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6089b2e2655742de882dd0e1b9ff5743": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_91dbc121689e49eeae21469430244cff",
        "IPY_MODEL_a06a7ea4e4404404adc5b1e928892bae",
        "IPY_MODEL_444f6bff57f14425b379baea6570d9e4"
       ],
       "layout": "IPY_MODEL_7909666248ea4da1aa39642b50472e84",
       "tabbable": null,
       "tooltip": null
      }
     },
     "6246756efd7d4e76b2c171f8e72284a2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ce46b0239df24c00976635010312c64e",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_9ead40aab9a54ac0a8ae431629c5de4e",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "6383e254217e4a0481e792907d091b29": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "6518b2a8d6864ed4949ecb8eedf39f5a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "65be7991c78a477ba683d1ee2b6ef4b2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_8a57c3fb57d9438ca67d349cffe49330",
       "max": 3435.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_4a5c3ecdfc0549b7bfdd8f6bf36fb093",
       "tabbable": null,
       "tooltip": null,
       "value": 3435.0
      }
     },
     "660c8a717a644d21bf54144a17ad2314": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0da8495dc1e6443f8d7d1ddb50083f5d",
       "placeholder": "​",
       "style": "IPY_MODEL_d2faddc062bb4ec49969f1df1b492400",
       "tabbable": null,
       "tooltip": null,
       "value": " 128/130 [00:08&lt;00:00, 22.86it/s]"
      }
     },
     "67355954bcbe4c4085f0ca45871492d9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "677dc89c003b4693976a0e9766f38500": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "67ae4e8723c94baf91794e99c1b3fbe8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "67b1cc7ec381403e82e1bd5990390ea5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "685505f8cb154f8397cd329e82ab49c8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_14eceddc89544f999f5235d44ef1ad99",
       "placeholder": "​",
       "style": "IPY_MODEL_83dad7ef8b72429c895a00ecbc6b281d",
       "tabbable": null,
       "tooltip": null,
       "value": " 129/130 [00:08&lt;00:00, 24.71it/s]"
      }
     },
     "68d3516ae53842238d071e949d27ee44": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "693fe3e9e12b46048419b51a8990e46d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "6a1c146801084a28aaf2d87c1cb9b459": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6a2e0b0ed20140e78b1d59d805dcb1f5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6ab803d35dce44468764f779f40801be": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "6b6faa1ce4c247bdb19a8699b3306db3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6c049b8f49294071a21a9eb3fdf043fc": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6ca389e52e9c429eb54aa854ae9b0ec2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "6d36339ac74c4e13ab8d7d5d35bd48db": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6e0d6bdb8db14ca5babadd10dfce5b70": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_06f9de99ae3743d6a4eb098e057cc3b8",
        "IPY_MODEL_a0f5c97b51474b898b932fe327604046",
        "IPY_MODEL_26f43c7d9b0b4b3d86af973e9c2d88fd"
       ],
       "layout": "IPY_MODEL_6d36339ac74c4e13ab8d7d5d35bd48db",
       "tabbable": null,
       "tooltip": null
      }
     },
     "6e30868d34284412a86b2e96c8ffcd5f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_86d02738087c494e8d6f0c7806279944",
       "placeholder": "​",
       "style": "IPY_MODEL_8500dcee47a141758b82622dae354e4b",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "6e70b4935f2443b3899571906c7cde4d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "6f2de58791ac45b084083c270b27aa2d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "702da8478a814528aa4c640407fffde1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_81d71cf7db4d4820b668b2dde1fbffb6",
       "placeholder": "​",
       "style": "IPY_MODEL_5ae4cfddd11a4e87abb71cf10b2e7810",
       "tabbable": null,
       "tooltip": null,
       "value": " 130/130 [00:08&lt;00:00, 26.79it/s]"
      }
     },
     "7075bd4125f8488583e7f4a6d8b73027": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9b2848286ba04b71861b2fb604262e2f",
       "max": 130.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_99798438401f494fb1ee22c2299db541",
       "tabbable": null,
       "tooltip": null,
       "value": 130.0
      }
     },
     "70a8d23cd76544d7a13121d8a503975a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "710993cb6d9b4a328cf973bf8d7aece3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "7147aa18ad774cfeba45f08488b2d63d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "71c02fea49044f07aa48d7b1abe0ffe5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "739cf597a39b4ca6a6fc775f734871c5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "747ceee7e3014d5c85ba30b6c045951a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_677dc89c003b4693976a0e9766f38500",
       "placeholder": "​",
       "style": "IPY_MODEL_693fe3e9e12b46048419b51a8990e46d",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "74d5ff2b3abc4d5e923744a15f8280b0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_580f61fc17a943c39adbb09d9a01a97b",
       "placeholder": "​",
       "style": "IPY_MODEL_cd5a42a47af844dfadb57d6569a71eb6",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "7517384934384d0fb519a2983f6d8b8b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_2aca15dc7c68439eb16216d13072e87c",
       "placeholder": "​",
       "style": "IPY_MODEL_fb00dec5a68d4a9da5effc44f78e109c",
       "tabbable": null,
       "tooltip": null,
       "value": " 53/53 [00:00&lt;00:00, 1899.45it/s]"
      }
     },
     "759b6ce2ed8b4c388aab74ebeafc50f8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "75d01257463b4246a3ddaf6ae42d64fb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3010139744e140b1ae1926732c5d0a25",
       "max": 3435.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_985db823cad04e90b3b76de930e9f152",
       "tabbable": null,
       "tooltip": null,
       "value": 3435.0
      }
     },
     "75ff474cc8cd4e0daee76bade0f165e1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "76d5688348bd4b7db1c9ebb5d34742d6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "7824c682762f442abc2c0ef590561533": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_161d214dbe9d4c818cb3acb566e48732",
        "IPY_MODEL_9b8065f3bd2646f399c3cf24bf9fed78",
        "IPY_MODEL_2ccc2283e4d24b40a56ad9dfda775cab"
       ],
       "layout": "IPY_MODEL_89c231a0c2b2431bb2b6ae178620adb9",
       "tabbable": null,
       "tooltip": null
      }
     },
     "78b7ba451a8e4287a54d94dfaf172e3d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9189e82afdc6473ebe7ee5f77b088973",
       "max": 130.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_2bd624acced541d49c2d501209d2d2a7",
       "tabbable": null,
       "tooltip": null,
       "value": 130.0
      }
     },
     "78dedc62b5f34199b28f03531cabb147": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "7909666248ea4da1aa39642b50472e84": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "7937ace435094b17a63fef59b803f569": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7a21c15542f34b99a3f2df31c52a9ceb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "7a9bc638056d4613a7e0e0d0e11a1267": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "7b241d5acd264e80b212fd3a6cdeda11": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7b3358b4df144132841b82ee4a573ae3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7b354314152a47a49b0af46edb69950c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_b1de5702c201423e9415180513894a0c",
        "IPY_MODEL_9e0a7ac5848b4393ac88c6282585ab3a",
        "IPY_MODEL_7517384934384d0fb519a2983f6d8b8b"
       ],
       "layout": "IPY_MODEL_3dbefffcdb984325b15dd0f747327e88",
       "tabbable": null,
       "tooltip": null
      }
     },
     "7c6bea6bdad94621b8577c0f154ba4a0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_fbf89328d3e9495995230b1dcc33ffef",
        "IPY_MODEL_0d44dc9653f747adb0bd76818affbf58",
        "IPY_MODEL_685505f8cb154f8397cd329e82ab49c8"
       ],
       "layout": "IPY_MODEL_6ab803d35dce44468764f779f40801be",
       "tabbable": null,
       "tooltip": null
      }
     },
     "7d67709f809d4e63bc4b55f6a5abe9fa": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7e3c3d1ae7744c2eb1c3e40685345381": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7e47e58358f34e82abee60f869c4714f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_89b0f53988f940faa0d69d0bca74ed7b",
        "IPY_MODEL_aa3d278f797747f79edf1ae876331a11",
        "IPY_MODEL_5ce5dc85f8654beab550f9e67bbb5fa0"
       ],
       "layout": "IPY_MODEL_e6252bd89d60485493c1a6189aee92b9",
       "tabbable": null,
       "tooltip": null
      }
     },
     "7e63aef7d75d40e6bc4611caec37adc4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_bb29a4e269824607931f04a2bf521639",
       "placeholder": "​",
       "style": "IPY_MODEL_d0aa05c2233541668157b55550e02ad2",
       "tabbable": null,
       "tooltip": null,
       "value": " 3435/3435 [03:20&lt;00:00, 16.53it/s]"
      }
     },
     "7ea9cf3deb304c0aac14bdfe52b0e625": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7f329730affb477c8de8a25aac92f6fe": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "80dfa9b37352497a9e464bde344ddd4c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "818ac50360e64acb8a993d76bc616033": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_235f455713e749fc8c501ed269ce442b",
       "placeholder": "​",
       "style": "IPY_MODEL_8642f5b9c53849bea4de0cf6254f7321",
       "tabbable": null,
       "tooltip": null,
       "value": " 130/130 [00:08&lt;00:00, 25.78it/s]"
      }
     },
     "81d71cf7db4d4820b668b2dde1fbffb6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8240f85048b74c98a0cf53034600b8c8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "83dad7ef8b72429c895a00ecbc6b281d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "8489fa4b34a141668c192ad95de56b0b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "8500dcee47a141758b82622dae354e4b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "85afd254a969482d94c9eeb91a12a887": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c0242316ca8c4507926963ac461b03ef",
       "max": 130.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_1a2a6433a3a04d0ca56099a8f00e022c",
       "tabbable": null,
       "tooltip": null,
       "value": 130.0
      }
     },
     "8642f5b9c53849bea4de0cf6254f7321": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "86aaf9f988df4cf7bfb21510976558e8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "86d02738087c494e8d6f0c7806279944": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8742a03a060a4e269b32219d32f8f8c6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "87dc41bfddad4e8dbeac3bdfc93ee80d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "8868af3b1e1d49eeaaa8f3c673289690": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8871e3926d024b2f8cf59f7c83a2266b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "89b0f53988f940faa0d69d0bca74ed7b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_10a957ef59824edc82240cd3dd7e5d97",
       "placeholder": "​",
       "style": "IPY_MODEL_115057979e284065a868c55ff3e81842",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating:  98%"
      }
     },
     "89c231a0c2b2431bb2b6ae178620adb9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "8a24a4a8e4d94a7cb0b2ee7b4c610b41": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "8a57c3fb57d9438ca67d349cffe49330": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8adcd6df7d414ff29784881f854c558f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_c51f60599f5543d2b60ec77747ded0fd",
        "IPY_MODEL_2fa81c2b35c14fa7b68b09ac2beb2e1c",
        "IPY_MODEL_d31a817737fb4367b8520d39a0fffeaf"
       ],
       "layout": "IPY_MODEL_ff3796b50d9a4fcf9c573b9df3b28d16",
       "tabbable": null,
       "tooltip": null
      }
     },
     "8ba0f06d2a2b4d779617ea20ccd76265": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8bbe35d457f2454cad43850f83061504": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_3592d875d2f5474aaac263cd99e34f53",
        "IPY_MODEL_9270813c64b04c3d886e30e12796945c",
        "IPY_MODEL_bce0eda06a704a84b933f140a6d9d5e0"
       ],
       "layout": "IPY_MODEL_21c6c4c4cefc4ca98a1410770b8cc5b2",
       "tabbable": null,
       "tooltip": null
      }
     },
     "8cc3b878f57f45e8b033399281c81be2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4651c600d1b04eafa4f3d83d6cd5747f",
       "max": 3435.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_ffc615a0046f4a9ab55eba85506e3f06",
       "tabbable": null,
       "tooltip": null,
       "value": 3435.0
      }
     },
     "8cff2b2d9b3b4158bb88c8055bc3aede": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8dcc23e6aa514f218648c5ef6f314247": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "8eb21c42462b4c1282389feb5fbb0173": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "908bda825b8d4eeb9eee20aaf564d5d3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9189e82afdc6473ebe7ee5f77b088973": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "91dbc121689e49eeae21469430244cff": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_b0fa402931864d3fa4680291f0908e82",
       "placeholder": "​",
       "style": "IPY_MODEL_dc6c8769fc144472827223776591bdeb",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating:  98%"
      }
     },
     "91e272524a3b4054aaa0d93aec361bf0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9270813c64b04c3d886e30e12796945c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ea809fd863974aeeaf32ef29a4dd32c2",
       "max": 3435.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_7a9bc638056d4613a7e0e0d0e11a1267",
       "tabbable": null,
       "tooltip": null,
       "value": 3435.0
      }
     },
     "92a14e0fc53c442695a166f6bbb223db": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5964bd5dee0640659e7b1d05819d99c5",
       "placeholder": "​",
       "style": "IPY_MODEL_0e22153b537e4d75bcc3677c81630ea6",
       "tabbable": null,
       "tooltip": null,
       "value": " 127/130 [00:08&lt;00:00, 23.36it/s]"
      }
     },
     "936512b0a496496bba5096e4d0f02511": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_747ceee7e3014d5c85ba30b6c045951a",
        "IPY_MODEL_a43313c31db345d894525da389e9e126",
        "IPY_MODEL_c82061d118e64409a0e2a7a98f04aa0e"
       ],
       "layout": "IPY_MODEL_c1ddc47c00774902b5d86bda2cbaf0e2",
       "tabbable": null,
       "tooltip": null
      }
     },
     "93faa3a0b86a4827805f9cec53c1e802": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "941d707c43574b978aff5c8cfb3cb290": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "94e4d041ba2946a0809d9fff388e6d9b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "985db823cad04e90b3b76de930e9f152": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "990e4e2918114a78be2f0d09fe9ec456": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "99798438401f494fb1ee22c2299db541": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "999f37080d0a42db8792936506eff9f6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9a964ba73ad442b280c76f2922583a84": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_d44acef860cd4cf9b0a74803b5df027a",
        "IPY_MODEL_afbdff721f2a4d35a2d4857892376707",
        "IPY_MODEL_92a14e0fc53c442695a166f6bbb223db"
       ],
       "layout": "IPY_MODEL_14e9f42112a243cf973cc6bec048140c",
       "tabbable": null,
       "tooltip": null
      }
     },
     "9b2848286ba04b71861b2fb604262e2f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9b8065f3bd2646f399c3cf24bf9fed78": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_d9af45c9b3044832bcdb0c8f68fc77e9",
       "max": 3435.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_e8b9d818b7974e068ca56eed71b7866c",
       "tabbable": null,
       "tooltip": null,
       "value": 3435.0
      }
     },
     "9d15a3388e094816abf5a8155840acc6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_a4777e81482e4690a6d532c92d9cfd24",
        "IPY_MODEL_f28d91dec8d64550a7d3d862e577e5d2",
        "IPY_MODEL_439db3ab95154d9b8d127661717afc98"
       ],
       "layout": "IPY_MODEL_b900f54e0dfc467b9b7ddc955c02b8a9",
       "tabbable": null,
       "tooltip": null
      }
     },
     "9e0a7ac5848b4393ac88c6282585ab3a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_a350bd71e2934a12a30026231e6adc29",
       "max": 53.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_68d3516ae53842238d071e949d27ee44",
       "tabbable": null,
       "tooltip": null,
       "value": 53.0
      }
     },
     "9e2656bd7e3841199373a900799ed6e3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "9e2bcc43096e4793ab141c0bc888e975": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9e4172a907224b18ac2f5698447d6679": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "9ead40aab9a54ac0a8ae431629c5de4e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "a06a7ea4e4404404adc5b1e928892bae": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5e69c36551544008b6b96cb1db9db430",
       "max": 130.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_313c61f3f3c5465ab356fa29a6b33de2",
       "tabbable": null,
       "tooltip": null,
       "value": 130.0
      }
     },
     "a0f5c97b51474b898b932fe327604046": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_70a8d23cd76544d7a13121d8a503975a",
       "max": 333454.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_22155aa87b49466eaf77f87abe50fb73",
       "tabbable": null,
       "tooltip": null,
       "value": 333454.0
      }
     },
     "a15e43fb2dce4828ace1284718f7417a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_be07745b0ce246dc93a23240fb81c465",
        "IPY_MODEL_307c69eb99414ad198027e79255c7d41",
        "IPY_MODEL_7e63aef7d75d40e6bc4611caec37adc4"
       ],
       "layout": "IPY_MODEL_d3940403155344318da21db4fd43723c",
       "tabbable": null,
       "tooltip": null
      }
     },
     "a194cf98cf0c4d4ca8bf03eeb39dd9af": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "a2995eed8295432dba9969a45ddce279": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a350bd71e2934a12a30026231e6adc29": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a3c146cb3ac44e97875184f52b5144c3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7ea9cf3deb304c0aac14bdfe52b0e625",
       "placeholder": "​",
       "style": "IPY_MODEL_86aaf9f988df4cf7bfb21510976558e8",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "a3cc32ffcc114e7a8d183e43cf37d2be": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_3b622144a47f4d7ebde093508d45ddd6",
        "IPY_MODEL_1afc84c0f9e44ee98b5afabfc26f4c14",
        "IPY_MODEL_cc49a185340f4fb0b3b768c74a8eea0b"
       ],
       "layout": "IPY_MODEL_29c6584860b24b29a205f6d43093a12e",
       "tabbable": null,
       "tooltip": null
      }
     },
     "a3ec0105c2994edaba04aa0e07a78941": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "a43313c31db345d894525da389e9e126": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_1a31e12a1d9b4c20ad2121b159a42fef",
       "max": 3435.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_94e4d041ba2946a0809d9fff388e6d9b",
       "tabbable": null,
       "tooltip": null,
       "value": 3435.0
      }
     },
     "a4777e81482e4690a6d532c92d9cfd24": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_d67cb5fbc0124abca45c0317944f609c",
       "placeholder": "​",
       "style": "IPY_MODEL_6f2de58791ac45b084083c270b27aa2d",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "a5cefeb6ed87478eb94426840bea0f7d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "a62aa174c7014a1d95fd90c1593f5215": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "a658eda25b394a8a8168e714854c259b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "a7340676a10a4dfca08a69ef8bfa9ae9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a7cb801b3712494e88e81ad7ccdda99c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "a946b5d8a2ac4c5dbd811caa98929117": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "aa3d278f797747f79edf1ae876331a11": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3d91473cd27040d3a74bf2054bddb2f5",
       "max": 130.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_be0d8ea84b1244edb919224e5c7f1be9",
       "tabbable": null,
       "tooltip": null,
       "value": 130.0
      }
     },
     "abbe4b2330ee4b5894c330dde3655623": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "ac611da4c0424500aa242914b50a9f00": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "acc42ec30c2b418890775b44bd6f0519": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_a7340676a10a4dfca08a69ef8bfa9ae9",
       "max": 3435.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_6ca389e52e9c429eb54aa854ae9b0ec2",
       "tabbable": null,
       "tooltip": null,
       "value": 3435.0
      }
     },
     "ae1ba0a573a249de8bc5b51010f709b9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3c7e5641b37647ce9b73116902de5c8c",
       "placeholder": "​",
       "style": "IPY_MODEL_e04af746aa9344088eed8e485a368ba6",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "aeac303334984e26a0730ced8fa50d8c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_b7c67e4fbf144a77ab000d19083022ed",
       "max": 3435.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_d7954726e107423b8476b2a771131630",
       "tabbable": null,
       "tooltip": null,
       "value": 3435.0
      }
     },
     "afbdff721f2a4d35a2d4857892376707": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f638bfab0938491b9a9a71714574e011",
       "max": 130.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_59d97719c48c4804a7d1ca17e46ad127",
       "tabbable": null,
       "tooltip": null,
       "value": 130.0
      }
     },
     "b01a53f593c44d13887bf4c268688e9d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7b241d5acd264e80b212fd3a6cdeda11",
       "placeholder": "​",
       "style": "IPY_MODEL_5639effcbdc64024a4195c6fe87b6ac7",
       "tabbable": null,
       "tooltip": null,
       "value": " 127/130 [00:08&lt;00:00, 23.14it/s]"
      }
     },
     "b0fa402931864d3fa4680291f0908e82": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b140025112c343a295a0af24643008a0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_908bda825b8d4eeb9eee20aaf564d5d3",
       "placeholder": "​",
       "style": "IPY_MODEL_36c84a206e164959bda828508b53ffb6",
       "tabbable": null,
       "tooltip": null,
       "value": " 127/130 [00:08&lt;00:00, 22.43it/s]"
      }
     },
     "b1de5702c201423e9415180513894a0c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3297ac29b68d4adfb73f5971485652e5",
       "placeholder": "​",
       "style": "IPY_MODEL_ffe502571ad3410d8a488dd08299f734",
       "tabbable": null,
       "tooltip": null,
       "value": "Loading YOLOP PKLs: 100%"
      }
     },
     "b25d904ef8794d199e3e7fa367cb8052": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "b2948fc137a44e1982333de435c2b55f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_58791ab5e5fd4548b6c179081c5de5ef",
        "IPY_MODEL_65be7991c78a477ba683d1ee2b6ef4b2",
        "IPY_MODEL_dd249ff2e1ee4837a96bc4acec888f0c"
       ],
       "layout": "IPY_MODEL_2ad3cd1387994e8c818b1908d4f5b8b8",
       "tabbable": null,
       "tooltip": null
      }
     },
     "b4138541e3494983aa2f941c90695226": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "b636216353db4693b7df8ac0cee508f1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "b69d1822761a4425af3f88e93b4ded31": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "b7c67e4fbf144a77ab000d19083022ed": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b8316a3cb84d4b09846299c695f8d6a5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "b8b5eb829bdd44c9a39452892c4907f8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "b900f54e0dfc467b9b7ddc955c02b8a9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "b9d0a2ed2e924ab4b74189b819fbde47": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "ba2ddc707cde4e3abb24d37dac1ba96f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "bab935cdddf54e109af92ea79f64118b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "bb1e8cc245ee42f8973b3f540d0b24e9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_fce1c486057040f38bc209dd659e8fff",
       "max": 130.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_df70cff576ba4a9eafc8db4451b7ce77",
       "tabbable": null,
       "tooltip": null,
       "value": 130.0
      }
     },
     "bb29a4e269824607931f04a2bf521639": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "bc22c864ed50443cbc14caa24d62cd03": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "bce0eda06a704a84b933f140a6d9d5e0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_356b3065250d4267998d7cb4708f66cb",
       "placeholder": "​",
       "style": "IPY_MODEL_a658eda25b394a8a8168e714854c259b",
       "tabbable": null,
       "tooltip": null,
       "value": " 3435/3435 [03:20&lt;00:00, 17.11it/s]"
      }
     },
     "bd67b5a771504896bca18c47ed6fa929": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_45dc5a98360742ea802f3d5b8060378f",
        "IPY_MODEL_c298a84d27d94007897f323944239df7",
        "IPY_MODEL_ec8ad3778d63475793e3f18c3a4317c6"
       ],
       "layout": "IPY_MODEL_bda14a4f21c342b8b4dd771bbdbfa40a",
       "tabbable": null,
       "tooltip": null
      }
     },
     "bda14a4f21c342b8b4dd771bbdbfa40a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "bdc9d3d3862843369447ac0d1e7333fb": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "be07745b0ce246dc93a23240fb81c465": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ba2ddc707cde4e3abb24d37dac1ba96f",
       "placeholder": "​",
       "style": "IPY_MODEL_ffd89079c64b43d3b5370483ec5ba5d9",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "be0d8ea84b1244edb919224e5c7f1be9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "be457efdf8f14d00b9a052eba6f0194e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "bf55b828dd704b5e82a1e0a7b22a29d5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "bfaa0708f7b146269b9a2aa9f3e10844": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c0242316ca8c4507926963ac461b03ef": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c0d57deee0404300bede46a234105316": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c1ddc47c00774902b5d86bda2cbaf0e2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "c298a84d27d94007897f323944239df7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f542d3b140d24728941f3f37cc00125b",
       "max": 130.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_0fa7386d02584974917a2461cd988bf9",
       "tabbable": null,
       "tooltip": null,
       "value": 130.0
      }
     },
     "c2a64bfafcb04f1e82a1d4bdf34941ed": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "c302dc398bc240b6826db6686a746387": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "c318225f04a64ea9aa96b67e7c96e372": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "c48f30cc7e634cdf968272f282c7946d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "c4f17561c8cf4fc4aac4beed3004b293": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "c51f60599f5543d2b60ec77747ded0fd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f857c1b74ecc4d40a08c18fcea55c4d5",
       "placeholder": "​",
       "style": "IPY_MODEL_48595c58d38d4991938e7810f54ebe7e",
       "tabbable": null,
       "tooltip": null,
       "value": "Generating sequences: 100%"
      }
     },
     "c543eaffd2ab4826bd47a1222c8dc63f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5b82df678d484a9f945fa79c9bdcf302",
       "max": 53.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_2c2c25408c1e4f2c9e156481e8a50f12",
       "tabbable": null,
       "tooltip": null,
       "value": 53.0
      }
     },
     "c622e4eafba2413a8cef769566359810": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "c68e352af0264bc8a5bf512a076b0753": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "c802e0e953e84cf4b0addfa1380c0275": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_11de4e0db9f246dba1f5f7d0bc23b54c",
        "IPY_MODEL_6246756efd7d4e76b2c171f8e72284a2",
        "IPY_MODEL_f4b8b8acce874244a7eb28b0370e32da"
       ],
       "layout": "IPY_MODEL_5cfb518e33254c26877d06b0d3064879",
       "tabbable": null,
       "tooltip": null
      }
     },
     "c82061d118e64409a0e2a7a98f04aa0e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5bc8b9582a694e7bb023c9e1da62477b",
       "placeholder": "​",
       "style": "IPY_MODEL_0113bd8e62a145db8c287d54845dd9ef",
       "tabbable": null,
       "tooltip": null,
       "value": " 3435/3435 [03:19&lt;00:00, 16.68it/s]"
      }
     },
     "c8bc0ffd6cd7464a8bdb96ccdfa5bd09": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c9cb85eb0ea741a8ac561003f39e32db": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_5cd5ac1d7fc54befb32e3cd32a5ff477",
        "IPY_MODEL_c543eaffd2ab4826bd47a1222c8dc63f",
        "IPY_MODEL_16a6c23872ab4ab0a67765bcb6dfdab1"
       ],
       "layout": "IPY_MODEL_471caa5f27f445d7a96ee2721b707331",
       "tabbable": null,
       "tooltip": null
      }
     },
     "cb505e8bb8824c3aad876bc95fbdc2e9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_235e1c8307de4fbaac76751597b01cac",
       "placeholder": "​",
       "style": "IPY_MODEL_f482cf54aed24634993b00f7351ceb32",
       "tabbable": null,
       "tooltip": null,
       "value": " 127/130 [00:08&lt;00:00, 24.13it/s]"
      }
     },
     "cc49a185340f4fb0b3b768c74a8eea0b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_2f38f84370d04d17b3bfb1442cdafbc2",
       "placeholder": "​",
       "style": "IPY_MODEL_9e4172a907224b18ac2f5698447d6679",
       "tabbable": null,
       "tooltip": null,
       "value": " 128/130 [00:08&lt;00:00, 22.26it/s]"
      }
     },
     "cd5a42a47af844dfadb57d6569a71eb6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "cdba551d9be24a73b3a7840a7164cc9c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_a3c146cb3ac44e97875184f52b5144c3",
        "IPY_MODEL_1671c61449c248978519dc80c6a456ae",
        "IPY_MODEL_e6db4cfc552d45e8830ac370afeb7796"
       ],
       "layout": "IPY_MODEL_b636216353db4693b7df8ac0cee508f1",
       "tabbable": null,
       "tooltip": null
      }
     },
     "ce46b0239df24c00976635010312c64e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d0aa05c2233541668157b55550e02ad2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "d2faddc062bb4ec49969f1df1b492400": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "d31a817737fb4367b8520d39a0fffeaf": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7937ace435094b17a63fef59b803f569",
       "placeholder": "​",
       "style": "IPY_MODEL_6e70b4935f2443b3899571906c7cde4d",
       "tabbable": null,
       "tooltip": null,
       "value": " 3/3 [00:00&lt;00:00, 15.30it/s]"
      }
     },
     "d3940403155344318da21db4fd43723c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "d44acef860cd4cf9b0a74803b5df027a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ac611da4c0424500aa242914b50a9f00",
       "placeholder": "​",
       "style": "IPY_MODEL_8240f85048b74c98a0cf53034600b8c8",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating:  98%"
      }
     },
     "d54bcbcefc11412e82c89b62c42ef31d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_91e272524a3b4054aaa0d93aec361bf0",
       "placeholder": "​",
       "style": "IPY_MODEL_4977686c21964c9a8bf5450ca82b0877",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "d65509b9139f49daa7d034a80716fb5a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_de87699a4148479e9774d0a388a2dc38",
        "IPY_MODEL_55e93910c3714a23a6bf379952be5064",
        "IPY_MODEL_31bb26d1894348caae9aef2d29984ffc"
       ],
       "layout": "IPY_MODEL_18a6cadadaf44cc1afb0272db0c1d86c",
       "tabbable": null,
       "tooltip": null
      }
     },
     "d67cb5fbc0124abca45c0317944f609c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d6f5b2e369b642578275f91a027cd828": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d7954726e107423b8476b2a771131630": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "d970eb67d3a24c899e25df711ca4cb1a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_54b892c1f1624ce5b73edceafc71a976",
       "max": 130.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_22d1aa2a6696423593fa9fd33e00834a",
       "tabbable": null,
       "tooltip": null,
       "value": 130.0
      }
     },
     "d9af45c9b3044832bcdb0c8f68fc77e9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "dc266f783f1e48c7b944b02cee782e7f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "dc6c8769fc144472827223776591bdeb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "dc923b02158f4761a2f24ce9b46d456c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "dd249ff2e1ee4837a96bc4acec888f0c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_263fa93b4041461096160fce270990bf",
       "placeholder": "​",
       "style": "IPY_MODEL_3b874256d6464d59acc576b5a713c065",
       "tabbable": null,
       "tooltip": null,
       "value": " 3434/3435 [03:21&lt;00:00, 16.71it/s]"
      }
     },
     "de6b50fd64e14b439f1e0017f42b665a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "de87699a4148479e9774d0a388a2dc38": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3b7cb6c053b047c5aa2a73eb20ac768e",
       "placeholder": "​",
       "style": "IPY_MODEL_990e4e2918114a78be2f0d09fe9ec456",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating:  98%"
      }
     },
     "dea39d1f7f0a4074aad37b606dd281e1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_d54bcbcefc11412e82c89b62c42ef31d",
        "IPY_MODEL_513a392c574746008b972d083a6b3c27",
        "IPY_MODEL_0786c4620b634303a73b4eec1cfcd51d"
       ],
       "layout": "IPY_MODEL_0e3522272f4f40179d0e00b68bac1028",
       "tabbable": null,
       "tooltip": null
      }
     },
     "dec9c34a4fbd416d8e7046dc04fb9df4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "df5d743c512c46d7b895f183b6606482": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_6c049b8f49294071a21a9eb3fdf043fc",
       "max": 3435.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_87dc41bfddad4e8dbeac3bdfc93ee80d",
       "tabbable": null,
       "tooltip": null,
       "value": 3435.0
      }
     },
     "df70cff576ba4a9eafc8db4451b7ce77": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "dfb3aeac0c76455bb3d116e5977cc1d5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "dfda602bfdd244b497e997816583037e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_8868af3b1e1d49eeaaa8f3c673289690",
       "placeholder": "​",
       "style": "IPY_MODEL_739cf597a39b4ca6a6fc775f734871c5",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "e04af746aa9344088eed8e485a368ba6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "e10bba956b92469687aa9c534f46e9d2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_bab935cdddf54e109af92ea79f64118b",
       "max": 130.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_710993cb6d9b4a328cf973bf8d7aece3",
       "tabbable": null,
       "tooltip": null,
       "value": 130.0
      }
     },
     "e2f454e8d6304feaa9f8cedaa41af443": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e6252bd89d60485493c1a6189aee92b9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "e6544a8e26ac4e2bb6c881d123eceac0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_67355954bcbe4c4085f0ca45871492d9",
       "placeholder": "​",
       "style": "IPY_MODEL_27338672c1344e8f8154a4b415224e40",
       "tabbable": null,
       "tooltip": null,
       "value": " 130/130 [00:08&lt;00:00, 25.89it/s]"
      }
     },
     "e69e62aa230f45afa41760e270cb6d68": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "e6db4cfc552d45e8830ac370afeb7796": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_67ae4e8723c94baf91794e99c1b3fbe8",
       "placeholder": "​",
       "style": "IPY_MODEL_78dedc62b5f34199b28f03531cabb147",
       "tabbable": null,
       "tooltip": null,
       "value": " 3435/3435 [03:21&lt;00:00, 16.42it/s]"
      }
     },
     "e85c32f2132a4980ac1941c17fce4fd6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "e8b9d818b7974e068ca56eed71b7866c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "e9cb3dea028c4122855a3ddaa03a5f9c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_34630daebaaf4c6586b797e37ae8e651",
        "IPY_MODEL_f19db3d4b7fd44e7b6aed2e48730fbb1",
        "IPY_MODEL_4d415e710d4b48569a831cb560abc9e3"
       ],
       "layout": "IPY_MODEL_b25d904ef8794d199e3e7fa367cb8052",
       "tabbable": null,
       "tooltip": null
      }
     },
     "ea809fd863974aeeaf32ef29a4dd32c2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "eaf2a4f9f5ca46c3b110b4948118a723": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ec8ad3778d63475793e3f18c3a4317c6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7d67709f809d4e63bc4b55f6a5abe9fa",
       "placeholder": "​",
       "style": "IPY_MODEL_b4138541e3494983aa2f941c90695226",
       "tabbable": null,
       "tooltip": null,
       "value": " 128/130 [00:08&lt;00:00, 23.52it/s]"
      }
     },
     "ecaf635c40e9415ab592961485d6bb2c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_080265fa70554357873b9eb02e1fd812",
        "IPY_MODEL_2c591b30eeac4b7083095c041e13fdf5",
        "IPY_MODEL_f3cabe0063af439c84022554f52a5a28"
       ],
       "layout": "IPY_MODEL_e69e62aa230f45afa41760e270cb6d68",
       "tabbable": null,
       "tooltip": null
      }
     },
     "ee53dbb73e0c4877b78a084fcf8be336": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_74d5ff2b3abc4d5e923744a15f8280b0",
        "IPY_MODEL_4a5ec246fd9143b290bc7f5ef64f6d10",
        "IPY_MODEL_702da8478a814528aa4c640407fffde1"
       ],
       "layout": "IPY_MODEL_1bc96663bbf24f8fae90ccac83d234b2",
       "tabbable": null,
       "tooltip": null
      }
     },
     "eef8ea14ae564b9db9d59b5e7d9bbcf2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_47d983e429754e759f8fe67636028953",
       "max": 130.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_6383e254217e4a0481e792907d091b29",
       "tabbable": null,
       "tooltip": null,
       "value": 130.0
      }
     },
     "f04821fee3a14710a45eff9cac514249": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f07e4f6ec77f46819c0369d67feeff3d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_dc266f783f1e48c7b944b02cee782e7f",
       "placeholder": "​",
       "style": "IPY_MODEL_9e2656bd7e3841199373a900799ed6e3",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating:  98%"
      }
     },
     "f1951af45f404b58bf013ab4e5b5d8cc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f19db3d4b7fd44e7b6aed2e48730fbb1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_8cff2b2d9b3b4158bb88c8055bc3aede",
       "max": 3435.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_7f329730affb477c8de8a25aac92f6fe",
       "tabbable": null,
       "tooltip": null,
       "value": 3435.0
      }
     },
     "f1d63719322546289a18e2964c698626": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_59b7a7184e12442587f444f89cdbffe3",
        "IPY_MODEL_aeac303334984e26a0730ced8fa50d8c",
        "IPY_MODEL_0bfeb4fdf4434e2eb27b0fd0c1a7043a"
       ],
       "layout": "IPY_MODEL_5b3a5285d7fd44599dca045c62c3d12e",
       "tabbable": null,
       "tooltip": null
      }
     },
     "f28d91dec8d64550a7d3d862e577e5d2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_8871e3926d024b2f8cf59f7c83a2266b",
       "max": 3435.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_4b3ce1efe3c745239585d50dd83fc788",
       "tabbable": null,
       "tooltip": null,
       "value": 3435.0
      }
     },
     "f3cabe0063af439c84022554f52a5a28": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_71c02fea49044f07aa48d7b1abe0ffe5",
       "placeholder": "​",
       "style": "IPY_MODEL_67b1cc7ec381403e82e1bd5990390ea5",
       "tabbable": null,
       "tooltip": null,
       "value": " 129/130 [00:08&lt;00:00, 26.25it/s]"
      }
     },
     "f482cf54aed24634993b00f7351ceb32": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f4b8b8acce874244a7eb28b0370e32da": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_49ca7c48069545789fc1a75d8bb06c41",
       "placeholder": "​",
       "style": "IPY_MODEL_f04821fee3a14710a45eff9cac514249",
       "tabbable": null,
       "tooltip": null,
       "value": " 1/1 [00:00&lt;00:00, 72.24it/s]"
      }
     },
     "f52672e3d1254f7aa032bbf807a3182f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f542d3b140d24728941f3f37cc00125b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f638bfab0938491b9a9a71714574e011": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f659bfa9fcd64a0d8d2640d2e3d6f393": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f6b104d42da04e93bd948fc4070a49af": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f857c1b74ecc4d40a08c18fcea55c4d5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f857f95eedd84cbfbb9afec883488c46": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f8de9ed87c5c46dbad35a1eb2eb0406e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "f8e31bde38694596b97d89f1b498cd53": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "f9d7bb9c22e94de4ae749e52b20c073f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_42be712c5ed64ea29338284468dc10e3",
        "IPY_MODEL_75d01257463b4246a3ddaf6ae42d64fb",
        "IPY_MODEL_05f7334098ae468283b70d3a2e4d6f2c"
       ],
       "layout": "IPY_MODEL_c48f30cc7e634cdf968272f282c7946d",
       "tabbable": null,
       "tooltip": null
      }
     },
     "f9ec7e0f623040829e0e325e44857a7a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "fa85c2b12318474abf1267c3af23432b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5ba4317e0a6744a9bbba1658f8dc70e5",
       "placeholder": "​",
       "style": "IPY_MODEL_c68e352af0264bc8a5bf512a076b0753",
       "tabbable": null,
       "tooltip": null,
       "value": " 3435/3435 [03:21&lt;00:00, 16.57it/s]"
      }
     },
     "fb00dec5a68d4a9da5effc44f78e109c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "fb235766f2dd44dea968d312ceca55d2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_fed2ab7c782a4cf186e24e528de49fc2",
       "placeholder": "​",
       "style": "IPY_MODEL_577f85ec64ac486b8d1ff20f88d5959c",
       "tabbable": null,
       "tooltip": null,
       "value": " 3435/3435 [03:21&lt;00:00, 16.48it/s]"
      }
     },
     "fb28a6cd59d74d398f7ec5e529436cd4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_fc63312fe6bd41eb84384e108a274ce8",
       "placeholder": "​",
       "style": "IPY_MODEL_192260ac8f934495993f30de4e2a9a39",
       "tabbable": null,
       "tooltip": null,
       "value": " 127/130 [00:08&lt;00:00, 23.06it/s]"
      }
     },
     "fbf89328d3e9495995230b1dcc33ffef": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_8742a03a060a4e269b32219d32f8f8c6",
       "placeholder": "​",
       "style": "IPY_MODEL_de6b50fd64e14b439f1e0017f42b665a",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating:  99%"
      }
     },
     "fc63312fe6bd41eb84384e108a274ce8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "fce1c486057040f38bc209dd659e8fff": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "fe997ee4c3fd4df1a2210e057b3e8d46": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "fed2ab7c782a4cf186e24e528de49fc2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ff3796b50d9a4fcf9c573b9df3b28d16": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ffc615a0046f4a9ab55eba85506e3f06": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "ffd89079c64b43d3b5370483ec5ba5d9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "ffe502571ad3410d8a488dd08299f734": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
