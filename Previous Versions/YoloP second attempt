{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1e47af09",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-05T20:50:10.806211Z",
     "iopub.status.busy": "2025-05-05T20:50:10.805944Z",
     "iopub.status.idle": "2025-05-05T20:50:18.427894Z",
     "shell.execute_reply": "2025-05-05T20:50:18.426982Z"
    },
    "papermill": {
     "duration": 7.631603,
     "end_time": "2025-05-05T20:50:18.429511",
     "exception": false,
     "start_time": "2025-05-05T20:50:10.797908",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cloning into 'PIE'...\r\n",
      "remote: Enumerating objects: 178, done.\u001b[K\r\n",
      "remote: Counting objects: 100% (93/93), done.\u001b[K\r\n",
      "remote: Compressing objects: 100% (74/74), done.\u001b[K\r\n",
      "remote: Total 178 (delta 32), reused 75 (delta 17), pack-reused 85 (from 1)\u001b[K\r\n",
      "Receiving objects: 100% (178/178), 144.63 MiB | 31.08 MiB/s, done.\r\n",
      "Resolving deltas: 100% (73/73), done.\r\n",
      "Updating files: 100% (41/41), done.\r\n",
      "unzip:  cannot find or open /content/PIE/annotations/annotations.zip, /content/PIE/annotations/annotations.zip.zip or /content/PIE/annotations/annotations.zip.ZIP.\r\n",
      "unzip:  cannot find or open /content/PIE/annotations/annotations_vehicle.zip, /content/PIE/annotations/annotations_vehicle.zip.zip or /content/PIE/annotations/annotations_vehicle.zip.ZIP.\r\n"
     ]
    }
   ],
   "source": [
    "!git clone https://github.com/aras62/PIE.git\n",
    "!unzip /content/PIE/annotations/annotations.zip -d /content/PIE\n",
    "!unzip /content/PIE/annotations/annotations_vehicle.zip -d /content/PIE\n",
    "# !git clone https://github.com/hustvl/YOLOP.git\n",
    "!mkdir /kaggle/working/PIE/content"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f6146982",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-05T20:50:18.446132Z",
     "iopub.status.busy": "2025-05-05T20:50:18.445881Z",
     "iopub.status.idle": "2025-05-05T20:50:23.663716Z",
     "shell.execute_reply": "2025-05-05T20:50:23.662638Z"
    },
    "papermill": {
     "duration": 5.227775,
     "end_time": "2025-05-05T20:50:23.665482",
     "exception": false,
     "start_time": "2025-05-05T20:50:18.437707",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.0/1.0 MB\u001b[0m \u001b[31m25.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h"
     ]
    }
   ],
   "source": [
    "!pip install -q ultralytics opencv-python-headless "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ea50d002",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-05T20:50:23.682031Z",
     "iopub.status.busy": "2025-05-05T20:50:23.681788Z",
     "iopub.status.idle": "2025-05-05T20:50:29.627534Z",
     "shell.execute_reply": "2025-05-05T20:50:29.626803Z"
    },
    "papermill": {
     "duration": 5.955402,
     "end_time": "2025-05-05T20:50:29.629091",
     "exception": false,
     "start_time": "2025-05-05T20:50:23.673689",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Creating new Ultralytics Settings v0.0.6 file ✅ \n",
      "View Ultralytics Settings with 'yolo settings' or at '/root/.config/Ultralytics/settings.json'\n",
      "Update Settings with 'yolo settings key=value', i.e. 'yolo settings runs_dir=path/to/dir'. For help see https://docs.ultralytics.com/quickstart/#ultralytics-settings.\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "import xml.etree.ElementTree as ET\n",
    "import os\n",
    "import numpy as np\n",
    "from sklearn.metrics import accuracy_score, precision_recall_fscore_support, roc_auc_score, confusion_matrix, ConfusionMatrixDisplay\n",
    "from tqdm.notebook import tqdm\n",
    "import random\n",
    "import math\n",
    "import zipfile\n",
    "import cv2\n",
    "from ultralytics import YOLO\n",
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f94272eb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-05T20:50:29.646111Z",
     "iopub.status.busy": "2025-05-05T20:50:29.645702Z",
     "iopub.status.idle": "2025-05-05T20:50:31.150693Z",
     "shell.execute_reply": "2025-05-05T20:50:31.149632Z"
    },
    "papermill": {
     "duration": 1.514952,
     "end_time": "2025-05-05T20:50:31.152078",
     "exception": false,
     "start_time": "2025-05-05T20:50:29.637126",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unzipped successfully.\n"
     ]
    }
   ],
   "source": [
    "zip_path = \"/kaggle/working/PIE/annotations/annotations.zip\"\n",
    "extract_to = \"/kaggle/working/PIE/annotations/\"\n",
    "\n",
    "if os.path.exists(extract_to + 'annotations'):\n",
    "    print(\"Exists already. Not unzipping.\")\n",
    "else:\n",
    "    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n",
    "        zip_ref.extractall(extract_to)\n",
    "    print(\"Unzipped successfully.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5a354ddc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-05T20:50:31.168212Z",
     "iopub.status.busy": "2025-05-05T20:50:31.167939Z",
     "iopub.status.idle": "2025-05-05T20:50:31.881532Z",
     "shell.execute_reply": "2025-05-05T20:50:31.880546Z"
    },
    "papermill": {
     "duration": 0.722927,
     "end_time": "2025-05-05T20:50:31.882807",
     "exception": false,
     "start_time": "2025-05-05T20:50:31.159880",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unzipped successfully.\n"
     ]
    }
   ],
   "source": [
    "zip_path = \"/kaggle/working/PIE/annotations/annotations_vehicle.zip\"\n",
    "extract_to = \"/kaggle/working/PIE/annotations/\"\n",
    "\n",
    "if os.path.exists(extract_to + 'annotations_vehicle'):\n",
    "    print(\"Exists already. Not unzipping.\")\n",
    "else:\n",
    "    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n",
    "        zip_ref.extractall(extract_to)\n",
    "    print(\"Unzipped successfully.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e35239f7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-05T20:50:31.899103Z",
     "iopub.status.busy": "2025-05-05T20:50:31.898829Z",
     "iopub.status.idle": "2025-05-05T20:50:31.911189Z",
     "shell.execute_reply": "2025-05-05T20:50:31.910314Z"
    },
    "papermill": {
     "duration": 0.02183,
     "end_time": "2025-05-05T20:50:31.912528",
     "exception": false,
     "start_time": "2025-05-05T20:50:31.890698",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unzipped successfully.\n"
     ]
    }
   ],
   "source": [
    "zip_path = \"/kaggle/working/PIE/annotations/annotations_attributes.zip\"\n",
    "extract_to = \"/kaggle/working/PIE/annotations/\"\n",
    "\n",
    "if os.path.exists(extract_to + \"annotations_attributes\"):\n",
    "    print(\"Exists already. Not unzipping.\")\n",
    "else:\n",
    "    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n",
    "        zip_ref.extractall(extract_to)\n",
    "    print(\"Unzipped successfully.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "99b441ba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-05T20:50:31.928865Z",
     "iopub.status.busy": "2025-05-05T20:50:31.928660Z",
     "iopub.status.idle": "2025-05-05T20:50:31.937238Z",
     "shell.execute_reply": "2025-05-05T20:50:31.936604Z"
    },
    "papermill": {
     "duration": 0.018233,
     "end_time": "2025-05-05T20:50:31.938381",
     "exception": false,
     "start_time": "2025-05-05T20:50:31.920148",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # -----------------------------------------------------------------------------\n",
    "# # CELL 1: DATA PREPARATION & BALANCING  (run once before training)\n",
    "# # -----------------------------------------------------------------------------\n",
    "# #  This cell:\n",
    "# #    1. Loads (or regenerates) the PIE database\n",
    "# #    2. Computes per-signal standardisation scalers\n",
    "# #    3. Extracts ALL training sequences for every stream\n",
    "# #    4. Balances the dataset 50 / 50 on the crossing label\n",
    "# #    5. Writes two pickles:\n",
    "# #         - /kaggle/working/balanced_train_data.pkl\n",
    "# #         - /kaggle/working/scalers.pkl\n",
    "# # -----------------------------------------------------------------------------\n",
    "\n",
    "# import os\n",
    "# import sys\n",
    "# import time\n",
    "# import pickle\n",
    "# import gc\n",
    "# from pathlib import Path\n",
    "\n",
    "# import cv2                               # used internally by PIE utilities\n",
    "# import numpy as np\n",
    "# import torch\n",
    "# from torch.utils.data import Dataset\n",
    "# from tqdm.notebook import tqdm\n",
    "\n",
    "# # -----------------------------------------------------------------------------#\n",
    "# #                                PIE utilities                                 #\n",
    "# # -----------------------------------------------------------------------------#\n",
    "# pie_utilities_path = \"/kaggle/working/PIE/utilities\"\n",
    "# if pie_utilities_path not in sys.path:\n",
    "#     sys.path.insert(0, pie_utilities_path)\n",
    "\n",
    "# try:\n",
    "#     from pie_data import PIE\n",
    "# except ImportError as e:\n",
    "#     print(\n",
    "#         f\"[WARN] Could not import PIE from {pie_utilities_path}. \"\n",
    "#         f\"If the DB cache already exists this is fine.\\n→ {e}\"\n",
    "#     )\n",
    "#     PIE = None\n",
    "\n",
    "# # -----------------------------------------------------------------------------#\n",
    "# #                              configuration                                   #\n",
    "# # -----------------------------------------------------------------------------#\n",
    "# PIE_ROOT_PATH           = \"/kaggle/working/PIE\"\n",
    "# POSE_DATA_DIR           = \"/kaggle/input/pose-data/extracted_poses2\"\n",
    "# PIE_DATABASE_CACHE_PATH = \"/kaggle/input/pie-database/pie_database.pkl\"\n",
    "\n",
    "# TRAIN_SETS_STR = [\"set01\", \"set02\", \"set04\"]\n",
    "\n",
    "# BALANCED_DATA_PKL_PATH  = \"/kaggle/working/balanced_train_data.pkl\"\n",
    "# SCALERS_PKL_PATH        = \"/kaggle/working/scalers.pkl\"\n",
    "\n",
    "# # Streams used throughout the project ----------------------------------------\n",
    "# ALL_POSSIBLE_STREAMS = [\n",
    "#     \"bbox\",\n",
    "#     \"pose\",\n",
    "#     \"ego_speed\",\n",
    "#     \"ego_acc\",\n",
    "#     \"ego_gyro\",\n",
    "#     \"ped_action\",\n",
    "#     \"ped_look\",\n",
    "#     \"ped_occlusion\",\n",
    "#     \"traffic_light\",\n",
    "#     \"static_context\",\n",
    "# ]\n",
    "\n",
    "# # Feature sizes & categorical constants --------------------------------------\n",
    "# SEQ_LEN, PRED_LEN = 30, 1\n",
    "\n",
    "# INPUT_SIZE_BBOX       = 4\n",
    "# INPUT_SIZE_POSE       = 34\n",
    "# INPUT_SIZE_EGO_SPEED  = 1\n",
    "# INPUT_SIZE_EGO_ACC    = 2\n",
    "# INPUT_SIZE_EGO_GYRO   = 1\n",
    "# INPUT_SIZE_PED_ACTION = 1\n",
    "# INPUT_SIZE_PED_LOOK   = 1\n",
    "# INPUT_SIZE_PED_OCC    = 1\n",
    "# INPUT_SIZE_TL_STATE   = 4\n",
    "\n",
    "# NUM_SIGNALIZED_CATS   = 4\n",
    "# NUM_INTERSECTION_CATS = 5\n",
    "# NUM_AGE_CATS          = 4\n",
    "# NUM_GENDER_CATS       = 3\n",
    "# NUM_TRAFFIC_DIR_CATS  = 2\n",
    "\n",
    "# LANE_CATEGORIES = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 4, 7: 4, 8: 4}\n",
    "# NUM_LANE_CATS   = len(set(LANE_CATEGORIES.values()))\n",
    "\n",
    "# INPUT_SIZE_STATIC = (\n",
    "#     NUM_SIGNALIZED_CATS\n",
    "#     + NUM_INTERSECTION_CATS\n",
    "#     + NUM_AGE_CATS\n",
    "#     + NUM_GENDER_CATS\n",
    "#     + NUM_TRAFFIC_DIR_CATS\n",
    "#     + NUM_LANE_CATS\n",
    "# )  # → 23\n",
    "\n",
    "# TL_STATE_MAP = {\"__undefined__\": 0, \"red\": 1, \"yellow\": 2, \"green\": 3}\n",
    "# NUM_TL_STATES = len(TL_STATE_MAP)\n",
    "\n",
    "# # -----------------------------------------------------------------------------#\n",
    "# #                               helper utils                                   #\n",
    "# # -----------------------------------------------------------------------------#\n",
    "\n",
    "\n",
    "# def to_one_hot(index: int, num_classes: int) -> np.ndarray:\n",
    "#     vec = np.zeros(num_classes, dtype=np.float32)\n",
    "#     vec[int(np.clip(index, 0, num_classes - 1))] = 1.0\n",
    "#     return vec\n",
    "\n",
    "\n",
    "# def balance_samples_count(seq_data: dict, label_key: str, seed: int = 42) -> dict:\n",
    "#     \"\"\"Undersample majority class so positive and negative labels are equal.\"\"\"\n",
    "#     labels = [lbl[0] for lbl in seq_data[label_key]]\n",
    "#     n_pos  = int(np.sum(labels))\n",
    "#     n_neg  = len(labels) - n_pos\n",
    "\n",
    "#     if n_pos == n_neg:\n",
    "#         print(\"Dataset already balanced.\")\n",
    "#         return seq_data.copy()\n",
    "\n",
    "#     majority_label    = 0 if n_neg > n_pos else 1\n",
    "#     minority_count    = min(n_pos, n_neg)\n",
    "#     majority_indices  = np.where(np.array(labels) == majority_label)[0]\n",
    "#     minority_indices  = np.where(np.array(labels) != majority_label)[0]\n",
    "\n",
    "#     rng = np.random.default_rng(seed)\n",
    "#     keep_majority = rng.choice(majority_indices, size=minority_count, replace=False)\n",
    "#     final_indices = np.concatenate([minority_indices, keep_majority])\n",
    "#     rng.shuffle(final_indices)\n",
    "\n",
    "#     balanced = {}\n",
    "#     for k, v in seq_data.items():\n",
    "#         balanced[k] = [v[i] for i in final_indices]\n",
    "\n",
    "#     print(f\"Balanced: 1s={minority_count} | 0s={minority_count}\")\n",
    "#     return balanced\n",
    "\n",
    "\n",
    "# # -----------------------------------------------------------------------------#\n",
    "# #                                PIEDataset                                    #\n",
    "# # -----------------------------------------------------------------------------#\n",
    "# class PIEDataset(Dataset):\n",
    "#     \"\"\"\n",
    "#     Lightweight dataset that can generate any subset of the PIE feature streams.\n",
    "#     \"\"\"\n",
    "\n",
    "#     def __init__(\n",
    "#         self,\n",
    "#         pie_db: dict,\n",
    "#         set_names: list[str],\n",
    "#         pose_dir: str,\n",
    "#         seq_len: int,\n",
    "#         pred_len: int,\n",
    "#         scalers: dict,\n",
    "#         streams_to_generate: list[str],\n",
    "#     ):\n",
    "#         self.pie_db            = pie_db\n",
    "#         self.set_names         = set_names\n",
    "#         self.pose_dir          = pose_dir\n",
    "#         self.seq_len           = seq_len\n",
    "#         self.pred_len          = pred_len\n",
    "#         self.scalers           = scalers\n",
    "#         self.streams           = streams_to_generate\n",
    "#         self._input_sizes      = self._build_input_size_map()\n",
    "#         self.all_pose_data     = {}\n",
    "#         self.sequences         = []\n",
    "\n",
    "#         if \"pose\" in self.streams:\n",
    "#             self._load_pose_pkls()\n",
    "#         self._enumerate_sequences()\n",
    "\n",
    "#     # ------------------------ internal helpers -------------------------------\n",
    "#     def _build_input_size_map(self) -> dict:\n",
    "#         special = {\n",
    "#             \"TRAFFIC_LIGHT\": \"TL_STATE\",\n",
    "#             \"STATIC_CONTEXT\": \"STATIC\",\n",
    "#             \"EGO_SPEED\": \"EGO_SPEED\",\n",
    "#             \"EGO_ACC\": \"EGO_ACC\",\n",
    "#             \"EGO_GYRO\": \"EGO_GYRO\",\n",
    "#             \"PED_ACTION\": \"PED_ACTION\",\n",
    "#             \"PED_LOOK\": \"PED_LOOK\",\n",
    "#             \"PED_OCCLUSION\": \"PED_OCC\",\n",
    "#         }\n",
    "#         sizes = {}\n",
    "#         for s in ALL_POSSIBLE_STREAMS:\n",
    "#             const = f\"INPUT_SIZE_{special.get(s.upper(), s.upper())}\"\n",
    "#             if s == \"bbox\":\n",
    "#                 const = \"INPUT_SIZE_BBOX\"\n",
    "#             elif s == \"pose\":\n",
    "#                 const = \"INPUT_SIZE_POSE\"\n",
    "#             sizes[s] = globals().get(const, 1)\n",
    "#         return sizes\n",
    "\n",
    "#     def _load_pose_pkls(self):\n",
    "#         print(\"Loading pose PKLs …\")\n",
    "#         for set_id in self.set_names:\n",
    "#             set_dir = Path(self.pose_dir) / set_id\n",
    "#             if not set_dir.is_dir():\n",
    "#                 continue\n",
    "#             self.all_pose_data[set_id] = {}\n",
    "#             for pkl_path in tqdm(set_dir.glob(f\"{set_id}_*_poses.pkl\"), leave=False):\n",
    "#                 try:\n",
    "#                     with open(pkl_path, \"rb\") as fp:\n",
    "#                         loaded = pickle.load(fp)\n",
    "#                 except Exception as e:\n",
    "#                     print(f\"[pose load] {pkl_path}: {e}\")\n",
    "#                     continue\n",
    "\n",
    "#                 if len(loaded) != 1:\n",
    "#                     continue\n",
    "#                 (key, data), *_ = loaded.items()\n",
    "#                 vid = \"_\".join(key.split(\"_\")[1:])\n",
    "#                 if vid in self.pie_db.get(set_id, {}):\n",
    "#                     self.all_pose_data[set_id][vid] = data\n",
    "\n",
    "#     def _enumerate_sequences(self):\n",
    "#         print(\"Enumerating sequences …\")\n",
    "#         for set_id in self.set_names:\n",
    "#             for vid, vdb in self.pie_db.get(set_id, {}).items():\n",
    "#                 for pid, pdb in vdb.get(\"ped_annotations\", {}).items():\n",
    "#                     frames = pdb.get(\"frames\", [])\n",
    "#                     if len(frames) < self.seq_len + self.pred_len:\n",
    "#                         continue\n",
    "#                     frames = sorted(frames)\n",
    "#                     for i in range(len(frames) - self.seq_len - self.pred_len + 1):\n",
    "#                         start = frames[i]\n",
    "#                         obs_end = frames[i + self.seq_len - 1]\n",
    "#                         if obs_end - start != self.seq_len - 1:\n",
    "#                             continue\n",
    "#                         target = frames[i + self.seq_len + self.pred_len - 1]\n",
    "#                         if target - obs_end != self.pred_len:\n",
    "#                             continue\n",
    "#                         self.sequences.append((set_id, vid, pid, start))\n",
    "#         print(f\"Total sequences: {len(self.sequences)}\")\n",
    "\n",
    "#     # ------------------ Dataset API ------------------------------------------\n",
    "#     def __len__(self):\n",
    "#         return len(self.sequences)\n",
    "\n",
    "#     def __getitem__(self, idx: int):\n",
    "#         set_id, vid, pid, start = self.sequences[idx]\n",
    "#         vdb  = self.pie_db[set_id][vid]\n",
    "#         pdb  = vdb[\"ped_annotations\"][pid]\n",
    "#         ego  = vdb.get(\"vehicle_annotations\", {})\n",
    "#         tldb = vdb.get(\"traffic_annotations\", {})\n",
    "\n",
    "#         frame_nums = list(range(start, start + self.seq_len))\n",
    "#         target_f   = start + self.seq_len + self.pred_len - 1\n",
    "\n",
    "#         # label ---------------------------------------------------------------\n",
    "#         label = 0\n",
    "#         if (\n",
    "#             \"frames\" in pdb\n",
    "#             and \"behavior\" in pdb\n",
    "#             and \"cross\" in pdb[\"behavior\"]\n",
    "#             and target_f in pdb[\"frames\"]\n",
    "#         ):\n",
    "#             try:\n",
    "#                 j = pdb[\"frames\"].index(target_f)\n",
    "#                 label = pdb[\"behavior\"][\"cross\"][j]\n",
    "#                 if label == -1:\n",
    "#                     label = 0\n",
    "#             except (ValueError, IndexError):\n",
    "#                 pass\n",
    "\n",
    "#         # static context ------------------------------------------------------\n",
    "#         static_vec = np.zeros(INPUT_SIZE_STATIC, np.float32)\n",
    "#         if \"static_context\" in self.streams:\n",
    "#             attr  = pdb.get(\"attributes\", {})\n",
    "#             sig   = attr.get(\"signalized\", 0)\n",
    "#             intr  = attr.get(\"intersection\", 0)\n",
    "#             age   = attr.get(\"age\", 2)\n",
    "#             gen   = attr.get(\"gender\", 0)\n",
    "#             tdir  = int(attr.get(\"traffic_direction\", 0))\n",
    "#             ln    = attr.get(\"num_lanes\", 2)\n",
    "#             lncat = LANE_CATEGORIES.get(ln, LANE_CATEGORIES[max(LANE_CATEGORIES)])\n",
    "#             static_vec = np.concatenate(\n",
    "#                 [\n",
    "#                     to_one_hot(sig,  NUM_SIGNALIZED_CATS),\n",
    "#                     to_one_hot(intr, NUM_INTERSECTION_CATS),\n",
    "#                     to_one_hot(age,  NUM_AGE_CATS),\n",
    "#                     to_one_hot(gen,  NUM_GENDER_CATS),\n",
    "#                     to_one_hot(tdir, NUM_TRAFFIC_DIR_CATS),\n",
    "#                     to_one_hot(lncat, NUM_LANE_CATS),\n",
    "#                 ]\n",
    "#             ).astype(np.float32)\n",
    "\n",
    "#         # per-frame feature assembly -----------------------------------------\n",
    "#         feats = {s: [] for s in self.streams}\n",
    "\n",
    "#         for fn in frame_nums:\n",
    "#             fidx = -1\n",
    "#             if \"frames\" in pdb:\n",
    "#                 try:\n",
    "#                     fidx = pdb[\"frames\"].index(fn)\n",
    "#                 except ValueError:\n",
    "#                     pass\n",
    "\n",
    "#             ego_f = ego.get(fn, {})\n",
    "\n",
    "#             # bbox ----------------------------------------------------------\n",
    "#             if \"bbox\" in self.streams:\n",
    "#                 bb = np.zeros(INPUT_SIZE_BBOX, np.float32)\n",
    "#                 if (\n",
    "#                     fidx != -1\n",
    "#                     and \"bbox\" in pdb\n",
    "#                     and len(pdb[\"bbox\"]) > fidx\n",
    "#                 ):\n",
    "#                     try:\n",
    "#                         x1, y1, x2, y2 = pdb[\"bbox\"][fidx]\n",
    "#                         w_img = vdb.get(\"width\", 1920)\n",
    "#                         h_img = vdb.get(\"height\", 1080)\n",
    "#                         if w_img > 0 and h_img > 0:\n",
    "#                             cx = ((x1 + x2) / 2) / w_img\n",
    "#                             cy = ((y1 + y2) / 2) / h_img\n",
    "#                             w  = (x2 - x1) / w_img\n",
    "#                             h  = (y2 - y1) / h_img\n",
    "#                             if 0 < w and 0 < h and 0 <= cx <= 1 and 0 <= cy <= 1:\n",
    "#                                 bb = np.array([cx, cy, w, h], np.float32)\n",
    "#                     except Exception:\n",
    "#                         pass\n",
    "#                 feats[\"bbox\"].append(bb)\n",
    "\n",
    "#             # pose ----------------------------------------------------------\n",
    "#             if \"pose\" in self.streams:\n",
    "#                 pvec = np.zeros(INPUT_SIZE_POSE, np.float32)\n",
    "#                 pose_set = self.all_pose_data.get(set_id, {}).get(vid, {})\n",
    "#                 p_loaded = pose_set.get(fn, {}).get(pid)\n",
    "#                 if (\n",
    "#                     isinstance(p_loaded, np.ndarray)\n",
    "#                     and p_loaded.shape == (INPUT_SIZE_POSE,)\n",
    "#                 ):\n",
    "#                     pvec = p_loaded\n",
    "#                 feats[\"pose\"].append(pvec)\n",
    "\n",
    "#             # ego signals ---------------------------------------------------\n",
    "#             if \"ego_speed\" in self.streams:\n",
    "#                 s = ego_f.get(\"OBD_speed\", 0.0) or ego_f.get(\"GPS_speed\", 0.0)\n",
    "#                 s = (s - self.scalers.get(\"ego_speed_mean\", 0.0)) / self.scalers.get(\n",
    "#                     \"ego_speed_std\", 1.0\n",
    "#                 )\n",
    "#                 feats[\"ego_speed\"].append([s])\n",
    "\n",
    "#             if \"ego_acc\" in self.streams:\n",
    "#                 ax = ego_f.get(\"accX\", 0.0)\n",
    "#                 ay = ego_f.get(\"accY\", 0.0)\n",
    "#                 ax = (ax - self.scalers.get(\"accX_mean\", 0.0)) / self.scalers.get(\n",
    "#                     \"accX_std\", 1.0\n",
    "#                 )\n",
    "#                 ay = (ay - self.scalers.get(\"accY_mean\", 0.0)) / self.scalers.get(\n",
    "#                     \"accY_std\", 1.0\n",
    "#                 )\n",
    "#                 feats[\"ego_acc\"].append([ax, ay])\n",
    "\n",
    "#             if \"ego_gyro\" in self.streams:\n",
    "#                 gz = ego_f.get(\"gyroZ\", 0.0)\n",
    "#                 gz = (gz - self.scalers.get(\"gyroZ_mean\", 0.0)) / self.scalers.get(\n",
    "#                     \"gyroZ_std\", 1.0\n",
    "#                 )\n",
    "#                 feats[\"ego_gyro\"].append([gz])\n",
    "\n",
    "#             # pedestrian behaviour -----------------------------------------\n",
    "#             if \"ped_action\" in self.streams:\n",
    "#                 action = (\n",
    "#                     pdb[\"behavior\"][\"action\"][fidx]\n",
    "#                     if fidx != -1\n",
    "#                     and \"behavior\" in pdb\n",
    "#                     and \"action\" in pdb[\"behavior\"]\n",
    "#                     and len(pdb[\"behavior\"][\"action\"]) > fidx\n",
    "#                     else 0\n",
    "#                 )\n",
    "#                 feats[\"ped_action\"].append([float(action)])\n",
    "\n",
    "#             if \"ped_look\" in self.streams:\n",
    "#                 look = (\n",
    "#                     pdb[\"behavior\"][\"look\"][fidx]\n",
    "#                     if fidx != -1\n",
    "#                     and \"behavior\" in pdb\n",
    "#                     and \"look\" in pdb[\"behavior\"]\n",
    "#                     and len(pdb[\"behavior\"][\"look\"]) > fidx\n",
    "#                     else 0\n",
    "#                 )\n",
    "#                 feats[\"ped_look\"].append([float(look)])\n",
    "\n",
    "#             if \"ped_occlusion\" in self.streams:\n",
    "#                 occ = (\n",
    "#                     float(pdb[\"occlusion\"][fidx]) / 2.0\n",
    "#                     if fidx != -1\n",
    "#                     and \"occlusion\" in pdb\n",
    "#                     and len(pdb[\"occlusion\"]) > fidx\n",
    "#                     else 0.0\n",
    "#                 )\n",
    "#                 feats[\"ped_occlusion\"].append([occ])\n",
    "\n",
    "#             # traffic light -------------------------------------------------\n",
    "#             if \"traffic_light\" in self.streams:\n",
    "#                 tl_state = 0\n",
    "#                 for obj in tldb.values():\n",
    "#                     if obj.get(\"obj_class\") != \"traffic_light\":\n",
    "#                         continue\n",
    "#                     if \"frames\" not in obj or \"state\" not in obj:\n",
    "#                         continue\n",
    "#                     try:\n",
    "#                         j = obj[\"frames\"].index(fn)\n",
    "#                         if obj[\"state\"][j] != 0:\n",
    "#                             tl_state = obj[\"state\"][j]\n",
    "#                             break\n",
    "#                     except (ValueError, IndexError):\n",
    "#                         continue\n",
    "#                 feats[\"traffic_light\"].append(to_one_hot(tl_state, NUM_TL_STATES))\n",
    "\n",
    "#             # static context -----------------------------------------------\n",
    "#             if \"static_context\" in self.streams:\n",
    "#                 feats[\"static_context\"].append(static_vec)\n",
    "\n",
    "#         # numpy → torch ------------------------------------------------------\n",
    "#         out = {\n",
    "#             s: torch.tensor(np.asarray(feats[s], np.float32), dtype=torch.float32)\n",
    "#             for s in self.streams\n",
    "#         }\n",
    "#         return out, torch.tensor(label, dtype=torch.long)\n",
    "\n",
    "\n",
    "# # =============================================================================\n",
    "# #                       MAIN: build balanced training set\n",
    "# # =============================================================================\n",
    "# if __name__ == \"__main__\":\n",
    "#     print(\"\\n--- DATA PREPARATION ---\")\n",
    "\n",
    "#     # 1) load / regenerate PIE DB -------------------------------------------\n",
    "#     cache = Path(PIE_DATABASE_CACHE_PATH)\n",
    "#     if cache.is_file():\n",
    "#         print(\"Loading PIE database cache …\")\n",
    "#         with cache.open(\"rb\") as fp:\n",
    "#             pie_db = pickle.load(fp)\n",
    "#         print(\"✓ PIE DB loaded.\")\n",
    "#     else:\n",
    "#         if PIE is None:\n",
    "#             raise RuntimeError(\"PIE class unavailable: cannot rebuild database.\")\n",
    "#         print(\"Cache not found – regenerating PIE DB …\")\n",
    "#         pie_db = PIE(data_path=PIE_ROOT_PATH, regen_database=True).generate_database()\n",
    "#         if not pie_db:\n",
    "#             raise RuntimeError(\"PIE DB generation failed.\")\n",
    "#         print(\"✓ PIE DB generated.\")\n",
    "\n",
    "#     # 2) compute scalers -----------------------------------------------------\n",
    "#     print(\"\\nComputing scalers …\")\n",
    "#     spd, accx, accy, gyz = [], [], [], []\n",
    "#     for sid in TRAIN_SETS_STR:\n",
    "#         for vid, vdb in pie_db.get(sid, {}).items():\n",
    "#             for frame, e in vdb.get(\"vehicle_annotations\", {}).items():\n",
    "#                 s  = e.get(\"OBD_speed\", 0.0) or e.get(\"GPS_speed\", 0.0)\n",
    "#                 spd.append(s)\n",
    "#                 accx.append(e.get(\"accX\", 0.0))\n",
    "#                 accy.append(e.get(\"accY\", 0.0))\n",
    "#                 gyz.append(e.get(\"gyroZ\", 0.0))\n",
    "\n",
    "#     scalers = {}\n",
    "#     if spd:\n",
    "#         scalers[\"ego_speed_mean\"] = float(np.mean(spd))\n",
    "#         scalers[\"ego_speed_std\"]  = float(max(np.std(spd), 1e-6))\n",
    "#     if accx:\n",
    "#         scalers[\"accX_mean\"] = float(np.mean(accx))\n",
    "#         scalers[\"accX_std\"]  = float(max(np.std(accx), 1e-6))\n",
    "#         scalers[\"accY_mean\"] = float(np.mean(accy))\n",
    "#         scalers[\"accY_std\"]  = float(max(np.std(accy), 1e-6))\n",
    "#     if gyz:\n",
    "#         scalers[\"gyroZ_mean\"] = float(np.mean(gyz))\n",
    "#         scalers[\"gyroZ_std\"]  = float(max(np.std(gyz), 1e-6))\n",
    "\n",
    "#     print(\"Scalers:\", scalers)\n",
    "\n",
    "#     # 3) extract full training dataset --------------------------------------\n",
    "#     print(\"\\nExtracting training sequences (all streams) …\")\n",
    "#     full_ds = PIEDataset(\n",
    "#         pie_db,\n",
    "#         TRAIN_SETS_STR,\n",
    "#         POSE_DATA_DIR,\n",
    "#         SEQ_LEN,\n",
    "#         PRED_LEN,\n",
    "#         scalers,\n",
    "#         ALL_POSSIBLE_STREAMS,\n",
    "#     )\n",
    "\n",
    "#     train_dict = {s: [] for s in ALL_POSSIBLE_STREAMS}\n",
    "#     train_dict[\"label\"] = []\n",
    "\n",
    "#     for i in tqdm(range(len(full_ds)), desc=\"seq\"):\n",
    "#         feat, lbl = full_ds[i]\n",
    "#         for s in ALL_POSSIBLE_STREAMS:\n",
    "#             train_dict[s].append(feat[s].numpy())\n",
    "#         train_dict[\"label\"].append([lbl.item()])\n",
    "\n",
    "#     print(f\"Raw training samples: {len(train_dict['label'])}\")\n",
    "\n",
    "#     # 4) balance -------------------------------------------------------------\n",
    "#     balanced = balance_samples_count(train_dict, \"label\")\n",
    "#     del train_dict, full_ds\n",
    "#     gc.collect()\n",
    "\n",
    "#     # 5) write pickles -------------------------------------------------------\n",
    "#     print(\"\\nSaving balanced data …\")\n",
    "#     with open(BALANCED_DATA_PKL_PATH, \"wb\") as fp:\n",
    "#         pickle.dump(balanced, fp, pickle.HIGHEST_PROTOCOL)\n",
    "#     print(f\"✓ {BALANCED_DATA_PKL_PATH}\")\n",
    "\n",
    "#     print(\"Saving scalers …\")\n",
    "#     with open(SCALERS_PKL_PATH, \"wb\") as fp:\n",
    "#         pickle.dump(scalers, fp, pickle.HIGHEST_PROTOCOL)\n",
    "#     print(f\"✓ {SCALERS_PKL_PATH}\")\n",
    "\n",
    "#     del pie_db\n",
    "#     gc.collect()\n",
    "\n",
    "#     print(\"\\n--- DATA PREPARATION COMPLETE ---\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "db3b73d3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-05T20:50:31.954919Z",
     "iopub.status.busy": "2025-05-05T20:50:31.954710Z",
     "iopub.status.idle": "2025-05-05T20:50:31.968147Z",
     "shell.execute_reply": "2025-05-05T20:50:31.967506Z"
    },
    "papermill": {
     "duration": 0.023375,
     "end_time": "2025-05-05T20:50:31.969292",
     "exception": false,
     "start_time": "2025-05-05T20:50:31.945917",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # --- CELL 2: ABLATION STUDY – MODEL TRAINING AND EVALUATION (with Weighted Average Fusion) ---\n",
    "\n",
    "# import os\n",
    "# import sys\n",
    "# import gc\n",
    "# import time\n",
    "# import math\n",
    "# import random\n",
    "# import pickle\n",
    "# import torch\n",
    "# import numpy as np\n",
    "# import pandas as pd                      # results-summary table\n",
    "# import torch.nn as nn\n",
    "# import torch.optim as optim\n",
    "# import matplotlib.pyplot as plt\n",
    "# import seaborn as sns\n",
    "# from tqdm.notebook import tqdm\n",
    "# from torch.utils.data import Dataset, DataLoader\n",
    "# from sklearn.metrics import (\n",
    "#     accuracy_score,\n",
    "#     precision_recall_fscore_support,\n",
    "#     roc_auc_score,\n",
    "#     confusion_matrix,\n",
    "#     ConfusionMatrixDisplay,\n",
    "# )\n",
    "\n",
    "# # --- Add PIE utilities path if necessary (adjust path) ------------------------\n",
    "# pie_utilities_path = \"/kaggle/working/PIE/utilities\"\n",
    "# if pie_utilities_path not in sys.path:\n",
    "#     sys.path.insert(0, pie_utilities_path)\n",
    "\n",
    "# try:\n",
    "#     from pie_data import PIE\n",
    "# except ImportError as e:\n",
    "#     print(f\"Warn: Could not import PIE class: {e}\")\n",
    "#     PIE = None\n",
    "\n",
    "# # --- Configuration ------------------------------------------------------------\n",
    "# PIE_ROOT_PATH = \"/kaggle/working/PIE\"\n",
    "# POSE_DATA_DIR = \"/kaggle/input/pose-data/extracted_poses2\"\n",
    "# PIE_DATABASE_CACHE_PATH = \"/kaggle/input/pie-database/pie_database.pkl\"\n",
    "\n",
    "# # --- Define ALL possible streams (used by Dataset class) ----------------------\n",
    "# ALL_POSSIBLE_STREAMS = [\n",
    "#     \"bbox\",\n",
    "#     \"pose\",\n",
    "#     \"ego_speed\",\n",
    "#     \"ego_acc\",\n",
    "#     \"ego_gyro\",\n",
    "#     \"ped_action\",\n",
    "#     \"ped_look\",\n",
    "#     \"ped_occlusion\",\n",
    "#     \"traffic_light\",\n",
    "#     \"static_context\",\n",
    "# ]\n",
    "\n",
    "# # --- *** CHOOSE ACTIVE STREAMS FOR THIS EXPERIMENT *** ------------------------\n",
    "# ACTIVE_STREAMS = [\n",
    "#     \"bbox\",\n",
    "#     \"pose\",\n",
    "#     \"ego_speed\",\n",
    "#     \"ego_acc\",\n",
    "#     \"ego_gyro\",\n",
    "#     \"ped_action\",\n",
    "#     \"ped_look\",\n",
    "#     \"ped_occlusion\",\n",
    "#     \"traffic_light\",\n",
    "#     \"static_context\",\n",
    "# ]\n",
    "# # ------------------------------------------------------------------------------\n",
    "\n",
    "# print(f\"--- Running Weighted Average Fusion With Active Streams: {ACTIVE_STREAMS} ---\")\n",
    "\n",
    "# # --- Model Hyper-parameters ---------------------------------------------------\n",
    "# SEQ_LEN, PRED_LEN = 30, 1\n",
    "# INPUT_SIZE_BBOX = 4\n",
    "# INPUT_SIZE_POSE = 34\n",
    "# INPUT_SIZE_EGO_SPEED = 1\n",
    "# INPUT_SIZE_EGO_ACC = 2\n",
    "# INPUT_SIZE_EGO_GYRO = 1\n",
    "# INPUT_SIZE_PED_ACTION = 1\n",
    "# INPUT_SIZE_PED_LOOK = 1\n",
    "# INPUT_SIZE_PED_OCC = 1\n",
    "# INPUT_SIZE_TL_STATE = 4\n",
    "# NUM_SIGNALIZED_CATS = 4\n",
    "# NUM_INTERSECTION_CATS = 5\n",
    "# NUM_AGE_CATS = 4\n",
    "# NUM_GENDER_CATS = 3\n",
    "# NUM_TRAFFIC_DIR_CATS = 2\n",
    "# LANE_CATEGORIES = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 4, 7: 4, 8: 4}\n",
    "# NUM_LANE_CATS = len(set(LANE_CATEGORIES.values()))\n",
    "# INPUT_SIZE_STATIC = (\n",
    "#     NUM_SIGNALIZED_CATS\n",
    "#     + NUM_INTERSECTION_CATS\n",
    "#     + NUM_AGE_CATS\n",
    "#     + NUM_GENDER_CATS\n",
    "#     + NUM_TRAFFIC_DIR_CATS\n",
    "#     + NUM_LANE_CATS\n",
    "# )\n",
    "\n",
    "# LSTM_HIDDEN_SIZE = 256\n",
    "# NUM_LSTM_LAYERS = 2\n",
    "# DROPOUT_RATE = 0.3\n",
    "# NUM_CLASSES = 2\n",
    "# ATTENTION_DIM = 128\n",
    "\n",
    "# # --- Training Hyper-parameters ------------------------------------------------\n",
    "# LEARNING_RATE = 1e-4\n",
    "# BATCH_SIZE = 32\n",
    "# NUM_EPOCHS = 30  \n",
    "# DEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# print(f\"Using device: {DEVICE}\")\n",
    "\n",
    "# # --- Dataset splits -----------------------------------------------------------\n",
    "# VAL_SETS_STR = [\"set05\", \"set06\"]\n",
    "\n",
    "# # --- Paths for pre-processed data --------------------------------------------\n",
    "# BALANCED_DATA_PKL_PATH = \"/kaggle/working/balanced_train_data.pkl\"\n",
    "# SCALERS_PKL_PATH = \"/kaggle/working/scalers.pkl\"\n",
    "\n",
    "# # -----------------------------------------------------------------------------#\n",
    "# #                               Helper classes                                #\n",
    "# # -----------------------------------------------------------------------------\n",
    "\n",
    "\n",
    "# def to_one_hot(index, num_classes):\n",
    "#     vec = np.zeros(num_classes, dtype=np.float32)\n",
    "#     safe_index = int(np.clip(index, 0, num_classes - 1))\n",
    "#     vec[safe_index] = 1.0\n",
    "#     return vec\n",
    "\n",
    "\n",
    "# class PIEDataset(Dataset):\n",
    "#     \"\"\"\n",
    "#     Dataset that can dynamically enable/disable streams.\n",
    "#     \"\"\"\n",
    "\n",
    "#     def __init__(\n",
    "#         self,\n",
    "#         pie_database,\n",
    "#         set_names,\n",
    "#         pose_data_dir,\n",
    "#         seq_len,\n",
    "#         pred_len,\n",
    "#         scalers=None,\n",
    "#         active_streams=None,\n",
    "#     ):\n",
    "#         self.pie_db = pie_database\n",
    "#         self.set_names = set_names\n",
    "#         self.pose_data_dir = pose_data_dir\n",
    "#         self.seq_len = seq_len\n",
    "#         self.pred_len = pred_len\n",
    "#         self.scalers = scalers or {}\n",
    "#         self.active_streams = active_streams or ALL_POSSIBLE_STREAMS\n",
    "#         self.sequences = []\n",
    "#         self.all_pose_data = {}\n",
    "\n",
    "#         self._input_sizes_for_error = self._get_input_sizes_dict()\n",
    "\n",
    "#         if \"pose\" in self.active_streams:\n",
    "#             self._load_pose_data()\n",
    "\n",
    "#         self._generate_sequence_list()\n",
    "#         if not self.sequences:\n",
    "#             raise ValueError(f\"Dataset init failed: No sequences for {self.set_names}\")\n",
    "\n",
    "#     # --------------------------------------------------------------------- #\n",
    "#     #                        internal helper methods                        #\n",
    "#     # --------------------------------------------------------------------- #\n",
    "\n",
    "#     def _get_input_sizes_dict(self):\n",
    "#         \"\"\"\n",
    "#         Build a dict {stream_name: feature_size}.\n",
    "#         \"\"\"\n",
    "#         input_sizes = {}\n",
    "#         special_cases = {\n",
    "#             \"TRAFFIC_LIGHT\": \"TL_STATE\",\n",
    "#             \"STATIC_CONTEXT\": \"STATIC\",\n",
    "#             \"EGO_SPEED\": \"EGO_SPEED\",\n",
    "#             \"EGO_ACC\": \"EGO_ACC\",\n",
    "#             \"EGO_GYRO\": \"EGO_GYRO\",\n",
    "#             \"PED_ACTION\": \"PED_ACTION\",\n",
    "#             \"PED_LOOK\": \"PED_LOOK\",\n",
    "#             \"PED_OCCLUSION\": \"PED_OCC\",\n",
    "#         }\n",
    "\n",
    "#         for stream in ALL_POSSIBLE_STREAMS:\n",
    "#             size_constant_name = f\"INPUT_SIZE_{stream.upper()}\"\n",
    "#             stream_upper_key = stream.upper()\n",
    "#             suffix = special_cases.get(stream_upper_key)\n",
    "\n",
    "#             if suffix:\n",
    "#                 size_constant_name = f\"INPUT_SIZE_{suffix}\"\n",
    "#             elif stream == \"bbox\":\n",
    "#                 size_constant_name = \"INPUT_SIZE_BBOX\"\n",
    "#             elif stream == \"pose\":\n",
    "#                 size_constant_name = \"INPUT_SIZE_POSE\"\n",
    "\n",
    "#             input_sizes[stream] = globals().get(size_constant_name, 1)\n",
    "\n",
    "#         return input_sizes\n",
    "\n",
    "#     def _load_pose_data(self):\n",
    "#         \"\"\"\n",
    "#         Load pose dictionaries once per dataset instance.\n",
    "#         \"\"\"\n",
    "#         sets_loaded_count = 0\n",
    "#         for set_id in self.set_names:\n",
    "#             self.all_pose_data[set_id] = {}\n",
    "#             pose_set_path = os.path.join(self.pose_data_dir, set_id)\n",
    "#             if not os.path.isdir(pose_set_path):\n",
    "#                 continue\n",
    "\n",
    "#             pkl_files_in_set = [\n",
    "#                 f\n",
    "#                 for f in os.listdir(pose_set_path)\n",
    "#                 if f.startswith(f\"{set_id}_\") and f.endswith(\"_poses.pkl\")\n",
    "#             ]\n",
    "#             if not pkl_files_in_set:\n",
    "#                 continue\n",
    "\n",
    "#             loaded_video_count = 0\n",
    "#             for pkl_filename in pkl_files_in_set:\n",
    "#                 pkl_file_path = os.path.join(pose_set_path, pkl_filename)\n",
    "#                 try:\n",
    "#                     with open(pkl_file_path, \"rb\") as f:\n",
    "#                         loaded_pkl_content = pickle.load(f)\n",
    "#                 except FileNotFoundError:\n",
    "#                     continue\n",
    "#                 except Exception as e:\n",
    "#                     print(f\"Error loading pose PKL {pkl_file_path}: {e}\")\n",
    "#                     continue\n",
    "\n",
    "#                 # Every pose-PKL contains a single key (video), by convention\n",
    "#                 if len(loaded_pkl_content) != 1:\n",
    "#                     continue\n",
    "\n",
    "#                 unique_video_key, video_data = list(loaded_pkl_content.items())[0]\n",
    "#                 video_id = \"_\".join(unique_video_key.split(\"_\")[1:])\n",
    "#                 if video_id in self.pie_db.get(set_id, {}):\n",
    "#                     self.all_pose_data[set_id][video_id] = video_data\n",
    "#                     loaded_video_count += 1\n",
    "\n",
    "#             if loaded_video_count > 0:\n",
    "#                 sets_loaded_count += 1\n",
    "\n",
    "#     def _generate_sequence_list(self):\n",
    "#         \"\"\"\n",
    "#         Enumerate every sliding window that satisfies length + prediction horizon.\n",
    "#         \"\"\"\n",
    "#         sequence_count = 0\n",
    "#         for set_id in self.set_names:\n",
    "#             if set_id not in self.pie_db:\n",
    "#                 continue\n",
    "#             for video_id, video_data in self.pie_db[set_id].items():\n",
    "#                 if \"ped_annotations\" not in video_data:\n",
    "#                     continue\n",
    "#                 for ped_id, ped_data in video_data[\"ped_annotations\"].items():\n",
    "#                     frames = ped_data.get(\"frames\", [])\n",
    "#                     if len(frames) < self.seq_len + self.pred_len:\n",
    "#                         continue\n",
    "\n",
    "#                     frames_sorted = sorted(frames)\n",
    "#                     for i in range(len(frames_sorted) - self.seq_len - self.pred_len + 1):\n",
    "#                         start_f = frames_sorted[i]\n",
    "#                         obs_end_f = frames_sorted[i + self.seq_len - 1]\n",
    "\n",
    "#                         # consecutiveness check\n",
    "#                         if obs_end_f - start_f != self.seq_len - 1:\n",
    "#                             continue\n",
    "\n",
    "#                         target_idx = i + self.seq_len + self.pred_len - 1\n",
    "#                         if target_idx >= len(frames_sorted):\n",
    "#                             continue\n",
    "\n",
    "#                         target_f = frames_sorted[target_idx]\n",
    "#                         if target_f - obs_end_f != self.pred_len:\n",
    "#                             continue\n",
    "\n",
    "#                         self.sequences.append((set_id, video_id, ped_id, start_f))\n",
    "#                         sequence_count += 1\n",
    "\n",
    "#         print(f\"Dataset initialized with {sequence_count} sequences for sets {self.set_names}.\")\n",
    "\n",
    "#     # --------------------------------------------------------------------- #\n",
    "#     #                              overrides                                #\n",
    "#     # --------------------------------------------------------------------- #\n",
    "\n",
    "#     def __len__(self):\n",
    "#         return len(self.sequences)\n",
    "\n",
    "#     def __getitem__(self, idx):\n",
    "#         \"\"\"\n",
    "#         Returns:\n",
    "#             features_dict   {stream_name: Tensor(seq_len, feat_dim)}\n",
    "#             label_tensor    Tensor([])\n",
    "#         \"\"\"\n",
    "#         set_id, video_id, ped_id, start_frame = self.sequences[idx]\n",
    "#         frame_nums = list(range(start_frame, start_frame + self.seq_len))\n",
    "#         target_frame_num = start_frame + self.seq_len + self.pred_len - 1\n",
    "\n",
    "#         # convenient aliases\n",
    "#         video_db = self.pie_db.get(set_id, {}).get(video_id, {})\n",
    "#         ped_db = video_db.get(\"ped_annotations\", {}).get(ped_id, {})\n",
    "#         ego_db = video_db.get(\"vehicle_annotations\", {})\n",
    "#         traffic_db = video_db.get(\"traffic_annotations\", {})\n",
    "#         ped_attributes = ped_db.get(\"attributes\", {})\n",
    "\n",
    "#         feature_sequences = {s: [] for s in self.active_streams}\n",
    "#         label = 0\n",
    "\n",
    "#         if (\n",
    "#             \"frames\" in ped_db\n",
    "#             and \"behavior\" in ped_db\n",
    "#             and \"cross\" in ped_db[\"behavior\"]\n",
    "#         ):\n",
    "#             try:\n",
    "#                 target_idx = ped_db[\"frames\"].index(target_frame_num)\n",
    "#                 label = ped_db[\"behavior\"][\"cross\"][target_idx]\n",
    "#                 if label == -1:\n",
    "#                     label = 0\n",
    "#             except (ValueError, IndexError):\n",
    "#                 pass\n",
    "\n",
    "#         # --- static context ------------------------------------------------\n",
    "#         static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "#         if \"static_context\" in self.active_streams:\n",
    "#             sig_idx = ped_attributes.get(\"signalized\", 0)\n",
    "#             int_idx = ped_attributes.get(\"intersection\", 0)\n",
    "#             age_idx = ped_attributes.get(\"age\", 2)\n",
    "#             gen_idx = ped_attributes.get(\"gender\", 0)\n",
    "#             td_idx = int(ped_attributes.get(\"traffic_direction\", 0))\n",
    "#             nl_val = ped_attributes.get(\"num_lanes\", 2)\n",
    "#             nl_cat_idx = LANE_CATEGORIES.get(\n",
    "#                 nl_val, LANE_CATEGORIES[max(LANE_CATEGORIES.keys())]\n",
    "#             )\n",
    "\n",
    "#             static_vec = np.concatenate(\n",
    "#                 [\n",
    "#                     to_one_hot(sig_idx, NUM_SIGNALIZED_CATS),\n",
    "#                     to_one_hot(int_idx, NUM_INTERSECTION_CATS),\n",
    "#                     to_one_hot(age_idx, NUM_AGE_CATS),\n",
    "#                     to_one_hot(gen_idx, NUM_GENDER_CATS),\n",
    "#                     to_one_hot(td_idx, NUM_TRAFFIC_DIR_CATS),\n",
    "#                     to_one_hot(nl_cat_idx, NUM_LANE_CATS),\n",
    "#                 ]\n",
    "#             )\n",
    "\n",
    "#             if static_vec.shape[0] != INPUT_SIZE_STATIC:\n",
    "#                 static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "\n",
    "#         # -------------------------------------------------------------------\n",
    "#         #                    per-frame feature extraction                    #\n",
    "#         # -------------------------------------------------------------------\n",
    "#         for frame_num in frame_nums:\n",
    "#             frame_db_idx = -1\n",
    "#             if \"frames\" in ped_db:\n",
    "#                 try:\n",
    "#                     frame_db_idx = ped_db[\"frames\"].index(frame_num)\n",
    "#                 except ValueError:\n",
    "#                     pass\n",
    "\n",
    "#             ego_frame_data = ego_db.get(frame_num, {})\n",
    "\n",
    "#             # ---------- bbox ------------------------------------------------\n",
    "#             if \"bbox\" in self.active_streams:\n",
    "#                 bbox_norm = np.zeros(INPUT_SIZE_BBOX, dtype=np.float32)\n",
    "#                 if (\n",
    "#                     frame_db_idx != -1\n",
    "#                     and \"bbox\" in ped_db\n",
    "#                     and len(ped_db[\"bbox\"]) > frame_db_idx\n",
    "#                 ):\n",
    "#                     try:\n",
    "#                         x1, y1, x2, y2 = ped_db[\"bbox\"][frame_db_idx]\n",
    "#                         img_w = video_db.get(\"width\", 1920)\n",
    "#                         img_h = video_db.get(\"height\", 1080)\n",
    "#                         if img_w > 0 and img_h > 0:\n",
    "#                             cx = ((x1 + x2) / 2) / img_w\n",
    "#                             cy = ((y1 + y2) / 2) / img_h\n",
    "#                             w = (x2 - x1) / img_w\n",
    "#                             h = (y2 - y1) / img_h\n",
    "#                             if 0 < w and 0 < h and 0 <= cx <= 1 and 0 <= cy <= 1:\n",
    "#                                 bbox_norm = np.array([cx, cy, w, h], dtype=np.float32)\n",
    "#                     except Exception:\n",
    "#                         pass\n",
    "\n",
    "#                 feature_sequences[\"bbox\"].append(bbox_norm)\n",
    "\n",
    "#             # ---------- pose -----------------------------------------------\n",
    "#             if \"pose\" in self.active_streams:\n",
    "#                 pose_vector = np.zeros(INPUT_SIZE_POSE, dtype=np.float32)\n",
    "#                 vid_pose = self.all_pose_data.get(set_id, {}).get(video_id, {})\n",
    "#                 frame_pose = vid_pose.get(frame_num, {})\n",
    "#                 loaded_pose = frame_pose.get(ped_id)\n",
    "\n",
    "#                 if (\n",
    "#                     loaded_pose is not None\n",
    "#                     and isinstance(loaded_pose, np.ndarray)\n",
    "#                     and loaded_pose.shape == (INPUT_SIZE_POSE,)\n",
    "#                 ):\n",
    "#                     pose_vector = loaded_pose\n",
    "\n",
    "#                 feature_sequences[\"pose\"].append(pose_vector)\n",
    "\n",
    "#             # ---------- ego-speed ------------------------------------------\n",
    "#             if \"ego_speed\" in self.active_streams:\n",
    "#                 speed = ego_frame_data.get(\"OBD_speed\", 0.0)\n",
    "#                 if speed == 0.0:\n",
    "#                     speed = ego_frame_data.get(\"GPS_speed\", 0.0)\n",
    "\n",
    "#                 speed_scaled = (\n",
    "#                     speed - self.scalers.get(\"ego_speed_mean\", 0.0)\n",
    "#                 ) / self.scalers.get(\"ego_speed_std\", 1.0)\n",
    "#                 feature_sequences[\"ego_speed\"].append([speed_scaled])\n",
    "\n",
    "#             # ---------- ego-acc --------------------------------------------\n",
    "#             if \"ego_acc\" in self.active_streams:\n",
    "#                 acc_x = ego_frame_data.get(\"accX\", 0.0)\n",
    "#                 acc_y = ego_frame_data.get(\"accY\", 0.0)\n",
    "#                 acc_x_scaled = (\n",
    "#                     acc_x - self.scalers.get(\"accX_mean\", 0.0)\n",
    "#                 ) / self.scalers.get(\"accX_std\", 1.0)\n",
    "#                 acc_y_scaled = (\n",
    "#                     acc_y - self.scalers.get(\"accY_mean\", 0.0)\n",
    "#                 ) / self.scalers.get(\"accY_std\", 1.0)\n",
    "#                 feature_sequences[\"ego_acc\"].append([acc_x_scaled, acc_y_scaled])\n",
    "\n",
    "#             # ---------- ego-gyro -------------------------------------------\n",
    "#             if \"ego_gyro\" in self.active_streams:\n",
    "#                 gyro_z = ego_frame_data.get(\"gyroZ\", 0.0)\n",
    "#                 gyro_z_scaled = (\n",
    "#                     gyro_z - self.scalers.get(\"gyroZ_mean\", 0.0)\n",
    "#                 ) / self.scalers.get(\"gyroZ_std\", 1.0)\n",
    "#                 feature_sequences[\"ego_gyro\"].append([gyro_z_scaled])\n",
    "\n",
    "#             # ---------- ped_action -----------------------------------------\n",
    "#             if \"ped_action\" in self.active_streams:\n",
    "#                 action = 0\n",
    "#                 if (\n",
    "#                     frame_db_idx != -1\n",
    "#                     and \"behavior\" in ped_db\n",
    "#                     and \"action\" in ped_db[\"behavior\"]\n",
    "#                     and len(ped_db[\"behavior\"][\"action\"]) > frame_db_idx\n",
    "#                 ):\n",
    "#                     action = ped_db[\"behavior\"][\"action\"][frame_db_idx]\n",
    "#                 feature_sequences[\"ped_action\"].append([float(action)])\n",
    "\n",
    "#             # ---------- ped_look -------------------------------------------\n",
    "#             if \"ped_look\" in self.active_streams:\n",
    "#                 look = 0\n",
    "#                 if (\n",
    "#                     frame_db_idx != -1\n",
    "#                     and \"behavior\" in ped_db\n",
    "#                     and \"look\" in ped_db[\"behavior\"]\n",
    "#                     and len(ped_db[\"behavior\"][\"look\"]) > frame_db_idx\n",
    "#                 ):\n",
    "#                     look = ped_db[\"behavior\"][\"look\"][frame_db_idx]\n",
    "#                 feature_sequences[\"ped_look\"].append([float(look)])\n",
    "\n",
    "#             # ---------- ped_occlusion --------------------------------------\n",
    "#             if \"ped_occlusion\" in self.active_streams:\n",
    "#                 occ = 0.0\n",
    "#                 if (\n",
    "#                     frame_db_idx != -1\n",
    "#                     and \"occlusion\" in ped_db\n",
    "#                     and len(ped_db[\"occlusion\"]) > frame_db_idx\n",
    "#                 ):\n",
    "#                     occ_val = ped_db[\"occlusion\"][frame_db_idx]\n",
    "#                     occ = float(occ_val) / 2.0\n",
    "#                 feature_sequences[\"ped_occlusion\"].append([occ])\n",
    "\n",
    "#             # ---------- traffic_light --------------------------------------\n",
    "#             if \"traffic_light\" in self.active_streams:\n",
    "#                 state_int = 0\n",
    "#                 for obj_id, obj_data in traffic_db.items():\n",
    "#                     if (\n",
    "#                         obj_data.get(\"obj_class\") == \"traffic_light\"\n",
    "#                         and \"frames\" in obj_data\n",
    "#                         and \"state\" in obj_data\n",
    "#                     ):\n",
    "#                         try:\n",
    "#                             tl_idx = obj_data[\"frames\"].index(frame_num)\n",
    "#                             state_val = obj_data[\"state\"][tl_idx]\n",
    "#                             if state_val != 0:\n",
    "#                                 state_int = state_val\n",
    "#                                 break\n",
    "#                         except (ValueError, IndexError):\n",
    "#                             continue\n",
    "#                 feature_sequences[\"traffic_light\"].append(\n",
    "#                     to_one_hot(state_int, INPUT_SIZE_TL_STATE)\n",
    "#                 )\n",
    "\n",
    "#             # ---------- static_context (per-frame replicate) ---------------\n",
    "#             if \"static_context\" in self.active_streams:\n",
    "#                 feature_sequences[\"static_context\"].append(static_vec)\n",
    "\n",
    "#         # -------------------------------------------------------------------\n",
    "#         # convert to tensors / safe fallback\n",
    "#         # -------------------------------------------------------------------\n",
    "#         features = {}\n",
    "#         try:\n",
    "#             for name in self.active_streams:\n",
    "#                 features[name] = torch.tensor(\n",
    "#                     np.asarray(feature_sequences[name], dtype=np.float32),\n",
    "#                     dtype=torch.float32,\n",
    "#                 )\n",
    "#         except Exception as e:\n",
    "#             print(f\"Error converting features idx {idx}: {e}. Returning zeros.\")\n",
    "#             features = {\n",
    "#                 name: torch.zeros(\n",
    "#                     (self.seq_len, self._input_sizes_for_error.get(name, 1)),\n",
    "#                     dtype=torch.float32,\n",
    "#                 )\n",
    "#                 for name in self.active_streams\n",
    "#             }\n",
    "\n",
    "#         return features, torch.tensor(label, dtype=torch.long)\n",
    "\n",
    "\n",
    "# class BalancedDataset(Dataset):\n",
    "#     \"\"\"\n",
    "#     Memory-based balanced dataset generated by the prep notebook cell.\n",
    "#     \"\"\"\n",
    "\n",
    "#     def __init__(self, data_dict, active_streams, label_key=\"label\"):\n",
    "#         self.active_streams = active_streams\n",
    "#         self.label_key = label_key\n",
    "\n",
    "#         if self.label_key not in data_dict or not data_dict[self.label_key]:\n",
    "#             raise ValueError(f\"Label key '{self.label_key}' missing/empty.\")\n",
    "\n",
    "#         self.num_samples = len(data_dict[self.label_key])\n",
    "#         if self.num_samples == 0:\n",
    "#             print(\"Warning: BalancedDataset initialized with zero samples.\")\n",
    "\n",
    "#         # convert every requested stream to tensor\n",
    "#         self.features = {}\n",
    "#         for stream in self.active_streams:\n",
    "#             if stream in data_dict and data_dict[stream]:\n",
    "#                 try:\n",
    "#                     self.features[stream] = torch.tensor(\n",
    "#                         np.asarray(data_dict[stream]), dtype=torch.float32\n",
    "#                     )\n",
    "#                 except ValueError as e:\n",
    "#                     raise ValueError(f\"Error converting stream '{stream}': {e}\")\n",
    "#             else:\n",
    "#                 raise KeyError(f\"Stream '{stream}' missing or empty in data.\")\n",
    "\n",
    "#         try:\n",
    "#             self.labels = torch.tensor(\n",
    "#                 [lbl[0] for lbl in data_dict[self.label_key]], dtype=torch.long\n",
    "#             )\n",
    "#         except (IndexError, TypeError) as e:\n",
    "#             raise ValueError(f\"Error converting labels: {e}\")\n",
    "\n",
    "#         for stream in self.active_streams:\n",
    "#             if len(self.features[stream]) != self.num_samples:\n",
    "#                 raise ValueError(\n",
    "#                     f\"Len mismatch: '{stream}' ({len(self.features[stream])}) vs labels ({self.num_samples})\"\n",
    "#                 )\n",
    "\n",
    "#     def __len__(self):\n",
    "#         return self.num_samples\n",
    "\n",
    "#     def __getitem__(self, idx):\n",
    "#         feature_dict = {s: self.features[s][idx] for s in self.active_streams}\n",
    "#         label = self.labels[idx]\n",
    "#         return feature_dict, label\n",
    "\n",
    "\n",
    "# class Attention(nn.Module):\n",
    "#     def __init__(self, hidden_dim, attention_dim):\n",
    "#         super().__init__()\n",
    "#         self.attention_net = nn.Sequential(\n",
    "#             nn.Linear(hidden_dim, attention_dim),\n",
    "#             nn.Tanh(),\n",
    "#             nn.Linear(attention_dim, 1),\n",
    "#         )\n",
    "\n",
    "#     def forward(self, lstm_output):\n",
    "#         att_scores = self.attention_net(lstm_output).squeeze(2)\n",
    "#         att_weights = torch.softmax(att_scores, dim=1)\n",
    "#         context_vector = torch.sum(lstm_output * att_weights.unsqueeze(2), dim=1)\n",
    "#         return context_vector, att_weights\n",
    "\n",
    "\n",
    "# # -----------------------------------------------------------------------------#\n",
    "# #                  ***  MODEL WITH WEIGHTED AVERAGE FUSION  ***                #\n",
    "# # -----------------------------------------------------------------------------\n",
    "\n",
    "\n",
    "# class MultiStreamWeightedAvgLSTM(nn.Module):\n",
    "#     def __init__(\n",
    "#         self,\n",
    "#         input_sizes,\n",
    "#         lstm_hidden_size,\n",
    "#         num_lstm_layers,\n",
    "#         num_classes,\n",
    "#         attention_dim,\n",
    "#         dropout_rate,\n",
    "#         stream_names=None,\n",
    "#     ):\n",
    "#         super().__init__()\n",
    "\n",
    "#         if not stream_names:\n",
    "#             raise ValueError(\"stream_names cannot be empty.\")\n",
    "#         self.stream_names = stream_names\n",
    "#         self.num_active_streams = len(stream_names)\n",
    "#         self.lstm_output_dim = lstm_hidden_size * 2  # Bi-LSTM doubles hidden\n",
    "\n",
    "#         self.lstms = nn.ModuleDict()\n",
    "#         self.attentions = nn.ModuleDict()\n",
    "\n",
    "#         print(f\"Initializing Weighted-Avg model with streams: {self.stream_names}\")\n",
    "\n",
    "#         for name in self.stream_names:\n",
    "#             if name not in input_sizes:\n",
    "#                 raise KeyError(f\"Input size for stream '{name}' not provided.\")\n",
    "\n",
    "#             in_size = input_sizes[name]\n",
    "#             print(f\"  – Adding stream '{name}' (input {in_size})\")\n",
    "\n",
    "#             self.lstms[name] = nn.LSTM(\n",
    "#                 in_size,\n",
    "#                 lstm_hidden_size,\n",
    "#                 num_lstm_layers,\n",
    "#                 batch_first=True,\n",
    "#                 dropout=dropout_rate if num_lstm_layers > 1 else 0,\n",
    "#                 bidirectional=True,\n",
    "#             )\n",
    "#             self.attentions[name] = Attention(self.lstm_output_dim, attention_dim)\n",
    "\n",
    "#         # learnable fusion weights (one per stream)\n",
    "#         self.fusion_weights = nn.Parameter(torch.ones(self.num_active_streams))\n",
    "\n",
    "#         # classification head\n",
    "#         fused_dim = self.lstm_output_dim\n",
    "#         self.dropout = nn.Dropout(dropout_rate)\n",
    "#         inter_dim = max(num_classes * 4, fused_dim // 2)\n",
    "#         self.fc1 = nn.Linear(fused_dim, inter_dim)\n",
    "#         self.relu = nn.ReLU()\n",
    "#         self.fc2 = nn.Linear(inter_dim, num_classes)\n",
    "\n",
    "#     # --------------------------------------------------------------------- #\n",
    "\n",
    "#     def forward(self, x):\n",
    "#         # gather context vectors ------------------------------------------------\n",
    "#         ctx_vecs = []\n",
    "#         for name in self.stream_names:\n",
    "#             if name not in x:\n",
    "#                 # gracefully handle a missing stream during inference\n",
    "#                 zero_ctx = torch.zeros(\n",
    "#                     x[next(iter(x))].shape[0],\n",
    "#                     self.lstm_output_dim,\n",
    "#                     device=x[next(iter(x))].device,\n",
    "#                 )\n",
    "#                 ctx_vecs.append(zero_ctx)\n",
    "#                 continue\n",
    "\n",
    "#             lstm_out, _ = self.lstms[name](x[name])\n",
    "#             context_vector, _ = self.attentions[name](lstm_out)\n",
    "#             ctx_vecs.append(context_vector)\n",
    "\n",
    "#         if len(ctx_vecs) != self.num_active_streams:\n",
    "#             raise RuntimeError(\n",
    "#                 f\"context_vectors({len(ctx_vecs)}) != num_streams({self.num_active_streams})\"\n",
    "#             )\n",
    "\n",
    "#         # weighted average fusion ---------------------------------------------\n",
    "#         stacked = torch.stack(ctx_vecs, dim=1)  # (B, N, D)\n",
    "#         weights = torch.softmax(self.fusion_weights, dim=0).view(1, -1, 1)\n",
    "#         fused = torch.sum(stacked * weights, dim=1)\n",
    "\n",
    "#         # classification head --------------------------------------------------\n",
    "#         out = self.dropout(fused)\n",
    "#         out = self.relu(self.fc1(out))\n",
    "#         out = self.dropout(out)\n",
    "#         logits = self.fc2(out)\n",
    "#         return logits\n",
    "\n",
    "\n",
    "# # -----------------------------------------------------------------------------#\n",
    "# #                       Training / evaluation helpers                          #\n",
    "# # -----------------------------------------------------------------------------\n",
    "\n",
    "\n",
    "# def train_epoch(model, dataloader, optimizer, criterion, device):\n",
    "#     model.train()\n",
    "#     total_loss = 0.0\n",
    "#     all_preds, all_labels = [], []\n",
    "#     active = model.stream_names\n",
    "\n",
    "#     for feats, labels in tqdm(dataloader, desc=\"Training\", leave=False):\n",
    "#         inputs = {n: feats[n].to(device) for n in active if n in feats}\n",
    "#         labels = labels.to(device)\n",
    "\n",
    "#         optimizer.zero_grad()\n",
    "#         outputs = model(inputs)\n",
    "#         loss = criterion(outputs, labels)\n",
    "#         loss.backward()\n",
    "#         optimizer.step()\n",
    "\n",
    "#         total_loss += loss.item()\n",
    "#         all_preds.extend(torch.argmax(outputs, 1).cpu().numpy())\n",
    "#         all_labels.extend(labels.cpu().numpy())\n",
    "\n",
    "#     return total_loss / max(1, len(dataloader)), accuracy_score(all_labels, all_preds)\n",
    "\n",
    "\n",
    "# def evaluate_epoch(model, dataloader, criterion, device):\n",
    "#     model.eval()\n",
    "#     total_loss = 0.0\n",
    "#     all_labels, all_preds, all_probs = [], [], []\n",
    "#     active = model.stream_names\n",
    "\n",
    "#     with torch.no_grad():\n",
    "#         for feats, labels in tqdm(dataloader, desc=\"Evaluating\", leave=False):\n",
    "#             inputs = {n: feats[n].to(device) for n in active if n in feats}\n",
    "#             labels = labels.to(device)\n",
    "\n",
    "#             outputs = model(inputs)\n",
    "#             loss = criterion(outputs, labels)\n",
    "#             total_loss += loss.item()\n",
    "\n",
    "#             probs = torch.softmax(outputs, 1)\n",
    "#             preds = torch.argmax(probs, 1)\n",
    "\n",
    "#             all_labels.extend(labels.cpu().numpy())\n",
    "#             all_preds.extend(preds.cpu().numpy())\n",
    "#             all_probs.extend(probs.cpu().numpy())\n",
    "\n",
    "#     avg_loss = total_loss / max(1, len(dataloader))\n",
    "#     all_probs = np.asarray(all_probs)\n",
    "#     all_labels = np.asarray(all_labels)\n",
    "#     all_preds = np.asarray(all_preds)\n",
    "\n",
    "#     acc = accuracy_score(all_labels, all_preds)\n",
    "#     prec, rec, f1, _ = precision_recall_fscore_support(\n",
    "#         all_labels, all_preds, average=\"binary\", pos_label=1, zero_division=0\n",
    "#     )\n",
    "#     auc = (\n",
    "#         roc_auc_score(all_labels, all_probs[:, 1])\n",
    "#         if len(np.unique(all_labels)) > 1\n",
    "#         else float(\"nan\")\n",
    "#     )\n",
    "\n",
    "#     return {\n",
    "#         \"loss\": avg_loss,\n",
    "#         \"accuracy\": acc,\n",
    "#         \"precision\": prec,\n",
    "#         \"recall\": rec,\n",
    "#         \"f1\": f1,\n",
    "#         \"auc\": auc,\n",
    "#     }\n",
    "\n",
    "\n",
    "# def get_predictions_and_labels(model, dataloader, device):\n",
    "#     model.eval()\n",
    "#     labels_all, preds_all = [], []\n",
    "#     active = model.stream_names\n",
    "\n",
    "#     with torch.no_grad():\n",
    "#         for feats, labels in tqdm(dataloader, desc=\"Generating CM Data\", leave=False):\n",
    "#             inputs = {n: feats[n].to(device) for n in active if n in feats}\n",
    "#             outputs = model(inputs)\n",
    "#             preds = torch.argmax(outputs, 1)\n",
    "#             labels_all.extend(labels.cpu().numpy())\n",
    "#             preds_all.extend(preds.cpu().numpy())\n",
    "\n",
    "#     return np.asarray(labels_all), np.asarray(preds_all)\n",
    "\n",
    "\n",
    "# # -----------------------------------------------------------------------------#\n",
    "# #                            Main execution block                              #\n",
    "# # -----------------------------------------------------------------------------\n",
    "\n",
    "\n",
    "# if __name__ == \"__main__\":\n",
    "#     print(\"--- Running Model Training/Evaluation with Weighted Fusion ---\")\n",
    "#     print(f\"Active Streams: {ACTIVE_STREAMS}\")\n",
    "\n",
    "#     # ------------------ load balanced data & scalers -------------------------\n",
    "#     print(\"\\nLoading balanced training data …\")\n",
    "#     try:\n",
    "#         with open(BALANCED_DATA_PKL_PATH, \"rb\") as f:\n",
    "#             balanced_train_data_dict = pickle.load(f)\n",
    "#         with open(SCALERS_PKL_PATH, \"rb\") as f:\n",
    "#             scalers = pickle.load(f)\n",
    "#         print(\"   ✓ pre-processed data loaded.\")\n",
    "#     except FileNotFoundError as e:\n",
    "#         print(f\"ERROR: {e}.  Run the preprocessing cell first.\")\n",
    "#         sys.exit(1)\n",
    "#     except Exception as e:\n",
    "#         print(f\"Error loading pre-processed data: {e}\")\n",
    "#         sys.exit(1)\n",
    "\n",
    "#     # -------------------------- load PIE database ----------------------------\n",
    "#     print(\"\\nLoading PIE database cache for validation …\")\n",
    "#     if not os.path.exists(PIE_DATABASE_CACHE_PATH):\n",
    "#         raise FileNotFoundError(\"PIE database cache not found.\")\n",
    "\n",
    "#     try:\n",
    "#         with open(PIE_DATABASE_CACHE_PATH, \"rb\") as f:\n",
    "#             pie_database = pickle.load(f)\n",
    "#     except Exception as e:\n",
    "#         raise RuntimeError(f\"Failed to load PIE database: {e}\")\n",
    "#     print(\"   ✓ PIE database loaded.\")\n",
    "\n",
    "#     # ------------------- create datasets / dataloaders -----------------------\n",
    "#     print(\"\\nCreating Datasets and DataLoaders …\")\n",
    "#     try:\n",
    "#         train_dataset = BalancedDataset(\n",
    "#             balanced_train_data_dict, ACTIVE_STREAMS, label_key=\"label\"\n",
    "#         )\n",
    "#         del balanced_train_data_dict\n",
    "\n",
    "#         val_dataset = PIEDataset(\n",
    "#             pie_database,\n",
    "#             VAL_SETS_STR,\n",
    "#             POSE_DATA_DIR,\n",
    "#             SEQ_LEN,\n",
    "#             PRED_LEN,\n",
    "#             scalers,\n",
    "#             ALL_POSSIBLE_STREAMS,  # provide all streams for val\n",
    "#         )\n",
    "#     except Exception as e:\n",
    "#         print(f\"Error creating datasets: {e}\")\n",
    "#         raise\n",
    "\n",
    "#     if len(train_dataset) == 0 or len(val_dataset) == 0:\n",
    "#         raise ValueError(\"One of the datasets is empty!\")\n",
    "\n",
    "#     train_loader = DataLoader(\n",
    "#         train_dataset,\n",
    "#         batch_size=BATCH_SIZE,\n",
    "#         shuffle=True,\n",
    "#         num_workers=2,\n",
    "#         pin_memory=True,\n",
    "#     )\n",
    "#     val_loader = DataLoader(\n",
    "#         val_dataset,\n",
    "#         batch_size=BATCH_SIZE,\n",
    "#         shuffle=False,\n",
    "#         num_workers=2,\n",
    "#         pin_memory=True,\n",
    "#     )\n",
    "#     print(\"   ✓ DataLoaders ready.\")\n",
    "#     del pie_database\n",
    "#     gc.collect()\n",
    "\n",
    "#     # ------------------------- initialise the model --------------------------\n",
    "#     print(\"\\nInitialising model …\")\n",
    "#     current_input_sizes = {}\n",
    "#     SPECIAL = {\n",
    "#         \"TRAFFIC_LIGHT\": \"TL_STATE\",\n",
    "#         \"STATIC_CONTEXT\": \"STATIC\",\n",
    "#         \"EGO_SPEED\": \"EGO_SPEED\",\n",
    "#         \"EGO_ACC\": \"EGO_ACC\",\n",
    "#         \"EGO_GYRO\": \"EGO_GYRO\",\n",
    "#         \"PED_ACTION\": \"PED_ACTION\",\n",
    "#         \"PED_LOOK\": \"PED_LOOK\",\n",
    "#         \"PED_OCCLUSION\": \"PED_OCC\",\n",
    "#     }\n",
    "\n",
    "#     for s in ACTIVE_STREAMS:\n",
    "#         name = f\"INPUT_SIZE_{SPECIAL.get(s.upper(), s.upper())}\"\n",
    "#         if s == \"bbox\":\n",
    "#             name = \"INPUT_SIZE_BBOX\"\n",
    "#         elif s == \"pose\":\n",
    "#             name = \"INPUT_SIZE_POSE\"\n",
    "\n",
    "#         if name not in globals():\n",
    "#             raise ValueError(f\"Input-size constant {name} not found.\")\n",
    "\n",
    "#         current_input_sizes[s] = globals()[name]\n",
    "\n",
    "#     model = MultiStreamWeightedAvgLSTM(\n",
    "#         current_input_sizes,\n",
    "#         LSTM_HIDDEN_SIZE,\n",
    "#         NUM_LSTM_LAYERS,\n",
    "#         NUM_CLASSES,\n",
    "#         ATTENTION_DIM,\n",
    "#         DROPOUT_RATE,\n",
    "#         stream_names=ACTIVE_STREAMS,\n",
    "#     ).to(DEVICE)\n",
    "\n",
    "#     print(\"\\n--- Model architecture ---\")\n",
    "#     print(model)\n",
    "#     total_params = sum(p.numel() for p in model.parameters() if p.requires_grad)\n",
    "#     print(f\"Trainable parameters: {total_params:,}\")\n",
    "#     print(\"-\" * 30)\n",
    "\n",
    "#     # ---------------- loss / optimiser --------------------------------------\n",
    "#     print(\"\\nCalculating class weights …\")\n",
    "#     train_labels = train_dataset.labels.tolist()\n",
    "#     n0, n1 = train_labels.count(0), train_labels.count(1)\n",
    "#     total = len(train_labels)\n",
    "#     if total == 0:\n",
    "#         w0, w1 = 1.0, 1.0\n",
    "#     elif n0 == 0:\n",
    "#         w0, w1 = 0.0, 1.0\n",
    "#     elif n1 == 0:\n",
    "#         w0, w1 = 1.0, 0.0\n",
    "#     else:\n",
    "#         w0, w1 = total / (2.0 * n0), total / (2.0 * n1)\n",
    "\n",
    "#     class_weights = torch.tensor([w0, w1], dtype=torch.float32).to(DEVICE)\n",
    "#     print(f\"Loss weights → 0: {w0:.2f}, 1: {w1:.2f}\")\n",
    "\n",
    "#     criterion = nn.CrossEntropyLoss(weight=class_weights)\n",
    "#     optimizer = optim.Adam(model.parameters(), lr=LEARNING_RATE)\n",
    "\n",
    "#     best_val_f1 = -1.0\n",
    "#     history = {\"train_loss\": [], \"val_loss\": [], \"train_acc\": [], \"val_acc\": [], \"val_f1\": []}\n",
    "#     best_model_path = \"\"\n",
    "\n",
    "#     # --------------------------- training loop -------------------------------\n",
    "#     print(\"\\n--- Starting training ---\")\n",
    "#     for epoch in range(NUM_EPOCHS):\n",
    "#         t0 = time.time()\n",
    "\n",
    "#         train_loss, train_acc = train_epoch(model, train_loader, optimizer, criterion, DEVICE)\n",
    "#         metrics = evaluate_epoch(model, val_loader, criterion, DEVICE)\n",
    "\n",
    "#         history[\"train_loss\"].append(train_loss)\n",
    "#         history[\"val_loss\"].append(metrics[\"loss\"])\n",
    "#         history[\"train_acc\"].append(train_acc)\n",
    "#         history[\"val_acc\"].append(metrics[\"accuracy\"])\n",
    "#         history[\"val_f1\"].append(metrics[\"f1\"])\n",
    "\n",
    "#         print(f\"\\nEpoch {epoch + 1:02d}/{NUM_EPOCHS} – {time.time() - t0:.1f}s\")\n",
    "#         print(f\"  train loss {train_loss:.4f} | acc {train_acc:.4f}\")\n",
    "#         print(f\"  val   loss {metrics['loss']:.4f} | acc {metrics['accuracy']:.4f}\")\n",
    "#         print(\n",
    "#             f\"           prec {metrics['precision']:.4f} | rec {metrics['recall']:.4f} | f1 {metrics['f1']:.4f} | auc {metrics['auc']:.4f}\"\n",
    "#         )\n",
    "\n",
    "#         if metrics[\"f1\"] > best_val_f1:\n",
    "#             best_val_f1 = metrics[\"f1\"]\n",
    "#             best_model_path = f\"best_model_weighted_{'_'.join(sorted(ACTIVE_STREAMS))}_ep{epoch + 1}.pth\"\n",
    "#             torch.save(model.state_dict(), best_model_path)\n",
    "#             print(f\"  ✓ new best model saved → {best_model_path} (F1 {best_val_f1:.4f})\")\n",
    "\n",
    "#     print(\"\\n--- Training finished ---\")\n",
    "\n",
    "#     # --------------------------- plots ---------------------------------------\n",
    "#     print(\"\\nPlotting training curves …\")\n",
    "#     fig, ax = plt.subplots(1, 2, figsize=(12, 5))\n",
    "\n",
    "#     ax[0].plot(range(1, NUM_EPOCHS + 1), history[\"train_loss\"], label=\"Train\")\n",
    "#     ax[0].plot(range(1, NUM_EPOCHS + 1), history[\"val_loss\"], label=\"Val\")\n",
    "#     ax[0].set_xlabel(\"Epoch\")\n",
    "#     ax[0].set_ylabel(\"Loss\")\n",
    "#     ax[0].set_title(\"Loss curve\")\n",
    "#     ax[0].legend()\n",
    "#     ax[0].grid(True)\n",
    "\n",
    "#     ax[1].plot(range(1, NUM_EPOCHS + 1), history[\"train_acc\"], label=\"Train Acc\")\n",
    "#     ax[1].plot(range(1, NUM_EPOCHS + 1), history[\"val_acc\"], label=\"Val Acc\")\n",
    "#     ax[1].plot(range(1, NUM_EPOCHS + 1), history[\"val_f1\"], \"--\", label=\"Val F1\")\n",
    "#     ax[1].set_xlabel(\"Epoch\")\n",
    "#     ax[1].set_ylabel(\"Metric\")\n",
    "#     ax[1].set_title(\"Accuracy & F1\")\n",
    "#     ax[1].legend()\n",
    "#     ax[1].grid(True)\n",
    "\n",
    "#     plt.tight_layout()\n",
    "#     plt.show()\n",
    "\n",
    "#     # ------------------- final evaluation (best model) -----------------------\n",
    "#     print(\"\\n--- Final Evaluation on Validation set ---\")\n",
    "#     if best_model_path and os.path.exists(best_model_path):\n",
    "#         try:\n",
    "#             model.load_state_dict(torch.load(best_model_path, map_location=DEVICE))\n",
    "#             print(f\"Loaded best model: {best_model_path}\")\n",
    "#         except Exception as e:\n",
    "#             print(f\"Warning: could not load best model ({e}).  Using last epoch params.\")\n",
    "#     else:\n",
    "#         print(\"Warning: best model not found, using last epoch parameters.\")\n",
    "\n",
    "#     final_metrics = evaluate_epoch(model, val_loader, criterion, DEVICE)\n",
    "#     y_true, y_pred = get_predictions_and_labels(model, val_loader, DEVICE)\n",
    "#     cm = confusion_matrix(y_true, y_pred, labels=[0, 1])\n",
    "\n",
    "#     print(\"\\n--- Final metrics (Weighted Avg Fusion) ---\")\n",
    "#     for k, v in final_metrics.items():\n",
    "#         print(f\"{k:<10}: {v:.4f}\")\n",
    "\n",
    "#     print(f\"(Best validation F1 during training: {best_val_f1:.4f})\")\n",
    "\n",
    "#     ConfusionMatrixDisplay(cm, display_labels=[\"Not Crossing\", \"Crossing\"]).plot(\n",
    "#         cmap=plt.cm.Blues\n",
    "#     )\n",
    "#     plt.title(\"Confusion Matrix\")\n",
    "#     plt.show()\n",
    "\n",
    "#     # ------------------- inspect learned fusion weights ----------------------\n",
    "#     if hasattr(model, \"fusion_weights\"):\n",
    "#         w = torch.softmax(model.fusion_weights, 0).detach().cpu().numpy()\n",
    "#         print(\"\\n--- Learned fusion weights ---\")\n",
    "#         for stream, weight in zip(model.stream_names, w):\n",
    "#             print(f\"{stream:<15}: {weight:.4f}\")\n",
    "#         print(\"-\" * 30)\n",
    "\n",
    "#     print(\"\\n--- Script complete ---\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7262af67",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-05T20:50:31.985434Z",
     "iopub.status.busy": "2025-05-05T20:50:31.985225Z",
     "iopub.status.idle": "2025-05-05T21:04:31.762812Z",
     "shell.execute_reply": "2025-05-05T21:04:31.761780Z"
    },
    "papermill": {
     "duration": 839.787548,
     "end_time": "2025-05-05T21:04:31.764299",
     "exception": false,
     "start_time": "2025-05-05T20:50:31.976751",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data will be prepared for streams: ['bbox', 'pose', 'ego_speed', 'ego_acc', 'ego_gyro', 'ped_action', 'ped_look', 'ped_occlusion', 'traffic_light', 'static_context', 'yolop']\n",
      "--- Running Data Preparation ---\n",
      "Loading PIE database cache …\n",
      "Calculating standardization parameters …\n",
      "Initializing full training dataset …\n",
      "\n",
      "Loading YOLOP data for sets: ['set01', 'set02', 'set04'] from /kaggle/input/yolop-data/yolop features\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "9e484b168f714a41b44ddff66f70c4a0",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Loading YOLOP PKLs:   0%|          | 0/53 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Finished loading YOLOP data. Found 23 relevant files out of 23 expected for sets ['set01', 'set02', 'set04'].\n",
      "Data loaded for 3 sets.\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "468c4fb115ff4ba68a9216bcf25cd713",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Generating sequences:   0%|          | 0/3 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Extracting data for balancing …\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "941b60e2c1c94cdd9e24b0d039602bf0",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Extracting:   0%|          | 0/333454 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---------------------------------------------------------\n",
      "Balancing samples based on 'label' key\n",
      "Unbalanced: Positive (1): 54967 | Negative (0): 278487\n",
      "Undersampling majority class (0) to 54967\n",
      "Balanced:   Positive (1): 54967 | Negative (0): 54967\n",
      "---------------------------------------------------------\n",
      "Saving balanced data …\n",
      "--- Data preparation complete ---\n"
     ]
    }
   ],
   "source": [
    "# --- CELL 1: DATA PREPARATION & BALANCING (Including YOLOP – Run Once) ---\n",
    "import torch\n",
    "from torch.utils.data import Dataset\n",
    "import os\n",
    "import numpy as np\n",
    "from tqdm.notebook import tqdm\n",
    "import random\n",
    "import pickle\n",
    "import time\n",
    "import sys\n",
    "import gc\n",
    "import cv2  # required for PIE class\n",
    "\n",
    "# --- Add PIE utilities path ---\n",
    "pie_utilities_path = '/kaggle/working/PIE/utilities'\n",
    "if pie_utilities_path not in sys.path:\n",
    "    sys.path.insert(0, pie_utilities_path)\n",
    "try:\n",
    "    from pie_data import PIE\n",
    "except ImportError as e:\n",
    "    print(f\"Warn: Could not import PIE class: {e}.  Database must exist.\")\n",
    "    PIE = None\n",
    "\n",
    "# --- Configuration ---\n",
    "PIE_ROOT_PATH = '/kaggle/working/PIE'\n",
    "POSE_DATA_DIR = '/kaggle/input/pose-data/extracted_poses2'\n",
    "PIE_DATABASE_CACHE_PATH = '/kaggle/input/pie-database/pie_database.pkl'\n",
    "YOLOP_FEATURE_DIR = '/kaggle/input/yolop-data/yolop features'  # setXX/setYY_vidZZ_yolop_features.pkl\n",
    "\n",
    "# --- Streams ---\n",
    "ALL_POSSIBLE_STREAMS = [\n",
    "    'bbox', 'pose', 'ego_speed', 'ego_acc', 'ego_gyro',\n",
    "    'ped_action', 'ped_look', 'ped_occlusion', 'traffic_light',\n",
    "    'static_context', 'yolop'\n",
    "]\n",
    "print(f\"Data will be prepared for streams: {ALL_POSSIBLE_STREAMS}\")\n",
    "\n",
    "# --- Sizes & constants ---\n",
    "SEQ_LEN = 30\n",
    "PRED_LEN = 1\n",
    "INPUT_SIZE_BBOX = 4\n",
    "INPUT_SIZE_POSE = 34\n",
    "INPUT_SIZE_EGO_SPEED = 1\n",
    "INPUT_SIZE_EGO_ACC = 2\n",
    "INPUT_SIZE_EGO_GYRO = 1\n",
    "INPUT_SIZE_PED_ACTION = 1\n",
    "INPUT_SIZE_PED_LOOK = 1\n",
    "INPUT_SIZE_PED_OCC = 1\n",
    "INPUT_SIZE_TL_STATE = 4\n",
    "\n",
    "NUM_SIGNALIZED_CATS = 4\n",
    "NUM_INTERSECTION_CATS = 5\n",
    "NUM_AGE_CATS = 4\n",
    "NUM_GENDER_CATS = 3\n",
    "NUM_TRAFFIC_DIR_CATS = 2\n",
    "LANE_CATEGORIES = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 4, 7: 4, 8: 4}\n",
    "NUM_LANE_CATS = len(set(LANE_CATEGORIES.values()))\n",
    "INPUT_SIZE_STATIC = (\n",
    "    NUM_SIGNALIZED_CATS + NUM_INTERSECTION_CATS + NUM_AGE_CATS +\n",
    "    NUM_GENDER_CATS + NUM_TRAFFIC_DIR_CATS + NUM_LANE_CATS\n",
    ")\n",
    "\n",
    "# YOLOP feature size\n",
    "GRID_SIZE = 3\n",
    "YOLOP_DRIVABLE_FEATURES_DIM = GRID_SIZE * GRID_SIZE\n",
    "YOLOP_LANE_FEATURES_DIM = GRID_SIZE * GRID_SIZE\n",
    "YOLOP_OBJECT_FEATURES_DIM = 2\n",
    "INPUT_SIZE_YOLOP = (\n",
    "    YOLOP_DRIVABLE_FEATURES_DIM + YOLOP_LANE_FEATURES_DIM + YOLOP_OBJECT_FEATURES_DIM\n",
    ")\n",
    "\n",
    "# --- Dataset splits ---\n",
    "TRAIN_SETS_STR = ['set01', 'set02', 'set04']\n",
    "\n",
    "# --- Label/state maps ---\n",
    "TL_STATE_MAP = {'__undefined__': 0, 'red': 1, 'yellow': 2, 'green': 3}\n",
    "NUM_TL_STATES = len(TL_STATE_MAP)\n",
    "\n",
    "# --- Output paths ---\n",
    "BALANCED_DATA_PKL_PATH = \"/kaggle/working/balanced_train_data_with_yolop.pkl\"\n",
    "SCALERS_PKL_PATH = \"/kaggle/working/scalers.pkl\"\n",
    "\n",
    "# --- Helpers ---------------------------------------------------------------\n",
    "def to_one_hot(index, num_classes):\n",
    "    vec = np.zeros(num_classes, dtype=np.float32)\n",
    "    safe_index = int(np.clip(index, 0, num_classes - 1))\n",
    "    vec[safe_index] = 1.0\n",
    "    return vec\n",
    "\n",
    "\n",
    "def balance_samples_count(seq_data, label_type, random_seed=42):\n",
    "    print('---------------------------------------------------------')\n",
    "    print(f\"Balancing samples based on '{label_type}' key\")\n",
    "\n",
    "    if label_type not in seq_data:\n",
    "        raise KeyError(f\"Label type '{label_type}' not found.\")\n",
    "\n",
    "    try:\n",
    "        gt_labels = [lbl[0] for lbl in seq_data[label_type]]\n",
    "    except (IndexError, TypeError):\n",
    "        raise ValueError(\n",
    "            f\"Labels under '{label_type}' not in expected format [[label_val]].\"\n",
    "        )\n",
    "\n",
    "    if not all(l in [0, 1] for l in gt_labels):\n",
    "        print(\"Warning: labels contain values other than 0 or 1.\")\n",
    "\n",
    "    num_pos = np.count_nonzero(gt_labels)\n",
    "    num_neg = len(gt_labels) - num_pos\n",
    "    new_seq_data = {}\n",
    "\n",
    "    if num_neg == num_pos:\n",
    "        print(\"Samples already balanced.\")\n",
    "        return seq_data.copy()\n",
    "\n",
    "    majority_label = 0 if num_neg > num_pos else 1\n",
    "    minority_count = min(num_neg, num_pos)\n",
    "    print(\n",
    "        f\"Unbalanced: Positive (1): {num_pos} | Negative (0): {num_neg}\\n\"\n",
    "        f\"Undersampling majority class ({majority_label}) to {minority_count}\"\n",
    "    )\n",
    "\n",
    "    majority_idx = np.where(np.array(gt_labels) == majority_label)[0]\n",
    "    minority_idx = np.where(np.array(gt_labels) != majority_label)[0]\n",
    "    np.random.seed(random_seed)\n",
    "    keep_majority = np.random.choice(majority_idx, minority_count, replace=False)\n",
    "    final_idx = np.concatenate((minority_idx, keep_majority))\n",
    "    np.random.shuffle(final_idx)\n",
    "\n",
    "    for k, v_list in seq_data.items():\n",
    "        if isinstance(v_list, list) and len(v_list) == len(gt_labels):\n",
    "            try:\n",
    "                if v_list and isinstance(v_list[0], np.ndarray):\n",
    "                    v_array = np.array(v_list)\n",
    "                    new_seq_data[k] = list(v_array[final_idx])\n",
    "                else:\n",
    "                    new_seq_data[k] = [v_list[i] for i in final_idx]\n",
    "            except Exception as e:\n",
    "                print(f\"Error processing key '{k}': {e}.  Skipped.\")\n",
    "                new_seq_data[k] = []\n",
    "        else:\n",
    "            new_seq_data[k] = v_list\n",
    "\n",
    "    new_gt = [lbl[0] for lbl in new_seq_data[label_type]]\n",
    "    final_pos = np.count_nonzero(new_gt)\n",
    "    final_neg = len(new_gt) - final_pos\n",
    "    print(f\"Balanced:   Positive (1): {final_pos} | Negative (0): {final_neg}\")\n",
    "    print('---------------------------------------------------------')\n",
    "    return new_seq_data\n",
    "\n",
    "\n",
    "# --- Dataset class ---------------------------------------------------------\n",
    "class PIEDataset(Dataset):\n",
    "    def __init__(\n",
    "        self,\n",
    "        pie_database,\n",
    "        set_names,\n",
    "        pose_data_dir,\n",
    "        yolop_data_dir,\n",
    "        seq_len,\n",
    "        pred_len,\n",
    "        scalers=None,\n",
    "        streams_to_generate=None,\n",
    "    ):\n",
    "        self.pie_db = pie_database\n",
    "        self.set_names = set_names\n",
    "        self.pose_data_dir = pose_data_dir\n",
    "        self.yolop_data_dir = yolop_data_dir\n",
    "        self.seq_len = seq_len\n",
    "        self.pred_len = pred_len\n",
    "        self.scalers = scalers or {}\n",
    "        self.streams_to_generate = streams_to_generate or ALL_POSSIBLE_STREAMS\n",
    "        self.sequences = []\n",
    "        self.all_pose_data = {}\n",
    "        self.all_yolop_data = {}\n",
    "        self._input_sizes_for_error = self._get_input_sizes_dict()\n",
    "\n",
    "        if 'pose' in self.streams_to_generate:\n",
    "            self._load_pose_data()\n",
    "        if 'yolop' in self.streams_to_generate:\n",
    "            self._load_yolop_data()\n",
    "\n",
    "        self._generate_sequence_list()\n",
    "\n",
    "        if not self.sequences:\n",
    "            raise ValueError(f\"No sequences found for sets {self.set_names}\")\n",
    "\n",
    "    # ------------------------------------------------------------------\n",
    "    def _get_input_sizes_dict(self):\n",
    "        input_sizes = {}\n",
    "        special = {\n",
    "            'TRAFFIC_LIGHT': 'TL_STATE',\n",
    "            'STATIC_CONTEXT': 'STATIC',\n",
    "            'EGO_SPEED': 'EGO_SPEED',\n",
    "            'EGO_ACC': 'EGO_ACC',\n",
    "            'EGO_GYRO': 'EGO_GYRO',\n",
    "            'PED_ACTION': 'PED_ACTION',\n",
    "            'PED_LOOK': 'PED_LOOK',\n",
    "            'PED_OCCLUSION': 'PED_OCC',\n",
    "            'YOLOP': 'YOLOP',\n",
    "        }\n",
    "        for stream in ALL_POSSIBLE_STREAMS:\n",
    "            size_name = f'INPUT_SIZE_{stream.upper()}'\n",
    "            key = stream.upper()\n",
    "            suffix = special.get(key)\n",
    "            if suffix:\n",
    "                size_name = f'INPUT_SIZE_{suffix}'\n",
    "            elif stream == 'bbox':\n",
    "                size_name = 'INPUT_SIZE_BBOX'\n",
    "            elif stream == 'pose':\n",
    "                size_name = 'INPUT_SIZE_POSE'\n",
    "\n",
    "            input_sizes[stream] = globals().get(size_name, 1)\n",
    "\n",
    "        return input_sizes\n",
    "\n",
    "    # ------------------------------------------------------------------\n",
    "    def _load_pose_data(self):\n",
    "        for set_id in self.set_names:\n",
    "            self.all_pose_data[set_id] = {}\n",
    "            set_path = os.path.join(self.pose_data_dir, set_id)\n",
    "            if not os.path.isdir(set_path):\n",
    "                continue\n",
    "            pkl_files = [\n",
    "                f for f in os.listdir(set_path)\n",
    "                if f.startswith(f\"{set_id}_\") and f.endswith(\"_poses.pkl\")\n",
    "            ]\n",
    "            for pkl_name in pkl_files:\n",
    "                pkl_path = os.path.join(set_path, pkl_name)\n",
    "                try:\n",
    "                    with open(pkl_path, 'rb') as f:\n",
    "                        content = pickle.load(f)\n",
    "                    if len(content) != 1:\n",
    "                        continue\n",
    "                    uniq_key, video_data = list(content.items())[0]\n",
    "                    vid = \"_\".join(uniq_key.split('_')[1:])\n",
    "                    if vid in self.pie_db.get(set_id, {}):\n",
    "                        self.all_pose_data[set_id][vid] = video_data\n",
    "                except Exception as e:\n",
    "                    print(f\"Pose load error {pkl_path}: {e}\")\n",
    "\n",
    "    # ------------------------------------------------------------------\n",
    "    \n",
    "\n",
    "    def _load_yolop_data(self): # New method to load YOLOP features\n",
    "        print(f\"\\nLoading YOLOP data for sets: {self.set_names} from {self.yolop_data_dir}\")\n",
    "        sets_loaded_count = 0\n",
    "        # Initialize dictionaries for all sets requested by this dataset instance\n",
    "        for set_id in self.set_names:\n",
    "            self.all_yolop_data[set_id] = {}\n",
    "\n",
    "        if not os.path.isdir(self.yolop_data_dir):\n",
    "            print(f\"Error: YOLOP feature directory not found: {self.yolop_data_dir}\")\n",
    "            return\n",
    "\n",
    "        try:\n",
    "            all_pkl_files = [f for f in os.listdir(self.yolop_data_dir)\n",
    "                             if f.endswith(\"_yolop_features.pkl\")]\n",
    "        except Exception as e:\n",
    "            print(f\"Error listing files in YOLOP directory {self.yolop_data_dir}: {e}\")\n",
    "            return\n",
    "\n",
    "        if not all_pkl_files:\n",
    "            print(f\"Warning: No '*_yolop_features.pkl' files found directly in {self.yolop_data_dir}\")\n",
    "\n",
    "        # --- Initialize count BEFORE the loop ---\n",
    "        loaded_file_count = 0\n",
    "        files_for_needed_sets = 0\n",
    "        # ---\n",
    "\n",
    "        for pkl_filename in tqdm(all_pkl_files, desc=\"Loading YOLOP PKLs\"):\n",
    "            try:\n",
    "                parts = pkl_filename.replace(\"_yolop_features.pkl\", \"\").split('_')\n",
    "                set_id_from_file = parts[0]\n",
    "                video_id = \"_\".join(parts[1:])\n",
    "            except IndexError:\n",
    "                print(f\"Warning: Could not parse set/video ID from filename: {pkl_filename}\")\n",
    "                continue\n",
    "\n",
    "            if set_id_from_file in self.set_names:\n",
    "                files_for_needed_sets += 1\n",
    "                pkl_file_path = os.path.join(self.yolop_data_dir, pkl_filename)\n",
    "                try:\n",
    "                    with open(pkl_file_path, 'rb') as f:\n",
    "                        loaded_pkl_content = pickle.load(f)\n",
    "\n",
    "                    if len(loaded_pkl_content) != 1:\n",
    "                        print(f\"Warn: PKL {pkl_filename} format issue (expected 1 key). Skip.\")\n",
    "                        continue\n",
    "\n",
    "                    unique_video_key, video_data = list(loaded_pkl_content.items())[0]\n",
    "                    expected_key = f\"{set_id_from_file}_{video_id}\"\n",
    "                    if unique_video_key != expected_key:\n",
    "                         print(f\"Warn: Key mismatch in {pkl_filename}. Expected '{expected_key}', found '{unique_video_key}'. Trying to use found key.\")\n",
    "\n",
    "                    self.all_yolop_data[set_id_from_file][video_id] = video_data\n",
    "                    loaded_file_count += 1 # Increment only on success\n",
    "\n",
    "                except FileNotFoundError:\n",
    "                     print(f\"Warn: YOLOP feature file not found during loading: {pkl_file_path}\")\n",
    "                except Exception as e:\n",
    "                    print(f\"Error loading YOLOP PKL {pkl_file_path}: {e}\")\n",
    "\n",
    "        print(f\"Finished loading YOLOP data. Found {loaded_file_count} relevant files out of {files_for_needed_sets} expected for sets {self.set_names}.\")\n",
    "        if loaded_file_count > 0:\n",
    "             actual_sets_loaded = sum(1 for s in self.set_names if s in self.all_yolop_data and self.all_yolop_data[s])\n",
    "             print(f\"Data loaded for {actual_sets_loaded} sets.\")\n",
    "    # ------------------------------------------------------------------\n",
    "    def _generate_sequence_list(self):\n",
    "        for set_id in tqdm(self.set_names, desc=\"Generating sequences\"):\n",
    "            if set_id not in self.pie_db:\n",
    "                continue\n",
    "            for video_id, video_data in self.pie_db[set_id].items():\n",
    "                ped_ann = video_data.get('ped_annotations', {})\n",
    "                for ped_id, ped_data in ped_ann.items():\n",
    "                    if 'frames' not in ped_data or len(ped_data['frames']) < self.seq_len + self.pred_len:\n",
    "                        continue\n",
    "                    frames_sorted = sorted(ped_data['frames'])\n",
    "                    for i in range(len(frames_sorted) - self.seq_len - self.pred_len + 1):\n",
    "                        start_f = frames_sorted[i]\n",
    "                        end_obs = frames_sorted[i + self.seq_len - 1]\n",
    "                        if end_obs - start_f != self.seq_len - 1:\n",
    "                            continue\n",
    "                        target_idx = i + self.seq_len + self.pred_len - 1\n",
    "                        target_f = frames_sorted[target_idx]\n",
    "                        if target_f - end_obs != self.pred_len:\n",
    "                            continue\n",
    "                        self.sequences.append((set_id, video_id, ped_id, start_f))\n",
    "\n",
    "    # ------------------------------------------------------------------\n",
    "    def __len__(self):\n",
    "        return len(self.sequences)\n",
    "\n",
    "    # ------------------------------------------------------------------\n",
    "    def __getitem__(self, idx):\n",
    "        set_id, video_id, ped_id, start_frame = self.sequences[idx]\n",
    "        frame_nums = list(range(start_frame, start_frame + self.seq_len))\n",
    "        target_frame_num = start_frame + self.seq_len + self.pred_len - 1\n",
    "\n",
    "        video_db = self.pie_db.get(set_id, {}).get(video_id, {})\n",
    "        ped_db = video_db.get('ped_annotations', {}).get(ped_id, {})\n",
    "        ego_db = video_db.get('vehicle_annotations', {})\n",
    "        traffic_db = video_db.get('traffic_annotations', {})\n",
    "        ped_attr = ped_db.get('attributes', {})\n",
    "\n",
    "        feat_seq = {s: [] for s in self.streams_to_generate}\n",
    "        label = 0\n",
    "\n",
    "        if 'frames' in ped_db and 'behavior' in ped_db and 'cross' in ped_db['behavior']:\n",
    "            try:\n",
    "                idx_target = ped_db['frames'].index(target_frame_num)\n",
    "                label = ped_db['behavior']['cross'][idx_target]\n",
    "                if label == -1:\n",
    "                    label = 0\n",
    "            except (ValueError, IndexError):\n",
    "                pass\n",
    "\n",
    "        static_vec = None\n",
    "        if 'static_context' in self.streams_to_generate:\n",
    "            sig_idx = ped_attr.get('signalized', 0)\n",
    "            int_idx = ped_attr.get('intersection', 0)\n",
    "            age_idx = ped_attr.get('age', 2)\n",
    "            gen_idx = ped_attr.get('gender', 0)\n",
    "            td_idx = int(ped_attr.get('traffic_direction', 0))\n",
    "            nl_val = ped_attr.get('num_lanes', 2)\n",
    "            nl_idx = LANE_CATEGORIES.get(nl_val, LANE_CATEGORIES[max(LANE_CATEGORIES)])\n",
    "            static_vec = np.concatenate([\n",
    "                to_one_hot(sig_idx, NUM_SIGNALIZED_CATS),\n",
    "                to_one_hot(int_idx, NUM_INTERSECTION_CATS),\n",
    "                to_one_hot(age_idx, NUM_AGE_CATS),\n",
    "                to_one_hot(gen_idx, NUM_GENDER_CATS),\n",
    "                to_one_hot(td_idx, NUM_TRAFFIC_DIR_CATS),\n",
    "                to_one_hot(nl_idx, NUM_LANE_CATS),\n",
    "            ]).astype(np.float32)\n",
    "            if static_vec.shape[0] != INPUT_SIZE_STATIC:\n",
    "                static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "\n",
    "        for frame in frame_nums:\n",
    "            frame_idx = -1\n",
    "            if 'frames' in ped_db:\n",
    "                try:\n",
    "                    frame_idx = ped_db['frames'].index(frame)\n",
    "                except ValueError:\n",
    "                    pass\n",
    "\n",
    "            ego = ego_db.get(frame, {})\n",
    "\n",
    "            # ------------------------------ bbox\n",
    "            if 'bbox' in self.streams_to_generate:\n",
    "                bbox_norm = np.zeros(INPUT_SIZE_BBOX, dtype=np.float32)\n",
    "                if frame_idx != -1 and 'bbox' in ped_db and len(ped_db['bbox']) > frame_idx:\n",
    "                    try:\n",
    "                        x1, y1, x2, y2 = ped_db['bbox'][frame_idx]\n",
    "                        iw = video_db.get('width', 1920)\n",
    "                        ih = video_db.get('height', 1080)\n",
    "                        if iw > 0 and ih > 0:\n",
    "                            cx = ((x1 + x2) / 2) / iw\n",
    "                            cy = ((y1 + y2) / 2) / ih\n",
    "                            w = (x2 - x1) / iw\n",
    "                            h = (y2 - y1) / ih\n",
    "                            if 0 <= cx <= 1 and 0 <= cy <= 1 and w > 0 and h > 0:\n",
    "                                bbox_norm = np.array([cx, cy, w, h], dtype=np.float32)\n",
    "                    except Exception:\n",
    "                        pass\n",
    "                feat_seq['bbox'].append(bbox_norm)\n",
    "\n",
    "            # ------------------------------ pose\n",
    "            if 'pose' in self.streams_to_generate:\n",
    "                pose_vec = np.zeros(INPUT_SIZE_POSE, dtype=np.float32)\n",
    "                pose_vid = self.all_pose_data.get(set_id, {}).get(video_id, {})\n",
    "                pose_frame = pose_vid.get(frame, {})\n",
    "                loaded_pose = pose_frame.get(ped_id)\n",
    "                if (\n",
    "                    loaded_pose is not None\n",
    "                    and isinstance(loaded_pose, np.ndarray)\n",
    "                    and loaded_pose.shape == (INPUT_SIZE_POSE,)\n",
    "                ):\n",
    "                    pose_vec = loaded_pose\n",
    "                feat_seq['pose'].append(pose_vec)\n",
    "\n",
    "            # ------------------------------ ego_speed\n",
    "            if 'ego_speed' in self.streams_to_generate:\n",
    "                speed = ego.get('OBD_speed', 0.0) or ego.get('GPS_speed', 0.0)\n",
    "                sp_scaled = (\n",
    "                    speed - self.scalers.get('ego_speed_mean', 0.0)\n",
    "                ) / self.scalers.get('ego_speed_std', 1.0)\n",
    "                feat_seq['ego_speed'].append([sp_scaled])\n",
    "\n",
    "            # ------------------------------ ego_acc\n",
    "            if 'ego_acc' in self.streams_to_generate:\n",
    "                accX = ego.get('accX', 0.0)\n",
    "                accY = ego.get('accY', 0.0)\n",
    "                accX_s = (accX - self.scalers.get('accX_mean', 0.0)) / self.scalers.get('accX_std', 1.0)\n",
    "                accY_s = (accY - self.scalers.get('accY_mean', 0.0)) / self.scalers.get('accY_std', 1.0)\n",
    "                feat_seq['ego_acc'].append([accX_s, accY_s])\n",
    "\n",
    "            # ------------------------------ ego_gyro\n",
    "            if 'ego_gyro' in self.streams_to_generate:\n",
    "                gyroZ = ego.get('gyroZ', 0.0)\n",
    "                gyroZ_s = (gyroZ - self.scalers.get('gyroZ_mean', 0.0)) / self.scalers.get('gyroZ_std', 1.0)\n",
    "                feat_seq['ego_gyro'].append([gyroZ_s])\n",
    "\n",
    "            # ------------------------------ ped_action\n",
    "            if 'ped_action' in self.streams_to_generate:\n",
    "                action = 0\n",
    "                if (\n",
    "                    frame_idx != -1\n",
    "                    and 'behavior' in ped_db\n",
    "                    and 'action' in ped_db['behavior']\n",
    "                    and len(ped_db['behavior']['action']) > frame_idx\n",
    "                ):\n",
    "                    action = ped_db['behavior']['action'][frame_idx]\n",
    "                feat_seq['ped_action'].append([float(action)])\n",
    "\n",
    "            # ------------------------------ ped_look\n",
    "            if 'ped_look' in self.streams_to_generate:\n",
    "                look = 0\n",
    "                if (\n",
    "                    frame_idx != -1\n",
    "                    and 'behavior' in ped_db\n",
    "                    and 'look' in ped_db['behavior']\n",
    "                    and len(ped_db['behavior']['look']) > frame_idx\n",
    "                ):\n",
    "                    look = ped_db['behavior']['look'][frame_idx]\n",
    "                feat_seq['ped_look'].append([float(look)])\n",
    "\n",
    "            # ------------------------------ ped_occlusion\n",
    "            if 'ped_occlusion' in self.streams_to_generate:\n",
    "                occ = 0.0\n",
    "                if (\n",
    "                    frame_idx != -1\n",
    "                    and 'occlusion' in ped_db\n",
    "                    and len(ped_db['occlusion']) > frame_idx\n",
    "                ):\n",
    "                    occ_val = ped_db['occlusion'][frame_idx]\n",
    "                    occ = float(occ_val) / 2.0\n",
    "                feat_seq['ped_occlusion'].append([occ])\n",
    "\n",
    "            # ------------------------------ traffic_light\n",
    "            if 'traffic_light' in self.streams_to_generate:\n",
    "                state_int = 0\n",
    "                for obj_id, obj in traffic_db.items():\n",
    "                    if (\n",
    "                        obj.get('obj_class') == 'traffic_light'\n",
    "                        and 'frames' in obj and 'state' in obj\n",
    "                    ):\n",
    "                        try:\n",
    "                            tl_idx = obj['frames'].index(frame)\n",
    "                            state_val = obj['state'][tl_idx]\n",
    "                            if state_val != 0:\n",
    "                                state_int = state_val\n",
    "                                break\n",
    "                        except (ValueError, IndexError):\n",
    "                            continue\n",
    "                feat_seq['traffic_light'].append(to_one_hot(state_int, NUM_TL_STATES))\n",
    "\n",
    "            # ------------------------------ static_context\n",
    "            if 'static_context' in self.streams_to_generate:\n",
    "                feat_seq['static_context'].append(\n",
    "                    static_vec if static_vec is not None else np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "                )\n",
    "\n",
    "            # ------------------------------ YOLOP\n",
    "            if 'yolop' in self.streams_to_generate:\n",
    "                yolop_vec = np.zeros(INPUT_SIZE_YOLOP, dtype=np.float32)\n",
    "                if set_id in self.all_yolop_data and video_id in self.all_yolop_data[set_id]:\n",
    "                    frame_yolo = self.all_yolop_data[set_id][video_id].get(frame, {})\n",
    "                    loaded_yolo = frame_yolo.get(ped_id)\n",
    "                    if (\n",
    "                        loaded_yolo is not None\n",
    "                        and isinstance(loaded_yolo, np.ndarray)\n",
    "                        and loaded_yolo.shape == (INPUT_SIZE_YOLOP,)\n",
    "                    ):\n",
    "                        yolop_vec = loaded_yolo\n",
    "                feat_seq['yolop'].append(yolop_vec)\n",
    "\n",
    "        features = {}\n",
    "        try:\n",
    "            for s in self.streams_to_generate:\n",
    "                features[s] = torch.tensor(np.array(feat_seq[s], dtype=np.float32))\n",
    "        except Exception as e:\n",
    "            print(f\"Tensor conversion error idx {idx}: {e}\")\n",
    "            features = {\n",
    "                name: torch.zeros(\n",
    "                    (self.seq_len, self._input_sizes_for_error.get(name, 1)),\n",
    "                    dtype=torch.float32,\n",
    "                )\n",
    "                for name in self.streams_to_generate\n",
    "            }\n",
    "\n",
    "        return features, torch.tensor(label, dtype=torch.long)\n",
    "\n",
    "\n",
    "# --- Main data-preparation execution ---------------------------------------\n",
    "if __name__ == '__main__':\n",
    "\n",
    "    print(\"--- Running Data Preparation ---\")\n",
    "\n",
    "    # Load or create PIE database\n",
    "    if not os.path.exists(PIE_DATABASE_CACHE_PATH):\n",
    "        if PIE is None:\n",
    "            raise ImportError(\"PIE class not imported.\")\n",
    "        print(\"Generating PIE database cache …\")\n",
    "        pie_intf = PIE(data_path=PIE_ROOT_PATH, regen_database=True)\n",
    "        pie_database = pie_intf.generate_database()\n",
    "        if not pie_database:\n",
    "            raise RuntimeError(\"Failed to generate PIE database.\")\n",
    "    else:\n",
    "        print(\"Loading PIE database cache …\")\n",
    "        with open(PIE_DATABASE_CACHE_PATH, 'rb') as f:\n",
    "            pie_database = pickle.load(f)\n",
    "\n",
    "    # Standardization scalers\n",
    "    print(\"Calculating standardization parameters …\")\n",
    "    all_sp, all_ax, all_ay, all_gz = [], [], [], []\n",
    "    for set_id in TRAIN_SETS_STR:\n",
    "        for vid, vdata in pie_database.get(set_id, {}).items():\n",
    "            for _, ego in vdata.get('vehicle_annotations', {}).items():\n",
    "                speed = ego.get('OBD_speed', 0.0) or ego.get('GPS_speed', 0.0)\n",
    "                all_sp.append(speed)\n",
    "                all_ax.append(ego.get('accX', 0.0))\n",
    "                all_ay.append(ego.get('accY', 0.0))\n",
    "                all_gz.append(ego.get('gyroZ', 0.0))\n",
    "\n",
    "    scalers = {}\n",
    "    if all_sp:\n",
    "        scalers['ego_speed_mean'] = np.mean(all_sp)\n",
    "        scalers['ego_speed_std'] = max(np.std(all_sp), 1e-6)\n",
    "    if all_ax:\n",
    "        scalers['accX_mean'] = np.mean(all_ax)\n",
    "        scalers['accX_std'] = max(np.std(all_ax), 1e-6)\n",
    "        scalers['accY_mean'] = np.mean(all_ay)\n",
    "        scalers['accY_std'] = max(np.std(all_ay), 1e-6)\n",
    "    if all_gz:\n",
    "        scalers['gyroZ_mean'] = np.mean(all_gz)\n",
    "        scalers['gyroZ_std'] = max(np.std(all_gz), 1e-6)\n",
    "\n",
    "    print(\"Initializing full training dataset …\")\n",
    "    full_train_ds = PIEDataset(\n",
    "        pie_database,\n",
    "        TRAIN_SETS_STR,\n",
    "        POSE_DATA_DIR,\n",
    "        YOLOP_FEATURE_DIR,\n",
    "        SEQ_LEN,\n",
    "        PRED_LEN,\n",
    "        scalers,\n",
    "        ALL_POSSIBLE_STREAMS,\n",
    "    )\n",
    "\n",
    "    # Extract all features for balancing\n",
    "    print(\"Extracting data for balancing …\")\n",
    "    data_dict = {s: [] for s in ALL_POSSIBLE_STREAMS}\n",
    "    data_dict['label'] = []\n",
    "    for i in tqdm(range(len(full_train_ds)), desc=\"Extracting\"):\n",
    "        feats, lbl = full_train_ds[i]\n",
    "        for s in ALL_POSSIBLE_STREAMS:\n",
    "            data_dict[s].append(feats[s].numpy())\n",
    "        data_dict['label'].append([lbl.item()])\n",
    "\n",
    "    balanced_dict = balance_samples_count(data_dict, 'label')\n",
    "\n",
    "    # Save outputs\n",
    "    print(\"Saving balanced data …\")\n",
    "    with open(BALANCED_DATA_PKL_PATH, 'wb') as f:\n",
    "        pickle.dump(balanced_dict, f, pickle.HIGHEST_PROTOCOL)\n",
    "    with open(SCALERS_PKL_PATH, 'wb') as f:\n",
    "        pickle.dump(scalers, f, pickle.HIGHEST_PROTOCOL)\n",
    "\n",
    "    del pie_database, full_train_ds, balanced_dict\n",
    "    gc.collect()\n",
    "    print(\"--- Data preparation complete ---\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "75b3fca5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-05T21:04:31.817953Z",
     "iopub.status.busy": "2025-05-05T21:04:31.817683Z",
     "iopub.status.idle": "2025-05-05T22:40:24.425445Z",
     "shell.execute_reply": "2025-05-05T22:40:24.424340Z"
    },
    "papermill": {
     "duration": 5752.65404,
     "end_time": "2025-05-05T22:40:24.427123",
     "exception": false,
     "start_time": "2025-05-05T21:04:31.773083",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "All possible streams: ['bbox', 'pose', 'ego_speed', 'ego_acc', 'ego_gyro', 'ped_action', 'ped_look', 'ped_occlusion', 'traffic_light', 'static_context', 'yolop']\n",
      "--- Running Experiment With Active Streams: ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'yolop'] ---\n",
      "Using device: cuda\n",
      "--- Skipping Data Preparation: Loading Pre-Saved Files ---\n",
      "\n",
      "Loading balanced training data from: /kaggle/working/balanced_train_data_with_yolop.pkl\n",
      "Loading scalers from: /kaggle/working/scalers.pkl\n",
      " -> Pre-processed data loaded successfully.\n",
      "\n",
      "======================================================================\n",
      "--- Running Model Training and Evaluation ---\n",
      "Active Streams for this run: ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'yolop']\n",
      "----------------------------------------------------------------------\n",
      "\n",
      "Loading PIE database cache for Validation Dataset...\n",
      " -> PIE database loaded successfully for validation.\n",
      "\n",
      "Creating Datasets and DataLoaders...\n",
      "\n",
      "Loading pose data for sets: ['set05', 'set06'] from /kaggle/input/pose-data/extracted_poses2\n",
      "Finished loading pose data for 2 relevant sets.\n",
      "\n",
      "Loading YOLOP data for sets: ['set05', 'set06'] from /kaggle/input/yolop-data/yolop features\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ea9f8e2c969b4f0fab88004585010984",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Loading YOLOP PKLs:   0%|          | 0/53 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Finished loading YOLOP data. Found 11 relevant files out of 11 possible for sets ['set05', 'set06'].\n",
      "Data successfully loaded for 2 sets.\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "8a7f73da120942c5a2085f94a1ba61c8",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Generating Sequences for ['set05', 'set06']:   0%|          | 0/2 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset initialized with 77288 sequences from 243 pedestrians for sets ['set05', 'set06'].\n",
      "DataLoaders created. Train batches: 3435, Val batches: 2416\n",
      "\n",
      "Initializing model...\n",
      "Initializing model with streams: ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'yolop']\n",
      "  - Adding stream 'bbox' with input size 4\n",
      "  - Adding stream 'ped_action' with input size 1\n",
      "  - Adding stream 'ped_look' with input size 1\n",
      "  - Adding stream 'ego_speed' with input size 1\n",
      "  - Adding stream 'ego_acc' with input size 2\n",
      "  - Adding stream 'yolop' with input size 20\n",
      "  Combined feature dimension: 3072\n",
      "\n",
      "--- Model Architecture ---\n",
      "MultiStreamAdaptiveLSTM(\n",
      "  (lstms): ModuleDict(\n",
      "    (bbox): LSTM(4, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "    (ped_action): LSTM(1, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "    (ped_look): LSTM(1, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "    (ego_speed): LSTM(1, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "    (ego_acc): LSTM(2, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "    (yolop): LSTM(20, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "  )\n",
      "  (attentions): ModuleDict(\n",
      "    (bbox): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "    (ped_action): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "    (ped_look): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "    (ego_speed): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "    (ego_acc): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "    (yolop): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "  )\n",
      "  (dropout): Dropout(p=0.3, inplace=False)\n",
      "  (fc1): Linear(in_features=3072, out_features=1536, bias=True)\n",
      "  (relu): ReLU()\n",
      "  (fc2): Linear(in_features=1536, out_features=2, bias=True)\n",
      ")\n",
      "Total Trainable Parameters: 17,809,416\n",
      "------------------------------\n",
      "\n",
      "Calculating Class Weights for Loss Function...\n",
      "Using Calculated Class Weights for Loss: 0=1.00, 1=1.00\n",
      "\n",
      "--- Starting Training ---\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "55c26d00229c45b8a8bc11f2c449856b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3435 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b51365d9ec034ce3b648c7b82f36b7c4",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Epoch 1/15 (359.99 sec) ---\n",
      "  Train Loss: 0.2989, Train Acc: 0.8723\n",
      "  Val Loss:   0.1820, Val Acc:  0.9079\n",
      "  Val Prec:   0.6466, Recall: 0.8767, F1: 0.7443\n",
      "  Val AUC:    0.9676\n",
      "  >> Saved new best model to best_model_bbox_ego_acc_ego_speed_ped_action_ped_look_yolop_ep1.pth (F1: 0.7443)\n",
      "------------------------------\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f2de48a18cf8422f8fdfeaeba1f2b668",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3435 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0a00b640895045d9abe76ff8d8466caf",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Epoch 2/15 (363.32 sec) ---\n",
      "  Train Loss: 0.2412, Train Acc: 0.8978\n",
      "  Val Loss:   0.1734, Val Acc:  0.9161\n",
      "  Val Prec:   0.6747, Recall: 0.8711, F1: 0.7604\n",
      "  Val AUC:    0.9696\n",
      "  >> Saved new best model to best_model_bbox_ego_acc_ego_speed_ped_action_ped_look_yolop_ep2.pth (F1: 0.7604)\n",
      "------------------------------\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "095f42a8998341b6b358083391d9e08a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3435 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f6596f4362824242b7b7c318fdb01b2a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Epoch 3/15 (357.98 sec) ---\n",
      "  Train Loss: 0.2055, Train Acc: 0.9166\n",
      "  Val Loss:   0.1864, Val Acc:  0.9115\n",
      "  Val Prec:   0.6825, Recall: 0.7873, F1: 0.7312\n",
      "  Val AUC:    0.9645\n",
      "------------------------------\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b61a069f0c364460984e7a6d45a6e7af",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3435 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4cfb832a350649c5a7793c3e13cf0843",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Epoch 4/15 (362.91 sec) ---\n",
      "  Train Loss: 0.1771, Train Acc: 0.9311\n",
      "  Val Loss:   0.1861, Val Acc:  0.9222\n",
      "  Val Prec:   0.7215, Recall: 0.7999, F1: 0.7587\n",
      "  Val AUC:    0.9684\n",
      "------------------------------\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7015f34127fc4fd596db4b10b90233fa",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3435 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "08f9abc495d545d0a1a3f92f0110915b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Epoch 5/15 (360.01 sec) ---\n",
      "  Train Loss: 0.1503, Train Acc: 0.9427\n",
      "  Val Loss:   0.2474, Val Acc:  0.9074\n",
      "  Val Prec:   0.6628, Recall: 0.8021, F1: 0.7258\n",
      "  Val AUC:    0.9574\n",
      "------------------------------\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "72f40bbc3aaa4881bf5176db1ae39bd9",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3435 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2a90c7aa18cd4807b8525ea1315a6dc6",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Epoch 6/15 (360.75 sec) ---\n",
      "  Train Loss: 0.1300, Train Acc: 0.9519\n",
      "  Val Loss:   0.2771, Val Acc:  0.9053\n",
      "  Val Prec:   0.6757, Recall: 0.7309, F1: 0.7022\n",
      "  Val AUC:    0.9494\n",
      "------------------------------\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "aa4ade78187b4976b3790258cdb8a7d6",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3435 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "531efa09a8f74c2e9cc8690965c94121",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Epoch 7/15 (358.02 sec) ---\n",
      "  Train Loss: 0.1163, Train Acc: 0.9575\n",
      "  Val Loss:   0.2932, Val Acc:  0.9165\n",
      "  Val Prec:   0.7594, Recall: 0.6642, F1: 0.7086\n",
      "  Val AUC:    0.9503\n",
      "------------------------------\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1197656059b24d4ba1f9e87059f949e4",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3435 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c516f5dde6a445eaaea0f8958fc37741",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Epoch 8/15 (362.48 sec) ---\n",
      "  Train Loss: 0.1026, Train Acc: 0.9629\n",
      "  Val Loss:   0.3028, Val Acc:  0.9090\n",
      "  Val Prec:   0.6926, Recall: 0.7278, F1: 0.7098\n",
      "  Val AUC:    0.9515\n",
      "------------------------------\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d8aed9a07cf1443cb02d7e8e47ea1d29",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3435 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0f6927b93ef64bd8b4321c422e30ec02",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Epoch 9/15 (360.01 sec) ---\n",
      "  Train Loss: 0.0916, Train Acc: 0.9670\n",
      "  Val Loss:   0.3083, Val Acc:  0.9162\n",
      "  Val Prec:   0.7508, Recall: 0.6763, F1: 0.7116\n",
      "  Val AUC:    0.9488\n",
      "------------------------------\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "620fe7bed2f44bdab38325ce35e5139a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3435 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "13320d55657245c09040301e5e2c9c3d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Epoch 10/15 (361.50 sec) ---\n",
      "  Train Loss: 0.0804, Train Acc: 0.9718\n",
      "  Val Loss:   0.3414, Val Acc:  0.9176\n",
      "  Val Prec:   0.7419, Recall: 0.7066, F1: 0.7238\n",
      "  Val AUC:    0.9483\n",
      "------------------------------\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c5e17250335f4ae5a8b85d47d408c1c6",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3435 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "230386da07164383a827c8da6fc8ed1c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Epoch 11/15 (357.42 sec) ---\n",
      "  Train Loss: 0.0731, Train Acc: 0.9741\n",
      "  Val Loss:   0.3265, Val Acc:  0.9165\n",
      "  Val Prec:   0.7059, Recall: 0.7773, F1: 0.7399\n",
      "  Val AUC:    0.9467\n",
      "------------------------------\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a26ad52629a84a3fa59c48b7e383c3c0",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3435 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1af20718d0ff4d1495de20ab5ab44357",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Epoch 12/15 (360.36 sec) ---\n",
      "  Train Loss: 0.0661, Train Acc: 0.9768\n",
      "  Val Loss:   0.3411, Val Acc:  0.9201\n",
      "  Val Prec:   0.7670, Recall: 0.6854, F1: 0.7239\n",
      "  Val AUC:    0.9534\n",
      "------------------------------\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "42de2126af4442f4844a650f4798c454",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3435 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ad5fa73c23324850879b9b151da92e57",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Epoch 13/15 (364.46 sec) ---\n",
      "  Train Loss: 0.0593, Train Acc: 0.9791\n",
      "  Val Loss:   0.4001, Val Acc:  0.9139\n",
      "  Val Prec:   0.7465, Recall: 0.6613, F1: 0.7013\n",
      "  Val AUC:    0.9471\n",
      "------------------------------\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "90e406e6dee245c9aa508dc09b26718c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3435 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7737c67c7c3d462b80099823766ab207",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Epoch 14/15 (364.75 sec) ---\n",
      "  Train Loss: 0.0554, Train Acc: 0.9807\n",
      "  Val Loss:   0.3975, Val Acc:  0.9175\n",
      "  Val Prec:   0.7465, Recall: 0.6967, F1: 0.7207\n",
      "  Val AUC:    0.9437\n",
      "------------------------------\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "76cd39a8f2d2454f877a5700a8f90f12",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3435 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1713e27787054777a39c7a6c5f62c07c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Epoch 15/15 (360.20 sec) ---\n",
      "  Train Loss: 0.0520, Train Acc: 0.9821\n",
      "  Val Loss:   0.4076, Val Acc:  0.9165\n",
      "  Val Prec:   0.7566, Recall: 0.6693, F1: 0.7103\n",
      "  Val AUC:    0.9445\n",
      "------------------------------\n",
      "--- Training Finished ---\n",
      "\n",
      "--- Plotting Training History ---\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABKUAAAHqCAYAAADVi/1VAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOzdd3gU5drH8e/upvdAGp0QAgGkN6WJCgRQDiAKYkEQUVQ8erAcsQGKoqIelIP4WhBE7CIWlBbkINJBQKr0nkCAkEaSTXbePwY2LAk9ZFN+n+uaK7PPlL3nySY7e+9TLIZhGIiIiIiIiIiIiBQjq7sDEBERERERERGR8kdJKRERERERERERKXZKSomIiIiIiIiISLFTUkpERERERERERIqdklIiIiIiIiIiIlLslJQSEREREREREZFip6SUiIiIiIiIiIgUOyWlRERERERERESk2CkpJSIiIiIiIiIixU5JKRERERERERERKXZKSolIsZkyZQoWi4VVq1a5O5SLsnbtWu6++26qVauGt7c3FSpUoFOnTnzyySfk5eW5OzwREZFy4b333sNisdC6dWt3h1IqLV26lOuvv56goCAiIiLo1q0bf/zxx0Ufv3v3biwWS6HLtdde69xv69at/Otf/6JNmzb4+PhgsVjYvXv3JcV65MgRHnvsMeLi4vD19SUiIoJWrVrx73//m/T09Es6V0mxY8cOHnzwQWrVqoWPjw9BQUG0bduWd955h5MnT7o7PBG383B3ACIiJdFHH33E0KFDiYyM5J577iE2Npa0tDQSEhIYPHgwhw4d4tlnn3V3mCIiImXe9OnTqVmzJitWrGD79u3Url3b3SGVGnv37iU+Pp6KFSsyevRoHA4H8+bNIyEhgbZt217Sufr370/37t1dysLDw53rS5cu5d1336V+/frUq1ePtWvXXtL5jx07RosWLUhNTeW+++4jLi6Oo0ePsn79eiZNmsRDDz1EQEDAJZ3T3WbNmsXtt9+Ot7c3AwYM4JprriEnJ4fFixfz1FNPsXHjRj744AN3hyniVkpKiYicZdmyZQwdOpTrrruOX375hcDAQOe2xx9/nFWrVrFhw4Yiea6MjAz8/f2L5FwiIiJlza5du1iyZAkzZszgwQcfZPr06YwcOdLdYRWqJL6nz5o1y/mlWsuWLQF44oknyM7OvuRzNWvWjLvvvvuc2//xj3+QkpJCYGAgb7755iUnpT7++GP27t3LH3/8QZs2bVy2paam4uXldckxX66i+F3u2rWLO+64gxo1arBgwQIqVark3PbII4+wfft2Zs2adaWhAiXztSdysdR9T0RKnD///JNu3boRFBREQEAAN910E8uWLXPZx263M3r0aGJjY/Hx8aFixYq0a9eOefPmOfdJTExk0KBBVK1aFW9vbypVqkTPnj0v2JR89OjRWCwWpk+f7pKQOq1FixYMHDgQgIULF2KxWFi4cKHLPqebuk+ZMsVZNnDgQAICAtixYwfdu3cnMDCQu+66i2HDhhEQEEBmZmaB5+rfvz9RUVEu3QV//fVX2rdvj7+/P4GBgdx8881s3LjxvNckIiJSGk2fPp3Q0FBuvvlmbrvtNqZPn17ofikpKfzrX/+iZs2aeHt7U7VqVQYMGEBycrJzn6ysLEaNGkWdOnXw8fGhUqVK3HrrrezYsQMomvd0gN9//53bb7+d6tWr4+3tTbVq1fjXv/5VaFetLVu20LdvX8LDw/H19aVu3bo899xzAPz2229YLBa+//77Asd9/vnnWCwWli5det76s1rNj3uGYbiUe3t7n/e4y1GhQoVC75su1o4dO7DZbC5dAk8LCgrCx8fHpWz58uV0796d0NBQ/P39adSoEe+8847LPgsWLHDeM4WEhNCzZ082b97sss+oUaOwWCxs2rSJO++8k9DQUNq1a+fc/tlnn9G8eXN8fX2pUKECd9xxB/v27bvg9bzxxhukp6fz8ccfuySkTqtduzaPPfYYUPhr7DSLxcKoUaMuGO+bb76JxWJhz549Bc4xYsQIvLy8OH78uEv9de3aleDgYPz8/Lj++usvqVunSFFRUkpESpSNGzfSvn171q1bx9NPP80LL7zArl276NixI8uXL3fuN2rUKEaPHs0NN9zAf//7X5577jmqV6/OmjVrnPv06dOH77//nkGDBvHee+/xz3/+k7S0NPbu3XvO58/MzCQhIYEOHTpQvXr1Ir++3Nxc4uPjiYiI4M0336RPnz7069ePjIyMAt+WZWZm8tNPP3Hbbbdhs9kAmDZtGjfffDMBAQG8/vrrvPDCC2zatIl27dpd8rgNIiIiJd306dO59dZb8fLyon///mzbto2VK1e67JOenk779u2ZMGECXbp04Z133mHo0KFs2bKF/fv3A5CXl8ctt9zC6NGjad68OW+99RaPPfYYJ06cuOzWz4W9pwN88803ZGZm8tBDDzFhwgTi4+OZMGECAwYMcDl+/fr1tG7dmgULFjBkyBDeeecdevXqxU8//QRAx44dqVatWqGJuOnTpxMTE8N111133hhvvfVWgoODeeqpp8jJybms6zwtMzOT5ORkl8Vut1/ROc9Uo0YN8vLymDZt2gX3nTdvHh06dGDTpk089thjvPXWW9xwww38/PPPzn3mz59PfHw8hw8fZtSoUQwfPpwlS5bQtm3bQu+Zbr/9djIzM3n11VcZMmQIAK+88goDBgwgNjaWt99+m8cff9x5n5iSknLeGH/66Sdq1apVoNVXUTk73r59+2KxWPj6668L7Pv111/TpUsXQkNDATNZ16FDB1JTUxk5ciSvvvoqKSkp3HjjjaxYseKqxCtyToaISDH55JNPDMBYuXLlOffp1auX4eXlZezYscNZdvDgQSMwMNDo0KGDs6xx48bGzTfffM7zHD9+3ACMcePGXVKM69atMwDjscceu6j9f/vtNwMwfvvtN5fyXbt2GYDxySefOMvuvfdeAzCeeeYZl30dDodRpUoVo0+fPi7lX3/9tQEYixYtMgzDMNLS0oyQkBBjyJAhLvslJiYawcHBBcpFRERKs1WrVhmAMW/ePMMwzPfLqlWrFniPfvHFFw3AmDFjRoFzOBwOwzAMY/LkyQZgvP322+fcpyje0w3DMDIzMwuUjR071rBYLMaePXucZR06dDACAwNdys6MxzAMY8SIEYa3t7eRkpLiLDt8+LDh4eFhjBw5ssDznG3JkiVGaGio4eXlZdx+++1Gbm7uBY852+nrL2w5u65OGzdunAEYu3btuujnSUxMNMLDww3AiIuLM4YOHWp8/vnnLtduGIaRm5trREdHGzVq1DCOHz/usu3MumvSpIkRERFhHD161Fm2bt06w2q1GgMGDHCWjRw50gCM/v37u5xr9+7dhs1mM1555RWX8r/++svw8PAoUH6mEydOGIDRs2fPi7r2wl5jpwEuv+tzxWsYhnHdddcZzZs3dylbsWKFARiffvqpYRhmHcXGxhrx8fEu9ZWZmWlER0cbnTt3vqiYRYqKWkqJSImRl5fH3Llz6dWrF7Vq1XKWV6pUiTvvvJPFixeTmpoKQEhICBs3bmTbtm2FnsvX1xcvLy8WLlzo0lT5Qk6f/0qan1/IQw895PLYYrFw++2388svv7jMLPPVV19RpUoVZxPyefPmkZKSQv/+/V2+pbTZbLRu3ZrffvvtqsUsIiJS3KZPn05kZCQ33HADYL5f9uvXjy+//NKlW/t3331H48aN6d27d4FzWCwW5z5hYWE8+uij59zncpz9ng7mPchpGRkZJCcn06ZNGwzD4M8//wTMWeYWLVrEfffdV6Bl9pnxDBgwgOzsbL799ltn2VdffUVubu55x3cC2LNnD927d2fw4MHMnDmT77//niFDhrh05XvwwQepVq3aRV3rAw88wLx581yWxo0bX9SxFyMyMpJ169YxdOhQjh8/zvvvv8+dd95JREQEL7/8sjPuP//8k127dvH4448TEhLico7TdXfo0CHWrl3LwIEDqVChgnN7o0aN6Ny5M7/88kuB5x86dKjL4xkzZuBwOOjbt6/LfVdUVBSxsbHnve8qjvvJs+MF6NevH6tXr3Z2SQXz9eLt7U3Pnj0Bc3bpbdu2ceedd3L06FHndWVkZHDTTTexaNEiHA7HVYtb5GxKSolIiXHkyBEyMzOpW7dugW316tXD4XA4+/C/9NJLpKSkUKdOHRo2bMhTTz3F+vXrnft7e3vz+uuv8+uvvxIZGUmHDh144403SExMPG8MQUFBAKSlpRXhleXz8PCgatWqBcr79evHyZMn+fHHHwGzK8Ivv/zC7bff7rzBOp2Au/HGGwkPD3dZ5s6dy+HDh69KzCIiIsUtLy+PL7/8khtuuIFdu3axfft2tm/fTuvWrUlKSiIhIcG5744dO7jmmmvOe74dO3ZQt25dPDyKbp6nc72n792715kMCQgIIDw8nOuvvx6AEydOALBz506AC8YdFxdHy5YtXbrwTZ8+nWuvvfaCsxCOHTsWq9XKmDFj6NatG5MnT2bKlCk8/vjjzn02bNhA69atL+p6Y2Nj6dSpk8tyujvYpThy5AiJiYnO5cwv5CpVqsSkSZM4dOgQW7du5d133yU8PJwXX3yRjz/+GMCZcDlf3Z0eV+lc95SnkzBnio6Odnm8bds2DMMgNja2wH3X5s2bz3vfdbXvJwuLF8wufVarla+++gowxxL75ptvnGO1Qv795L333lvguj766COys7Odr1OR4qDZ90SkVOrQoQM7duzghx9+YO7cuXz00Uf85z//4f333+f+++8HzJnyevTowcyZM5kzZw4vvPACY8eOZcGCBTRt2rTQ89auXRsPDw/++uuvi4rjXN+unvkN7pm8vb2dg46e6dprr6VmzZp8/fXX3Hnnnfz000+cPHmSfv36Ofc5/a3VtGnTiIqKKnCOorzRFhERcacFCxZw6NAhvvzyS7788ssC26dPn06XLl2K9DmL4j09Ly+Pzp07c+zYMf79738TFxeHv78/Bw4cYODAgZfVAmXAgAE89thj7N+/n+zsbJYtW8Z///vfCx63ZMkSmjRp4hzU/J577iEpKYmnnnqKwMBA7rjjDpYuXcp33313yTFdiZYtW7oMxj1y5EiXgbzB/F3UqVOHOnXqcPPNNxMbG8v06dOd93hXw5kt3MC877JYLPz666/OsT3PFBAQcM5zBQUFUbly5Yser+xSX3uFxQtQuXJl2rdvz9dff82zzz7LsmXL2Lt3L6+//rpzn9OvwXHjxtGkSZNCz32+axMpavoEIyIlRnh4OH5+fmzdurXAti1btmC1Wl2amFeoUIFBgwYxaNAg0tPT6dChA6NGjXK5YYmJieGJJ57giSeeYNu2bTRp0oS33nqLzz77rNAY/Pz8uPHGG1mwYAH79u27YJP2098Qnj3YZWEzn1xI3759eeedd0hNTeWrr76iZs2aLjPQxMTEABAREUGnTp0u+fwiIiKlxfTp04mIiGDixIkFts2YMYPvv/+e999/H19fX2JiYi744T8mJobly5djt9vx9PQsdJ+ieE//66+/+Pvvv5k6darLwOZnzg4MOIcpuJikxR133MHw4cP54osvOHnyJJ6eni5fWp2LxWIpMEvck08+SVJSEq+88grTp0+nadOmzm5dxWX69OkuMxGeOWRDYWrVqkVoaCiHDh0C8u+HNmzYcM77oRo1agCc854yLCwMf3//8z5vTEwMhmEQHR1NnTp1zrtvYW655RY++OADli5desEB6YvyfrJfv348/PDDbN26la+++go/Pz969Ojh3H66/oKCgnQ/KSWCuu+JSIlhs9no0qULP/zwg8usKElJSXz++ee0a9fO2fT46NGjLscGBARQu3ZtsrOzAXOGmKysLJd9YmJiCAwMdO5zLiNHjsQwDO655x6XJuWnrV69mqlTpwLmTY/NZmPRokUu+7z33nsXd9Fn6NevH9nZ2UydOpXZs2fTt29fl+3x8fEEBQXx6quvFjrbzZEjRy75OUVEREqakydPMmPGDG655RZuu+22AsuwYcNIS0tzdnnv06cP69at4/vvvy9wrtPjEPXp04fk5ORCWxid3qco3tNPt6g5c9wmwzB45513XPYLDw+nQ4cOTJ48ucCswGceCxAWFka3bt347LPPmD59Ol27diUsLOyCsXTq1Ilt27YVmM3utddeo379+uzevZt//OMfhbbgvpratm3r0gXwdFJq+fLlBbrUAaxYsYKjR486u+I1a9aM6Ohoxo8fXyCJc7ruKlWqRJMmTZg6darLPhs2bGDu3Ll07979gnHeeuut2Gw2Ro8eXeB3YhhGgXvRsz399NP4+/tz//33k5SUVGD7jh07nK+LoKAgwsLCiuR+sk+fPthsNr744gu++eYbbrnlFpcEXPPmzYmJieHNN98s9D5X95NS3NRSSkSK3eTJk5k9e3aB8scee4wxY8Ywb9482rVrx8MPP4yHhwf/93//R3Z2Nm+88YZz3/r169OxY0eaN29OhQoVWLVqFd9++y3Dhg0D4O+//+amm26ib9++1K9fHw8PD77//nuSkpK44447zhtfmzZtmDhxIg8//DBxcXHcc889xMbGkpaWxsKFC/nxxx8ZM2YMAMHBwdx+++1MmDABi8VCTEwMP//882WN79SsWTNq167Nc889R3Z2doFvQYOCgpg0aRL33HMPzZo144477iA8PJy9e/cya9Ys2rZte1HN+UVEREqyH3/8kbS0NP7xj38Uuv3aa68lPDyc6dOn069fP5566im+/fZbbr/9du677z6aN2/OsWPH+PHHH3n//fdp3LgxAwYM4NNPP2X48OGsWLGC9u3bk5GRwfz583n44Yfp2bNnkbynx8XFERMTw5NPPsmBAwcICgriu+++K3TSlXfffZd27drRrFkzHnjgAaKjo9m9ezezZs1i7dq1LvsOGDCA2267DYCXX375omIZMWIEM2fO5N5772XevHm0adOG9PR0vvjiC3bt2kXLli0ZM2YM1113XZF0hTxx4gQTJkwA4I8//gDgv//9LyEhIYSEhDjv0c5l2rRpTJ8+nd69e9O8eXO8vLzYvHkzkydPxsfHh2effRYAq9XKpEmT6NGjB02aNGHQoEFUqlSJLVu2sHHjRubMmQOY3dO6devGddddx+DBgzl58iQTJkwgODi4QHfBwsTExDBmzBhGjBjB7t276dWrF4GB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k7feestl+3vvvUdsbCw+Pj5ERkZy2223Obd9++23NGzYEF9fXypWrEinTp3IyMi4onhEREREREREpGiopVQRMAyDk/a8Yn9eX09bkc0a98wzz/Dmm29Sq1YtQkND2bdvH927d+eVV17B29ubTz/9lB49erB161aqV69+zvOMHj2aN954g3HjxjFhwgTuuusu9uzZQ4UKFS45ptWrV9O3b19GjRpFv379WLJkCQ8//DAVK1Zk4MCBrFq1in/+859MmzaNNm3acOzYMX7//XfAbB3Wv39/3njjDXr37k1aWhq///47hmFcdh2JiEgJ5MiD/Svh6HZoere7oxEREREpcXLzHGRk55Gek0t6Vi7p2aeWrFxiIvyJiwq68EmuEiWlisBJex71X5xT7M+76aV4/LyK5lf40ksv0blzZ+fjChUq0LhxY+fjl19+me+//54ff/yRYcOGnfM8AwcOpH///gC8+uqrvPvuu6xYsYKuXbteckxvv/02N910Ey+88AIAderUYdOmTYwbN46BAweyd+9e/P39ueWWWwgMDKRGjRo0bdoUMJNSubm53HrrrdSoUQOAhg0bXnIMIiJSAtlPws7/wZaf4e/ZkHEEPHyhwa3g5efu6ERERESumMNhkJGTnzw6nUjKyM4lLeuM9VM/zX3ySM+2n9qWR1qWue18jWgevbG2klLifi1atHB5nJ6ezqhRo5g1a5YzwXPy5En27t173vM0atTIue7v709QUBCHDx++rJg2b95Mz549Xcratm3L+PHjycvLo3PnztSoUYNatWrRtWtXunbt6uw62LhxY2666SYaNmxIfHw8Xbp04bbbbiM0NPSyYhERETfLPAbb5pqJqO0LwH5Gd2zvYKgTD1knlJQSERERt3M4DNJzcjmRaefESTupJ82fp5eUjGw27LTy27d/kWl3uCSY0k8lkjJyir43lpeHlUBvD/y9PQjw9iDAx4NKwb5F/jyXQkmpIuDraWPTS/Fued6i4u/v7/L4ySefZN68ebz55pvUrl0bX19fbrvtNnJycs57Hk9PT5fHFosFh8NRZHGeKTAwkDVr1rBw4ULmzp3Liy++yKhRo1i5ciUhISHMmzePJUuWMHfuXCZMmMBzzz3H8uXLiY6OvirxiIhIEUvZC1t+ga2zYPcfYJxxcxZUBeJuNpcabcHmee7ziIiIiFyiPIdBWpZr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Bw8eZOTIkdhsNvr37++WaxS5WpLTs/l53UFmrj3I2n0pznJfTxvxDSLp2bQK7WqH4akZ80RErjolpURERK6WnAxY8Iq5fv3T4Bvq3nikzOjXrx9HjhzhxRdfJDExkSZNmjB79mzn4Od79+7Fas3/QJ2VlcXzzz/Pzp07CQgIoHv37kybNo2QkBDnPvv376d///4cPXqU8PBw2rVrx7JlywgPDy/uyxMpcpk5uczblMT3fx7g923JzgHLrRZoHxtOr6aV6VI/Cn9vfTwSESlO+q8rIiJytSydCOmJEFIDWt7v7mikjBk2bNg5u+stXLjQ5fH111/Ppk2bznu+L7/8sqhCEykRcvMcLN6ezA9rDzJnYyKZOfmzTTauGkyvplW4pVFlwgMLdkEVEZHioaSUiIjI1ZB+GP54x1zvNBI89KFHRORqMwyD9ftPMHPtAX5ad5Dk9BzntuoV/OjVtAq9mlSmVniAG6MUEZHTlJQSERG5GhaOhZx0qNwMGtzq7mhERMq0PUczmPnnQX5Ye4CdyRnO8gr+XtzSqBK9mlahabWQix6wXEREioeSUiIiIkXtyN+weqq53mUM6EOQiEiRy8l18PP6g3y2bA9r9qY4y308rXSuH0XvppVpHxuuActFREowJaVERESK2vyRYORB3e5Qs627oxERKVNOnLTzxYq9fPLHLpJSswFzwPK2tcPo1aQK8ddEEaABy0VESgX9txYRESlKu/+Arb+AxQadRrs7GhGRMmPfsUw++WM3X63cS8apQcsjAr25t01Nbm9elYggHzdHKCIil0pJKRERkaLicMDc58315vdCeB33xiMiUgas35/CB4t28uuGRPIcBgB1IwO5v300/2hSGW8Pm5sjFBGRy6WklIiISFHZOAMOrgGvAOg4wt3RiIiUWg6HwYIth/ng952s2HXMWd6udhhDOtSiQ2yYBi0XESkDSsSofxMnTqRmzZr4+PjQunVrVqxYcc59Z8yYQYsWLQgJCcHf358mTZowbdo0l30GDhyIxWJxWbp27Xq1L0NERMqz3GxIONVdr+1jEBDh3nhEREqhLHseny/fS6f//I/7P13Fil3H8LBauLVpFX75Z3s+u78119cJV0JKRKSMcHtLqa+++orhw4fz/vvv07p1a8aPH098fDxbt24lIqLgDX2FChV47rnniIuLw8vLi59//plBgwYR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NVWCubVpVQDG/LwJwzDcHJEUmRMH4JNusH8F+ATDgB+gTry7oxIRERERESkVatasyfjx490dhpxBSaky6Kn4uvh4Wlm15zi/bkh0dzhSFJK3weR4OLIFAivBoNlQvbW7oxIRERERESlyFovlvMuoUaMu67wrV67kgQceKJIYv/jiC2w2G4888kiRnK+8KhFJqYkTJ1KzZk18fHxo3bo1K1asOOe+H374Ie3btyc0NJTQ0FA6depUYP+BAwcWeNF27dr1al9GiREV7MODHWIAGPvrZrJz89wckVyRA6vNhNSJfVCxNgyeC5H13R2ViIiIiIjIVXHo0CHnMn78eIKCglzKnnzySee+hmGQm5t7UecNDw8vshkIP/74Y55++mm++OILsrKyiuSclysnJ8etz38l3J6U+uqrrxg+fDgjR45kzZo1NG7cmPj4eA4fPlzo/gsXLqR///789ttvLF26lGrVqtGlSxcOHDjgsl/Xrl1dXrRffPFFcVxOifHg9bWICPRm37GTTF2y293hyOXasQCm9IDMo1C5Kdw3B0KquzsqERERERGRqyYqKsq5BAcHY7FYnI+3bNlCYGAgv/76K82bN8fb25vFixezY8cOevbsSWRkJAEBAbRs2ZL58+e7nPfs7nsWi4WPPvqI3r174+fnR2xsLD/++OMF49u1axdLlizhmWeeoU6dOsyYMaPAPpMnT6ZBgwZ4e3tTqVIlhg3Ln5wqJSWFxx9/nEqVKuHj48M111zDzz//DMCoUaNo0qSJy7nGjx9PzZo1nY8HDhxIr169eOWVV6hcuTJ169YFYNq0abRo0YLAwECioqK48847C+RWNm7cyC233EJQUBCBgYG0b9+eHTt2sGjRIjw9PUlMdO1t9fjjj9O+ffsL1snlcntS6u2332bIkCEMGjSI+vXr8/777+Pn58fkyZML3X/69Ok8/PDDNGnShLi4OD766CMcDgcJCQku+3l7e7u8kENDQ4vjckoMPy8Pnoo3X5gTErZzND3bzRHJJdswA6b3BXsGRF8P9/4E/mHujkpEREREREoxwzDIzMl1y1KUYx4/88wzvPbaa2zevJlGjRqRnp5O9+7dSUhI4M8//6Rr16706NGDvXv3nvc8o0ePpm/fvqxfv57u3btz1113cezYsfMe88knn3DzzTcTHBzM3Xffzccff+yyfdKkSTzyyCM8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VivNmzcnLi6OJk2a4OzszOuvv86gQYOMDk9EREQkW93VTCmRfxvSpiKP1SlGqtXGiz/sYOupfNbw/swmOPIHmCzw0DCjoxERkRzKZDLxzjvvcPnyZfbt28emTZu4ePEio0ePNjo0ERERkWx31zOlRP7JZDIx9tFqXIlNYuWhcPrP3Mr85xtQMcDL6NCyns0GK0alPa/1FPiVMzYeERHJcfr163db602fPj2LIxERERHJOTRTSjKNg8XMl0/Upm5JX6ITUug9fQvnrsQZHVbWO7YCzmwAizM0fcvoaEREJAeaOXMmq1atIjIykitXrtz0ISIiIpmnWbNmvPLKK0aHIf/hjmZKPfroo//5vm5lLK5OFqb1rsfjX2/kcNhVek3bwoLnG1DQw9no0LKG1Zo+SyroWfDOubfaFBER4wwYMIAff/yRkydP0rdvX5566ikKFChgdFgiIiI5UocOHUhOTmbp0qXXvbd27VqaNGnC7t27qV69+j0dZ+bMmfTt2/e65VOnTuXpp5/mwoULvPbaa2zbto1jx47x0ksvMXHixFvu9+LFi4wYMYLFixcTFhaGr68vNWrUYMSIETRq1OieYs5r7mimlLe3938+SpYsSa9evbIqVsklvN0cmdWvPkV9XDkREUvfmVuJSUwxOqyssf8XCNsLzl7QeLDR0YiISA41adIkLly4wJtvvsnvv/9O8eLFefzxx1m2bBk2m83o8ERERHKU/v37ExwczLlz5657b8aMGdStW/eeC1LXeHl5ceHChQyPJ598EoDExEQKFSrEsGHDqFGjxm3vs0uXLuzcuZNZs2Zx5MgRFi1aRLNmzbh06VKmxHwjSUlJWbbvrHRHM6VmzJiRVXFIHhPg7cLs/vXpOmUje85F8fx325nepx5ODnnoitGUJPjz78a0jV4CN33jLSIiN+fs7EyPHj3o0aMHp0+fZubMmbzwwgukpKSwf/9+PDw8jA5RREQkR2jfvj2FChVi5syZDBuWfiOpmJgYFixYwMcff8ylS5cYOHAgf/31F1euXOG+++7j7bffpkePHnd0LJPJREBAwA3fK1WqFJ999hlw+30fIyMjWbt2LatXr6Zp06YAlCxZkvr162dYLyoqijfffJPffvuNqKgoypYty9ixY2nfvj0AP//8MyNGjODYsWMUKVKEQYMG8dprr2WIrX///hw9epSFCxfy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\n",
      "text/plain": [
       "<Figure size 1200x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Final Evaluation on Validation Set using Best Model ---\n",
      "Loading best saved model 'best_model_bbox_ego_acc_ego_speed_ped_action_ped_look_yolop_ep2.pth'\n",
      " -> Best model loaded successfully.\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "224ea1a0af54446fb9e19900e848ed6d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ab87dff54a6f4495ba212fe66b8e4c30",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Generating CM Data:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Final Performance Metrics ---\n",
      "  Streams:   bbox, ped_action, ped_look, ego_speed, ego_acc, yolop\n",
      "  Accuracy:  0.9161\n",
      "  Precision: 0.6747\n",
      "  Recall:    0.8711\n",
      "  F1 Score:  0.7604\n",
      "  AUC:       0.9696\n",
      "  Loss:      0.1734\n",
      "  (Best Validation F1 during training: 0.7604 - from model 'best_model_bbox_ego_acc_ego_speed_ped_action_ped_look_yolop_ep2.pth')\n",
      "\n",
      "--- Confusion Matrix ---\n"
     ]
    },
    {
     "data": {
      "image/png": "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ZYeGhiplJCUl4dixY3p5LCwsEBISouTJKg6aJyIiotciLi5O77FGo4FGo8k0788//4zjx4/jyJEjGfbFxMRArVYjT548eunOzs6IiYlR8jwbbKXvT99nKE9cXByePHmCBw8eIDU1NdM8586de8nV6mMLFxERERmUXV2K7u7ucHBwULaxY8dmer5r166hR48eWLZsGbRa7Wu8UvNhCxcREREZlF0Ln167dg329vZK+otat44dO4bbt2+jbNmySlpqair27duHWbNmYfv27UhKSsLDhw/1Wrlu3boFFxcXAICLi0uG2YTpsxifzfP8zMZbt27B3t4e1tbWsLS0hKWlZaZ50svIKrZwERER0Wthb2+vt70o4KpZsyZOnz6NkydPKlu5cuXQunVr5f9WVlbYuXOnckxUVBSio6MRHBwMAAgODsbp06f1ZhPu2LED9vb28PPzU/I8W0Z6nvQy1Go1goKC9PLodDrs3LlTyZNVbOEiIiIig173T/vY2dmhVKlSemm2trbIly+fkt6hQwf07t0bjo6OsLe3R7du3RAcHIxKlSoBAGrXrg0/Pz+0adMGEyZMQExMDL777juEh4crgd7XX3+NWbNmoX///vjiiy+wa9curFq1Cps3b1bO27t3b4SFhaFcuXKoUKECpk2bhoSEBLRv396oa2LARURERAa9iT9ePXXqVFhYWKBJkyZITExEaGgo5syZo+y3tLTEpk2b0LlzZwQHB8PW1hZhYWEYMWKEksfLywubN29Gr169MH36dBQqVAgLFy5EaGiokqdFixa4c+cOhgwZgpiYGAQGBmLbtm0ZBtK/jEpExPTLprdRXFwcHBwcoPHvBJWlOqerQ2QW1/dPy+kqEJnFo7g4eBXMh9jYWL1xUdkp/XOiythfkUtr+8rlpDxNwIFBtc1a1zcdx3ARERERmRm7FImIiMigN7FL8W3DgIuIiIgMet2D5t9F7FIkIiIiMjO2cBEREZFBKpjYpZhtNXl7MeAiIiIigyxUKliYEHGZcuy7gl2KRERERGbGFi4iIiIyiLMUTceAi4iIiAziLEXTMeAiIiIigyxUaZspx7/vOIaLiIiIyMzYwkVERESGqUzsFmQLFwMuIiIiMoyD5k3HLkUiIiIiM2MLFxERERmk+v9/phz/vmPARURERAZxlqLp2KVIREREZGZs4SIiIiKDuPCp6bIUcP3yyy9ZLrBhw4avXBkiIiJ683CWoumyFHA1atQoS4WpVCqkpqaaUh8iIiKid06WAi6dTmfuehAREdEbykKlgoUJzVSmHPuuMGkM19OnT6HVarOrLkRERPQGYpei6YyepZiamoqRI0eiYMGCyJ07Ny5dugQAGDx4MBYtWpTtFSQiIqKclT5o3pTtfWd0wDV69GhERERgwoQJUKvVSnqpUqWwcOHCbK0cERER0bvA6IDrxx9/xPz589G6dWtYWloq6aVLl8a5c+eytXJERESU89K7FE3Z3ndGj+H6999/4ePjkyFdp9MhOTk5WypFREREbw4Omjed0S1cfn5+2L9/f4b0NWvWoEyZMtlSKSIiIqJ3idEtXEOGDEFYWBj+/fdf6HQ6rFu3DlFRUfjxxx+xadMmc9SRiIiIcpDq/zdTjn/fGd3C9cknn2Djxo347bffYGtriyFDhuDs2bPYuHEjatWqZY46EhERUQ7iLEXTvdI6XB9++CF27NiR3XUhIiIieie98sKnR48exdmzZwGkjesKCgrKtkoRERHRm8NClbaZcvz7zuiA6/r16/jss89w4MAB5MmTBwDw8OFDVK5cGT///DMKFSqU3XUkIiKiHGRqtyC7FF9hDFfHjh2RnJyMs2fP4v79+7h//z7Onj0LnU6Hjh07mqOORERERG81o1u49u7di4MHD8LX11dJ8/X1xcyZM/Hhhx9ma+WIiIjozcBGKtMYHXC5u7tnusBpamoq3NzcsqVSRERE9OZgl6LpjO5SnDhxIrp164ajR48qaUePHkWPHj0wadKkbK0cERER5bz0QfOmbO+7LLVw5c2bVy86TUhIQMWKFZErV9rhKSkpyJUrF7744gs0atTILBUlIiIieltlKeCaNm2amatBREREbyp2KZouSwFXWFiYuetBREREbyj+tI/pXnnhUwB4+vQpkpKS9NLs7e1NqhARERHRu8bogCshIQEDBgzAqlWrcO/evQz7U1NTs6ViRERE9GawUKlgYUK3oCnHviuMnqXYv39/7Nq1C3PnzoVGo8HChQsxfPhwuLm54ccffzRHHYmIiCgHqVSmb+87o1u4Nm7ciB9//BHVq1dH+/bt8eGHH8LHxwceHh5YtmwZWrdubY56EhEREb21jG7hun//Pry9vQGkjde6f/8+AOCDDz7Avn37srd2RERElOPSZymasr3v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cURERETvjFceNP+8yMhIaLXa7CqOiIiI3hAqlfGLlz5//PvO6ICrcePGeo9FBDdv3sTRo0e58CkREdE7iGO4TGd0wOXg4KD32MLCAr6+vhgxYgRq166dbRUjIiIielcYFXClpqaiffv28Pf3R968ec1VJyIiInqDcNC86YwaNG9paYnatWvj4cOHZqoOERERvWlU2fDvfWf0LMVSpUrh0qVL5qgLERERvYHSW7hM2d53Rgdco0aNQt++fbFp0ybcvHkTcXFxehsRERER6cvyGK4RI0agT58+qFevHgCgYcOGej/xIyJQqVRITU3N/loSERFRjuEYLtNlOeAaPnw4vv76a+zevduc9SEiIqI3jEqlMvg7ylk5/n2X5YBLRAAA1apVM1tliIiIiN5FRi0LwQiViIjo/cMuRdMZFXAVK1bspUHX/fv3TaoQERERvVm40rzpjAq4hg8fnmGleSIiIiIyzKiAq2XLlihQoIC56kJERERvIAuVyqQfrzbl2HdFlgMujt8iIiJ6P3EMl+myvPBp+ixFIiIiIjJOllu4dDqdOetBREREbyoTB83zpxSNHMNFRERE7x8LqGBhQtRkyrHvCgZcREREZBCXhTCd0T9eTURERETGYQsXERERGcRZiqZjwEVEREQGcR0u07FLkYiIiMjM2MJFREREBnHQvOkYcBEREZFBFjCxS5HLQrBLkYiIiMjc2MJFREREBrFL0XQMuIiIiMggC5jWJcbuND4HRERERGbHFi4iIiIySKVSQWVCv6Apx74rGHARERGRQar/30w5/n3HgIuIiIgM4krzpuMYLiIiIiIzYwsXERERvRTbqEzDgIuIiIgM4jpcpmOXIhEREZGZsYWLiIiIDOKyEKZjwEVEREQGcaV50/E5ICIiIjIztnARERGRQexSNB0DLiIiIjKIK82bjl2KRERERGbGFi4iIiIyiF2KpmPARURERAZxlqLpGHARERGRQWzhMh2DTiIiIiIzY8BFREREBqmyYTPG2LFjUb58edjZ2aFAgQJo1KgRoqKi9PI8ffoU4eHhyJcvH3Lnzo0mTZrg1q1benmio6NRv3592NjYoECBAujXrx9SUlL08uzZswdly5aFRqOBj48PIiIiMtRn9uzZ8PT0hFarRcWKFfHHH38YeUUMuIiIiOgl0n+82pTNGHv37kV4eDgOHTqEHTt2IDk5GbVr10ZCQoKSp1evXti4cSNWr16NvXv34saNG2jcuLGyPzU1FfXr10dSUhIOHjyIJUuWICIiAkOGDFHyXL58GfXr10eNGjVw8uRJ9OzZEx07dsT27duVPCtXrkTv3r0xdOhQHD9+HKVLl0ZoaChu375t3HMoImLc00Dviri4ODg4OODWvVjY29vndHWIzCL67uOcrgKRWcQ/ikNQMVfExprvPTz9c2L5wX9gk9vulct5HP8IrSoXe+W63rlzBwUKFMDevXtRtWpVxMbGIn/+/Fi+fDmaNm0KADh37hxKlCiByMhIVKpUCVu3bsXHH3+MGzduwNnZGQAwb948DBgwAHfu3IFarcaAAQOwefNm/PXXX8q5WrZsiYcPH2Lbtm0AgIoVK6J8+fKYNWsWAECn08Hd3R3dunXDwIEDs3wNbOEiIiIigyygMnkD0gK4Z7fExMQsnT82NhYA4OjoCAA4duwYkpOTERISouQpXrw4ChcujMjISABAZGQk/P39lWALAEJDQxEXF4czZ84oeZ4tIz1PehlJSUk4duyYXh4LCwuEhIQoebL+HBIREREZkF1diu7u7nBwcFC2sWPHvvTcOp0OPXv2RJUqVVCqVCkAQExMDNRqNfLkyaOX19nZGTExMUqeZ4Ot9P3p+wzliYuLw5MnT3D37l2kpqZmmie9jKzishBERET0Wly7dk2vS1Gj0bz0mPDwcPz111/4/fffzVk1s2PARURERAap/v+fKccDgL29vVFjuLp27YpNmzZh3759KFSokJLu4uKCpKQkPHz4UK+V69atW3BxcVHyPD+bMH0W47N5np/ZeOvWLdjb28Pa2hqWlpawtLTMNE96GVnFLkUiIiIy6HXPUhQRdO3aFevXr8euXbvg5eWltz8oKAhWVlbYuXOnkhYVFYXo6GgEBwcDAIKDg3H69Gm92YQ7duyAvb09/Pz8lDzPlpGeJ70MtVqNoKAgvTw6nQ47d+5U8mQVW7iIiIjojRIeHo7ly5fjf//7H+zs7JTxUg4ODrC2toaDgwM6dOiA3r17w9HREfb29ujWrRuCg4NRqVIlAEDt2rXh5+eHNm3aYMKECYiJicF3332H8PBwpSvz66+/xqxZs9C/f3988cUX2LVrF1atWoXNmzcrdenduzfCwsJQrlw5VKhQAdOmTUNCQgLat29v1DUx4CIiIiKDVM/MNHzV440xd+5cAED16tX10hcvXox27doBAKZOnQoLCws0adIEiYmJCA0NxZw5c5S8lpaW2LRpEzp37ozg4GDY2toiLCwMI0aMUPJ4eXlh8+bN6NWrF6ZPn45ChQph4cKFCA0NVfK0aNECd+7cwZAhQxATE4PAwEBs27Ytw0D6lz4HXIfr/cV1uOh9wHW46F31OtfhWnv4ImxNWIcrIf4RmlQsYta6vunYwkVEREQGvco4rOePf99x0DwRERGRmbGFi4iIiAzKrmUh3mcMuIiIiMggC1XaZsrx7zt2KRIRERGZGVu4iIiIyCB2KZqOARcREREZxFmKpmOXIhEREZGZsYWLiIiIDFLBtG5BNnAx4CIiIqKX4CxF07FLkYiIiMjM2ML1BqhevToCAwMxbdq0nK4KvcSB4xcw86ffcOpcNGLuxmHpxE6oX720sr/LsJ+wYvNhvWNqViqBNTPDAQDRN+5h4qJt2Hf0H9y+FwcXJwc0r1sefb4Ihdoq7eV4/sot9B73M6IuxyAu/glcnBzQtE45DOhUD1a5LF/fxdI77djpS4hYsxdnL1zHnfuPMHVwW3xUuZRZz/nzxoNYsmYv7j54hGLerhjY+RP4+xbOkE9EED7kBxw4GvVa6kUvx1mKpnsvA66YmBiMHj0amzdvxr///osCBQogMDAQPXv2RM2aNV97fdatWwcrK6vXfl4y3uMniShVrCA+bxiMNv0XZJqnZrAfZg/5XHmsUf/3Mvvnyi3odDpMHdQS3oXy4++LN9BzzAo8fpKIkT0bAwCsclmiZb0KCCjuDgc7G/z1z3X0HLMCOp1gSHhD814gvTeePE2Cr7crGtUuj96jfjS5vP/tOIpfdhzFoglfZ7p/296TmDR/I77r1hj+voWxbMN+dP5uEf63oB/y5cmtl3fphv38eH7DcJai6d67gOvKlSuoUqUK8uTJg4kTJ8Lf3x/JycnYvn07wsPDce7cuQzHJCcnmzUgcnR0NFvZlL1qVSmJWlVKGsyjUeeCs5N9pvtCKvshpLKf8tizkBMuRN/GD2v2KwGXZyEneBZyUvIUdnXEgePnEXnyYjZcAVGaD8oXxwfli79wf1JSCmYu2Yate0/iUfwT+Hi6oOcX9VA+oMgrne+n9fvRuG5FNKpdHgDwXbfG2HfkHDb8egQdmtdQ8p27eAM/rt2PFTO6o2brka90Lsp+Kpg28J3x1ns4hqtLly5QqVT4448/0KRJExQrVgwlS5ZE7969cejQIQCASqXC3Llz0bBhQ9ja2mL06NEAgLlz56JIkSJQq9Xw9fXFTz/9pJQrIhg2bBgKFy4MjUYDNzc3dO/eXdk/Z84cFC1aFFqtFs7OzmjatKmyr3r16ujZs6fy2NPTE2PGjMEXX3wBOzs7FC5cGPPnz9e7joMHDyIwMBBarRblypXDhg0boFKpcPLkSTM8a2SM34+dR9HaA1G+yQj0Hvcz7j+MN5g/Lv4J8jrYvHD/pWt3sDPyLKqU9cnuqhK90Ni5G/DnuauYMLA11szpjdofBKDLd4tw9d87RpeVnJyCs+f/RaXA/+5hCwsLVAosij/PXlXSnjxNwqDxy/FNeCM4Odply3UQvSneqxau+/fvY9u2bRg9ejRsbW0z7M+TJ4/y/2HDhmHcuHGYNm0acuXKhfXr16NHjx6YNm0aQkJCsGnTJrRv3x6FChVCjRo1sHbtWkydOhU///wzSpYsiZiYGJw6dQoAcPToUXTv3h0//fQTKleujPv372P//v0G6zp58mSMHDkS33zzDdasWYPOnTujWrVq8PX1RVxcHBo0aIB69eph+fLluHr1ql7A9iKJiYlITExUHsfFxWXtiaMsq1m5BD6uURoeBfPhyvW7GDlnI5r1mItff+gDS8uM328uXbuD+Sv3YmSPTzPsq/3FZPwZdQ2JSSkI+7QKvvmq/uu4BCLcvP0A//v1KLb9OAgF8jkAAMKaVsOBY1H4346j6N6urlHlPYhLQKpOh3x59YOofHlz4/L128rjifM3orSfB2oEG25FptfPAipYmNAvaME2rvcr4Lpw4QJEBMWLv7gZPV2rVq3Qvn175fFnn32Gdu3aoUuXLgCgtIhNmjQJNWrUQHR0NFxcXBASEgIrKysULlwYFSpUAABER0fD1tYWH3/8Mezs7ODh4YEyZcoYPH+9evWUcw0YMABTp07F7t274evri+XLl0OlUmHBggXQarXw8/PDv//+i06dOhksc+zYsRg+fPhLr51eXZPa5ZT/l/QpiJI+BVHm02H4/dh5VKvgq5f3xu2HaNp9NhqFlEHYp1UylPXDmC8Q//gp/jr/L4bO2ICZS3eiR9taZr8GovNXYpCq06Fhx4l66cnJKXCwT2uNvXn7AT79arKyLzVVh5TUVFT69DslrWOLj9Cx5UdZOueeQ2dw5NQFrJzV0/QLoGzHLkXTvVcBl4hkOW+5cuX0Hp89exZffvmlXlqVKlUwffp0AECzZs0wbdo0eHt7o06dOqhXrx4aNGiAXLlyoVatWvDw8FD21alTB59++ilsbF7cjRQQEKD8X6VSwcXFBbdvp30TjIqKQkBAALRarZInPbgzZNCgQejdu7fyOC4uDu7u7i89jl6dZyEn5MuTG5eu39ELuG7eeYiGnaejQoA3pn3zWabHFnLJCwAo7u2K1FQdeo1Zga6ta2baUkaUnR4/SYSlhQV+ntkdFhb695uNVgMAyJ/PHqtm91TSdx74C78dOI2x/f+7nx3s0t7j8trbwtLCAvcePNIr696DeDj9f6vXHycv4trN+/ig6VC9PH1G/4SyJb1eOBif6G3xXgVcRYsWhUqlynRg/PMy63I0xN3dHVFRUfjtt9+wY8cOdOnSBRMnTsTevXthZ2eH48ePY8+ePfj1118xZMgQDBs2DEeOHNHrxnzW84P0VSoVdDqdUXV6nkajgUajMakMMs6/tx7gfmwCnPP9N4j+xu20YKt08cKYPeTzDB9omRERJKekQicCLgxB5la8SEGk6nS4/zABZUt5ZZonl6UlCrv9N7nDMU9uaNVWemnprKxyoUTRgjh88oKyxINOp8PhkxfQsmFlAMAXzWvg0zr6Xxybdp6Cvl82QLWKfhnKpNeMTVwme6++Kjs6OiI0NBSzZ89GQkJChv0PHz584bElSpTAgQMH9NIOHDgAP7//3gisra3RoEEDzJgxA3v27EFkZCROnz4NAMiVKxdCQkIwYcIE/Pnnn7hy5Qp27dr1Stfh6+uL06dP643HOnLkyCuVRcaJf5yI01HXcTrqOgDg6o17OB11Hddi7iP+cSIGT1+PI6cvI/rGPez9Iwqt+86Ht7sTagaXAJAWbDX4ejoKOTtiZI9PcfdBPG7djcOtu/+Np1u19QjW7ziOqMsxuHL9LtbvOI4Rs3/Bp7WCuA4XZZvHTxJx7uINnLt4AwDw7637OHfxBm7efgDPQvlRr0YZfDvpZ/x24DSux9zH6ahoLFq5C/v+OPtK52vz6YdYt+0P/LLjKC5F38KoWevxJDEJjWql9SY4OdqhqKeL3gYArvnzoJALZ3LnNFU2/HvfvVctXAAwe/ZsVKlSBRUqVMCIESMQEBCAlJQU7NixA3PnzsXZs5m/mfTr1w/NmzdHmTJlEBISgo0bN2LdunX47bffAAARERFITU1FxYoVYWNjg6VLl8La2hoeHh7YtGkTLl26hKpVqyJv3rzYsmULdDodfH19Mz3Xy7Rq1QrffvstvvzySwwcOBDR0dGYNGkSgLSWMDKfk2evosHXM5TH305dBwD4rH5FTB7YAn9f+Bc/bz6M2EdP4JLfAR9VLI5vvv4YGnVai+Wew+dw6dodXLp2ByXrf6dX9oMjswAAuSwtMP3HHbgYfRsiAncXR3RsVhVdWmVtLAxRVpw5fx0dB3yvPJ40fxMAoGFIEEb2aYERvZtjwYqdmLxgE27fi0Neexv4F/dA1QolXul8daoF4kFsAuYs/RV37z+CbxE3zBnZIcNAeqJ31XsXcHl7e+P48eMYPXo0+vTpg5s3byJ//vwICgrC3LlzX3hco0aNMH36dEyaNAk9evSAl5cXFi9ejOrVqwNIm+E4btw49O7dG6mpqfD398fGjRuRL18+5MmTB+vWrcOwYcPw9OlTFC1aFCtWrEDJkq82E8fe3h4bN25E586dERgYCH9/fwwZMgStWrXSG9dF2e+DoGJKYJSZtTO7Gjy+VYNKaNWgksE8jWsHoXHtoFeqH1FWlQ8oglNbJ7xwv1UuS3RpUxtd2tTOUnmf1CqHT2qVM5jns4ZV8FnDjBNEXsRQ/eg1M3HhUzZwASoxZiQ5vbGWLVuG9u3bIzY2FtbW1lk6Ji4uDg4ODrh1Lxb29pkv1En0tou++zinq0BkFvGP4hBUzBWxseZ7D0//nNh1Mhq57V79HPGP4vBRYGGz1vVN9961cL0rfvzxR3h7e6NgwYI4deoUBgwYgObNm2c52CIiIqLXhwHXWyomJgZDhgxBTEwMXF1d0axZM2VFfCIiomzFWYomY8D1lurfvz/69++f09UgIqL3gKkzDTlLkQEXERERvYTKxEHznED/nq3DRURERJQT2MJFREREBnEIl+kYcBEREZFhjLhMxi5FIiIiIjNjCxcREREZxFmKpmPARURERAZxlqLp2KVIREREZGZs4SIiIiKDOGbedAy4iIiIyDBGXCZjlyIRERGRmbGFi4iIiAziLEXTMeAiIiIigzhL0XQMuIiIiMggDuEyHcdwEREREZkZW7iIiIjIMDZxmYwBFxERERnEQfOmY5ciERERkZmxhYuIiIgM4ixF0zHgIiIiIoM4hMt07FIkIiIiMjO2cBEREZFhbOIyGQMuIiIiMoizFE3HLkUiIiIiM2MLFxERERnEWYqmYwsXERERGaTKhs1Y+/btQ4MGDeDm5gaVSoUNGzbo7RcRDBkyBK6urrC2tkZISAjOnz+vl+f+/fto3bo17O3tkSdPHnTo0AHx8fF6ef788098+OGH0Gq1cHd3x4QJEzLUZfXq1ShevDi0Wi38/f2xZcsWo6+HARcREREZlgMRV0JCAkqXLo3Zs2dnun/ChAmYMWMG5s2bh8OHD8PW1hahoaF4+vSpkqd169Y4c+YMduzYgU2bNmHfvn348ssvlf1xcXGoXbs2PDw8cOzYMUycOBHDhg3D/PnzlTwHDx7EZ599hg4dOuDEiRNo1KgRGjVqhL/++suo61GJiBj5HNA7Ii4uDg4ODrh1Lxb29vY5XR0is4i++zinq0BkFvGP4hBUzBWxseZ7D0//nDh2/iZy2736OeIfxSGo6KvXVaVSYf369WjUqBGAtNYtNzc39OnTB3379gUAxMbGwtnZGREREWjZsiXOnj0LPz8/HDlyBOXKlQMAbNu2DfXq1cP169fh5uaGuXPn4ttvv0VMTAzUajUAYODAgdiwYQPOnTsHAGjRogUSEhKwadMmpT6VKlVCYGAg5s2bl+VrYAsXERERGaTKhn/Z6fLly4iJiUFISIiS5uDggIoVKyIyMhIAEBkZiTx58ijBFgCEhITAwsIChw8fVvJUrVpVCbYAIDQ0FFFRUXjw4IGS59nzpOdJP09WcdA8ERERGWbioPn0eCsuLk4vWaPRQKPRGF1cTEwMAMDZ2Vkv3dnZWdkXExODAgUK6O3PlSsXHB0d9fJ4eXllKCN9X968eRETE2PwPFnFFi4iIiJ6Ldzd3eHg4KBsY8eOzekqvTZs4SIiIiKDsmuh+WvXrumN4XqV1i0AcHFxAQDcunULrq6uSvqtW7cQGBio5Ll9+7becSkpKbh//75yvIuLC27duqWXJ/3xy/Kk788qtnARERGRYdk0S9He3l5ve9WAy8vLCy4uLti5c6eSFhcXh8OHDyM4OBgAEBwcjIcPH+LYsWNKnl27dkGn06FixYpKnn379iE5OVnJs2PHDvj6+iJv3rxKnmfPk54n/TxZxYCLiIiI3jjx8fE4efIkTp48CSBtoPzJkycRHR0NlUqFnj17YtSoUfjll19w+vRptG3bFm5ubspMxhIlSqBOnTro1KkT/vjjDxw4cABdu3ZFy5Yt4ebmBgBo1aoV1Go1OnTogDNnzmDlypWYPn06evfurdSjR48e2LZtGyZPnoxz585h2LBhOHr0KLp27WrU9bBLkYiIiAzKid9SPHr0KGrUqKE8Tg+CwsLCEBERgf79+yMhIQFffvklHj58iA8++ADbtm2DVqtVjlm2bBm6du2KmjVrwsLCAk2aNMGMGTOU/Q4ODvj1118RHh6OoKAgODk5YciQIXprdVWuXBnLly/Hd999h2+++QZFixbFhg0bUKpUKeOeA67D9f7iOlz0PuA6XPSuep3rcJ26dAt2JqzD9ehRHEp7O5u1rm86dikSERERmRm7FImIiMig7Jql+D5jwEVERESGMeIyGQMuIiIiMignBs2/aziGi4iIiMjM2MJFREREBqlg2m8psn2LARcRERG9BIdwmY5dikRERERmxhYuIiIiMkilMrFLkU1cDLiIiIjoZdipaCp2KRIRERGZGVu4iIiIyCB2KZqOARcREREZxA5F07FLkYiIiMjM2MJFREREBrFL0XQMuIiIiMgg/pai6RhwERERkWEcxGUyjuEiIiIiMjO2cBEREZFBbOAyHQMuIiIiMoiD5k3HLkUiIiIiM2MLFxERERnEWYqmY8BFREREhnEQl8nYpUhERERkZmzhIiIiIoPYwGU6BlxERERkEGcpmo5dikRERERmxhYuIiIiegnTZimyU5EBFxEREb0EuxRNxy5FIiIiIjNjwEVERERkZuxSJCIiIoPYpWg6BlxERERkEH/ax3TsUiQiIiIyM7ZwERERkUHsUjQdAy4iIiIyiD/tYzp2KRIRERGZGVu4iIiIyDA2cZmMARcREREZxFmKpmOXIhEREZGZsYWLiIiIDOIsRdMx4CIiIiKDOITLdAy4iIiIyDBGXCbjGC4iIiIiM2MLFxERERnEWYqmY8BFREREBnHQvOkYcL3HRAQA8CguLodrQmQ+8Y8e53QViMwiPv4RgP/ey80pzsTPCVOPfxcw4HqPPXqU9mL18XLP4ZoQEdGrevToERwcHMxStlqthouLC4pmw+eEi4sL1Gp1NtTq7aSS1xEa0xtJp9Phxo0bsLOzg4rtvWYXFxcHd3d3XLt2Dfb29jldHaJsx3v89RIRPHr0CG5ubrCwMN8cuKdPnyIpKcnkctRqNbRabTbU6O3EFq73mIWFBQoVKpTT1Xjv2Nvb88OI3mm8x18fc7VsPUur1b7XgVJ24bIQRERERGbGgIuIiIjIzBhwEb0mGo0GQ4cOhUajyemqEJkF73GiF+OgeSIiIiIzYwsXERERkZkx4CIiIiIyMwZcRERERGbGgIvoHaJSqbBhw4acrgaRQdWrV0fPnj1zuhpErxUDLnrrtWvXDiqVCuPGjdNL37Bhg9Er6Ht6emLatGlZynvixAk0a9YMzs7O0Gq1KFq0KDp16oR//vnHqHNmp5s3b6Ju3bo5dn56M8XExKBbt27w9vaGRqOBu7s7GjRogJ07d+ZIfdatW4eRI0fmyLmJcgoDLnonaLVajB8/Hg8ePHgt59u0aRMqVaqExMRELFu2DGfPnsXSpUvh4OCAwYMHZ3qMiCAlJcWs9XJxceGUfNJz5coVBAUFYdeuXZg4cSJOnz6Nbdu2oUaNGggPD8/0mOTkZLPWydHREXZ2dmY9B9EbR4jecmFhYfLxxx9L8eLFpV+/fkr6+vXr5flbfM2aNeLn5ydqtVo8PDxk0qRJyr5q1aoJAL0tMwkJCeLk5CSNGjXKdP+DBw9ERGT37t0CQLZs2SJly5YVKysr2b17tzx9+lS6desm+fPnF41GI1WqVJE//vhDOf7+/fvSqlUrcXJyEq1WKz4+PvLDDz+IiEhiYqKEh4eLi4uLaDQaKVy4sIwZM0Y5FoCsX79eREQuX74sAGTt2rVSvXp1sba2loCAADl48KBefefPny+FChUSa2tradSokUyePFkcHBwMP+n01qhbt64ULFhQ4uPjM+xLv1cByJw5c6RBgwZiY2MjQ4cOFRGROXPmiLe3t1hZWUmxYsXkxx9/VI7V6XQydOhQcXd3F7VaLa6urtKtWzdl/+zZs8XHx0c0Go0UKFBAmjRpouyrVq2a9OjRQ3ns4eEho0ePlvbt20vu3LnF3d1dvv/+e726HjhwQEqXLi0ajUaCgoKU1/eJEydMf5KIXgMGXPTWCwsLk08++UTWrVsnWq1Wrl27JiIZA66jR4+KhYWFjBgxQqKiomTx4sVibW0tixcvFhGRe/fuSaFChWTEiBFy8+ZNuXnzZqbnW7dunQDIELg8Lz3gCggIkF9//VUuXLgg9+7dk+7du4ubm5ts2bJFzpw5I2FhYZI3b165d++eiIiEh4dLYGCgHDlyRC5fviw7duyQX375RUREJk6cKO7u7rJv3z65cuWK7N+/X5YvX66cM7OAq3jx4rJp0yaJioqSpk2bioeHhyQnJ4uIyO+//y4WFhYyceJEiYqKktmzZ4ujoyMDrnfEvXv3RKVS6QXlmQEgBQoUkB9++EEuXrwoV69elXXr1omVlZXMnj1boqKiZPLkyWJpaSm7du0SEZHVq1eLvb29bNmyRa5evSqHDx+W+fPni4jIkSNHxNLSUpYvXy5XrlyR48ePy/Tp05XzZRZwOTo6yuzZs+X8+fMyduxYsbCwkHPnzomISGxsrDg6Osrnn38uZ86ckS1btkixYsUYcNFbhQEXvfXSAy4RkUqVKskXX3whIhkDrlatWkmtWrX0ju3Xr5/4+fkpjz08PGTq1KkGzzd+/HgBIPfv3zeYLz3g2rBhg5IWHx8vVlZWsmzZMiUtKSlJ3NzcZMKECSIi0qBBA2nfvn2mZXbr1k0++ugj0el0me7PLOBauHChsv/MmTMCQM6ePSsiIi1atJD69evrldG6dWsGXO+Iw4cPCwBZt26dwXwApGfPnnpplStXlk6dOumlNWvWTOrVqyciIpMnT5ZixYpJUlJShvLWrl0r9vb2EhcXl+n5Mgu4Pv/8c+WxTqeTAgUKyNy5c0VEZO7cuZIvXz558uSJkmfBggUMuOitwjFc9E4ZP348lixZgrNnz2bYd/bsWVSpUkUvrUqVKjh//jxSU1OzfA4x8scZypUrp/z/4sWLSE5O1quHlZUVKlSooNS5c+fO+PnnnxEYGIj+/fvj4MGDSt527drh5MmT8PX1Rffu3fHrr7++9PwBAQHK/11dXQEAt2/fBgBERUWhQoUKevmff0xvL2Pu1WfvU+DFr5f0+7RZs2Z48uQJvL290alTJ6xfv14Zo1irVi14eHjA29sbbdq0wbJly/D48WOD53/2PlWpVHBxcdG7TwMCAqDVapU8vE/pbcOAi94pVatWRWhoKAYNGmS2cxQrVgwAcO7cuSzlt7W1Nar8unXr4urVq+jVqxdu3LiBmjVrom/fvgCAsmXL4vLlyxg5ciSePHmC5s2bo2nTpgbLs7KyUv6fPmtTp9MZVSd6OxUtWhQqlSpL96qx96m7uzuioqIwZ84cWFtbo0uXLqhatSqSk5NhZ2eH48ePY8WKFXB1dcWQIUNQunRpPHz48IXlPXufAmn3Ku9Tepcw4KJ3zrhx47Bx40ZERkbqpZcoUQIHDhzQSztw4ACKFSsGS0tLAIBarX5pa1ft2rXh5OSECRMmZLrf0IdKkSJFoFar9eqRnJyMI0eOwM/PT0nLnz8/wsLCsHTpUkybNg3z589X9tnb26NFixZYsGABVq5cibVr1+L+/fsG6/wivr6+OHLkiF7a84/p7eXo6IjQ0FDMnj0bCQkJGfYbuldf9Hp59j61trZGgwYNMGPGDOzZsweRkZE4ffo0ACBXrlwICQnBhAkT8Oeff+LKlSvYtWvXK12Hr68vTp8+jcTERCWN9ym9bXLldAWIspu/vz9at26NGTNm6KX36dMH5cuXx8iRI9GiRQtERkZi1qxZmDNnjpLH09MT+/btQ8uWLaHRaODk5JShfFtbWyxcuBDNmjVDw4YN0b17d/j4+ODu3btYtWoVoqOj8fPPP2daN1tbW3Tu3Bn9+vWDo6MjChcujAkTJuDx48fo0KEDAGDIkCEICgpCyZIlkZiYiE2bNqFEiRIAgClTpsDV1RVlypSBhYUFVq9eDRcXF+TJk+eVnqtu3bqhatWqmDJlCho0aIBdu3Zh69atRq9fRm+u2bNno0qVKqhQoQJGjBiBgIAApKSkYMeOHZg7d26m3e8A0K9fPzRv3hxlypRBSEgINm7ciHXr1uG3334DAERERCA1NRUVK1aEjY0Nli5dCmtra3h4eGDTpk24dOkSqlatirx582LLli3Q6XTw9fV9pWto1aoVvv32W3z55ZcYOHAgoqOjMWnSJADgvUpvj5weREZkqmcHzae7fPmyqNXqFy4LYWVlJYULF5aJEyfq7Y+MjJSAgADRaDQvXBYi3ZEjR6Rx48bK8g4+Pj7y5Zdfyvnz50Xkv0Hz6VPv0z158kS6desmTk5OmS4LMXLkSClRooRYW1uLo6OjfPLJJ3Lp0iURSVvCITAwUGxtbcXe3l5q1qwpx48fV45FJoPmnx1U/ODBAwEgu3fvVtLmz58vBQsWVJaFGDVqlLi4uBi8dnq73LhxQ8LDw8XDw0PUarUULFhQGjZsqNwHz943zzK0LMT69eulYsWKYm9vL7a2tlKpUiX57bffRERk//79Uq1aNcmbN6+yHMnKlSuVYzMbNP/8ZJXSpUsry1OIpC0LERAQIGq1WoKCgmT58uUCQJnJSPSmU4kYOQKYiN5pnTp1wrlz57B///6crgrRCy1btgzt27dHbGwsrK2tc7o6RC/FLkWi99ykSZNQq1Yt2NraYuvWrViyZIleNyvRm+DHH3+Et7c3ChYsiFOnTmHAgAFo3rw5gy16azDgInrP/fHHH5gwYQIePXoEb29vzJgxAx07dszpahHpiYmJwZAhQxATEwNXV1c0a9YMo0ePzulqEWUZuxSJiIiIzIzLQhARERGZGQMuIiIiIjNjwEVERERkZgy4iIiIiMyMARcR5ah27dqhUaNGyuPq1aujZ8+er70ee/bsgUqlMvhzNyqVChs2bMhymcOGDUNgYKBJ9bpy5QpUKhVOnjxpUjlElLMYcBFRBu3atYNKpYJKpYJarYaPjw9GjBiBlJQUs5973bp1GDlyZJbyZiVIIiJ6E3AdLiLKVJ06dbB48WIkJiZiy5YtCA8Ph5WVFQYNGpQhb1JSEtRqdbac19HRMVvKISJ6k7CFi4gypdFo4OLiAg8PD3Tu3BkhISH45ZdfAPzXDTh69Gi4ubkpP0p87do1NG/eHHny5IGjoyM++eQTXLlyRSkzNTUVvXv3Rp48eZAvXz70798fzy8F+HyXYmJiIgYMGAB3d3doNBr4+Phg0aJFuHLlCmrUqAEAyJs3L1QqFdq1awcA0Ol0GDt2LLy8vGBtbY3SpUtjzZo1eufZsmULihUrBmtra9SoUUOvnlk1YMAAFCtWDDY2NvD29sbgwYORnJycId/3338Pd3d32NjYoHnz5oiNjdXbv3DhQpQoUQJarRbFixfnSv9E7yAGXESUJdbW1khKSlIe79y5E1FRUdixYwc2bdqE5ORkhIaGws7ODvv378eBAweQO3du1KlTRzlu8uTJiIiIwA8//IDff/8d9+/fx/r16w2et23btlixYgVmzJiBs2fP4vvvv0fu3Lnh7u6OtWvXAgCioqJw8+ZNTJ8+HQAwduxY/Pjjj5g3bx7OnDmDXr164fPPP8fevXsBpAWGjRs3RoMGDXDy5El07NgRAwcONPo5sbOzQ0REBP7++29Mnz4dCxYswNSpU/XyXLhwAatWrcLGjRuxbds2nDhxAl26dFH2L1u2DEOGDMHo0aNx9uxZjBkzBoMHD8aSJUuMrg8RvcFy9KezieiNFBYWJp988omIiOh0OtmxY4doNBrp27evst/Z2VkSExOVY3766Sfx9fUVnU6npCUmJoq1tbVs375dRERcXV1lwoQJyv7k5GQpVKiQci4RkWrVqkmPHj1ERCQqKkoAyI4dOzKt5+7duwWAPHjwQEl7+vSp2NjYyMGDB/XydujQQT777DMRERk0aJD4+fnp7R8wYECGsp4HQNavX//C/RMnTpSgoCDl8dChQ8XS0lKuX7+upG3dulUsLCzk5s2bIiJSpEgRWb58uV45I0eOlODgYBERuXz5sgCQEydOvPC8RPTm4xguIsrUpk2bkDt3biQnJ0On06FVq1YYNmyYst/f319v3NapU6dw4cIF2NnZ6ZXz9OlTXLx4EbGxsbh58yYqVqyo7MuVKxfKlSuXoVsx3cmTJ2FpaYlq1aplud4XLlzA48ePUatWLb30pKQklClTBgBw9uxZvXoAQHBwcJbPkW7lypWYMWMGLl68iPj4eKSkpMDe3l4vT+HChVGwYEG98+h0OkRFRcHOzg4XL15Ehw4d0KlTJyVPSkoKHBwcjK4PEb25GHARUaZq1KiBuXPnQq1Ww83NDbly6b9d2Nra6j2Oj49HUFAQli1blqGs/Pnzv1IdrK2tjT4mPj4eALB582a9QAdIG5eWXSIjI9G6dWsMHz4coaGhcHBwwM8//4zJkycbXdcFCxZkCAAtLS2zra5ElPMYcBFRpmxtbeHj45Pl/GXLlsXKlStRoECBDK086VxdXXH48GFUrVoVQFpLzrFjx1C2bNlM8/v7+0On02Hv3r0ICQnJsD+9hS01NVVJ8/Pzg0ajQXR09AtbxkqUKKFMAEh36NChl1/kMw4ePAgPDw98++23StrVq1cz5IuOjsaNGzfg5uamnMfCwgK+vr5wdnaGm5sbLl26hNatWxt1fiJ6u3DQPBFli9atW8PJyQmffPIJ9u/fj8uXL2PPnj3o3r07rl+/DgDo0aMHxo0bhw0bNuDcuXPo0qWLwTW0PD09ERYWhi+++AIbNmxQyly1ahUAwMPDAyqVCps2bcKdO3cQHx8POzs79O3bF7169cKSJUtw8eJFHD9+HDNnzlQGon/99dc4f/48+vXrh6ioKCxfvhwRERFGXW/RokURHR2Nn3/+GRcvXsSMGTMynQCg1WoRFhaGU6dOYf/+/ejevTuaN28OFxcXAMDw4cMxduxYzJgxA//88w9Onz6NxYsXY8qUKUbVh4jebAy4iChb2NjYYN++fShcuDAaN26MEiVKoEOHDnj69KnS4tWnTx+0adMGYWFhCA4Ohp2dHT799FOD5c6dOxdNmzZFly5dULx4cXTq1AkJCQkAgIIFC2L48OEYOHAgnJ2d0bVrVwDAyJEjMXjwYIwdOxYlSpRAnTp1sHnzZnh5eQFIG1e1du1abNiwAaVLl8a8efMwZswYo663YcOG6NWrF7p27YrAwEAcPHgQgwcPzpDPx8cHjRs3Rr169VC7dm0EBAToLfvQsWNHLFy4EIsXL4a/vz+qVauGiIgIpa5E9G5QyYtGqxIRERFRtmALFxEREZGZMeAiIiIiMjMGXERERERmxoCLiIiIyMwYcBERERGZGQMuIiIiIjNjwEVERERkZgy4iIiIiMyMARcRERGRmTHgIiIiIjIzBlxEREREZsaAi4iIiMjM/g+BqUuh17jhXAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Script Complete ---\n"
     ]
    }
   ],
   "source": [
    "# --- IMPORTS ---\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import Dataset, DataLoader, Subset # Import Subset\n",
    "import xml.etree.ElementTree as ET\n",
    "import os\n",
    "import numpy as np\n",
    "from sklearn.metrics import accuracy_score, precision_recall_fscore_support, roc_auc_score, confusion_matrix, ConfusionMatrixDisplay\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from tqdm.notebook import tqdm\n",
    "import random\n",
    "import math\n",
    "import zipfile\n",
    "import cv2\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import pickle\n",
    "import time\n",
    "import sys\n",
    "import gc\n",
    "\n",
    "# --- Add PIE utilities path if necessary (adjust path) ---\n",
    "pie_utilities_path = '/kaggle/working/PIE/utilities'\n",
    "if pie_utilities_path not in sys.path:\n",
    "    sys.path.insert(0, pie_utilities_path)\n",
    "PIE = None # Declare PIE before try block\n",
    "try:\n",
    "    from pie_data import PIE\n",
    "except ImportError as e:\n",
    "    print(f\"Warning: Could not import PIE class from {pie_utilities_path}. Database must already exist. Error: {e}\")\n",
    "    # PIE remains None, handled later if needed\n",
    "\n",
    "# --- Configuration ---\n",
    "PIE_ROOT_PATH = '/kaggle/working/PIE'\n",
    "VIDEO_INPUT_DIR = '/kaggle/input'\n",
    "POSE_DATA_DIR = '/kaggle/input/pose-data/extracted_poses2'\n",
    "PIE_DATABASE_CACHE_PATH = '/kaggle/input/pie-database/pie_database.pkl'\n",
    "YOLOP_FEATURE_DIR = '/kaggle/input/yolop-data/yolop features'\n",
    "\n",
    "# --- Define ALL possible streams (used by Dataset class) ---\n",
    "ALL_POSSIBLE_STREAMS = [\n",
    "    'bbox', 'pose', 'ego_speed', 'ego_acc', 'ego_gyro',\n",
    "    'ped_action', 'ped_look', 'ped_occlusion', 'traffic_light', 'static_context',\n",
    "    'yolop'\n",
    "]\n",
    "print(f\"All possible streams: {ALL_POSSIBLE_STREAMS}\")\n",
    "\n",
    "# --- *** CHOOSE ACTIVE STREAMS FOR THIS EXPERIMENT RUN *** ---\n",
    "ACTIVE_STREAMS = [\n",
    "    'bbox',\n",
    "    'ped_action',\n",
    "    'ped_look',\n",
    "    'ego_speed',\n",
    "    'ego_acc',\n",
    "    'yolop'\n",
    "]\n",
    "print(f\"--- Running Experiment With Active Streams: {ACTIVE_STREAMS} ---\")\n",
    "# --- *** END ACTIVE STREAM SELECTION *** ---\n",
    "\n",
    "# --- Model Hyperparameters ---\n",
    "SEQ_LEN = 30\n",
    "PRED_LEN = 1\n",
    "# --- Input Sizes ---\n",
    "INPUT_SIZE_BBOX = 4\n",
    "INPUT_SIZE_POSE = 34\n",
    "INPUT_SIZE_EGO_SPEED = 1\n",
    "INPUT_SIZE_EGO_ACC = 2\n",
    "INPUT_SIZE_EGO_GYRO = 1\n",
    "INPUT_SIZE_PED_ACTION = 1\n",
    "INPUT_SIZE_PED_LOOK = 1\n",
    "INPUT_SIZE_PED_OCC = 1\n",
    "INPUT_SIZE_TL_STATE = 4\n",
    "NUM_SIGNALIZED_CATS = 4\n",
    "NUM_INTERSECTION_CATS = 5\n",
    "NUM_AGE_CATS = 4\n",
    "NUM_GENDER_CATS = 3\n",
    "NUM_TRAFFIC_DIR_CATS = 2\n",
    "LANE_CATEGORIES = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 4, 7:4, 8:4}\n",
    "NUM_LANE_CATS = len(set(LANE_CATEGORIES.values()))\n",
    "INPUT_SIZE_STATIC = NUM_SIGNALIZED_CATS + NUM_INTERSECTION_CATS + NUM_AGE_CATS + NUM_GENDER_CATS + NUM_TRAFFIC_DIR_CATS + NUM_LANE_CATS\n",
    "GRID_SIZE = 3\n",
    "INPUT_SIZE_YOLOP = GRID_SIZE**2 * 2 + 2 # 20\n",
    "\n",
    "LSTM_HIDDEN_SIZE = 256\n",
    "NUM_LSTM_LAYERS = 2\n",
    "DROPOUT_RATE = 0.3\n",
    "NUM_CLASSES = 2\n",
    "ATTENTION_DIM = 128\n",
    "\n",
    "# --- Training Hyperparameters ---\n",
    "LEARNING_RATE = 1e-4\n",
    "BATCH_SIZE = 32\n",
    "NUM_EPOCHS = 15\n",
    "DEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "print(f\"Using device: {DEVICE}\")\n",
    "\n",
    "# --- Dataset Splits ---\n",
    "TRAIN_SETS_STR = ['set01', 'set02', 'set04']\n",
    "VAL_SETS_STR = ['set05','set06']\n",
    "\n",
    "# --- Mappings ---\n",
    "TL_STATE_MAP = {'__undefined__': 0, 'red': 1, 'yellow': 2, 'green': 3}\n",
    "NUM_TL_STATES = len(TL_STATE_MAP)\n",
    "SIGNALIZED_MAP = {'n/a': 0, 'C': 1, 'S': 2, 'CS': 3}\n",
    "INTERSECTION_MAP = {'midblock': 0, 'T': 1, 'T-left': 2, 'T-right': 3, 'four-way': 4}\n",
    "AGE_MAP = {'child': 0, 'young': 1, 'adult': 2, 'senior': 3}\n",
    "GENDER_MAP = {'n/a': 0, 'female': 1, 'male': 2}\n",
    "TRAFFIC_DIR_MAP = {'OW': 0, 'TW': 1}\n",
    "\n",
    "# --- Output Files (for intermediate balanced data/scalers) ---\n",
    "BALANCED_DATA_PKL_PATH = \"/kaggle/working/balanced_train_data_with_yolop.pkl\"\n",
    "SCALERS_PKL_PATH = \"/kaggle/working/scalers.pkl\"\n",
    "\n",
    "# --- Helper: One-Hot Encoding ---\n",
    "def to_one_hot(index, num_classes):\n",
    "    vec = np.zeros(num_classes, dtype=np.float32)\n",
    "    safe_index = int(np.clip(index, 0, num_classes - 1))\n",
    "    vec[safe_index] = 1.0\n",
    "    return vec\n",
    "\n",
    "# --- Balancing Function ---\n",
    "def balance_samples_count(seq_data, label_type, random_seed=42):\n",
    "    print('---------------------------------------------------------')\n",
    "    print(f\"Balancing samples based on '{label_type}' key\")\n",
    "    if label_type not in seq_data: raise KeyError(f\"Label type '{label_type}' not found.\")\n",
    "\n",
    "    gt_labels = [] # Initialize before try block\n",
    "    try:\n",
    "        gt_labels = [lbl[0] for lbl in seq_data[label_type]]\n",
    "    except (IndexError, TypeError) as e:\n",
    "        raise ValueError(f\"Labels under '{label_type}' not in expected format [[label_val]]. Original error: {e}\") from e\n",
    "\n",
    "    if not gt_labels: # Check if gt_labels was successfully populated\n",
    "        print(f\"Warning: No valid labels found under key '{label_type}'. Cannot balance.\")\n",
    "        return seq_data.copy() # Return original data if labels are missing/malformed\n",
    "\n",
    "    if not all(isinstance(l, (int, float)) and l in [0, 1] for l in gt_labels):\n",
    "        print(f\"Warning: Labels for balancing contain values other than 0 or 1 or are not numeric.\")\n",
    "        # Decide how to handle non 0/1 labels if necessary, here we proceed assuming they exist\n",
    "\n",
    "    num_pos_samples = np.count_nonzero(np.array(gt_labels)); num_neg_samples = len(gt_labels) - num_pos_samples\n",
    "    new_seq_data = {}\n",
    "    if num_neg_samples == num_pos_samples:\n",
    "        print('Samples already balanced.'); return seq_data.copy()\n",
    "    else:\n",
    "        print(f'Unbalanced: Positive (1): {num_pos_samples} | Negative (0): {num_neg_samples}')\n",
    "        majority_label = 0 if num_neg_samples > num_pos_samples else 1\n",
    "        minority_count = min(num_neg_samples, num_pos_samples); print(f\"Undersampling majority class ({majority_label}) to match count ({minority_count}).\")\n",
    "        majority_indices = np.where(np.array(gt_labels) == majority_label)[0]; minority_indices = np.where(np.array(gt_labels) != majority_label)[0]\n",
    "        np.random.seed(random_seed); keep_majority_indices = np.random.choice(majority_indices, size=minority_count, replace=False)\n",
    "        final_indices = np.concatenate((minority_indices, keep_majority_indices)); np.random.shuffle(final_indices)\n",
    "\n",
    "        for k, v_list in seq_data.items():\n",
    "            if isinstance(v_list, list) and len(v_list) == len(gt_labels):\n",
    "                 try:\n",
    "                     # Check if list contains numpy arrays before converting the whole list\n",
    "                     if v_list and isinstance(v_list[0], np.ndarray):\n",
    "                         # Ensure all elements are arrays of compatible shape if needed,\n",
    "                         # or handle potential errors during conversion\n",
    "                         try:\n",
    "                             v_array = np.array(v_list) # This might fail if arrays have different shapes\n",
    "                             new_seq_data[k] = list(v_array[final_indices])\n",
    "                         except ValueError as ve:\n",
    "                             print(f\"Warning: Could not convert list for key '{k}' to single NumPy array due to varying shapes/types. Processing element-wise. Error: {ve}\")\n",
    "                             # Fallback to list comprehension if conversion fails\n",
    "                             new_seq_data[k] = [v_list[i] for i in final_indices]\n",
    "                     else:\n",
    "                         # Simple list comprehension for non-array lists\n",
    "                         new_seq_data[k] = [v_list[i] for i in final_indices]\n",
    "                 except Exception as e:\n",
    "                     # Catch any other unexpected errors during processing\n",
    "                     print(f\"Error processing key '{k}' during balancing: {e}. Assigning empty list.\")\n",
    "                     new_seq_data[k] = []\n",
    "            else:\n",
    "                 # Keep lists that don't match the label length (e.g., metadata)\n",
    "                 print(f\"Warn: Skipping key '{k}' in balancing (length mismatch or not a list).\")\n",
    "                 new_seq_data[k] = v_list # Keep original\n",
    "\n",
    "        if label_type in new_seq_data:\n",
    "            # Recalculate counts from the balanced data\n",
    "            new_gt_labels = []\n",
    "            try:\n",
    "                new_gt_labels = [lbl[0] for lbl in new_seq_data[label_type]]\n",
    "                final_pos = np.count_nonzero(np.array(new_gt_labels)); final_neg = len(new_gt_labels) - final_pos;\n",
    "                print(f'Balanced:   Positive (1): {final_pos} | Negative (0): {final_neg}')\n",
    "            except (IndexError, TypeError, ValueError) as e:\n",
    "                 print(f\"Error verifying balanced labels for key '{label_type}': {e}\")\n",
    "        else:\n",
    "            print(\"Error: Label key lost during balancing process.\")\n",
    "        print('---------------------------------------------------------')\n",
    "        return new_seq_data\n",
    "\n",
    "# --- Dataset Class ---\n",
    "class PIEDataset(Dataset):\n",
    "    def __init__(self, pie_database, set_names, pose_data_dir, yolop_data_dir, seq_len, pred_len, scalers=None, streams_to_generate=None):\n",
    "        self.pie_db = pie_database; self.set_names = set_names; self.pose_data_dir = pose_data_dir; self.yolop_data_dir = yolop_data_dir\n",
    "        self.seq_len = seq_len; self.pred_len = pred_len; self.scalers = scalers or {};\n",
    "        self.streams_to_generate = streams_to_generate or ALL_POSSIBLE_STREAMS\n",
    "        self.sequences = []; self.all_pose_data = {}; self.all_yolop_data = {}\n",
    "        self._input_sizes_for_error = self._get_input_sizes_dict()\n",
    "        if 'pose' in self.streams_to_generate: self._load_pose_data()\n",
    "        if 'yolop' in self.streams_to_generate: self._load_yolop_data()\n",
    "        self._generate_sequence_list()\n",
    "        if not self.sequences: raise ValueError(f\"Dataset init failed: No sequences generated for sets {self.set_names}\")\n",
    "\n",
    "    def _get_input_sizes_dict(self):\n",
    "        input_sizes = {}; special_cases = {'TRAFFIC_LIGHT': 'TL_STATE', 'STATIC_CONTEXT': 'STATIC', 'EGO_SPEED': 'EGO_SPEED', 'EGO_ACC': 'EGO_ACC', 'EGO_GYRO': 'EGO_GYRO', 'PED_ACTION': 'PED_ACTION', 'PED_LOOK': 'PED_LOOK', 'PED_OCCLUSION': 'PED_OCC', 'YOLOP':'YOLOP'}\n",
    "        for stream in ALL_POSSIBLE_STREAMS:\n",
    "            size_constant_name = f'INPUT_SIZE_{stream.upper()}'; stream_upper_key = stream.upper(); suffix = special_cases.get(stream_upper_key)\n",
    "            if suffix: size_constant_name = f'INPUT_SIZE_{suffix}'\n",
    "            elif stream == 'bbox': size_constant_name = 'INPUT_SIZE_BBOX'\n",
    "            elif stream == 'pose': size_constant_name = 'INPUT_SIZE_POSE'\n",
    "            if size_constant_name in globals(): input_sizes[stream] = globals()[size_constant_name]\n",
    "            else: input_sizes[stream] = 1 # Default size if constant not found\n",
    "        return input_sizes\n",
    "\n",
    "    def _load_pose_data(self):\n",
    "        print(f\"\\nLoading pose data for sets: {self.set_names} from {self.pose_data_dir}\"); sets_loaded_count = 0\n",
    "        for set_id in self.set_names:\n",
    "            self.all_pose_data[set_id] = {}; pose_set_path = os.path.join(self.pose_data_dir, set_id)\n",
    "            if not os.path.isdir(pose_set_path):\n",
    "                # print(f\"Warning: Pose directory not found for set {set_id}: {pose_set_path}\") # Optional warning\n",
    "                continue\n",
    "            pkl_files_in_set = [f for f in os.listdir(pose_set_path) if f.startswith(f\"{set_id}_\") and f.endswith(\"_poses.pkl\")];\n",
    "            if not pkl_files_in_set:\n",
    "                # print(f\"Warning: No pose pkl files found in {pose_set_path}\") # Optional warning\n",
    "                continue;\n",
    "            loaded_video_count = 0\n",
    "            for pkl_filename in pkl_files_in_set:\n",
    "                pkl_file_path = os.path.join(pose_set_path, pkl_filename);\n",
    "                try:\n",
    "                    with open(pkl_file_path, 'rb') as f: loaded_pkl_content = pickle.load(f)\n",
    "                    if not isinstance(loaded_pkl_content, dict) or len(loaded_pkl_content) != 1:\n",
    "                         print(f\"Warning: Unexpected format in pose PKL {pkl_file_path}. Skipping.\")\n",
    "                         continue\n",
    "                    unique_video_key, video_data = list(loaded_pkl_content.items())[0]; video_id = \"_\".join(unique_video_key.split('_')[1:])\n",
    "                    # Check if this video is actually in our PIE database for this set\n",
    "                    if set_id in self.pie_db and video_id in self.pie_db[set_id]:\n",
    "                         self.all_pose_data[set_id][video_id] = video_data; loaded_video_count += 1\n",
    "                    # else: # Optional: Warn if pose data exists but video isn't in DB\n",
    "                    #    print(f\"Debug: Pose data found for {set_id}/{video_id} but video not in main pie_db. Skipping.\")\n",
    "                except FileNotFoundError:\n",
    "                    # This specific error is less likely now due to os.listdir, but keep for robustness\n",
    "                    print(f\"Warning: Pose file not found during loading (should not happen after listdir): {pkl_file_path}\")\n",
    "                except pickle.UnpicklingError as pe:\n",
    "                     print(f\"Error unpickling pose file {pkl_file_path}: {pe}. Skipping.\")\n",
    "                except Exception as e:\n",
    "                     print(f\"Error loading or processing pose PKL {pkl_file_path}: {e}\")\n",
    "            if loaded_video_count > 0: sets_loaded_count += 1\n",
    "        print(f\"Finished loading pose data for {sets_loaded_count} relevant sets.\")\n",
    "\n",
    "    def _load_yolop_data(self):\n",
    "        print(f\"\\nLoading YOLOP data for sets: {self.set_names} from {self.yolop_data_dir}\"); sets_loaded_count = 0\n",
    "        for set_id in self.set_names: self.all_yolop_data[set_id] = {} # Initialize dict for each set\n",
    "\n",
    "        if not os.path.isdir(self.yolop_data_dir):\n",
    "            print(f\"Error: YOLOP feature directory not found: {self.yolop_data_dir}\"); return\n",
    "\n",
    "        all_pkl_files = [] # Initialize before try block\n",
    "        try:\n",
    "            all_pkl_files = [f for f in os.listdir(self.yolop_data_dir) if f.endswith(\"_yolop_features.pkl\")]\n",
    "        except FileNotFoundError: # More specific than general Exception\n",
    "             print(f\"Error: YOLOP feature directory not found when listing files: {self.yolop_data_dir}\"); return\n",
    "        except PermissionError:\n",
    "             print(f\"Error: Permission denied when listing files in YOLOP directory {self.yolop_data_dir}\"); return\n",
    "        except Exception as e:\n",
    "             print(f\"Error listing files in YOLOP directory {self.yolop_data_dir}: {e}\"); return\n",
    "\n",
    "        if not all_pkl_files: print(f\"Warning: No '*_yolop_features.pkl' files found directly in {self.yolop_data_dir}\")\n",
    "\n",
    "        loaded_file_count = 0; files_for_needed_sets = 0\n",
    "        for pkl_filename in tqdm(all_pkl_files, desc=\"Loading YOLOP PKLs\"):\n",
    "            set_id_from_file = None # Initialize before try\n",
    "            video_id = None # Initialize before try\n",
    "            try:\n",
    "                parts = pkl_filename.replace(\"_yolop_features.pkl\", \"\").split('_');\n",
    "                if len(parts) < 2: # Need at least setX_videoY\n",
    "                     raise IndexError(\"Filename does not contain enough parts for set and video ID.\")\n",
    "                set_id_from_file = parts[0]; video_id = \"_\".join(parts[1:])\n",
    "            except IndexError as e: # Catch specific error\n",
    "                print(f\"Warning: Could not parse set/video ID from filename '{pkl_filename}': {e}. Skipping.\"); continue\n",
    "\n",
    "            if set_id_from_file in self.set_names:\n",
    "                files_for_needed_sets += 1; pkl_file_path = os.path.join(self.yolop_data_dir, pkl_filename)\n",
    "                try:\n",
    "                    with open(pkl_file_path, 'rb') as f: loaded_pkl_content = pickle.load(f)\n",
    "                    # Basic validation of loaded content structure\n",
    "                    if not isinstance(loaded_pkl_content, dict) or len(loaded_pkl_content) != 1:\n",
    "                        print(f\"Warn: PKL {pkl_filename} has unexpected format (expected dict with 1 item). Skip.\"); continue\n",
    "                    unique_video_key, video_data = list(loaded_pkl_content.items())[0]\n",
    "                    # Key doesn't strictly need to match video_id if format is {internal_key: data}\n",
    "                    # Ensure the set_id exists in the outer dictionary\n",
    "                    if set_id_from_file not in self.all_yolop_data:\n",
    "                        self.all_yolop_data[set_id_from_file] = {}\n",
    "                    self.all_yolop_data[set_id_from_file][video_id] = video_data; loaded_file_count += 1\n",
    "                except FileNotFoundError:\n",
    "                    print(f\"Warn: YOLOP feature file not found during loading: {pkl_file_path}\")\n",
    "                except pickle.UnpicklingError as pe:\n",
    "                     print(f\"Error unpickling YOLOP file {pkl_file_path}: {pe}. Skipping.\")\n",
    "                except Exception as e:\n",
    "                    print(f\"Error loading or processing YOLOP PKL {pkl_file_path}: {e}\")\n",
    "\n",
    "        print(f\"Finished loading YOLOP data. Found {loaded_file_count} relevant files out of {files_for_needed_sets} possible for sets {self.set_names}.\")\n",
    "        if loaded_file_count > 0:\n",
    "            actual_sets_loaded = sum(1 for s in self.set_names if s in self.all_yolop_data and self.all_yolop_data[s])\n",
    "            print(f\"Data successfully loaded for {actual_sets_loaded} sets.\")\n",
    "\n",
    "    def _generate_sequence_list(self):\n",
    "        sequence_count = 0; ped_count = 0\n",
    "        for set_id in tqdm(self.set_names, desc=f\"Generating Sequences for {self.set_names}\"):\n",
    "            if set_id not in self.pie_db: continue\n",
    "            for video_id, video_data in self.pie_db[set_id].items():\n",
    "                if 'ped_annotations' not in video_data: continue\n",
    "                for ped_id, ped_data in video_data['ped_annotations'].items():\n",
    "                    ped_count += 1;\n",
    "                    if 'frames' not in ped_data or not isinstance(ped_data['frames'], list) or len(ped_data['frames']) < self.seq_len + self.pred_len: continue\n",
    "                    # Ensure frames are sorted and integers\n",
    "                    try:\n",
    "                        sorted_frames = sorted([int(f) for f in ped_data['frames']])\n",
    "                    except (ValueError, TypeError):\n",
    "                        print(f\"Warning: Non-integer or unsortable frame numbers for {set_id}/{video_id}/{ped_id}. Skipping ped.\")\n",
    "                        continue\n",
    "\n",
    "                    for i in range(len(sorted_frames) - self.seq_len - self.pred_len + 1):\n",
    "                        start_frame = sorted_frames[i]; end_frame_observe = sorted_frames[i + self.seq_len - 1]\n",
    "                        # Check for frame continuity in observation window\n",
    "                        if end_frame_observe - start_frame != self.seq_len - 1: continue\n",
    "\n",
    "                        target_frame_actual_idx = i + self.seq_len + self.pred_len - 1\n",
    "                        # Check index bounds (already implicitly handled by range end, but explicit check is fine)\n",
    "                        if target_frame_actual_idx >= len(sorted_frames): continue\n",
    "                        target_frame = sorted_frames[target_frame_actual_idx]\n",
    "\n",
    "                        # Check for frame continuity up to target frame\n",
    "                        if target_frame - end_frame_observe != self.pred_len: continue\n",
    "\n",
    "                        self.sequences.append((set_id, video_id, ped_id, start_frame)); sequence_count += 1\n",
    "        print(f\"Dataset initialized with {sequence_count} sequences from {ped_count} pedestrians for sets {self.set_names}.\")\n",
    "\n",
    "    def __len__(self): return len(self.sequences)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        set_id, video_id, ped_id, start_frame = self.sequences[idx];\n",
    "        frame_nums = list(range(start_frame, start_frame + self.seq_len));\n",
    "        target_frame_num = start_frame + self.seq_len + self.pred_len - 1\n",
    "\n",
    "        # Safely access nested dictionary structure\n",
    "        video_db = self.pie_db.get(set_id, {}).get(video_id, {});\n",
    "        ped_db = video_db.get('ped_annotations', {}).get(ped_id, {});\n",
    "        ego_db = video_db.get('vehicle_annotations', {});\n",
    "        traffic_db = video_db.get('traffic_annotations', {});\n",
    "        ped_attributes = ped_db.get('attributes', {})\n",
    "\n",
    "        feature_sequences = {stream: [] for stream in self.streams_to_generate};\n",
    "        label = 0 # Default label\n",
    "\n",
    "        # --- Safely Extract Label ---\n",
    "        target_frame_db_idx = -1 # Initialize before try\n",
    "        if 'frames' in ped_db and isinstance(ped_db['frames'], list) and \\\n",
    "           'behavior' in ped_db and isinstance(ped_db['behavior'], dict) and \\\n",
    "           'cross' in ped_db['behavior'] and isinstance(ped_db['behavior']['cross'], list):\n",
    "            try:\n",
    "                # Ensure target_frame_num is comparable to elements in ped_db['frames']\n",
    "                target_frame_num_comp = int(target_frame_num) # Or str if frames are strings\n",
    "                target_frame_db_idx = ped_db['frames'].index(target_frame_num_comp)\n",
    "                if target_frame_db_idx < len(ped_db['behavior']['cross']):\n",
    "                    label_val = ped_db['behavior']['cross'][target_frame_db_idx];\n",
    "                    # Handle potential non-integer labels or placeholder -1\n",
    "                    if isinstance(label_val, (int, float)) and label_val == 1:\n",
    "                        label = 1\n",
    "                    else:\n",
    "                        label = 0 # Treat -1 or other values as 0 (not crossing)\n",
    "                # else: label remains 0 if index out of bounds for 'cross' list\n",
    "            except (ValueError, TypeError, IndexError) as e:\n",
    "                 # ValueError if target_frame_num not in list\n",
    "                 # TypeError if list contains non-comparable types\n",
    "                 # IndexError if list is empty or other issues (less likely here)\n",
    "                 # print(f\"Debug: Label not found for idx {idx}, frame {target_frame_num}. Error: {e}\") # Optional debug\n",
    "                 label = 0 # Keep default label if lookup fails\n",
    "\n",
    "        # --- Extract Static Context ---\n",
    "        static_vec = None # Initialize before conditional block\n",
    "        if 'static_context' in self.streams_to_generate:\n",
    "            # Use .get with defaults for safety\n",
    "            sig_idx = SIGNALIZED_MAP.get(ped_attributes.get('signalized', 'n/a'), 0)\n",
    "            int_idx = INTERSECTION_MAP.get(ped_attributes.get('intersection', 'midblock'), 0)\n",
    "            age_idx = AGE_MAP.get(ped_attributes.get('age', 'adult'), 2)\n",
    "            gen_idx = GENDER_MAP.get(ped_attributes.get('gender', 'n/a'), 0)\n",
    "            td_val = ped_attributes.get('traffic_direction', 'OW')\n",
    "            td_idx = TRAFFIC_DIR_MAP.get(td_val, 0)\n",
    "            nl_val = ped_attributes.get('num_lanes', 2)\n",
    "            # Ensure nl_val is usable as a key or default\n",
    "            nl_cat_idx = LANE_CATEGORIES.get(int(nl_val), LANE_CATEGORIES[max(LANE_CATEGORIES.keys())]) if isinstance(nl_val, (int, str)) and str(nl_val).isdigit() else LANE_CATEGORIES[max(LANE_CATEGORIES.keys())]\n",
    "\n",
    "            try:\n",
    "                static_features_list = [\n",
    "                    to_one_hot(sig_idx, NUM_SIGNALIZED_CATS), to_one_hot(int_idx, NUM_INTERSECTION_CATS),\n",
    "                    to_one_hot(age_idx, NUM_AGE_CATS), to_one_hot(gen_idx, NUM_GENDER_CATS),\n",
    "                    to_one_hot(td_idx, NUM_TRAFFIC_DIR_CATS), to_one_hot(nl_cat_idx, NUM_LANE_CATS)\n",
    "                ]\n",
    "                static_vec = np.concatenate(static_features_list)\n",
    "                if static_vec.shape[0] != INPUT_SIZE_STATIC:\n",
    "                    print(f\"Warning: Static vector size mismatch for idx {idx}. Expected {INPUT_SIZE_STATIC}, got {static_vec.shape[0]}. Using zeros.\")\n",
    "                    static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "            except Exception as e:\n",
    "                 print(f\"Error creating static context vector for idx {idx}: {e}. Using zeros.\")\n",
    "                 static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "\n",
    "\n",
    "        # --- Extract Sequential Features ---\n",
    "        for frame_num in frame_nums:\n",
    "            frame_db_idx = -1 # Default index if frame not found for ped\n",
    "            if 'frames' in ped_db and isinstance(ped_db['frames'], list):\n",
    "                 try:\n",
    "                     frame_num_comp = int(frame_num) # Or str if frames are strings\n",
    "                     frame_db_idx = ped_db['frames'].index(frame_num_comp)\n",
    "                 except (ValueError, TypeError):\n",
    "                     pass # Keep frame_db_idx as -1 if frame not found or type mismatch\n",
    "\n",
    "            ego_frame_data = ego_db.get(frame_num, {}) # Use .get for safety\n",
    "\n",
    "            # --- Bbox ---\n",
    "            if 'bbox' in self.streams_to_generate:\n",
    "                bbox_norm = np.zeros(INPUT_SIZE_BBOX, dtype=np.float32); # Default\n",
    "                if frame_db_idx != -1 and 'bbox' in ped_db and isinstance(ped_db['bbox'], list) and len(ped_db['bbox']) > frame_db_idx:\n",
    "                     try:\n",
    "                         bbox_coords = ped_db['bbox'][frame_db_idx]\n",
    "                         # Check if bbox_coords is a valid list/tuple of 4 numbers\n",
    "                         if isinstance(bbox_coords, (list, tuple)) and len(bbox_coords) == 4 and all(isinstance(n, (int, float)) for n in bbox_coords):\n",
    "                             x1, y1, x2, y2 = bbox_coords\n",
    "                             img_w = video_db.get('width', 1920); img_h = video_db.get('height', 1080)\n",
    "                             # Ensure width/height are valid numbers > 0\n",
    "                             if isinstance(img_w, (int, float)) and img_w > 0 and isinstance(img_h, (int, float)) and img_h > 0:\n",
    "                                 cx = ((x1 + x2) / 2) / img_w; cy = ((y1 + y2) / 2) / img_h;\n",
    "                                 w = (x2 - x1) / img_w; h = (y2 - y1) / img_h;\n",
    "                                 # Basic validation of normalized coordinates\n",
    "                                 if w>0 and h>0 and 0<=cx<=1 and 0<=cy<=1:\n",
    "                                     bbox_norm = np.array([cx, cy, w, h], dtype=np.float32)\n",
    "                                 # else: print(f\"Debug: Invalid normalized bbox values idx {idx} frame {frame_num}\") # Optional debug\n",
    "                         # else: print(f\"Debug: Invalid bbox data format idx {idx} frame {frame_num}\") # Optional debug\n",
    "                     except (TypeError, ValueError, ZeroDivisionError) as e: # Catch specific errors\n",
    "                          # TypeError if coords are not numbers, ValueError if unpacking fails (less likely with check)\n",
    "                          # ZeroDivisionError if img_w/h is 0\n",
    "                          print(f\"Warn: Error processing bbox idx {idx} frame {frame_num}: {e}. Using zeros.\")\n",
    "                          bbox_norm = np.zeros(INPUT_SIZE_BBOX, dtype=np.float32) # Ensure default on error\n",
    "                     except Exception as e: # Catch any other unexpected error\n",
    "                          print(f\"Warn: Unexpected error processing bbox idx {idx} frame {frame_num}: {e}. Using zeros.\")\n",
    "                          bbox_norm = np.zeros(INPUT_SIZE_BBOX, dtype=np.float32)\n",
    "                feature_sequences['bbox'].append(bbox_norm)\n",
    "\n",
    "            # --- Pose ---\n",
    "            if 'pose' in self.streams_to_generate:\n",
    "                pose_vector = np.zeros(INPUT_SIZE_POSE, dtype=np.float32); # Default\n",
    "                # Safely access nested pose data structure\n",
    "                vid_pose_data = self.all_pose_data.get(set_id, {}).get(video_id, {});\n",
    "                frame_pose_data = vid_pose_data.get(frame_num, {});\n",
    "                loaded_pose = frame_pose_data.get(ped_id)\n",
    "                if loaded_pose is not None and isinstance(loaded_pose, np.ndarray) and loaded_pose.shape == (INPUT_SIZE_POSE,):\n",
    "                    pose_vector = loaded_pose # Use loaded data if valid\n",
    "                feature_sequences['pose'].append(pose_vector)\n",
    "\n",
    "            # --- Ego Speed ---\n",
    "            if 'ego_speed' in self.streams_to_generate:\n",
    "                speed = 0.0 # Default\n",
    "                try:\n",
    "                    obd_speed = ego_frame_data.get('OBD_speed')\n",
    "                    gps_speed = ego_frame_data.get('GPS_speed')\n",
    "                    # Prioritize OBD, fallback to GPS, ensure numeric\n",
    "                    if isinstance(obd_speed, (int, float)) and obd_speed > 0: # Often 0 means unavailable\n",
    "                        speed = float(obd_speed)\n",
    "                    elif isinstance(gps_speed, (int, float)):\n",
    "                        speed = float(gps_speed)\n",
    "                    # Apply scaling safely\n",
    "                    mean = self.scalers.get('ego_speed_mean', 0.0)\n",
    "                    std = self.scalers.get('ego_speed_std', 1.0)\n",
    "                    speed_scaled = (speed - mean) / std if std != 0 else 0.0\n",
    "                except Exception as e:\n",
    "                     print(f\"Warn: Error processing ego_speed idx {idx} frame {frame_num}: {e}. Using 0.\")\n",
    "                     speed_scaled = 0.0\n",
    "                feature_sequences['ego_speed'].append([speed_scaled])\n",
    "\n",
    "            # --- Ego Acc ---\n",
    "            if 'ego_acc' in self.streams_to_generate:\n",
    "                accX_scaled, accY_scaled = 0.0, 0.0 # Defaults\n",
    "                try:\n",
    "                    accX = float(ego_frame_data.get('accX', 0.0)) # Ensure float\n",
    "                    accY = float(ego_frame_data.get('accY', 0.0)) # Ensure float\n",
    "                    accX_mean = self.scalers.get('accX_mean', 0.0); accX_std = self.scalers.get('accX_std', 1.0)\n",
    "                    accY_mean = self.scalers.get('accY_mean', 0.0); accY_std = self.scalers.get('accY_std', 1.0)\n",
    "                    accX_scaled = (accX - accX_mean) / accX_std if accX_std != 0 else 0.0\n",
    "                    accY_scaled = (accY - accY_mean) / accY_std if accY_std != 0 else 0.0\n",
    "                except Exception as e:\n",
    "                    print(f\"Warn: Error processing ego_acc idx {idx} frame {frame_num}: {e}. Using 0,0.\")\n",
    "                    accX_scaled, accY_scaled = 0.0, 0.0\n",
    "                feature_sequences['ego_acc'].append([accX_scaled, accY_scaled])\n",
    "\n",
    "            # --- Ego Gyro ---\n",
    "            if 'ego_gyro' in self.streams_to_generate:\n",
    "                gyroZ_scaled = 0.0 # Default\n",
    "                try:\n",
    "                    gyroZ = float(ego_frame_data.get('gyroZ', 0.0)) # Ensure float\n",
    "                    mean = self.scalers.get('gyroZ_mean', 0.0); std = self.scalers.get('gyroZ_std', 1.0)\n",
    "                    gyroZ_scaled = (gyroZ - mean) / std if std != 0 else 0.0\n",
    "                except Exception as e:\n",
    "                     print(f\"Warn: Error processing ego_gyro idx {idx} frame {frame_num}: {e}. Using 0.\")\n",
    "                     gyroZ_scaled = 0.0\n",
    "                feature_sequences['ego_gyro'].append([gyroZ_scaled])\n",
    "\n",
    "            # --- Ped Action ---\n",
    "            if 'ped_action' in self.streams_to_generate:\n",
    "                action = 0.0 # Default\n",
    "                if frame_db_idx != -1 and 'behavior' in ped_db and isinstance(ped_db['behavior'], dict) and \\\n",
    "                   'action' in ped_db['behavior'] and isinstance(ped_db['behavior']['action'], list) and \\\n",
    "                   len(ped_db['behavior']['action']) > frame_db_idx:\n",
    "                   try:\n",
    "                       action_val = ped_db['behavior']['action'][frame_db_idx]\n",
    "                       action = float(action_val) # Convert to float, handle potential errors\n",
    "                   except (ValueError, TypeError) as e:\n",
    "                       print(f\"Warn: Invalid ped_action value idx {idx} frame {frame_num}: {action_val}. Error: {e}. Using 0.\")\n",
    "                       action = 0.0\n",
    "                feature_sequences['ped_action'].append([action])\n",
    "\n",
    "            # --- Ped Look ---\n",
    "            if 'ped_look' in self.streams_to_generate:\n",
    "                look = 0.0 # Default\n",
    "                if frame_db_idx != -1 and 'behavior' in ped_db and isinstance(ped_db['behavior'], dict) and \\\n",
    "                   'look' in ped_db['behavior'] and isinstance(ped_db['behavior']['look'], list) and \\\n",
    "                   len(ped_db['behavior']['look']) > frame_db_idx:\n",
    "                   try:\n",
    "                       look_val = ped_db['behavior']['look'][frame_db_idx]\n",
    "                       look = float(look_val) # Convert to float\n",
    "                   except (ValueError, TypeError) as e:\n",
    "                       print(f\"Warn: Invalid ped_look value idx {idx} frame {frame_num}: {look_val}. Error: {e}. Using 0.\")\n",
    "                       look = 0.0\n",
    "                feature_sequences['ped_look'].append([look])\n",
    "\n",
    "            # --- Ped Occlusion ---\n",
    "            if 'ped_occlusion' in self.streams_to_generate:\n",
    "                occ = 0.0; # Default (no occlusion)\n",
    "                if frame_db_idx != -1 and 'occlusion' in ped_db and isinstance(ped_db['occlusion'], list) and \\\n",
    "                   len(ped_db['occlusion']) > frame_db_idx:\n",
    "                   try:\n",
    "                       occ_val = ped_db['occlusion'][frame_db_idx];\n",
    "                       # Assuming occlusion is 0, 1, 2 -> map to 0.0, 0.5, 1.0\n",
    "                       occ = float(occ_val) / 2.0 if isinstance(occ_val, (int, float)) else 0.0\n",
    "                   except (ValueError, TypeError) as e:\n",
    "                        print(f\"Warn: Invalid ped_occlusion value idx {idx} frame {frame_num}: {occ_val}. Error: {e}. Using 0.\")\n",
    "                        occ = 0.0\n",
    "                feature_sequences['ped_occlusion'].append([occ])\n",
    "\n",
    "            # --- Traffic Light ---\n",
    "            if 'traffic_light' in self.streams_to_generate:\n",
    "                state_int = 0 # Default state (__undefined__)\n",
    "                if isinstance(traffic_db, dict): # Check traffic_db is a dict\n",
    "                    for obj_id, obj_data in traffic_db.items():\n",
    "                         if isinstance(obj_data, dict) and obj_data.get('obj_class') == 'traffic_light' and \\\n",
    "                            'frames' in obj_data and isinstance(obj_data['frames'], list) and \\\n",
    "                            'state' in obj_data and isinstance(obj_data['state'], list):\n",
    "                              try:\n",
    "                                  frame_num_comp = int(frame_num) # Ensure comparable type\n",
    "                                  tl_frame_idx = obj_data['frames'].index(frame_num_comp);\n",
    "                                  if tl_frame_idx < len(obj_data['state']):\n",
    "                                      state_val = obj_data['state'][tl_frame_idx];\n",
    "                                      # Use the state if it's defined (non-zero)\n",
    "                                      if state_val in TL_STATE_MAP and state_val != 0:\n",
    "                                          state_int = TL_STATE_MAP[state_val] if isinstance(state_val, str) else int(state_val) # Handle both str/int keys if needed\n",
    "                                          break # Found relevant TL state for this frame\n",
    "                              except (ValueError, TypeError, IndexError):\n",
    "                                  continue # Frame not found for this TL or other error, check next TL\n",
    "                feature_sequences['traffic_light'].append(to_one_hot(state_int, NUM_TL_STATES))\n",
    "\n",
    "            # --- Static Context (Append per frame) ---\n",
    "            if 'static_context' in self.streams_to_generate:\n",
    "                # Use the static_vec calculated once outside the loop\n",
    "                feature_sequences['static_context'].append(static_vec if static_vec is not None else np.zeros(INPUT_SIZE_STATIC, dtype=np.float32))\n",
    "\n",
    "            # --- YOLOP Feature Extraction Logic ---\n",
    "            if 'yolop' in self.streams_to_generate:\n",
    "                yolop_vector = np.zeros(INPUT_SIZE_YOLOP, dtype=np.float32) # Default zeros\n",
    "                # Safely access nested yolop data\n",
    "                if set_id in self.all_yolop_data and video_id in self.all_yolop_data[set_id]:\n",
    "                    frame_yolop_data = self.all_yolop_data[set_id][video_id].get(frame_num, {})\n",
    "                    loaded_yolop = frame_yolop_data.get(ped_id)\n",
    "                    # Validate loaded data\n",
    "                    if loaded_yolop is not None and isinstance(loaded_yolop, np.ndarray) and loaded_yolop.shape == (INPUT_SIZE_YOLOP,):\n",
    "                        yolop_vector = loaded_yolop\n",
    "                feature_sequences['yolop'].append(yolop_vector)\n",
    "\n",
    "        # --- Convert sequences to Tensors ---\n",
    "        features = {};\n",
    "        try:\n",
    "            for stream_name in self.streams_to_generate:\n",
    "                 if stream_name in feature_sequences:\n",
    "                      # Convert list of numpy arrays/scalars to a single numpy array before tensor conversion\n",
    "                      np_array_feature = np.array(feature_sequences[stream_name], dtype=np.float32)\n",
    "                      # Check shape consistency (optional but good)\n",
    "                      expected_shape = (self.seq_len, self._input_sizes_for_error.get(stream_name, 1))\n",
    "                      if np_array_feature.shape != expected_shape:\n",
    "                           # Handle shape mismatch: print warning, pad/truncate, or raise error\n",
    "                           # Here, we'll print a warning and try to use it anyway if the first dim matches\n",
    "                           print(f\"Warning: Feature shape mismatch for '{stream_name}' idx {idx}. Expected {expected_shape}, got {np_array_feature.shape}. Trying to proceed.\")\n",
    "                           if np_array_feature.shape[0] != self.seq_len:\n",
    "                               # If sequence length is wrong, this is critical, create zeros\n",
    "                               print(f\"Error: Critical shape mismatch (sequence length) for '{stream_name}' idx {idx}. Using zeros.\")\n",
    "                               features[stream_name] = torch.zeros(expected_shape, dtype=torch.float32)\n",
    "                           else:\n",
    "                               # If only feature dim mismatches, maybe adaptable? Or force zeros?\n",
    "                               print(f\"Warning: Feature dimension mismatch for '{stream_name}' idx {idx}. Using zeros.\")\n",
    "                               features[stream_name] = torch.zeros(expected_shape, dtype=torch.float32)\n",
    "                               # Or try reshaping if possible? features[stream_name] = torch.tensor(np_array_feature.reshape(expected_shape), dtype=torch.float32)\n",
    "                      else:\n",
    "                           features[stream_name] = torch.tensor(np_array_feature, dtype=torch.float32)\n",
    "                 else:\n",
    "                      # This case should not happen if initialized correctly, but handle defensively\n",
    "                      print(f\"Warning: Stream '{stream_name}' requested but not found in feature_sequences for idx {idx}. Adding zeros.\")\n",
    "                      expected_shape = (self.seq_len, self._input_sizes_for_error.get(stream_name, 1))\n",
    "                      features[stream_name] = torch.zeros(expected_shape, dtype=torch.float32)\n",
    "\n",
    "        except (ValueError, TypeError) as e: # Catch specific numpy/tensor conversion errors\n",
    "             print(f\"Error converting features to tensor for idx {idx}: {e}. Returning dummy zeros.\")\n",
    "             # Ensure dummy features have correct shapes based on _input_sizes_for_error\n",
    "             features = { name: torch.zeros((self.seq_len, self._input_sizes_for_error.get(name, 1)), dtype=torch.float32)\n",
    "                          for name in self.streams_to_generate }\n",
    "             label = 0 # Return default label with dummy features\n",
    "\n",
    "        return features, torch.tensor(label, dtype=torch.long)\n",
    "\n",
    "\n",
    "# --- Wrapper Dataset for Balanced Data ---\n",
    "class BalancedDataset(Dataset):\n",
    "    def __init__(self, data_dict, active_streams, label_key='label'):\n",
    "        self.active_streams = active_streams\n",
    "        self.label_key = label_key\n",
    "        if self.label_key not in data_dict or not data_dict[self.label_key]:\n",
    "             raise ValueError(f\"Label key '{self.label_key}' missing or empty in provided data_dict.\")\n",
    "\n",
    "        self.num_samples = len(data_dict[self.label_key])\n",
    "        if self.num_samples == 0:\n",
    "            print(\"Warning: BalancedDataset initialized with zero samples.\")\n",
    "            # Initialize features/labels as empty tensors to avoid errors later if len=0\n",
    "            self.features = {stream: torch.empty(0) for stream in self.active_streams}\n",
    "            self.labels = torch.empty(0, dtype=torch.long)\n",
    "            return # Exit early if no samples\n",
    "\n",
    "        self.features = {}\n",
    "        for stream in self.active_streams:\n",
    "             if stream in data_dict and data_dict[stream] is not None: # Check stream exists and is not None\n",
    "                 try:\n",
    "                     # Convert list of numpy arrays (expected from balancing) to a single tensor\n",
    "                     stream_data_np = np.array(data_dict[stream])\n",
    "                     self.features[stream] = torch.tensor(stream_data_np, dtype=torch.float32)\n",
    "                 except ValueError as e:\n",
    "                      # Handle cases where np.array fails (e.g., inconsistent shapes within the list)\n",
    "                      raise ValueError(f\"Error converting balanced data for stream '{stream}' to tensor. Inconsistent shapes? Error: {e}\") from e\n",
    "                 except TypeError as e:\n",
    "                     raise TypeError(f\"Error converting balanced data for stream '{stream}' to tensor. Invalid data types? Error: {e}\") from e\n",
    "                 except Exception as e: # Catch other unexpected errors\n",
    "                      raise RuntimeError(f\"Unexpected error creating tensor for balanced stream '{stream}': {e}\") from e\n",
    "\n",
    "                 # Check length consistency after successful tensor creation\n",
    "                 if len(self.features[stream]) != self.num_samples:\n",
    "                     raise ValueError(f\"Length mismatch after tensor creation: Stream '{stream}' ({len(self.features[stream])}) vs Labels ({self.num_samples})\")\n",
    "\n",
    "             else:\n",
    "                  # If an active stream is missing or None in the balanced data, it's an error\n",
    "                  raise KeyError(f\"Active stream '{stream}' requested but missing or None in the balanced data dictionary.\")\n",
    "\n",
    "        try:\n",
    "            # Ensure labels are correctly extracted (assuming list of lists like [[0], [1]])\n",
    "            self.labels = torch.tensor([lbl[0] for lbl in data_dict[self.label_key]], dtype=torch.long)\n",
    "            if len(self.labels) != self.num_samples:\n",
    "                 raise ValueError(f\"Length mismatch after label processing: Labels ({len(self.labels)}) vs Expected ({self.num_samples})\")\n",
    "        except (IndexError, TypeError) as e:\n",
    "             raise ValueError(f\"Error processing labels from balanced data. Expected list of single-element lists (e.g., [[0], [1]]). Error: {e}\") from e\n",
    "        except Exception as e:\n",
    "             raise RuntimeError(f\"Unexpected error creating label tensor from balanced data: {e}\") from e\n",
    "\n",
    "    def __len__(self):\n",
    "        return self.num_samples\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        if idx >= self.num_samples:\n",
    "             raise IndexError(\"Index out of bounds\")\n",
    "        # Return only features for streams active in this run\n",
    "        try:\n",
    "            feature_dict = {stream: self.features[stream][idx] for stream in self.active_streams if stream in self.features}\n",
    "        except KeyError as e:\n",
    "             raise KeyError(f\"Active stream '{e}' not found in self.features during __getitem__ for index {idx}. This should not happen if init was successful.\") from e\n",
    "        label = self.labels[idx]\n",
    "        return feature_dict, label\n",
    "\n",
    "\n",
    "# --- Model Architecture ---\n",
    "class Attention(nn.Module):\n",
    "    def __init__(self, hidden_dim, attention_dim):\n",
    "        super(Attention, self).__init__()\n",
    "        # Basic validation\n",
    "        if not isinstance(hidden_dim, int) or hidden_dim <= 0:\n",
    "            raise ValueError(\"hidden_dim must be a positive integer\")\n",
    "        if not isinstance(attention_dim, int) or attention_dim <= 0:\n",
    "            raise ValueError(\"attention_dim must be a positive integer\")\n",
    "\n",
    "        self.attention_net = nn.Sequential(\n",
    "            nn.Linear(hidden_dim, attention_dim),\n",
    "            nn.Tanh(),\n",
    "            nn.Linear(attention_dim, 1)\n",
    "        )\n",
    "\n",
    "    def forward(self, lstm_output):\n",
    "        # lstm_output shape: (batch, seq_len, hidden_dim * num_directions)\n",
    "        if lstm_output.ndim != 3:\n",
    "             raise ValueError(f\"Expected lstm_output to have 3 dimensions (batch, seq, hidden), got {lstm_output.ndim}\")\n",
    "        try:\n",
    "            att_scores = self.attention_net(lstm_output).squeeze(2) # (batch, seq_len)\n",
    "            if att_scores.shape[0] != lstm_output.shape[0] or att_scores.shape[1] != lstm_output.shape[1]:\n",
    "                 raise RuntimeError(\"Attention scores shape mismatch after squeeze.\")\n",
    "            att_weights = torch.softmax(att_scores, dim=1) # (batch, seq_len)\n",
    "            # Weighted sum: (batch, seq_len, hidden) * (batch, seq_len, 1) -> sum along seq_len dim\n",
    "            context_vector = torch.sum(lstm_output * att_weights.unsqueeze(2), dim=1) # (batch, hidden)\n",
    "        except Exception as e:\n",
    "             print(f\"Error during Attention forward pass: {e}\")\n",
    "             # Depending on desired robustness, could return zeros or re-raise\n",
    "             raise RuntimeError(\"Failed in Attention forward pass\") from e\n",
    "        return context_vector, att_weights\n",
    "\n",
    "class MultiStreamAdaptiveLSTM(nn.Module):\n",
    "    def __init__(self, input_sizes, lstm_hidden_size, num_lstm_layers, num_classes, attention_dim, dropout_rate, stream_names=['bbox', 'pose']):\n",
    "        super(MultiStreamAdaptiveLSTM, self).__init__()\n",
    "        if not stream_names:\n",
    "            raise ValueError(\"stream_names cannot be empty.\")\n",
    "        if not isinstance(input_sizes, dict):\n",
    "            raise TypeError(\"input_sizes must be a dictionary.\")\n",
    "        self.stream_names = stream_names\n",
    "        self.lstms = nn.ModuleDict()\n",
    "        self.attentions = nn.ModuleDict()\n",
    "        print(f\"Initializing model with streams: {self.stream_names}\")\n",
    "\n",
    "        num_active_streams = 0 # Count streams successfully added\n",
    "        for name in self.stream_names:\n",
    "            if name not in input_sizes:\n",
    "                # Option 1: Raise error if a requested stream is missing config\n",
    "                raise KeyError(f\"Input size for stream '{name}' not provided in input_sizes dictionary.\")\n",
    "                # Option 2: Warn and skip (might lead to downstream errors if logic expects it)\n",
    "                # print(f\"Warning: Input size for stream '{name}' not provided. Skipping this stream.\")\n",
    "                # continue\n",
    "\n",
    "            current_input_size = input_sizes[name]\n",
    "            if not isinstance(current_input_size, int) or current_input_size <= 0:\n",
    "                 raise ValueError(f\"Invalid input size ({current_input_size}) for stream '{name}'. Must be a positive integer.\")\n",
    "\n",
    "            print(f\"  - Adding stream '{name}' with input size {current_input_size}\")\n",
    "            try:\n",
    "                self.lstms[name] = nn.LSTM(\n",
    "                    current_input_size, lstm_hidden_size, num_lstm_layers,\n",
    "                    batch_first=True, dropout=dropout_rate if num_lstm_layers > 1 else 0,\n",
    "                    bidirectional=True # Assuming bidirectional based on Attention hidden_dim * 2\n",
    "                )\n",
    "                self.attentions[name] = Attention(lstm_hidden_size * 2 , attention_dim) # *2 for bidirectional\n",
    "                num_active_streams += 1\n",
    "            except Exception as e:\n",
    "                 print(f\"Error initializing LSTM/Attention for stream '{name}': {e}\")\n",
    "                 raise # Re-raise to stop model creation if a part fails\n",
    "\n",
    "        if num_active_streams == 0:\n",
    "             raise ValueError(\"No streams were successfully initialized in the model.\")\n",
    "\n",
    "        combined_feature_dim = lstm_hidden_size * 2 * num_active_streams # *2 for bidirectional\n",
    "        print(f\"  Combined feature dimension: {combined_feature_dim}\")\n",
    "\n",
    "        # Classifier layers\n",
    "        self.dropout = nn.Dropout(dropout_rate)\n",
    "        # Ensure intermediate_dim is reasonable\n",
    "        intermediate_dim = max(num_classes * 2, combined_feature_dim // 2, 16) # Added min size\n",
    "        self.fc1 = nn.Linear(combined_feature_dim, intermediate_dim)\n",
    "        self.relu = nn.ReLU()\n",
    "        self.fc2 = nn.Linear(intermediate_dim, num_classes)\n",
    "\n",
    "    def forward(self, x):\n",
    "        if not isinstance(x, dict):\n",
    "             raise TypeError(f\"Input 'x' must be a dictionary of stream tensors, got {type(x)}\")\n",
    "\n",
    "        stream_context_vectors = []\n",
    "        stream_att_weights = {} # Optional: if needed for analysis\n",
    "\n",
    "        processed_streams = 0\n",
    "        for name in self.stream_names: # Iterate through streams model was configured for\n",
    "            if name not in x:\n",
    "                # This indicates a problem upstream (DataLoader/Dataset didn't provide expected data)\n",
    "                raise KeyError(f\"Input dictionary 'x' is missing expected stream '{name}' during forward pass.\")\n",
    "                # Alternative (more robust, less strict): warn and skip\n",
    "                # print(f\"Warning: Stream '{name}' expected but not found in input batch. Skipping.\")\n",
    "                # continue\n",
    "\n",
    "            stream_input = x[name]\n",
    "            # Basic validation of input tensor for this stream\n",
    "            if not isinstance(stream_input, torch.Tensor):\n",
    "                 raise TypeError(f\"Input for stream '{name}' must be a torch.Tensor, got {type(stream_input)}\")\n",
    "            if stream_input.ndim != 3: # Expect (batch, seq_len, feature_dim)\n",
    "                 raise ValueError(f\"Input tensor for stream '{name}' has incorrect dimensions ({stream_input.ndim}). Expected 3 (batch, seq, feature).\")\n",
    "\n",
    "            try:\n",
    "                lstm_out, _ = self.lstms[name](stream_input) # (batch, seq_len, hidden*2)\n",
    "                context_vector, attention_weights = self.attentions[name](lstm_out) # (batch, hidden*2)\n",
    "                stream_context_vectors.append(context_vector)\n",
    "                # stream_att_weights[name] = attention_weights # Optional storage\n",
    "                processed_streams += 1\n",
    "            except Exception as e:\n",
    "                 print(f\"Error processing stream '{name}' in forward pass: {e}\")\n",
    "                 raise RuntimeError(f\"Failed during LSTM/Attention for stream '{name}'\") from e\n",
    "\n",
    "        # Check if any streams were actually processed (especially important if skipping was allowed)\n",
    "        if not stream_context_vectors:\n",
    "            raise RuntimeError(\"No stream outputs generated during forward pass. Input might be missing all expected streams.\")\n",
    "        if processed_streams != len(self.stream_names):\n",
    "             print(f\"Warning: Only processed {processed_streams}/{len(self.stream_names)} expected streams.\") # Should not happen if KeyErrors are raised\n",
    "\n",
    "        try:\n",
    "            fused_features = torch.cat(stream_context_vectors, dim=1) # Concatenate along feature dimension\n",
    "            # Check shape after concat: (batch, sum_of_context_vector_dims)\n",
    "            # Expected dim = num_active_streams * lstm_hidden_size * 2\n",
    "            expected_fused_dim = processed_streams * self.lstms[self.stream_names[0]].hidden_size * 2 # Get hidden size from one LSTM\n",
    "            if fused_features.shape[1] != expected_fused_dim:\n",
    "                 raise RuntimeError(f\"Fused feature dimension mismatch. Expected {expected_fused_dim}, got {fused_features.shape[1]}\")\n",
    "\n",
    "            # Pass through classifier\n",
    "            out = self.dropout(fused_features)\n",
    "            out = self.relu(self.fc1(out))\n",
    "            out = self.dropout(out)\n",
    "            logits = self.fc2(out)\n",
    "        except Exception as e:\n",
    "             print(f\"Error during final classification layers: {e}\")\n",
    "             raise RuntimeError(\"Failed in classifier part of forward pass\") from e\n",
    "\n",
    "        return logits\n",
    "\n",
    "# --- Training and Evaluation Functions ---\n",
    "def train_epoch(model, dataloader, optimizer, criterion, device):\n",
    "    model.train()\n",
    "    total_loss = 0.0\n",
    "    all_preds = []\n",
    "    all_labels = []\n",
    "    active_streams = model.stream_names # Get streams the model expects\n",
    "\n",
    "    batch_num = 0\n",
    "    for features, labels in tqdm(dataloader, desc=\"Training\", leave=False):\n",
    "        batch_num += 1\n",
    "        # Ensure features is a dict and move only expected streams to device\n",
    "        if not isinstance(features, dict):\n",
    "            print(f\"Error: Expected features to be a dict in batch {batch_num}, got {type(features)}. Skipping batch.\")\n",
    "            continue\n",
    "        input_features = {}\n",
    "        try:\n",
    "            for name in active_streams:\n",
    "                if name not in features:\n",
    "                    raise KeyError(f\"Required stream '{name}' missing from batch {batch_num}.\")\n",
    "                input_features[name] = features[name].to(device)\n",
    "            labels = labels.to(device)\n",
    "        except KeyError as e:\n",
    "            print(f\"Error preparing batch {batch_num}: {e}. Skipping.\")\n",
    "            continue\n",
    "        except Exception as e:\n",
    "            print(f\"Error moving batch {batch_num} to device {device}: {e}. Skipping.\")\n",
    "            continue\n",
    "\n",
    "        try:\n",
    "            optimizer.zero_grad()\n",
    "            outputs = model(input_features) # Shape: (batch_size, num_classes)\n",
    "            # Ensure labels have the correct shape for CrossEntropyLoss (batch_size)\n",
    "            if labels.ndim != 1:\n",
    "                 labels = labels.squeeze() # Attempt to fix if shape is (batch_size, 1)\n",
    "                 if labels.ndim != 1:\n",
    "                      raise ValueError(f\"Labels have incorrect shape {labels.shape} for CrossEntropyLoss in batch {batch_num}.\")\n",
    "\n",
    "            loss = criterion(outputs, labels)\n",
    "            loss.backward()\n",
    "            # Optional: Gradient clipping\n",
    "            # torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=1.0)\n",
    "            optimizer.step()\n",
    "\n",
    "            total_loss += loss.item()\n",
    "            with torch.no_grad(): # Ensure preds calculation doesn't track gradients\n",
    "                 preds = torch.argmax(outputs, dim=1)\n",
    "                 all_preds.extend(preds.cpu().numpy())\n",
    "                 all_labels.extend(labels.cpu().numpy())\n",
    "\n",
    "        except Exception as e:\n",
    "            print(f\"Error during training step for batch {batch_num}: {e}\")\n",
    "            # Decide whether to skip batch or re-raise\n",
    "            # Skipping might hide persistent issues\n",
    "            # raise e # Option: Stop training on error\n",
    "\n",
    "    avg_loss = total_loss / max(1, len(dataloader)) # Avoid division by zero if dataloader is empty\n",
    "    accuracy = 0.0\n",
    "    if all_labels: # Calculate accuracy only if some batches were processed\n",
    "       try:\n",
    "           accuracy = accuracy_score(all_labels, all_preds)\n",
    "       except ValueError as e:\n",
    "           print(f\"Error calculating training accuracy: {e}. Labels: {np.unique(all_labels)}, Preds: {np.unique(all_preds)}\")\n",
    "\n",
    "    return avg_loss, accuracy\n",
    "\n",
    "def evaluate_epoch(model, dataloader, criterion, device):\n",
    "    model.eval()\n",
    "    total_loss = 0.0\n",
    "    all_labels = []\n",
    "    all_preds = []\n",
    "    all_probs = []\n",
    "    active_streams = model.stream_names\n",
    "\n",
    "    batch_num = 0\n",
    "    with torch.no_grad():\n",
    "        for features, labels in tqdm(dataloader, desc=\"Evaluating\", leave=False):\n",
    "            batch_num += 1\n",
    "            if not isinstance(features, dict):\n",
    "                print(f\"Error: Expected features to be a dict in eval batch {batch_num}, got {type(features)}. Skipping.\")\n",
    "                continue\n",
    "            input_features = {}\n",
    "            try:\n",
    "                for name in active_streams:\n",
    "                    if name not in features:\n",
    "                        raise KeyError(f\"Required stream '{name}' missing from eval batch {batch_num}.\")\n",
    "                    input_features[name] = features[name].to(device)\n",
    "                labels = labels.to(device)\n",
    "            except KeyError as e:\n",
    "                print(f\"Error preparing eval batch {batch_num}: {e}. Skipping.\")\n",
    "                continue\n",
    "            except Exception as e:\n",
    "                print(f\"Error moving eval batch {batch_num} to device {device}: {e}. Skipping.\")\n",
    "                continue\n",
    "\n",
    "            try:\n",
    "                outputs = model(input_features)\n",
    "                # Ensure labels have the correct shape\n",
    "                if labels.ndim != 1:\n",
    "                     labels = labels.squeeze()\n",
    "                     if labels.ndim != 1:\n",
    "                          raise ValueError(f\"Labels have incorrect shape {labels.shape} for loss calculation in eval batch {batch_num}.\")\n",
    "\n",
    "                loss = criterion(outputs, labels)\n",
    "                total_loss += loss.item()\n",
    "\n",
    "                probs = torch.softmax(outputs, dim=1)\n",
    "                preds = torch.argmax(probs, dim=1)\n",
    "\n",
    "                all_labels.extend(labels.cpu().numpy())\n",
    "                all_preds.extend(preds.cpu().numpy())\n",
    "                all_probs.extend(probs.cpu().numpy()) # Store probabilities for AUC\n",
    "\n",
    "            except Exception as e:\n",
    "                 print(f\"Error during evaluation step for batch {batch_num}: {e}\")\n",
    "                 # Continue evaluation if one batch fails? Or stop?\n",
    "                 # continue\n",
    "\n",
    "    avg_loss = total_loss / max(1, len(dataloader))\n",
    "    # Initialize metrics with default values\n",
    "    accuracy, precision, recall, f1, auc = 0.0, 0.0, 0.0, 0.0, float('nan')\n",
    "\n",
    "    if not all_labels: # Check if any data was processed\n",
    "        print(\"Warning: No labels collected during evaluation. Returning zero/NaN metrics.\")\n",
    "        return {'loss': avg_loss, 'accuracy': accuracy, 'precision': precision, 'recall': recall, 'f1': f1, 'auc': auc}\n",
    "\n",
    "    try:\n",
    "        all_probs = np.array(all_probs)\n",
    "        all_labels = np.array(all_labels)\n",
    "        all_preds = np.array(all_preds)\n",
    "\n",
    "        accuracy = accuracy_score(all_labels, all_preds)\n",
    "        precision, recall, f1, _ = precision_recall_fscore_support(all_labels, all_preds, average='binary', pos_label=1, zero_division=0)\n",
    "\n",
    "        # Calculate AUC only if both classes are present in true labels\n",
    "        if len(np.unique(all_labels)) > 1:\n",
    "            # Ensure probabilities correspond to the positive class (class 1)\n",
    "            if all_probs.shape[1] == 2:\n",
    "                 auc = roc_auc_score(all_labels, all_probs[:, 1])\n",
    "            else:\n",
    "                 print(f\"Warning: Probability array has unexpected shape {all_probs.shape}. Cannot calculate AUC.\")\n",
    "                 auc = float('nan')\n",
    "        else:\n",
    "            print(\"Warning: Only one class present in ground truth labels during evaluation. AUC is not defined.\")\n",
    "            auc = float('nan') # AUC is not defined for single-class data\n",
    "\n",
    "    except ValueError as e:\n",
    "        print(f\"Error calculating evaluation metrics: {e}\")\n",
    "        # This might happen if shapes mismatch or other sklearn issues\n",
    "    except Exception as e:\n",
    "        print(f\"Unexpected error calculating evaluation metrics: {e}\")\n",
    "\n",
    "\n",
    "    return {'loss': avg_loss, 'accuracy': accuracy, 'precision': precision, 'recall': recall, 'f1': f1, 'auc': auc}\n",
    "\n",
    "def get_predictions_and_labels(model, dataloader, device):\n",
    "    model.eval()\n",
    "    all_labels = []\n",
    "    all_preds = []\n",
    "    active_streams = model.stream_names\n",
    "\n",
    "    batch_num = 0\n",
    "    with torch.no_grad():\n",
    "        for features, labels in tqdm(dataloader, desc=\"Generating CM Data\", leave=False):\n",
    "             batch_num += 1\n",
    "             if not isinstance(features, dict):\n",
    "                 print(f\"Error: Expected features to be a dict in CM batch {batch_num}, got {type(features)}. Skipping.\")\n",
    "                 continue\n",
    "             input_features = {}\n",
    "             try:\n",
    "                 for name in active_streams:\n",
    "                     if name not in features:\n",
    "                         raise KeyError(f\"Required stream '{name}' missing from CM batch {batch_num}.\")\n",
    "                     input_features[name] = features[name].to(device)\n",
    "                 labels = labels.to(device)\n",
    "             except KeyError as e:\n",
    "                 print(f\"Error preparing CM batch {batch_num}: {e}. Skipping.\")\n",
    "                 continue\n",
    "             except Exception as e:\n",
    "                 print(f\"Error moving CM batch {batch_num} to device {device}: {e}. Skipping.\")\n",
    "                 continue\n",
    "\n",
    "             try:\n",
    "                 outputs = model(input_features)\n",
    "                 preds = torch.argmax(outputs, dim=1)\n",
    "                 all_labels.extend(labels.cpu().numpy())\n",
    "                 all_preds.extend(preds.cpu().numpy())\n",
    "             except Exception as e:\n",
    "                  print(f\"Error during prediction for CM data batch {batch_num}: {e}\")\n",
    "                  # continue\n",
    "\n",
    "    return np.array(all_labels), np.array(all_preds)\n",
    "\n",
    "# --- Main Execution Block ---\n",
    "if __name__ == '__main__':\n",
    "\n",
    "    # --- Step 1: Data Preparation ---\n",
    "    run_data_prep = not (os.path.exists(BALANCED_DATA_PKL_PATH) and os.path.exists(SCALERS_PKL_PATH))\n",
    "\n",
    "    # Declare variables used in both branches before the conditional block\n",
    "    pie_database = None\n",
    "    scalers = {}\n",
    "    balanced_train_data_dict = None\n",
    "\n",
    "    if run_data_prep:\n",
    "        print(\"--- Running Data Preparation ---\")\n",
    "        # --- Generate/Load PIE Database ---\n",
    "        print(f\"Checking for PIE database cache at: {PIE_DATABASE_CACHE_PATH}\")\n",
    "        if not os.path.exists(PIE_DATABASE_CACHE_PATH):\n",
    "            if PIE is None: # Check if import failed earlier\n",
    "                 raise ImportError(\"PIE class could not be imported, and database cache does not exist. Cannot generate database.\")\n",
    "            print(\"PIE database cache not found. Generating...\");\n",
    "            try:\n",
    "                 # Assuming PIE class needs initialization parameters like data_path\n",
    "                 pie_dataset_interface = PIE(data_path=PIE_ROOT_PATH, regen_database=True) # Adjust params as needed\n",
    "                 pie_database = pie_dataset_interface.generate_database()\n",
    "                 if not pie_database: raise RuntimeError(\"PIE database generation returned empty.\")\n",
    "                 print(\"PIE database generated successfully.\")\n",
    "                 # Optional: Save the generated database\n",
    "                 # try:\n",
    "                 #     with open(PIE_DATABASE_CACHE_PATH.replace('.pkl', '_newly_generated.pkl'), 'wb') as f: # Save with different name\n",
    "                 #         pickle.dump(pie_database, f, pickle.HIGHEST_PROTOCOL)\n",
    "                 #     print(f\"Saved newly generated database.\")\n",
    "                 # except Exception as e:\n",
    "                 #     print(f\"Error saving newly generated PIE database: {e}\")\n",
    "\n",
    "            except Exception as e:\n",
    "                 raise RuntimeError(f\"Failed to initialize or run PIE database generation: {e}\") from e\n",
    "        else:\n",
    "            print(\"Loading PIE database from cache...\")\n",
    "            try:\n",
    "                with open(PIE_DATABASE_CACHE_PATH, 'rb') as f: pie_database = pickle.load(f)\n",
    "                print(\"PIE database loaded successfully.\")\n",
    "                if not isinstance(pie_database, dict) or not pie_database: # Basic validation\n",
    "                     raise ValueError(\"Loaded PIE database is not a valid dictionary or is empty.\")\n",
    "            except FileNotFoundError:\n",
    "                 raise FileNotFoundError(f\"PIE database cache file not found at {PIE_DATABASE_CACHE_PATH} despite os.path.exists being true initially.\")\n",
    "            except pickle.UnpicklingError as pe:\n",
    "                 raise RuntimeError(f\"Failed to unpickle PIE database from {PIE_DATABASE_CACHE_PATH}: {pe}\") from pe\n",
    "            except Exception as e:\n",
    "                 raise RuntimeError(f\"Failed to load PIE database from cache: {e}\") from e\n",
    "\n",
    "        if pie_database is None: # Should have been caught by exceptions, but double check\n",
    "             raise RuntimeError(\"PIE Database is None after generation/loading attempt.\")\n",
    "\n",
    "        # --- Calculate Standardization Parameters ---\n",
    "        print(\"\\nCalculating standardization parameters from training set...\")\n",
    "        all_train_ego_speeds = []; all_train_accX = []; all_train_accY = []; all_train_gyroZ = []\n",
    "        # Check if pie_database is a dictionary before iterating\n",
    "        if isinstance(pie_database, dict):\n",
    "            for set_id in TRAIN_SETS_STR:\n",
    "                 if set_id in pie_database and isinstance(pie_database[set_id], dict):\n",
    "                     for video_id, video_data in pie_database[set_id].items():\n",
    "                          if isinstance(video_data, dict) and 'vehicle_annotations' in video_data and isinstance(video_data['vehicle_annotations'], dict):\n",
    "                               for frame_num, ego_frame_data in video_data['vehicle_annotations'].items():\n",
    "                                   if isinstance(ego_frame_data, dict): # Check ego data is a dict\n",
    "                                        try: # Safely get and convert values\n",
    "                                             obd_speed = ego_frame_data.get('OBD_speed')\n",
    "                                             gps_speed = ego_frame_data.get('GPS_speed')\n",
    "                                             speed = 0.0\n",
    "                                             if isinstance(obd_speed, (int, float)) and obd_speed > 0:\n",
    "                                                  speed = float(obd_speed)\n",
    "                                             elif isinstance(gps_speed, (int, float)):\n",
    "                                                  speed = float(gps_speed)\n",
    "                                             all_train_ego_speeds.append(speed)\n",
    "\n",
    "                                             accX = float(ego_frame_data.get('accX', 0.0))\n",
    "                                             accY = float(ego_frame_data.get('accY', 0.0))\n",
    "                                             gyroZ = float(ego_frame_data.get('gyroZ', 0.0))\n",
    "                                             all_train_accX.append(accX); all_train_accY.append(accY); all_train_gyroZ.append(gyroZ)\n",
    "                                        except (TypeError, ValueError) as e:\n",
    "                                             print(f\"Warning: Invalid data type for ego stats in {set_id}/{video_id}/frame {frame_num}. Skipping frame. Error: {e}\")\n",
    "        else:\n",
    "             print(\"Warning: pie_database is not a dictionary. Cannot calculate scalers.\")\n",
    "\n",
    "\n",
    "        scalers = {} # Initialize scalers dict\n",
    "        try:\n",
    "            if all_train_ego_speeds:\n",
    "                 mean_speed = np.mean(all_train_ego_speeds); std_speed = np.std(all_train_ego_speeds)\n",
    "                 scalers['ego_speed_mean'] = mean_speed; scalers['ego_speed_std'] = std_speed if std_speed > 1e-6 else 1.0;\n",
    "                 print(f\"  Ego Speed: Mean={scalers['ego_speed_mean']:.2f}, Std={scalers['ego_speed_std']:.2f}\")\n",
    "            if all_train_accX: # Assume accY exists if accX does\n",
    "                 mean_accX = np.mean(all_train_accX); std_accX = np.std(all_train_accX)\n",
    "                 mean_accY = np.mean(all_train_accY); std_accY = np.std(all_train_accY)\n",
    "                 scalers['accX_mean'] = mean_accX; scalers['accX_std'] = std_accX if std_accX > 1e-6 else 1.0;\n",
    "                 scalers['accY_mean'] = mean_accY; scalers['accY_std'] = std_accY if std_accY > 1e-6 else 1.0;\n",
    "                 print(f\"  Ego AccX: Mean={scalers['accX_mean']:.2f}, Std={scalers['accX_std']:.2f}\"); print(f\"  Ego AccY: Mean={scalers['accY_mean']:.2f}, Std={scalers['accY_std']:.2f}\")\n",
    "            if all_train_gyroZ:\n",
    "                 mean_gyroZ = np.mean(all_train_gyroZ); std_gyroZ = np.std(all_train_gyroZ)\n",
    "                 scalers['gyroZ_mean'] = mean_gyroZ; scalers['gyroZ_std'] = std_gyroZ if std_gyroZ > 1e-6 else 1.0;\n",
    "                 print(f\"  Ego GyroZ: Mean={scalers['gyroZ_mean']:.2f}, Std={scalers['gyroZ_std']:.2f}\")\n",
    "        except Exception as e:\n",
    "             print(f\"Error calculating scaler statistics: {e}\") # Catch potential numpy errors\n",
    "        print(\"Standardization parameters calculation finished.\")\n",
    "\n",
    "        # --- Initialize FULL Training Dataset ---\n",
    "        print(\"\\nInitializing full training dataset (for extraction/balancing)...\")\n",
    "        full_train_dataset = None # Initialize before try block\n",
    "        try:\n",
    "            full_train_dataset = PIEDataset(pie_database, TRAIN_SETS_STR, POSE_DATA_DIR, YOLOP_FEATURE_DIR, SEQ_LEN, PRED_LEN, scalers, ALL_POSSIBLE_STREAMS)\n",
    "            if len(full_train_dataset) == 0:\n",
    "                 # This isn't necessarily an error, could be no valid sequences found\n",
    "                 print(\"Warning: Full Train Dataset initialization resulted in 0 sequences.\")\n",
    "                 # Depending on requirements, could raise ValueError here or allow proceeding\n",
    "                 # raise ValueError(\"Full Train Dataset loading resulted in 0 sequences.\")\n",
    "        except Exception as e:\n",
    "             print(f\"Error initializing full training dataset: {e}\")\n",
    "             raise # Re-raise critical error\n",
    "\n",
    "\n",
    "        # --- Prepare and Balance Training Data ---\n",
    "        print(\"\\nExtracting ALL stream data from training set for balancing...\")\n",
    "        training_data_dict = {stream: [] for stream in ALL_POSSIBLE_STREAMS}; training_data_dict['label'] = []\n",
    "        # Proceed only if full_train_dataset was created and has items\n",
    "        if full_train_dataset and len(full_train_dataset) > 0:\n",
    "            num_extraction_errors = 0\n",
    "            for i in tqdm(range(len(full_train_dataset)), desc=\"Extracting data\"):\n",
    "                 try:\n",
    "                     features, label = full_train_dataset[i] # __getitem__ might raise errors\n",
    "                     # Validate features dictionary\n",
    "                     if not isinstance(features, dict):\n",
    "                          raise TypeError(f\"__getitem__ returned features of type {type(features)}, expected dict.\")\n",
    "                     for stream_name in ALL_POSSIBLE_STREAMS:\n",
    "                         if stream_name in features and features[stream_name] is not None:\n",
    "                              # Convert tensor back to numpy for storage in dict (if not already numpy)\n",
    "                              feature_data = features[stream_name]\n",
    "                              if isinstance(feature_data, torch.Tensor):\n",
    "                                   training_data_dict[stream_name].append(feature_data.cpu().numpy())\n",
    "                              elif isinstance(feature_data, np.ndarray):\n",
    "                                   training_data_dict[stream_name].append(feature_data)\n",
    "                              else:\n",
    "                                   raise TypeError(f\"Feature data for stream '{stream_name}' is type {type(feature_data)}, expected Tensor or ndarray.\")\n",
    "                         else:\n",
    "                              # If a stream is missing from __getitem__ output, record it and add zeros\n",
    "                              print(f\"Warn: Stream '{stream_name}' missing from __getitem__ output for idx {i}. Appending zeros.\")\n",
    "                              # Determine expected feature size for the zeros array\n",
    "                              expected_size = full_train_dataset._input_sizes_for_error.get(stream_name, 1)\n",
    "                              training_data_dict[stream_name].append(np.zeros((SEQ_LEN, expected_size), dtype=np.float32))\n",
    "                     # Append label\n",
    "                     training_data_dict['label'].append([label.item()]) # Assuming label is a 0-dim tensor\n",
    "\n",
    "                 except Exception as e:\n",
    "                     num_extraction_errors += 1\n",
    "                     print(f\"Error extracting data for index {i}: {e}. Skipping item.\")\n",
    "                     # Optionally add placeholder data or just skip\n",
    "                     if num_extraction_errors > len(full_train_dataset) * 0.1: # Stop if too many errors\n",
    "                          print(\"Error: Excessive errors during data extraction. Aborting.\")\n",
    "                          raise RuntimeError(\"Too many errors during data extraction.\") from e\n",
    "\n",
    "            print(f\"Data extraction finished. Original training samples considered: {len(full_train_dataset)}, Errors encountered: {num_extraction_errors}\")\n",
    "            print(f\"Samples successfully extracted: {len(training_data_dict['label'])}\")\n",
    "\n",
    "            if not training_data_dict['label']: # Check if any data was actually extracted\n",
    "                 print(\"Error: No data was successfully extracted. Cannot proceed with balancing.\")\n",
    "                 # Handle this case: maybe exit or raise an error\n",
    "                 sys.exit(\"Exiting due to lack of extracted data.\")\n",
    "            else:\n",
    "                 # --- Balance Data ---\n",
    "                 label_key_for_balancing = 'label'\n",
    "                 try:\n",
    "                     balanced_train_data_dict = balance_samples_count(training_data_dict, label_type=label_key_for_balancing)\n",
    "                 except Exception as e:\n",
    "                      print(f\"Error during sample balancing: {e}\")\n",
    "                      raise # Balancing is critical, re-raise\n",
    "\n",
    "        else:\n",
    "             print(\"Skipping data extraction and balancing because full_train_dataset is empty or None.\")\n",
    "             balanced_train_data_dict = {} # Ensure it's an empty dict if skipped\n",
    "\n",
    "        # --- Cleanup ---\n",
    "        del training_data_dict # Free memory\n",
    "        if full_train_dataset: del full_train_dataset\n",
    "\n",
    "\n",
    "        # --- Save Balanced Data and Scalers ---\n",
    "        if balanced_train_data_dict: # Only save if balancing happened and produced data\n",
    "            print(f\"\\nSaving balanced training data to: {BALANCED_DATA_PKL_PATH}\")\n",
    "            try:\n",
    "                with open(BALANCED_DATA_PKL_PATH, 'wb') as f: pickle.dump(balanced_train_data_dict, f, pickle.HIGHEST_PROTOCOL)\n",
    "                print(\" -> Balanced data saved.\")\n",
    "            except pickle.PicklingError as pe: print(f\"  Error pickling balanced data: {pe}\")\n",
    "            except Exception as e: print(f\"  Error saving balanced data: {e}\")\n",
    "        else:\n",
    "             print(\"\\nSkipping saving balanced data (was not generated or is empty).\")\n",
    "\n",
    "        if scalers: # Only save if scalers were calculated\n",
    "            print(f\"\\nSaving scalers to: {SCALERS_PKL_PATH}\")\n",
    "            try:\n",
    "                with open(SCALERS_PKL_PATH, 'wb') as f: pickle.dump(scalers, f, pickle.HIGHEST_PROTOCOL)\n",
    "                print(\" -> Scalers saved.\")\n",
    "            except pickle.PicklingError as pe: print(f\"  Error pickling scalers: {pe}\")\n",
    "            except Exception as e: print(f\"  Error saving scalers: {e}\")\n",
    "        else:\n",
    "             print(\"\\nSkipping saving scalers (were not calculated or are empty).\")\n",
    "\n",
    "        # Delete PIE db only if it was loaded/generated in this block\n",
    "        if 'pie_database' in locals() and pie_database is not None: del pie_database\n",
    "        gc.collect()\n",
    "        print(\"\\n--- Data Preparation and Balancing Completed ---\")\n",
    "\n",
    "    else: # Data prep files should exist, load them\n",
    "        print(\"--- Skipping Data Preparation: Loading Pre-Saved Files ---\")\n",
    "        print(f\"\\nLoading balanced training data from: {BALANCED_DATA_PKL_PATH}\")\n",
    "        print(f\"Loading scalers from: {SCALERS_PKL_PATH}\")\n",
    "        try:\n",
    "            if not os.path.exists(BALANCED_DATA_PKL_PATH):\n",
    "                 raise FileNotFoundError(f\"Balanced data file not found: {BALANCED_DATA_PKL_PATH}\")\n",
    "            with open(BALANCED_DATA_PKL_PATH, 'rb') as f: balanced_train_data_dict = pickle.load(f)\n",
    "\n",
    "            if not os.path.exists(SCALERS_PKL_PATH):\n",
    "                 raise FileNotFoundError(f\"Scalers file not found: {SCALERS_PKL_PATH}\")\n",
    "            with open(SCALERS_PKL_PATH, 'rb') as f: scalers = pickle.load(f)\n",
    "\n",
    "            # Basic validation of loaded data\n",
    "            if not isinstance(balanced_train_data_dict, dict):\n",
    "                 raise TypeError(f\"Loaded balanced data is not a dictionary (type: {type(balanced_train_data_dict)}).\")\n",
    "            if not isinstance(scalers, dict):\n",
    "                 raise TypeError(f\"Loaded scalers data is not a dictionary (type: {type(scalers)}).\")\n",
    "\n",
    "            print(\" -> Pre-processed data loaded successfully.\")\n",
    "\n",
    "        except FileNotFoundError as e:\n",
    "             print(f\"ERROR: Required pre-processed file not found: {e}. Cannot continue without running the data preparation phase.\")\n",
    "             sys.exit(1) # Exit script\n",
    "        except pickle.UnpicklingError as pe:\n",
    "             print(f\"ERROR: Failed to unpickle pre-processed data: {pe}. Files might be corrupted. Re-run prep phase.\")\n",
    "             sys.exit(1)\n",
    "        except Exception as e:\n",
    "             print(f\"ERROR: Unexpected error loading pre-processed data: {e}\")\n",
    "             sys.exit(1)\n",
    "\n",
    "        # Ensure loaded variables are not None before proceeding\n",
    "        if balanced_train_data_dict is None or scalers is None:\n",
    "             print(\"ERROR: Loading pre-processed data resulted in None variables. Cannot continue.\")\n",
    "             sys.exit(1)\n",
    "\n",
    "\n",
    "    # --- Step 2: Model Training and Evaluation ---\n",
    "    print(\"\\n\" + \"=\"*70)\n",
    "    print(\"--- Running Model Training and Evaluation ---\")\n",
    "    print(f\"Active Streams for this run: {ACTIVE_STREAMS}\")\n",
    "    print(\"-\" * 70)\n",
    "\n",
    "    # --- Load Full PIE Database (needed for Validation Dataset) ---\n",
    "    # This needs to happen regardless of whether data prep ran or not\n",
    "    print(\"\\nLoading PIE database cache for Validation Dataset...\")\n",
    "    if pie_database is None: # Check if it needs loading (wasn't loaded/kept from prep phase)\n",
    "        if not os.path.exists(PIE_DATABASE_CACHE_PATH):\n",
    "             raise FileNotFoundError(f\"PIE database cache not found at {PIE_DATABASE_CACHE_PATH}. Required for Validation Dataset.\")\n",
    "        try:\n",
    "            with open(PIE_DATABASE_CACHE_PATH, 'rb') as f: pie_database = pickle.load(f)\n",
    "            print(\" -> PIE database loaded successfully for validation.\")\n",
    "            if not isinstance(pie_database, dict) or not pie_database: # Basic validation\n",
    "                 raise ValueError(\"Loaded PIE database for validation is not a valid dictionary or is empty.\")\n",
    "        except FileNotFoundError: # Should be caught by os.path.exists, but defensive check\n",
    "             raise FileNotFoundError(f\"PIE database cache file not found at {PIE_DATABASE_CACHE_PATH} when loading for validation.\")\n",
    "        except pickle.UnpicklingError as pe:\n",
    "             raise RuntimeError(f\"Failed to unpickle PIE database for validation from {PIE_DATABASE_CACHE_PATH}: {pe}\") from pe\n",
    "        except Exception as e:\n",
    "             raise RuntimeError(f\"Failed to load PIE database for validation: {e}\") from e\n",
    "\n",
    "    if pie_database is None: # Final check\n",
    "         raise RuntimeError(\"PIE Database is still None before creating Validation Dataset.\")\n",
    "\n",
    "\n",
    "    # --- Create Datasets and DataLoaders ---\n",
    "    print(\"\\nCreating Datasets and DataLoaders...\")\n",
    "    train_dataset, val_dataset = None, None # Initialize before try\n",
    "    train_loader, val_loader = None, None # Initialize before try\n",
    "    try:\n",
    "        # Ensure balanced data dict is valid before creating dataset\n",
    "        if not balanced_train_data_dict or 'label' not in balanced_train_data_dict or not balanced_train_data_dict['label']:\n",
    "             raise ValueError(\"Balanced training data dictionary is invalid or missing labels. Cannot create training dataset.\")\n",
    "        train_dataset = BalancedDataset(balanced_train_data_dict, ACTIVE_STREAMS, label_key='label')\n",
    "\n",
    "        # Free memory associated with the large dictionary now\n",
    "        del balanced_train_data_dict\n",
    "        gc.collect()\n",
    "\n",
    "        # Validation dataset needs the PIE database and scalers\n",
    "        if not pie_database: raise ValueError(\"PIE database is None, cannot create validation dataset.\")\n",
    "        if not scalers: print(\"Warning: Scalers dictionary is empty when creating validation dataset.\") # Non-fatal?\n",
    "\n",
    "        val_dataset = PIEDataset(pie_database, VAL_SETS_STR, POSE_DATA_DIR, YOLOP_FEATURE_DIR, SEQ_LEN, PRED_LEN, scalers, ALL_POSSIBLE_STREAMS)\n",
    "\n",
    "        if len(train_dataset) == 0: print(\"Warning: Training dataset is empty after initialization.\") # Potentially problematic\n",
    "        if len(val_dataset) == 0: print(\"Warning: Validation dataset is empty after initialization.\") # Potentially problematic\n",
    "        # Decide if empty datasets should halt execution\n",
    "        if len(train_dataset) == 0 or len(val_dataset) == 0:\n",
    "            raise ValueError(\"Cannot proceed with empty Training or Validation dataset.\")\n",
    "\n",
    "        # Create DataLoaders\n",
    "        # Consider adding persistent_workers=True if num_workers > 0 for efficiency\n",
    "        train_loader = DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True, num_workers=min(2, os.cpu_count()), pin_memory=True, drop_last=True) # drop_last can help with batch norm stability\n",
    "        val_loader = DataLoader(val_dataset, batch_size=BATCH_SIZE, shuffle=False, num_workers=min(2, os.cpu_count()), pin_memory=True)\n",
    "        print(f\"DataLoaders created. Train batches: {len(train_loader)}, Val batches: {len(val_loader)}\")\n",
    "\n",
    "    except (ValueError, KeyError, TypeError, RuntimeError, Exception) as e: # Catch specific and general errors\n",
    "        print(f\"FATAL ERROR creating Datasets or DataLoaders: {e}\")\n",
    "        # Potentially print more context here if needed\n",
    "        raise # Re-raise to stop execution\n",
    "\n",
    "    # Free memory again - PIE database might be large\n",
    "    del pie_database\n",
    "    gc.collect()\n",
    "\n",
    "    # --- Initialize Model ---\n",
    "    print(\"\\nInitializing model...\")\n",
    "    model = None # Initialize before try block\n",
    "    try:\n",
    "        current_input_sizes = {}\n",
    "        for stream in ACTIVE_STREAMS: # Based on ACTIVE_STREAMS for this run\n",
    "            size_constant_name = f'INPUT_SIZE_{stream.upper()}'\n",
    "            special_cases = {'TRAFFIC_LIGHT': 'TL_STATE','STATIC_CONTEXT': 'STATIC','EGO_SPEED': 'EGO_SPEED','EGO_ACC': 'EGO_ACC','EGO_GYRO': 'EGO_GYRO','PED_ACTION': 'PED_ACTION','PED_LOOK': 'PED_LOOK','PED_OCCLUSION': 'PED_OCC', 'YOLOP':'YOLOP'}\n",
    "            stream_upper_key = stream.upper(); suffix = special_cases.get(stream_upper_key)\n",
    "            if suffix: size_constant_name = f'INPUT_SIZE_{suffix}'\n",
    "            elif stream == 'bbox': size_constant_name = 'INPUT_SIZE_BBOX'\n",
    "            elif stream == 'pose': size_constant_name = 'INPUT_SIZE_POSE'\n",
    "            # Add other stream-specific mappings if necessary\n",
    "\n",
    "            if size_constant_name in globals():\n",
    "                 input_size = globals()[size_constant_name]\n",
    "                 if not isinstance(input_size, int) or input_size <= 0:\n",
    "                      raise ValueError(f\"Invalid input size ({input_size}) retrieved for constant {size_constant_name} (stream {stream}).\")\n",
    "                 current_input_sizes[stream] = input_size\n",
    "            else:\n",
    "                 raise ValueError(f\"Input size constant '{size_constant_name}' not found in globals for active stream '{stream}'\")\n",
    "\n",
    "        # Ensure all active streams have a size\n",
    "        if len(current_input_sizes) != len(ACTIVE_STREAMS):\n",
    "             missing_streams = set(ACTIVE_STREAMS) - set(current_input_sizes.keys())\n",
    "             raise ValueError(f\"Input sizes could not be determined for all active streams. Missing: {missing_streams}\")\n",
    "\n",
    "        model = MultiStreamAdaptiveLSTM(\n",
    "            input_sizes=current_input_sizes,\n",
    "            lstm_hidden_size=LSTM_HIDDEN_SIZE,\n",
    "            num_lstm_layers=NUM_LSTM_LAYERS,\n",
    "            num_classes=NUM_CLASSES,\n",
    "            attention_dim=ATTENTION_DIM,\n",
    "            dropout_rate=DROPOUT_RATE,\n",
    "            stream_names=ACTIVE_STREAMS # Pass only active streams the model should use\n",
    "        ).to(DEVICE)\n",
    "\n",
    "        print(\"\\n--- Model Architecture ---\"); print(model);\n",
    "        num_params = sum(p.numel() for p in model.parameters() if p.requires_grad);\n",
    "        print(f\"Total Trainable Parameters: {num_params:,}\"); print(\"-\" * 30)\n",
    "\n",
    "    except (KeyError, ValueError, TypeError, RuntimeError, Exception) as e:\n",
    "         print(f\"FATAL ERROR initializing model: {e}\")\n",
    "         raise # Re-raise to stop execution\n",
    "\n",
    "    # --- Class Weighting & Optimizer ---\n",
    "    print(\"\\nCalculating Class Weights for Loss Function...\")\n",
    "    class_weights = torch.tensor([1.0, 1.0], dtype=torch.float32).to(DEVICE) # Default weights\n",
    "    try:\n",
    "        # Ensure train_dataset exists and has labels\n",
    "        if train_dataset and hasattr(train_dataset, 'labels') and len(train_dataset.labels) > 0:\n",
    "            balanced_train_labels_list = train_dataset.labels.cpu().numpy() # Get labels from balanced dataset instance\n",
    "            count_0 = np.count_nonzero(balanced_train_labels_list == 0);\n",
    "            count_1 = np.count_nonzero(balanced_train_labels_list == 1);\n",
    "            total = len(balanced_train_labels_list)\n",
    "\n",
    "            if total > 0 and count_0 > 0 and count_1 > 0: # Ensure counts are valid\n",
    "                weight_0 = total / (2.0 * count_0); weight_1 = total / (2.0 * count_1)\n",
    "                class_weights = torch.tensor([weight_0, weight_1], dtype=torch.float32).to(DEVICE)\n",
    "                print(f\"Using Calculated Class Weights for Loss: 0={weight_0:.2f}, 1={weight_1:.2f}\")\n",
    "            elif total > 0:\n",
    "                 print(f\"Warning: Only one class present in balanced training labels (0: {count_0}, 1: {count_1}). Using default weights [1.0, 1.0].\")\n",
    "            else:\n",
    "                 print(\"Warning: Training dataset has no labels. Using default weights [1.0, 1.0].\")\n",
    "        else:\n",
    "            print(\"Warning: Could not access labels from training dataset. Using default weights [1.0, 1.0].\")\n",
    "\n",
    "    except Exception as e:\n",
    "         print(f\"Error calculating class weights: {e}. Using default weights [1.0, 1.0].\")\n",
    "\n",
    "\n",
    "    # Initialize criterion and optimizer only if model exists\n",
    "    criterion = None\n",
    "    optimizer = None\n",
    "    if model:\n",
    "         try:\n",
    "             criterion = nn.CrossEntropyLoss(weight=class_weights)\n",
    "             optimizer = optim.Adam(model.parameters(), lr=LEARNING_RATE)\n",
    "         except Exception as e:\n",
    "              print(f\"FATAL ERROR creating criterion or optimizer: {e}\")\n",
    "              raise # Stop execution\n",
    "    else:\n",
    "         raise RuntimeError(\"Model was not initialized. Cannot create criterion/optimizer.\")\n",
    "\n",
    "\n",
    "    best_val_f1 = -1.0; train_losses, val_losses = [], []; train_accs, val_accs = [], []; val_f1s = []\n",
    "    best_epoch_path = \"\" # Initialize before loop\n",
    "\n",
    "\n",
    "    # --- Training Loop ---\n",
    "    print(\"\\n--- Starting Training ---\")\n",
    "    if not train_loader or not val_loader:\n",
    "         raise RuntimeError(\"DataLoaders are not available. Cannot start training.\")\n",
    "\n",
    "    for epoch in range(NUM_EPOCHS):\n",
    "        epoch_start_time = time.time()\n",
    "        try:\n",
    "            train_loss, train_acc = train_epoch(model, train_loader, optimizer, criterion, DEVICE)\n",
    "            val_metrics = evaluate_epoch(model, val_loader, criterion, DEVICE)\n",
    "            epoch_duration = time.time() - epoch_start_time\n",
    "\n",
    "            # Store metrics\n",
    "            train_losses.append(train_loss); val_losses.append(val_metrics['loss'])\n",
    "            train_accs.append(train_acc); val_accs.append(val_metrics['accuracy'])\n",
    "            val_f1s.append(val_metrics['f1'])\n",
    "\n",
    "            print(f\"--- Epoch {epoch+1}/{NUM_EPOCHS} ({epoch_duration:.2f} sec) ---\")\n",
    "            print(f\"  Train Loss: {train_loss:.4f}, Train Acc: {train_acc:.4f}\")\n",
    "            print(f\"  Val Loss:   {val_metrics.get('loss', float('nan')):.4f}, Val Acc:  {val_metrics.get('accuracy', float('nan')):.4f}\") # Use .get for safety\n",
    "            print(f\"  Val Prec:   {val_metrics.get('precision', float('nan')):.4f}, Recall: {val_metrics.get('recall', float('nan')):.4f}, F1: {val_metrics.get('f1', float('nan')):.4f}\")\n",
    "            print(f\"  Val AUC:    {val_metrics.get('auc', float('nan')):.4f}\") # AUC might be nan\n",
    "\n",
    "            # Save best model based on validation F1\n",
    "            current_f1 = val_metrics.get('f1', -1.0) # Default to -1 if F1 is missing/NaN\n",
    "            if not np.isnan(current_f1) and current_f1 > best_val_f1:\n",
    "                best_val_f1 = current_f1\n",
    "                # Ensure active streams string is filesystem-safe\n",
    "                safe_streams_str = \"_\".join(sorted(ACTIVE_STREAMS)).replace('/', '_').replace('\\\\', '_')\n",
    "                current_best_epoch_path = f'best_model_{safe_streams_str}_ep{epoch+1}.pth'\n",
    "                try:\n",
    "                    torch.save(model.state_dict(), current_best_epoch_path)\n",
    "                    # Clean up previous best model file if it exists? Optional.\n",
    "                    # if best_epoch_path and os.path.exists(best_epoch_path):\n",
    "                    #     os.remove(best_epoch_path)\n",
    "                    best_epoch_path = current_best_epoch_path # Store path to the new best model\n",
    "                    print(f\"  >> Saved new best model to {best_epoch_path} (F1: {best_val_f1:.4f})\")\n",
    "                except Exception as e:\n",
    "                     print(f\"  >> Error saving model checkpoint {current_best_epoch_path}: {e}\")\n",
    "            print(\"-\" * 30)\n",
    "\n",
    "        except KeyboardInterrupt:\n",
    "             print(\"\\nTraining interrupted by user.\")\n",
    "             break # Exit training loop\n",
    "        except Exception as e:\n",
    "             print(f\"\\n--- ERROR DURING EPOCH {epoch+1} ---\")\n",
    "             print(f\"Error: {e}\")\n",
    "             # Option: break the loop, or try to continue?\n",
    "             # For stability, breaking might be safer if the error is persistent (e.g., OOM)\n",
    "             print(\"Stopping training due to error.\")\n",
    "             import traceback\n",
    "             traceback.print_exc() # Print stack trace for debugging\n",
    "             break\n",
    "\n",
    "    print(\"--- Training Finished ---\")\n",
    "\n",
    "    # --- Plotting ---\n",
    "    print(\"\\n--- Plotting Training History ---\")\n",
    "    try:\n",
    "        # Ensure metrics lists are not empty before plotting\n",
    "        if train_losses and val_losses and train_accs and val_accs and val_f1s:\n",
    "            fig, axes = plt.subplots(1, 2, figsize=(12, 5))\n",
    "            epochs_range = range(1, len(train_losses) + 1) # Use actual number of completed epochs\n",
    "\n",
    "            axes[0].plot(epochs_range, train_losses, label='Train Loss')\n",
    "            axes[0].plot(epochs_range, val_losses, label='Val Loss')\n",
    "            axes[0].set_xlabel('Epoch'); axes[0].set_ylabel('Loss'); axes[0].set_title('Loss Curve'); axes[0].legend(); axes[0].grid(True)\n",
    "\n",
    "            axes[1].plot(epochs_range, train_accs, label='Train Accuracy')\n",
    "            axes[1].plot(epochs_range, val_accs, label='Val Accuracy')\n",
    "            axes[1].plot(epochs_range, val_f1s, label='Val F1-Score', linestyle='--')\n",
    "            axes[1].set_xlabel('Epoch'); axes[1].set_ylabel('Metric'); axes[1].set_title('Accuracy & F1-Score Curve'); axes[1].legend(); axes[1].grid(True)\n",
    "\n",
    "            plt.tight_layout(); plt.show()\n",
    "        else:\n",
    "             print(\"Skipping plotting - insufficient metric data collected.\")\n",
    "    except Exception as e:\n",
    "         print(f\"Error generating plots: {e}\")\n",
    "\n",
    "\n",
    "    # --- Final Evaluation ---\n",
    "    print(\"\\n--- Final Evaluation on Validation Set using Best Model ---\")\n",
    "    final_metrics = {} # Initialize before try\n",
    "    true_labels, pred_labels = np.array([]), np.array([]) # Initialize before try\n",
    "    try:\n",
    "        # Check if a best model was saved and exists\n",
    "        if best_epoch_path and os.path.exists(best_epoch_path):\n",
    "            print(f\"Loading best saved model '{best_epoch_path}'\")\n",
    "            try:\n",
    "                # Load state dict onto the correct device\n",
    "                state_dict = torch.load(best_epoch_path, map_location=DEVICE)\n",
    "                model.load_state_dict(state_dict)\n",
    "                print(\" -> Best model loaded successfully.\")\n",
    "            except FileNotFoundError:\n",
    "                 print(f\"Warn: Best model file '{best_epoch_path}' not found despite check. Evaluating final model state.\")\n",
    "            except Exception as e:\n",
    "                 print(f\"Warn: Error loading best model state_dict from {best_epoch_path}: {e}. Evaluating final model state.\")\n",
    "        else:\n",
    "             print(f\"Warning: No best model saved or found at '{best_epoch_path}'. Evaluating final model state from training end.\")\n",
    "\n",
    "        # Perform final evaluation\n",
    "        if model and val_loader and criterion:\n",
    "             final_metrics = evaluate_epoch(model, val_loader, criterion, DEVICE)\n",
    "             true_labels, pred_labels = get_predictions_and_labels(model, val_loader, DEVICE)\n",
    "        else:\n",
    "             print(\"Error: Model, validation loader, or criterion not available for final evaluation.\")\n",
    "             # Set final metrics to NaN/empty if evaluation cannot run\n",
    "             final_metrics = {'accuracy': float('nan'), 'precision': float('nan'), 'recall': float('nan'), 'f1': float('nan'), 'auc': float('nan'), 'loss': float('nan')}\n",
    "             true_labels, pred_labels = np.array([]), np.array([])\n",
    "\n",
    "\n",
    "        # Display results\n",
    "        print(\"\\n--- Final Performance Metrics ---\")\n",
    "        print(f\"  Streams:   {', '.join(ACTIVE_STREAMS)}\")\n",
    "        print(f\"  Accuracy:  {final_metrics.get('accuracy', float('nan')):.4f}\")\n",
    "        print(f\"  Precision: {final_metrics.get('precision', float('nan')):.4f}\")\n",
    "        print(f\"  Recall:    {final_metrics.get('recall', float('nan')):.4f}\")\n",
    "        print(f\"  F1 Score:  {final_metrics.get('f1', float('nan')):.4f}\")\n",
    "        print(f\"  AUC:       {final_metrics.get('auc', float('nan')):.4f}\")\n",
    "        print(f\"  Loss:      {final_metrics.get('loss', float('nan')):.4f}\")\n",
    "        if best_epoch_path:\n",
    "             print(f\"  (Best Validation F1 during training: {best_val_f1:.4f} - from model '{os.path.basename(best_epoch_path)}')\")\n",
    "        else:\n",
    "             print(f\"  (Best Validation F1 during training: {best_val_f1:.4f} - model file not saved/found)\")\n",
    "\n",
    "\n",
    "        # Plot Confusion Matrix\n",
    "        if true_labels.size > 0 and pred_labels.size > 0: # Ensure labels were generated\n",
    "             print(\"\\n--- Confusion Matrix ---\")\n",
    "             try:\n",
    "                 cm = confusion_matrix(true_labels, pred_labels, labels=[0, 1]) # Explicitly define labels\n",
    "                 labels_display = ['Not Crossing', 'Crossing']\n",
    "                 disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=labels_display);\n",
    "                 disp.plot(cmap=plt.cm.Blues);\n",
    "                 plt.title(f'CM ({\", \".join(ACTIVE_STREAMS)})');\n",
    "                 plt.show()\n",
    "             except ValueError as e:\n",
    "                  print(f\"Error generating confusion matrix: {e}\")\n",
    "                  print(f\"True labels unique: {np.unique(true_labels)}, Pred labels unique: {np.unique(pred_labels)}\")\n",
    "             except Exception as e:\n",
    "                  print(f\"Unexpected error generating confusion matrix display: {e}\")\n",
    "        else:\n",
    "             print(\"Skipping confusion matrix - no prediction data available.\")\n",
    "\n",
    "    except Exception as e:\n",
    "         print(f\"\\n--- ERROR DURING FINAL EVALUATION ---\")\n",
    "         print(f\"Error: {e}\")\n",
    "         import traceback\n",
    "         traceback.print_exc()\n",
    "\n",
    "\n",
    "    print(\"\\n--- Script Complete ---\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "587189d8",
   "metadata": {
    "papermill": {
     "duration": 0.015462,
     "end_time": "2025-05-05T22:40:24.459845",
     "exception": false,
     "start_time": "2025-05-05T22:40:24.444383",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 6993690,
     "sourceId": 11201333,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6993708,
     "sourceId": 11201362,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6993722,
     "sourceId": 11201388,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6993740,
     "sourceId": 11201422,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6993794,
     "sourceId": 11201506,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6993809,
     "sourceId": 11201543,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7034191,
     "sourceId": 11255589,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7127490,
     "sourceId": 11382982,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7142036,
     "sourceId": 11402679,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7333398,
     "sourceId": 11684148,
     "sourceType": "datasetVersion"
    },
    {
     "modelId": 279383,
     "modelInstanceId": 258142,
     "sourceId": 302300,
     "sourceType": "modelInstanceVersion"
    },
    {
     "modelId": 283333,
     "modelInstanceId": 262207,
     "sourceId": 307831,
     "sourceType": "modelInstanceVersion"
    },
    {
     "modelId": 288527,
     "modelInstanceId": 267476,
     "sourceId": 316944,
     "sourceType": "modelInstanceVersion"
    },
    {
     "modelId": 297682,
     "modelInstanceId": 276781,
     "sourceId": 329886,
     "sourceType": "modelInstanceVersion"
    },
    {
     "modelId": 297702,
     "modelInstanceId": 276800,
     "sourceId": 329908,
     "sourceType": "modelInstanceVersion"
    },
    {
     "isSourceIdPinned": true,
     "modelId": 314775,
     "modelInstanceId": 294156,
     "sourceId": 352620,
     "sourceType": "modelInstanceVersion"
    }
   ],
   "dockerImageVersionId": 30918,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6619.997581,
   "end_time": "2025-05-05T22:40:28.214533",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-05T20:50:08.216952",
   "version": "2.6.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "00c84897db32470887d2778fae2ad42e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_b5ba4b55190e45878e35baa9881b0418",
       "placeholder": "​",
       "style": "IPY_MODEL_1dec7b2ea4014f25abba2e6cfcc5b345",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "01f5dfbbacaf4a6ba92bf07d65983b70": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0407a6b4489241c19324d5c81cfbac59": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "04243cbca58540598afdf1db6640578c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "046b9e9271514246b5704d7ae86290bf": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0407a6b4489241c19324d5c81cfbac59",
       "max": 3435.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_496793a7a1844f78ad61c7160b1da2e5",
       "tabbable": null,
       "tooltip": null,
       "value": 3435.0
      }
     },
     "05846f68a4dc4812bfd4d6bb563abd34": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_a1f470c8ef9c4e94b0038fe7015c0917",
       "placeholder": "​",
       "style": "IPY_MODEL_f428e91c06a947a4a5a59fb39114291e",
       "tabbable": null,
       "tooltip": null,
       "value": " 3435/3435 [03:24&lt;00:00, 16.25it/s]"
      }
     },
     "061c7f1eeb4e4920902ef3b1017e6b26": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_118dd8d80a50405c8a046a83d37cf6c2",
       "placeholder": "​",
       "style": "IPY_MODEL_2a13efe183004bd4a482292c7ea0fd42",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "064af78feccb4018ab61ac159959849d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "067ee3b7c8904cf0accc67c9b473c71f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "06d94d572007440498b9dd27b42e198b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "0719bc6be698468798a89db05125dfab": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "07914c57493c4929856e71289a906b87": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_943cc713fecb49ebbcefdcd2910c52f6",
       "placeholder": "​",
       "style": "IPY_MODEL_6f87bee62a224b24a104d2ea52ebbc46",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "07acc472fb814ebc8236385f0df7ca2e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "08f9abc495d545d0a1a3f92f0110915b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_a3c06618206f4b9184cd5fc3240a7135",
        "IPY_MODEL_e6793b86ec164cfe9bf95dbddfb2bbbd",
        "IPY_MODEL_4694e9967c3c4bd2891d64382dfc4607"
       ],
       "layout": "IPY_MODEL_747b598415e44c48a896c73b2278d5bd",
       "tabbable": null,
       "tooltip": null
      }
     },
     "090b9c1a63014793b20576c816690ee4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "095f42a8998341b6b358083391d9e08a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_299b7ed43b324de8a0e8b0e9e17bd5d3",
        "IPY_MODEL_0c1bf3e2494c493cb05e24e3d41403b0",
        "IPY_MODEL_7254edc75a71406c874d1efa202d331a"
       ],
       "layout": "IPY_MODEL_c229a62991f341099d4dab2391269476",
       "tabbable": null,
       "tooltip": null
      }
     },
     "0a00b640895045d9abe76ff8d8466caf": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_b6644d721b994fdc847772a79169cc18",
        "IPY_MODEL_fbc746ae6e67419faa2ea1387585e12f",
        "IPY_MODEL_f0e288ea79c7455fb3d4c510cb68cd31"
       ],
       "layout": "IPY_MODEL_452a3481db744518aa0b87d857742810",
       "tabbable": null,
       "tooltip": null
      }
     },
     "0acf1ecd418443bf92224ae23e2618c3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_2d7f15839fd34732b9d4984a703245c1",
       "max": 3435.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_b7352608ea35439186b1c7b4bd453129",
       "tabbable": null,
       "tooltip": null,
       "value": 3435.0
      }
     },
     "0bef750a1d9444b7b6f0191b2eaaadf1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "0c1bf3e2494c493cb05e24e3d41403b0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_eebe08f0599746539feb01aadb31a226",
       "max": 3435.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_2bc9051b47c94164b94f444261be2454",
       "tabbable": null,
       "tooltip": null,
       "value": 3435.0
      }
     },
     "0c311be534754b9e821e60cb43827381": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "0d4709e881474cb6b1b40f0b2d7c46ae": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0e66eba47afa4bc8a8391c87a0bd1c39": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0ea0509141e34722a3acd94a401e221f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_8bdd8711607c4e37b704e0db78cd70a9",
       "placeholder": "​",
       "style": "IPY_MODEL_9dd92cf3cc60446ab21a0a442cd63f94",
       "tabbable": null,
       "tooltip": null,
       "value": " 3435/3435 [03:24&lt;00:00, 16.42it/s]"
      }
     },
     "0f6927b93ef64bd8b4321c422e30ec02": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_ede6de9d1e9642d69d898cf72368e52e",
        "IPY_MODEL_663c38cab9ec4868b735edb14632dfad",
        "IPY_MODEL_8ada32fc5f9043ceab2221329cc7b00b"
       ],
       "layout": "IPY_MODEL_9d4a769095e5408bbfec36797936071a",
       "tabbable": null,
       "tooltip": null
      }
     },
     "0fc4e31cef244bdc82019bc11d64ea26": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "0fefb4a6dffa4ecb973741b5272d33f9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "101389081df342a9a52895855ee089bd": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1057f821d8e7406b80340b939c0e668c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_690d84b1105b4f559674f8a1ed229a70",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_0fc4e31cef244bdc82019bc11d64ea26",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "1128fb97fe6e463eb2262934d8b66382": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "118dd8d80a50405c8a046a83d37cf6c2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1197656059b24d4ba1f9e87059f949e4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_ee3c26c28d5f4c32930fd824ff2f62aa",
        "IPY_MODEL_5c4645a9e52f46d581e919b560f3fee6",
        "IPY_MODEL_6d97034bf5634b81bfbd9651064904bd"
       ],
       "layout": "IPY_MODEL_090b9c1a63014793b20576c816690ee4",
       "tabbable": null,
       "tooltip": null
      }
     },
     "11cacecf919c447582ef908cd88ef169": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "124a4e43afd5455584a7ef68cc524868": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_6bdadf8b99b4407f82e725553ed9069a",
       "max": 3435.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_c8e1820e16f544f39016c472897edf4f",
       "tabbable": null,
       "tooltip": null,
       "value": 3435.0
      }
     },
     "12997782572f4bbaa5771b82dea9ebbd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "13320d55657245c09040301e5e2c9c3d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_26020e39c23542b594d2edf578c1d3c0",
        "IPY_MODEL_20d3772e040145f6b7fa958f2725128a",
        "IPY_MODEL_57bfeeb7d6d242c3b3e49899297d0865"
       ],
       "layout": "IPY_MODEL_46cbaf1c1ae14b5fb24aaf27c9cdcb96",
       "tabbable": null,
       "tooltip": null
      }
     },
     "156103356324476bbdf6b86105753082": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "15ce30222ab9416fad43a95715bdcddf": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "16b47ef18c1c4c8280b3e03d4f355cbe": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "1713e27787054777a39c7a6c5f62c07c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_3699dbd8eeec422195848b91d01509f2",
        "IPY_MODEL_bc3ac2de752044f4b3e06b0f7d0c0cab",
        "IPY_MODEL_753afe7a9e3845fdb4db9ff6731568ff"
       ],
       "layout": "IPY_MODEL_359c74a6a9314ba7a2efbe1144d2293d",
       "tabbable": null,
       "tooltip": null
      }
     },
     "17cd208be8cc43eeb709259b5d05d0e5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_1c4fa0a9e8944896b36b29665e499671",
       "placeholder": "​",
       "style": "IPY_MODEL_6f22dc73476d415d989717f78f8baa26",
       "tabbable": null,
       "tooltip": null,
       "value": " 3434/3435 [03:25&lt;00:00, 16.39it/s]"
      }
     },
     "18a5d394157b43419a61115b01ee76ae": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "19372d99b8764a0a9564aee7ddd42809": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_47b41c74047e4dc29c1acad3d7be2013",
       "placeholder": "​",
       "style": "IPY_MODEL_bb2c37d2312441a48c8edfe23e230a1b",
       "tabbable": null,
       "tooltip": null,
       "value": " 3434/3435 [03:22&lt;00:00, 16.44it/s]"
      }
     },
     "1a9f7ae6ff0d4480a2f2a0a6ea4acbc8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "1af20718d0ff4d1495de20ab5ab44357": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_24baa38feb0c45ad8d6db2c88c306d51",
        "IPY_MODEL_3a3687bf3d45433aaf2f8ec3c4df5dcf",
        "IPY_MODEL_67dc1018fcde40edb2babed26653ac05"
       ],
       "layout": "IPY_MODEL_16b47ef18c1c4c8280b3e03d4f355cbe",
       "tabbable": null,
       "tooltip": null
      }
     },
     "1c4fa0a9e8944896b36b29665e499671": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1daac8abacc44ae09e034502e49d8bb3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "1dc217727d9b444997a87cfb9aa2b12b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_35d7d6927f4e4db691cd909886994c2f",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_52ef91ed94e84a8696424c9b0f05cc2f",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "1dec7b2ea4014f25abba2e6cfcc5b345": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "1e54da5a191040d094f1d3626fcc94c5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_db9774ef5a08408bace1bba1290b6a2a",
       "placeholder": "​",
       "style": "IPY_MODEL_ea88772216fb4a1db932b6bcb4dbdbae",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "1e98fa05411b426b95846a0c3ca912cf": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1f1c64ef16e047a8aa2a76e3335e390c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_b8776f1eb86144eebe5b9349af44b0e1",
       "placeholder": "​",
       "style": "IPY_MODEL_55259b7c083f490484452930515d5496",
       "tabbable": null,
       "tooltip": null,
       "value": " 333454/333454 [13:30&lt;00:00, 412.47it/s]"
      }
     },
     "20d3772e040145f6b7fa958f2725128a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_97ff094284094e52b82fe996c811ff9e",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_aeb2aaa3af594d9d9f5eab4d206e7c4a",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "20e47fa3938d497cb314b8b3405fd933": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "22477744005a4fab823ce481d03acdc4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "224ea1a0af54446fb9e19900e848ed6d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_58e03f2e96974f409332a4cf79ad72aa",
        "IPY_MODEL_6bd1a1ab128445999f6ac2bedd60216d",
        "IPY_MODEL_d54acbc99f6447bd8eccf6a6d170f0a8"
       ],
       "layout": "IPY_MODEL_1daac8abacc44ae09e034502e49d8bb3",
       "tabbable": null,
       "tooltip": null
      }
     },
     "2285b77868b14fe3a112ab013a206906": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "230386da07164383a827c8da6fc8ed1c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_00c84897db32470887d2778fae2ad42e",
        "IPY_MODEL_60536dae7fda496bb27fc84da9e6e51a",
        "IPY_MODEL_8c3c09a6df4f403eb2b24ae1f6a0a131"
       ],
       "layout": "IPY_MODEL_b7ca0e2049a147b29499d8f6eb356e96",
       "tabbable": null,
       "tooltip": null
      }
     },
     "24baa38feb0c45ad8d6db2c88c306d51": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_d79d7eeff3494ab485112fa5022a0451",
       "placeholder": "​",
       "style": "IPY_MODEL_6a68f5a4ad8d4112b895d07c245c852e",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "26020e39c23542b594d2edf578c1d3c0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c89960b4587942b9825bd5332998f41b",
       "placeholder": "​",
       "style": "IPY_MODEL_aa6eca2974ab4bc7825b27eaa26af413",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "2647c252a843456f9a8d1e01b284979d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "26eb7710f4424b2582da2aa6f62067cd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f1e8d21d657a4b1585b1069ebc78a297",
       "placeholder": "​",
       "style": "IPY_MODEL_064af78feccb4018ab61ac159959849d",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "271f45e37e0a4e71924b96b96be096ab": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "290b1ab81f244fbc80b39cac4c7751ae": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "299b7ed43b324de8a0e8b0e9e17bd5d3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_101389081df342a9a52895855ee089bd",
       "placeholder": "​",
       "style": "IPY_MODEL_b9dc67797c8d4b67ab62c33905307636",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "2a13efe183004bd4a482292c7ea0fd42": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "2a654116fbf34797b2bfb9b47de10f43": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "2a90c7aa18cd4807b8525ea1315a6dc6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_995fdafb8c9842f5bb95e7295eba48e8",
        "IPY_MODEL_680c7290ffa04601884a8f918d6aaafe",
        "IPY_MODEL_8f4b608e5b2c4d429259997cd6c3f850"
       ],
       "layout": "IPY_MODEL_d3dcf8d6c9ef4bc9897131a48299a749",
       "tabbable": null,
       "tooltip": null
      }
     },
     "2a974a93dd90428bbb835776c2cdbe4b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "2bc9051b47c94164b94f444261be2454": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "2bf74166873c4720ae5c1e54f14fe439": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2d0b1373f42242cabaf1186d70f9fd19": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "2d7f15839fd34732b9d4984a703245c1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2e420bce08a74f91986e6362c9a9cd1e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "30016cb98ed943b68b22a456fc8397c7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3122b9121f97403bb08f9ba276489b73": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "31e28ec3aab344fba314c177e184c0a5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "332866295fb84dcc8da601a1ccb132ad": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "345a11b267294c92bef1ced964172944": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_04243cbca58540598afdf1db6640578c",
       "placeholder": "​",
       "style": "IPY_MODEL_6bb839ba2ece4bc5aa1e3ecfdd6a00ee",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "3567a36c6eef462ea2281112204e5f80": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "359c74a6a9314ba7a2efbe1144d2293d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "35cb789a25d84249b0845b64afe3377c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "35d7d6927f4e4db691cd909886994c2f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3699dbd8eeec422195848b91d01509f2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_52a06c5ec1a2456fb8ca2385fc1d2ea8",
       "placeholder": "​",
       "style": "IPY_MODEL_3c28472c0cfe4dd59b7ff632706d5d44",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "374326df30f34bfeb1ca2aa7e796ba57": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_6a0db82795da4ea6b715ef55dc5204fb",
       "placeholder": "​",
       "style": "IPY_MODEL_0c311be534754b9e821e60cb43827381",
       "tabbable": null,
       "tooltip": null,
       "value": " 3434/3435 [03:26&lt;00:00, 16.10it/s]"
      }
     },
     "3779afc39ab34843abe4c238e728c088": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "378723d4a3ac49b58b44cc5a4926f274": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "383184734d7c48bc94a1f49475032863": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "38ae6243494a499889e52418007e61ce": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "3a3687bf3d45433aaf2f8ec3c4df5dcf": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_497a3030c1844ee38a36f0c9c7a81ea2",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_c2c811d73090428b9098bdbacff1a68c",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "3a7277da6f244517a31750ab2b8b1e59": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3b6fd3bc7cd144c498779f5e963928b9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "3bb854bd842943e186618c99d05623a4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "3c28472c0cfe4dd59b7ff632706d5d44": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "3c9dd554589e41558a9148e3f8445e95": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3567a36c6eef462ea2281112204e5f80",
       "placeholder": "​",
       "style": "IPY_MODEL_f8dd6679433344e88d9e724c11a2d85f",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "3e08ed7562d341b686cbd92a8bb7dbbe": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_50727dfb4ce74acd8428789fc06a6895",
       "placeholder": "​",
       "style": "IPY_MODEL_4492ab7e04a64e1592e5d1cad9cd0fc9",
       "tabbable": null,
       "tooltip": null,
       "value": " 3434/3435 [03:25&lt;00:00, 16.09it/s]"
      }
     },
     "3f42970b25804ad0816b954d383e16bd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3779afc39ab34843abe4c238e728c088",
       "max": 3435.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_6711da0e4acb4085a2e84595b436a161",
       "tabbable": null,
       "tooltip": null,
       "value": 3435.0
      }
     },
     "3f84aebbfa994f61b5e29148fcb319ee": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "3fc524cb9eb44939aebb34625a6f44d8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "41046f0bbb364892afceb56bed92f1be": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "416f4ef14bf6437987fd82bbe2fded37": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "4200421fd4a644cd820e7a7e39e1eedb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e39d3ca7c3834a9ebfa976693dd2f45e",
       "max": 3435.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_734d48eead5243358bd9adef15c30b81",
       "tabbable": null,
       "tooltip": null,
       "value": 3435.0
      }
     },
     "42068d9a8a7d4596afd3f35f3db89dd4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "42672ba5a08c46bb9b823cc1704b9e60": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "427cfc2370a249b78a02077c8636d443": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c584ee4203b745dda57e53ee82da443d",
       "placeholder": "​",
       "style": "IPY_MODEL_2a654116fbf34797b2bfb9b47de10f43",
       "tabbable": null,
       "tooltip": null,
       "value": "Loading YOLOP PKLs: 100%"
      }
     },
     "42de2126af4442f4844a650f4798c454": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_345a11b267294c92bef1ced964172944",
        "IPY_MODEL_5131dbaa847e452d9e8930ce1297dcf5",
        "IPY_MODEL_70bfa88e744e4c9381cbab2dee4aecf7"
       ],
       "layout": "IPY_MODEL_f7122cbeafa0466e9118bf5c5011639d",
       "tabbable": null,
       "tooltip": null
      }
     },
     "43ed0a49397a423980768a5cba599722": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "4492ab7e04a64e1592e5d1cad9cd0fc9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "452a3481db744518aa0b87d857742810": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "45fd53a2c30444d1b1122516e27d6d39": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3a7277da6f244517a31750ab2b8b1e59",
       "placeholder": "​",
       "style": "IPY_MODEL_fa8e750ec867404699d0483e48c26356",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "468c4fb115ff4ba68a9216bcf25cd713": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_e08dfd8901cc4546bfcda42203fb22fc",
        "IPY_MODEL_75df6719043b4687bb5e17f66c965b40",
        "IPY_MODEL_cde53f15a4a440a18b673fdffbf62f98"
       ],
       "layout": "IPY_MODEL_c7949ddf4295417c91a3adad821b680d",
       "tabbable": null,
       "tooltip": null
      }
     },
     "4694e9967c3c4bd2891d64382dfc4607": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_89314c39935b4b77bebf1b0f9ff6a170",
       "placeholder": "​",
       "style": "IPY_MODEL_c253bb660d684acebe7dbb4d202eb4d5",
       "tabbable": null,
       "tooltip": null,
       "value": " 2414/2416 [02:35&lt;00:00, 11.44it/s]"
      }
     },
     "46cbaf1c1ae14b5fb24aaf27c9cdcb96": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "47b41c74047e4dc29c1acad3d7be2013": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "496793a7a1844f78ad61c7160b1da2e5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "497a3030c1844ee38a36f0c9c7a81ea2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4992433acbd34bdc98381af613b20329": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4aec05e412ad45c89209974afcd0e5fd": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4c30c931b3424f00a5aa77bd1392c2f7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4aec05e412ad45c89209974afcd0e5fd",
       "placeholder": "​",
       "style": "IPY_MODEL_5300d0259b874c85b7e9ed1c4d2a1943",
       "tabbable": null,
       "tooltip": null,
       "value": " 3435/3435 [03:25&lt;00:00, 16.07it/s]"
      }
     },
     "4c790ea2cc4c4637b40cb7a22b1df224": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4cac99278ad1488bb385c03a6e0df645": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "4cfb832a350649c5a7793c3e13cf0843": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_b5d3fe958474409ea9eaa0948e16c9c1",
        "IPY_MODEL_1dc217727d9b444997a87cfb9aa2b12b",
        "IPY_MODEL_a6d099afd22a44efa3f72d30bf7f3003"
       ],
       "layout": "IPY_MODEL_f7aca40cc4ea41bf91f5496d40353d17",
       "tabbable": null,
       "tooltip": null
      }
     },
     "4df3f346eb114d8f8048233e5fee15dd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "5008e458b6f3455c979b34764a7796c3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5036efb6bd99407ebddcb8005dda4bdc": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "50727dfb4ce74acd8428789fc06a6895": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "50bae2fd8ebe48a6a4291a55a040d251": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "5131dbaa847e452d9e8930ce1297dcf5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_07acc472fb814ebc8236385f0df7ca2e",
       "max": 3435.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_b5b6637b8f6449ef97ecd10bbfbe84ae",
       "tabbable": null,
       "tooltip": null,
       "value": 3435.0
      }
     },
     "5277fac5d766407e9adb1612debc845b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "52a06c5ec1a2456fb8ca2385fc1d2ea8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "52ef91ed94e84a8696424c9b0f05cc2f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "5300d0259b874c85b7e9ed1c4d2a1943": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "531efa09a8f74c2e9cc8690965c94121": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_68831eae169643d28a0eb1aabf4dae3e",
        "IPY_MODEL_8916675887314fffbd5b0d77f683e8e7",
        "IPY_MODEL_e7829e4e8e0742bf85bdd23809f50d9e"
       ],
       "layout": "IPY_MODEL_dc46c1d91cf748e08dde47fc576105c7",
       "tabbable": null,
       "tooltip": null
      }
     },
     "546fc0e84d8744cf8bb0136824dd9da9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "55259b7c083f490484452930515d5496": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "55c26d00229c45b8a8bc11f2c449856b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_5e46ba873dcb467997176b910cdfa21f",
        "IPY_MODEL_124a4e43afd5455584a7ef68cc524868",
        "IPY_MODEL_0ea0509141e34722a3acd94a401e221f"
       ],
       "layout": "IPY_MODEL_ed29407ce31d49f2a81dae205f21e0e0",
       "tabbable": null,
       "tooltip": null
      }
     },
     "5734e7b26a5f456ca7d1d8e463631e0c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "57bfeeb7d6d242c3b3e49899297d0865": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5a67be5debc2434599a1607b7415302f",
       "placeholder": "​",
       "style": "IPY_MODEL_11cacecf919c447582ef908cd88ef169",
       "tabbable": null,
       "tooltip": null,
       "value": " 2414/2416 [02:35&lt;00:00, 11.83it/s]"
      }
     },
     "58e03f2e96974f409332a4cf79ad72aa": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_b6946fefcf484a11bf1118e408aa9355",
       "placeholder": "​",
       "style": "IPY_MODEL_4df3f346eb114d8f8048233e5fee15dd",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "595862f3c8cc484e898f4c186480aafd": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "59a86bf4262d4fbcb69b9db07b445862": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_deb272321d444c5e956e7ebe6d1af781",
       "max": 3435.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_7a83c97016f64560b7273d3d35109aae",
       "tabbable": null,
       "tooltip": null,
       "value": 3435.0
      }
     },
     "5a67be5debc2434599a1607b7415302f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5aa1ed5125974f508bbed4c46d90d1a8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_6a4d7be3a3864907969f61e1863d0ccc",
       "placeholder": "​",
       "style": "IPY_MODEL_6df60b7287024b9ab2bdb803d8f69447",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "5bc7107457a242a9a4d15bb2c2aef354": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5c4645a9e52f46d581e919b560f3fee6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5008e458b6f3455c979b34764a7796c3",
       "max": 3435.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_31e28ec3aab344fba314c177e184c0a5",
       "tabbable": null,
       "tooltip": null,
       "value": 3435.0
      }
     },
     "5c64ae2e243b48a795ada1434f1327e9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5c9046658dd144dd9605c7f60b0c3475": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5d66cdce591e41a5864319f89d628a8a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "5dbf28af2cac408b808badf5b6e610bd": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "5e46ba873dcb467997176b910cdfa21f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5bc7107457a242a9a4d15bb2c2aef354",
       "placeholder": "​",
       "style": "IPY_MODEL_d733facf78ca4cc7bff4802d6b9744af",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "5e7c93898f7c43ca82034715e5fe9d40": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_067ee3b7c8904cf0accc67c9b473c71f",
       "placeholder": "​",
       "style": "IPY_MODEL_7fba8c4e3077463aa77e4557b9fcc23a",
       "tabbable": null,
       "tooltip": null,
       "value": " 53/53 [00:00&lt;00:00, 275.26it/s]"
      }
     },
     "5e95a3f93fb044e0be2c39ebe3d580d1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5f2127eaa53944a79a940c07f2467a83": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "60536dae7fda496bb27fc84da9e6e51a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7106f1abc42c45c693cfcf0d5df261e5",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_5f2127eaa53944a79a940c07f2467a83",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "620fe7bed2f44bdab38325ce35e5139a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_d8d02336589046d1a2ef682e0a7719ee",
        "IPY_MODEL_0acf1ecd418443bf92224ae23e2618c3",
        "IPY_MODEL_17cd208be8cc43eeb709259b5d05d0e5"
       ],
       "layout": "IPY_MODEL_acc4a297670240058c8e175f6e6a86f8",
       "tabbable": null,
       "tooltip": null
      }
     },
     "637ddecc5c3e4c038ca66b50c5ce648a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_746f5be44aab4b6296597a46f5aee94e",
       "placeholder": "​",
       "style": "IPY_MODEL_cd73179dd15042bc8ee57d67780c5247",
       "tabbable": null,
       "tooltip": null,
       "value": " 3435/3435 [03:23&lt;00:00, 16.43it/s]"
      }
     },
     "6399fa7c15d14ea293c5b3d08b6ea371": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_eb2e9d1140d04e01be528aa9e1d9dded",
       "max": 53.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_3fc524cb9eb44939aebb34625a6f44d8",
       "tabbable": null,
       "tooltip": null,
       "value": 53.0
      }
     },
     "65d7b1f5bfd4475291086d158b08ea7e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "663c38cab9ec4868b735edb14632dfad": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_a23cce36b7414e58970415f9001a4b7e",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_1a9f7ae6ff0d4480a2f2a0a6ea4acbc8",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "6669e9185d614225b236833a549f6a7b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_595862f3c8cc484e898f4c186480aafd",
       "placeholder": "​",
       "style": "IPY_MODEL_22477744005a4fab823ce481d03acdc4",
       "tabbable": null,
       "tooltip": null,
       "value": "Generating Sequences for [&#x27;set05&#x27;, &#x27;set06&#x27;]: 100%"
      }
     },
     "6711da0e4acb4085a2e84595b436a161": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "678a5d482a39436a89a676b13264ac53": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "67dc1018fcde40edb2babed26653ac05": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_2e420bce08a74f91986e6362c9a9cd1e",
       "placeholder": "​",
       "style": "IPY_MODEL_76510be642bf4d7585bd0a32cee7d953",
       "tabbable": null,
       "tooltip": null,
       "value": " 2413/2416 [02:34&lt;00:00, 10.80it/s]"
      }
     },
     "680c7290ffa04601884a8f918d6aaafe": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4992433acbd34bdc98381af613b20329",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_c42162c17b2a48668578da05c3406577",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "68831eae169643d28a0eb1aabf4dae3e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_a16502ffebd84f0994c68b46b365689f",
       "placeholder": "​",
       "style": "IPY_MODEL_b01413d6f2ce41bba1fd8f59664140f4",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "690d84b1105b4f559674f8a1ed229a70": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "69b1bbd536a3423c9d6daa25ca9a134d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "6a0db82795da4ea6b715ef55dc5204fb": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6a4d7be3a3864907969f61e1863d0ccc": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6a68f5a4ad8d4112b895d07c245c852e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "6a8362fc732e43eba490d7e21b162704": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6aa36e7a590a44dfa03d046ea4caca96": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7a3d37af7a7b4e5d9a3e8211cbb4e3d3",
       "max": 3435.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_90bb0b4fffca456395b4daa25d6ca36b",
       "tabbable": null,
       "tooltip": null,
       "value": 3435.0
      }
     },
     "6bb839ba2ece4bc5aa1e3ecfdd6a00ee": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "6bd1a1ab128445999f6ac2bedd60216d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_de3b0a5b917b4dcdb0a7c32d3806b9a8",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_3f84aebbfa994f61b5e29148fcb319ee",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "6bdadf8b99b4407f82e725553ed9069a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6c466facd66f456f975e5b9cd9546c30": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "6cfae214a3cc44d785f8e9229dc46e5d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6d97034bf5634b81bfbd9651064904bd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ebbc614f635e4ea29802d64f383a1f80",
       "placeholder": "​",
       "style": "IPY_MODEL_8fa05adb9aec40e695e28b4ddb18232f",
       "tabbable": null,
       "tooltip": null,
       "value": " 3435/3435 [03:25&lt;00:00, 16.18it/s]"
      }
     },
     "6dae76ec837745b38ed554275773cdda": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "6dc5fd7aa2684311aaabacdb26f67b7c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6df60b7287024b9ab2bdb803d8f69447": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "6e343914d2844f59a94c3eb471c5b32d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "6f22dc73476d415d989717f78f8baa26": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "6f87bee62a224b24a104d2ea52ebbc46": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "7015f34127fc4fd596db4b10b90233fa": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_a399e943ea8d4df08029930a30edc56d",
        "IPY_MODEL_eee54b4844774f65bc2399545881d19f",
        "IPY_MODEL_f00175bf5f2e48b5acf837bd5d6dda61"
       ],
       "layout": "IPY_MODEL_98a399a345f14eacbdf0ab2950a99806",
       "tabbable": null,
       "tooltip": null
      }
     },
     "70bfa88e744e4c9381cbab2dee4aecf7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c0af4e2dbff14d2d84bb6629d511e160",
       "placeholder": "​",
       "style": "IPY_MODEL_971b139cf41a4f11bc1d85f456da930b",
       "tabbable": null,
       "tooltip": null,
       "value": " 3435/3435 [03:24&lt;00:00, 16.26it/s]"
      }
     },
     "7106f1abc42c45c693cfcf0d5df261e5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "714fd58a4b4c4b8c8b635137f8e75768": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "71de2e5045d74e91bbfd313908863381": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7254edc75a71406c874d1efa202d331a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_18a5d394157b43419a61115b01ee76ae",
       "placeholder": "​",
       "style": "IPY_MODEL_b0b167daa38c4d37ad866f073bd8887a",
       "tabbable": null,
       "tooltip": null,
       "value": " 3435/3435 [03:23&lt;00:00, 16.34it/s]"
      }
     },
     "72f40bbc3aaa4881bf5176db1ae39bd9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_821c7bb097264282840f108ff6880c8b",
        "IPY_MODEL_59a86bf4262d4fbcb69b9db07b445862",
        "IPY_MODEL_05846f68a4dc4812bfd4d6bb563abd34"
       ],
       "layout": "IPY_MODEL_e1560f10851d4c4bbe43ba7bccf4bc49",
       "tabbable": null,
       "tooltip": null
      }
     },
     "734d48eead5243358bd9adef15c30b81": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "746f5be44aab4b6296597a46f5aee94e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "747b598415e44c48a896c73b2278d5bd": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "74bad1080e6149cf892be039c06ad05f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "753afe7a9e3845fdb4db9ff6731568ff": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f79dc7d9963f486d9ad8d5d534579a7d",
       "placeholder": "​",
       "style": "IPY_MODEL_9bb99b3d0ac147328a49734768e87c3f",
       "tabbable": null,
       "tooltip": null,
       "value": " 2416/2416 [02:35&lt;00:00, 12.95it/s]"
      }
     },
     "75df6719043b4687bb5e17f66c965b40": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_2bf74166873c4720ae5c1e54f14fe439",
       "max": 3.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_be62c854a5274597ab042c1fc174c997",
       "tabbable": null,
       "tooltip": null,
       "value": 3.0
      }
     },
     "761edea639304dd1ae1ebddd7c3c604f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "76510be642bf4d7585bd0a32cee7d953": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "76cd39a8f2d2454f877a5700a8f90f12": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_061c7f1eeb4e4920902ef3b1017e6b26",
        "IPY_MODEL_7c70401e50b14dfc9248f11ad5b781a7",
        "IPY_MODEL_803809dec80a4af0b765b048719f68d6"
       ],
       "layout": "IPY_MODEL_332866295fb84dcc8da601a1ccb132ad",
       "tabbable": null,
       "tooltip": null
      }
     },
     "772b363860a541d6b98cee9f33f484a4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7737c67c7c3d462b80099823766ab207": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_07914c57493c4929856e71289a906b87",
        "IPY_MODEL_ea152776e9ad4a2293ca809e9ab8256d",
        "IPY_MODEL_ef33d6f0090641b6ad28d523862df075"
       ],
       "layout": "IPY_MODEL_dadb509347604e04a9f3173538afd26c",
       "tabbable": null,
       "tooltip": null
      }
     },
     "7874a7cb6f1d43238462fbc59bb456c2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_156103356324476bbdf6b86105753082",
       "placeholder": "​",
       "style": "IPY_MODEL_fd0315eefb1241e5a2403d8f730936f6",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "7983418c856943d5b09a8c8e4feb2c2a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7a3d37af7a7b4e5d9a3e8211cbb4e3d3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7a83c97016f64560b7273d3d35109aae": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "7ba7b83d849048f597f90727533315fe": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "7befd24e6f374869b923e6c8c6a9f109": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0e66eba47afa4bc8a8391c87a0bd1c39",
       "placeholder": "​",
       "style": "IPY_MODEL_fd97edb8e67e40cab1ab144231e593a8",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "7c449aa46a9e4742ab1d2c183ffb6111": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7c70401e50b14dfc9248f11ad5b781a7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_b124670f1b3d432a9f748390beafe759",
       "max": 3435.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_9a2f966d7e6c4c1c9c0fad7402a337ed",
       "tabbable": null,
       "tooltip": null,
       "value": 3435.0
      }
     },
     "7d5e7cf6f4cb4e72b0a61a979f1a3d62": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7f561a74189c460e8be6390999a92ace": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_cc8a39eafd164b6b96b1cc329792a6e6",
       "placeholder": "​",
       "style": "IPY_MODEL_3122b9121f97403bb08f9ba276489b73",
       "tabbable": null,
       "tooltip": null,
       "value": "Loading YOLOP PKLs: 100%"
      }
     },
     "7fba8c4e3077463aa77e4557b9fcc23a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "802ae38980304c4ba6f5488a2dd3be64": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "803809dec80a4af0b765b048719f68d6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_2647c252a843456f9a8d1e01b284979d",
       "placeholder": "​",
       "style": "IPY_MODEL_3bb854bd842943e186618c99d05623a4",
       "tabbable": null,
       "tooltip": null,
       "value": " 3435/3435 [03:23&lt;00:00, 16.42it/s]"
      }
     },
     "8175fe5e7e1542038030df3062812e05": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "81c7e7055b08425bb763faa45c426c09": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "821c7bb097264282840f108ff6880c8b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ccb27cdb4956454ebbb79ec875ae1dce",
       "placeholder": "​",
       "style": "IPY_MODEL_c7cb505efdaa4c4f91d4d26c80f8b388",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "8321ba0f6e514966bfe6527c3400f69c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "83ce55a66eb947668471ade9adc85b61": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "8916675887314fffbd5b0d77f683e8e7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_b42f1e15d2374cd2909e6938c0fe1c3c",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_383184734d7c48bc94a1f49475032863",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "89314c39935b4b77bebf1b0f9ff6a170": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8a0bb5a9afdd44b1809ddff318499f40": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_aef1af7c8e0f496bb305e55f9aa34a00",
       "placeholder": "​",
       "style": "IPY_MODEL_d5d0f5a8a12b4648a4d19673a5660e47",
       "tabbable": null,
       "tooltip": null,
       "value": " 3435/3435 [03:26&lt;00:00, 16.02it/s]"
      }
     },
     "8a7f73da120942c5a2085f94a1ba61c8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_6669e9185d614225b236833a549f6a7b",
        "IPY_MODEL_fabd84482abe4623ba397e9c20dd9b83",
        "IPY_MODEL_a598f706c8154a91b45772bb37d994f8"
       ],
       "layout": "IPY_MODEL_30016cb98ed943b68b22a456fc8397c7",
       "tabbable": null,
       "tooltip": null
      }
     },
     "8ada32fc5f9043ceab2221329cc7b00b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5e95a3f93fb044e0be2c39ebe3d580d1",
       "placeholder": "​",
       "style": "IPY_MODEL_5d66cdce591e41a5864319f89d628a8a",
       "tabbable": null,
       "tooltip": null,
       "value": " 2414/2416 [02:35&lt;00:00, 12.28it/s]"
      }
     },
     "8b81652740af450c9011a05c52b6bf7f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8bdd8711607c4e37b704e0db78cd70a9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8c3c09a6df4f403eb2b24ae1f6a0a131": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e689a6ee5b7b4b8b85055e653c9ebe55",
       "placeholder": "​",
       "style": "IPY_MODEL_eab4f1639dc24d42bcee42515e8e6c61",
       "tabbable": null,
       "tooltip": null,
       "value": " 2416/2416 [02:34&lt;00:00, 14.75it/s]"
      }
     },
     "8d02bde85d1f41dba6a9149de4b00aab": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8daa61c3682c44e691d820e44b02bd60": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8e1649b192ff43bf8820816cace22fb9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "8f4b608e5b2c4d429259997cd6c3f850": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_94cdef4a61094385a24895f71ff43126",
       "placeholder": "​",
       "style": "IPY_MODEL_0bef750a1d9444b7b6f0191b2eaaadf1",
       "tabbable": null,
       "tooltip": null,
       "value": " 2415/2416 [02:35&lt;00:00, 12.39it/s]"
      }
     },
     "8f59a4ca70e145cfaeacf69279e7cc1e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "8fa05adb9aec40e695e28b4ddb18232f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "90bb0b4fffca456395b4daa25d6ca36b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "90e406e6dee245c9aa508dc09b26718c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_f2d8b36b6d8649a8b283fda3f7c64bc4",
        "IPY_MODEL_d8cbd60c2a354b2383240047dc96eb1d",
        "IPY_MODEL_3e08ed7562d341b686cbd92a8bb7dbbe"
       ],
       "layout": "IPY_MODEL_b8a6dea0a2404e43855630da85fba4a5",
       "tabbable": null,
       "tooltip": null
      }
     },
     "9215fe25b2fc48bf9936751c8fbbbb49": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "941b60e2c1c94cdd9e24b0d039602bf0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_d2ed7ee0437f4fbcacf7e8b975ede3fa",
        "IPY_MODEL_bc6e68c4098b44d5a669bbb973fd2b60",
        "IPY_MODEL_1f1c64ef16e047a8aa2a76e3335e390c"
       ],
       "layout": "IPY_MODEL_b2ebc10ef3914f988bfcc331ea32746c",
       "tabbable": null,
       "tooltip": null
      }
     },
     "943cc713fecb49ebbcefdcd2910c52f6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "94cdef4a61094385a24895f71ff43126": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "954de9cbfe184a7abfaae37fdf67747f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "963dca93506e448783b350e355c01025": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "971b139cf41a4f11bc1d85f456da930b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "97ff094284094e52b82fe996c811ff9e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "98a399a345f14eacbdf0ab2950a99806": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "995fdafb8c9842f5bb95e7295eba48e8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7983418c856943d5b09a8c8e4feb2c2a",
       "placeholder": "​",
       "style": "IPY_MODEL_378723d4a3ac49b58b44cc5a4926f274",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "9a2f966d7e6c4c1c9c0fad7402a337ed": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "9a38f6e3db1b48ce8858829cdadba196": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "9ab2fae31669437cb16d5539b5ff4389": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9b26a59a78f64a1fab14920cfaa22731": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9bb99b3d0ac147328a49734768e87c3f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "9d4a769095e5408bbfec36797936071a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "9dd92cf3cc60446ab21a0a442cd63f94": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "9e484b168f714a41b44ddff66f70c4a0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_7f561a74189c460e8be6390999a92ace",
        "IPY_MODEL_6399fa7c15d14ea293c5b3d08b6ea371",
        "IPY_MODEL_b2e65fc2e07b46e08f138088adc4fc21"
       ],
       "layout": "IPY_MODEL_fc8caf3d9b8e454a93fb2579c6e43881",
       "tabbable": null,
       "tooltip": null
      }
     },
     "9e7c1b12a41d4d46b54c071f781e903a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "9efb4439d8974853b07f25ca58886ce8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a0043a55084e4e609358c98cd6de59d6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a0a609ee0cc44a9da665efd39f33eeaf": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ff6450f73e9b476da2a6e24c25b96934",
       "placeholder": "​",
       "style": "IPY_MODEL_9a38f6e3db1b48ce8858829cdadba196",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "a108b986887d47d580927bc7edd3a0dc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "a16502ffebd84f0994c68b46b365689f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a18ade4bb304482997a8e7d99a49b141": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_71de2e5045d74e91bbfd313908863381",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_0719bc6be698468798a89db05125dfab",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "a1f470c8ef9c4e94b0038fe7015c0917": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a23cce36b7414e58970415f9001a4b7e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a261ff9c5da14ce6a3589c1cfb584405": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "a26ad52629a84a3fa59c48b7e383c3c0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_de0b4126e5bd450b9c3f865be25c3abb",
        "IPY_MODEL_046b9e9271514246b5704d7ae86290bf",
        "IPY_MODEL_4c30c931b3424f00a5aa77bd1392c2f7"
       ],
       "layout": "IPY_MODEL_db72c46edce5470b8e4ac42db4ab417f",
       "tabbable": null,
       "tooltip": null
      }
     },
     "a399e943ea8d4df08029930a30edc56d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9efb4439d8974853b07f25ca58886ce8",
       "placeholder": "​",
       "style": "IPY_MODEL_963dca93506e448783b350e355c01025",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "a3c06618206f4b9184cd5fc3240a7135": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_bd1b462475324987a2f8e8cccdeaf87f",
       "placeholder": "​",
       "style": "IPY_MODEL_b19f1b37346340c5a294db7929f1ad2d",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "a5290e0dc08f47d6b0e3b92ed14469b7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7c449aa46a9e4742ab1d2c183ffb6111",
       "max": 53.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_50bae2fd8ebe48a6a4291a55a040d251",
       "tabbable": null,
       "tooltip": null,
       "value": 53.0
      }
     },
     "a598f706c8154a91b45772bb37d994f8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5c9046658dd144dd9605c7f60b0c3475",
       "placeholder": "​",
       "style": "IPY_MODEL_5734e7b26a5f456ca7d1d8e463631e0c",
       "tabbable": null,
       "tooltip": null,
       "value": " 2/2 [00:00&lt;00:00, 29.76it/s]"
      }
     },
     "a6d099afd22a44efa3f72d30bf7f3003": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_2285b77868b14fe3a112ab013a206906",
       "placeholder": "​",
       "style": "IPY_MODEL_271f45e37e0a4e71924b96b96be096ab",
       "tabbable": null,
       "tooltip": null,
       "value": " 2416/2416 [02:36&lt;00:00, 13.33it/s]"
      }
     },
     "a8b3eee27de6445e932b2cc466fb7f87": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a94f9e7ac9de4054b95969a0d03e5544": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "aa4ade78187b4976b3790258cdb8a7d6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_1e54da5a191040d094f1d3626fcc94c5",
        "IPY_MODEL_3f42970b25804ad0816b954d383e16bd",
        "IPY_MODEL_19372d99b8764a0a9564aee7ddd42809"
       ],
       "layout": "IPY_MODEL_f69f58df3e0749ce8cadc899607a0d0e",
       "tabbable": null,
       "tooltip": null
      }
     },
     "aa6eca2974ab4bc7825b27eaa26af413": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "ab87dff54a6f4495ba212fe66b8e4c30": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_bb432d32639a4d84b317552f0bbf6802",
        "IPY_MODEL_1057f821d8e7406b80340b939c0e668c",
        "IPY_MODEL_bb44d492d03d465eb5ca1a6262af81a3"
       ],
       "layout": "IPY_MODEL_8e1649b192ff43bf8820816cace22fb9",
       "tabbable": null,
       "tooltip": null
      }
     },
     "abbf4693f5924db99da38ebe9b638cd5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "acc4a297670240058c8e175f6e6a86f8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "ad5fa73c23324850879b9b151da92e57": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_7874a7cb6f1d43238462fbc59bb456c2",
        "IPY_MODEL_a18ade4bb304482997a8e7d99a49b141",
        "IPY_MODEL_ba6c1ef603074f149acbe1528861bf7e"
       ],
       "layout": "IPY_MODEL_5dbf28af2cac408b808badf5b6e610bd",
       "tabbable": null,
       "tooltip": null
      }
     },
     "ae5f20e6deef4a04be93298d36df4b8e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ae6cf76c179f405e88b9cc325e2205b9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_8d02bde85d1f41dba6a9149de4b00aab",
       "placeholder": "​",
       "style": "IPY_MODEL_83ce55a66eb947668471ade9adc85b61",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "aeb2aaa3af594d9d9f5eab4d206e7c4a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "aef1af7c8e0f496bb305e55f9aa34a00": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "afafc9344ca64e66ac4ca1a13bedc0f6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b01413d6f2ce41bba1fd8f59664140f4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "b0b167daa38c4d37ad866f073bd8887a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "b124670f1b3d432a9f748390beafe759": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b18fc9dcbda342b88ba024434d39a88c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b19f1b37346340c5a294db7929f1ad2d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "b2e65fc2e07b46e08f138088adc4fc21": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0fefb4a6dffa4ecb973741b5272d33f9",
       "placeholder": "​",
       "style": "IPY_MODEL_761edea639304dd1ae1ebddd7c3c604f",
       "tabbable": null,
       "tooltip": null,
       "value": " 53/53 [00:01&lt;00:00, 36.68it/s]"
      }
     },
     "b2ebc10ef3914f988bfcc331ea32746c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b4228fc4e5ee46f5b7265d988050c4fe": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "b42f1e15d2374cd2909e6938c0fe1c3c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b491612c1a324a04ac29ed395ef07716": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5c64ae2e243b48a795ada1434f1327e9",
       "max": 3435.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_416f4ef14bf6437987fd82bbe2fded37",
       "tabbable": null,
       "tooltip": null,
       "value": 3435.0
      }
     },
     "b51365d9ec034ce3b648c7b82f36b7c4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_a0a609ee0cc44a9da665efd39f33eeaf",
        "IPY_MODEL_e1b8edd083444ed499b58837515c58ab",
        "IPY_MODEL_d46ff66a7fd742d4a6c460eba5f8ddb7"
       ],
       "layout": "IPY_MODEL_c1abe92b12bb46f294e67edd145b12d1",
       "tabbable": null,
       "tooltip": null
      }
     },
     "b5b6637b8f6449ef97ecd10bbfbe84ae": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "b5ba4b55190e45878e35baa9881b0418": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b5d3fe958474409ea9eaa0948e16c9c1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f94bd17d9cf14f9fb8a33ed771ad4e56",
       "placeholder": "​",
       "style": "IPY_MODEL_43ed0a49397a423980768a5cba599722",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "b61a069f0c364460984e7a6d45a6e7af": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_7befd24e6f374869b923e6c8c6a9f109",
        "IPY_MODEL_cfe5737d0414407e8382a8fec732c6ee",
        "IPY_MODEL_374326df30f34bfeb1ca2aa7e796ba57"
       ],
       "layout": "IPY_MODEL_3b6fd3bc7cd144c498779f5e963928b9",
       "tabbable": null,
       "tooltip": null
      }
     },
     "b6644d721b994fdc847772a79169cc18": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_6dc5fd7aa2684311aaabacdb26f67b7c",
       "placeholder": "​",
       "style": "IPY_MODEL_f8dbe2962fa94de98affa434991b9ce6",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "b6946fefcf484a11bf1118e408aa9355": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b7352608ea35439186b1c7b4bd453129": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "b7ca0e2049a147b29499d8f6eb356e96": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "b8776f1eb86144eebe5b9349af44b0e1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b8a6dea0a2404e43855630da85fba4a5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "b9d132c3824f4db0ae9da6a8221bf6ea": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b9dc67797c8d4b67ab62c33905307636": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "ba6c1ef603074f149acbe1528861bf7e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_abbf4693f5924db99da38ebe9b638cd5",
       "placeholder": "​",
       "style": "IPY_MODEL_a94f9e7ac9de4054b95969a0d03e5544",
       "tabbable": null,
       "tooltip": null,
       "value": " 2415/2416 [02:39&lt;00:00, 12.66it/s]"
      }
     },
     "bb2c37d2312441a48c8edfe23e230a1b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "bb432d32639a4d84b317552f0bbf6802": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9ab2fae31669437cb16d5539b5ff4389",
       "placeholder": "​",
       "style": "IPY_MODEL_edd617d505504bfbbaa95667afab2207",
       "tabbable": null,
       "tooltip": null,
       "value": "Generating CM Data: 100%"
      }
     },
     "bb44d492d03d465eb5ca1a6262af81a3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ce76bd005441460a9f1bc54b631f7aa2",
       "placeholder": "​",
       "style": "IPY_MODEL_38ae6243494a499889e52418007e61ce",
       "tabbable": null,
       "tooltip": null,
       "value": " 2415/2416 [02:39&lt;00:00, 11.73it/s]"
      }
     },
     "bc3ac2de752044f4b3e06b0f7d0c0cab": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_678a5d482a39436a89a676b13264ac53",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_06d94d572007440498b9dd27b42e198b",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "bc6e68c4098b44d5a669bbb973fd2b60": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_de8f139ff0da4caf936b6325df13a204",
       "max": 333454.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_6e343914d2844f59a94c3eb471c5b32d",
       "tabbable": null,
       "tooltip": null,
       "value": 333454.0
      }
     },
     "bd1b462475324987a2f8e8cccdeaf87f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "be62c854a5274597ab042c1fc174c997": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "c0af4e2dbff14d2d84bb6629d511e160": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c0ce0ff550854d65b5b818ef0ab63976": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "c1abe92b12bb46f294e67edd145b12d1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "c229a62991f341099d4dab2391269476": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "c253bb660d684acebe7dbb4d202eb4d5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "c2c811d73090428b9098bdbacff1a68c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "c34a575ad8054acf8094f91d393722a0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5277fac5d766407e9adb1612debc845b",
       "placeholder": "​",
       "style": "IPY_MODEL_12997782572f4bbaa5771b82dea9ebbd",
       "tabbable": null,
       "tooltip": null,
       "value": " 2414/2416 [02:33&lt;00:00, 11.71it/s]"
      }
     },
     "c42162c17b2a48668578da05c3406577": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "c516f5dde6a445eaaea0f8958fc37741": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_45fd53a2c30444d1b1122516e27d6d39",
        "IPY_MODEL_d4f59af0c2f9420d9c96684fdb03e6ed",
        "IPY_MODEL_f0f79856dd7a40baaeda0fdf26f4c67d"
       ],
       "layout": "IPY_MODEL_f4290315a5ea4fe29090be497213bf17",
       "tabbable": null,
       "tooltip": null
      }
     },
     "c584ee4203b745dda57e53ee82da443d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c5e17250335f4ae5a8b85d47d408c1c6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_3c9dd554589e41558a9148e3f8445e95",
        "IPY_MODEL_b491612c1a324a04ac29ed395ef07716",
        "IPY_MODEL_f856c19705304e2da3bfacd07abf6eea"
       ],
       "layout": "IPY_MODEL_c7b7a5be506647ea9a5e2cce7319383f",
       "tabbable": null,
       "tooltip": null
      }
     },
     "c7949ddf4295417c91a3adad821b680d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c7b7a5be506647ea9a5e2cce7319383f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "c7cb505efdaa4c4f91d4d26c80f8b388": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "c89960b4587942b9825bd5332998f41b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c8e1820e16f544f39016c472897edf4f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "cc8a39eafd164b6b96b1cc329792a6e6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ccb27cdb4956454ebbb79ec875ae1dce": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "cd73179dd15042bc8ee57d67780c5247": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "cde53f15a4a440a18b673fdffbf62f98": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_1e98fa05411b426b95846a0c3ca912cf",
       "placeholder": "​",
       "style": "IPY_MODEL_1128fb97fe6e463eb2262934d8b66382",
       "tabbable": null,
       "tooltip": null,
       "value": " 3/3 [00:00&lt;00:00, 15.49it/s]"
      }
     },
     "ce76bd005441460a9f1bc54b631f7aa2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "cfe5737d0414407e8382a8fec732c6ee": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_65d7b1f5bfd4475291086d158b08ea7e",
       "max": 3435.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_a108b986887d47d580927bc7edd3a0dc",
       "tabbable": null,
       "tooltip": null,
       "value": 3435.0
      }
     },
     "d2ed7ee0437f4fbcacf7e8b975ede3fa": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9b26a59a78f64a1fab14920cfaa22731",
       "placeholder": "​",
       "style": "IPY_MODEL_2a974a93dd90428bbb835776c2cdbe4b",
       "tabbable": null,
       "tooltip": null,
       "value": "Extracting: 100%"
      }
     },
     "d3dcf8d6c9ef4bc9897131a48299a749": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "d42d6ae1eb1a4ec59df71c905dc05b52": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "d46ff66a7fd742d4a6c460eba5f8ddb7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_01f5dfbbacaf4a6ba92bf07d65983b70",
       "placeholder": "​",
       "style": "IPY_MODEL_de2bc59fed6f4531b3370c90dd74b9e8",
       "tabbable": null,
       "tooltip": null,
       "value": " 2416/2416 [02:35&lt;00:00, 14.22it/s]"
      }
     },
     "d4f59af0c2f9420d9c96684fdb03e6ed": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_772b363860a541d6b98cee9f33f484a4",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_6c466facd66f456f975e5b9cd9546c30",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "d54acbc99f6447bd8eccf6a6d170f0a8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_15ce30222ab9416fad43a95715bdcddf",
       "placeholder": "​",
       "style": "IPY_MODEL_c0ce0ff550854d65b5b818ef0ab63976",
       "tabbable": null,
       "tooltip": null,
       "value": " 2414/2416 [02:36&lt;00:00, 10.99it/s]"
      }
     },
     "d5d0f5a8a12b4648a4d19673a5660e47": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "d62ef9f861b9434cb7ea6fba4c73ede8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "d704ba9cd02e431483aa592529d14dbe": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_8daa61c3682c44e691d820e44b02bd60",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_d62ef9f861b9434cb7ea6fba4c73ede8",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "d733facf78ca4cc7bff4802d6b9744af": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "d7586cf89a344d2c8ddfde93e5938c5e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "d79d7eeff3494ab485112fa5022a0451": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d8aed9a07cf1443cb02d7e8e47ea1d29": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_ae6cf76c179f405e88b9cc325e2205b9",
        "IPY_MODEL_6aa36e7a590a44dfa03d046ea4caca96",
        "IPY_MODEL_637ddecc5c3e4c038ca66b50c5ce648a"
       ],
       "layout": "IPY_MODEL_d7586cf89a344d2c8ddfde93e5938c5e",
       "tabbable": null,
       "tooltip": null
      }
     },
     "d8cbd60c2a354b2383240047dc96eb1d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_dd3abf48320e463c967ec8f23bdc5d8b",
       "max": 3435.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_6dae76ec837745b38ed554275773cdda",
       "tabbable": null,
       "tooltip": null,
       "value": 3435.0
      }
     },
     "d8d02336589046d1a2ef682e0a7719ee": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_b18fc9dcbda342b88ba024434d39a88c",
       "placeholder": "​",
       "style": "IPY_MODEL_41046f0bbb364892afceb56bed92f1be",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "dadb509347604e04a9f3173538afd26c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "db72c46edce5470b8e4ac42db4ab417f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "db9774ef5a08408bace1bba1290b6a2a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "dc46c1d91cf748e08dde47fc576105c7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "dd3abf48320e463c967ec8f23bdc5d8b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "de0b4126e5bd450b9c3f865be25c3abb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4c790ea2cc4c4637b40cb7a22b1df224",
       "placeholder": "​",
       "style": "IPY_MODEL_e589443043b243809fed85742dff37ca",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "de2bc59fed6f4531b3370c90dd74b9e8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "de3b0a5b917b4dcdb0a7c32d3806b9a8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "de8f139ff0da4caf936b6325df13a204": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "deb272321d444c5e956e7ebe6d1af781": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e08dfd8901cc4546bfcda42203fb22fc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_546fc0e84d8744cf8bb0136824dd9da9",
       "placeholder": "​",
       "style": "IPY_MODEL_9215fe25b2fc48bf9936751c8fbbbb49",
       "tabbable": null,
       "tooltip": null,
       "value": "Generating sequences: 100%"
      }
     },
     "e1560f10851d4c4bbe43ba7bccf4bc49": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "e1b8edd083444ed499b58837515c58ab": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_afafc9344ca64e66ac4ca1a13bedc0f6",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_9e7c1b12a41d4d46b54c071f781e903a",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "e39d3ca7c3834a9ebfa976693dd2f45e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e589443043b243809fed85742dff37ca": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "e6793b86ec164cfe9bf95dbddfb2bbbd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_a8b3eee27de6445e932b2cc466fb7f87",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_802ae38980304c4ba6f5488a2dd3be64",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "e689a6ee5b7b4b8b85055e653c9ebe55": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e7829e4e8e0742bf85bdd23809f50d9e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_a0043a55084e4e609358c98cd6de59d6",
       "placeholder": "​",
       "style": "IPY_MODEL_4cac99278ad1488bb385c03a6e0df645",
       "tabbable": null,
       "tooltip": null,
       "value": " 2415/2416 [02:35&lt;00:00, 12.31it/s]"
      }
     },
     "ea152776e9ad4a2293ca809e9ab8256d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_6cfae214a3cc44d785f8e9229dc46e5d",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_2d0b1373f42242cabaf1186d70f9fd19",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "ea88772216fb4a1db932b6bcb4dbdbae": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "ea9f8e2c969b4f0fab88004585010984": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_427cfc2370a249b78a02077c8636d443",
        "IPY_MODEL_a5290e0dc08f47d6b0e3b92ed14469b7",
        "IPY_MODEL_5e7c93898f7c43ca82034715e5fe9d40"
       ],
       "layout": "IPY_MODEL_8b81652740af450c9011a05c52b6bf7f",
       "tabbable": null,
       "tooltip": null
      }
     },
     "eab4f1639dc24d42bcee42515e8e6c61": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "eb2e9d1140d04e01be528aa9e1d9dded": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ebbc614f635e4ea29802d64f383a1f80": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ed29407ce31d49f2a81dae205f21e0e0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "edd617d505504bfbbaa95667afab2207": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "ede6de9d1e9642d69d898cf72368e52e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_714fd58a4b4c4b8c8b635137f8e75768",
       "placeholder": "​",
       "style": "IPY_MODEL_8321ba0f6e514966bfe6527c3400f69c",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "ee3c26c28d5f4c32930fd824ff2f62aa": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_74bad1080e6149cf892be039c06ad05f",
       "placeholder": "​",
       "style": "IPY_MODEL_d42d6ae1eb1a4ec59df71c905dc05b52",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "eebe08f0599746539feb01aadb31a226": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "eee54b4844774f65bc2399545881d19f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0d4709e881474cb6b1b40f0b2d7c46ae",
       "max": 3435.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_20e47fa3938d497cb314b8b3405fd933",
       "tabbable": null,
       "tooltip": null,
       "value": 3435.0
      }
     },
     "ef33d6f0090641b6ad28d523862df075": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_290b1ab81f244fbc80b39cac4c7751ae",
       "placeholder": "​",
       "style": "IPY_MODEL_8f59a4ca70e145cfaeacf69279e7cc1e",
       "tabbable": null,
       "tooltip": null,
       "value": " 2415/2416 [02:38&lt;00:00, 12.84it/s]"
      }
     },
     "f00175bf5f2e48b5acf837bd5d6dda61": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5036efb6bd99407ebddcb8005dda4bdc",
       "placeholder": "​",
       "style": "IPY_MODEL_a261ff9c5da14ce6a3589c1cfb584405",
       "tabbable": null,
       "tooltip": null,
       "value": " 3434/3435 [03:23&lt;00:00, 16.26it/s]"
      }
     },
     "f0e288ea79c7455fb3d4c510cb68cd31": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_35cb789a25d84249b0845b64afe3377c",
       "placeholder": "​",
       "style": "IPY_MODEL_b4228fc4e5ee46f5b7265d988050c4fe",
       "tabbable": null,
       "tooltip": null,
       "value": " 2416/2416 [02:36&lt;00:00, 14.45it/s]"
      }
     },
     "f0f79856dd7a40baaeda0fdf26f4c67d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_8175fe5e7e1542038030df3062812e05",
       "placeholder": "​",
       "style": "IPY_MODEL_42672ba5a08c46bb9b823cc1704b9e60",
       "tabbable": null,
       "tooltip": null,
       "value": " 2415/2416 [02:36&lt;00:00, 13.08it/s]"
      }
     },
     "f1e8d21d657a4b1585b1069ebc78a297": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f2d8b36b6d8649a8b283fda3f7c64bc4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7d5e7cf6f4cb4e72b0a61a979f1a3d62",
       "placeholder": "​",
       "style": "IPY_MODEL_81c7e7055b08425bb763faa45c426c09",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "f2de48a18cf8422f8fdfeaeba1f2b668": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_26eb7710f4424b2582da2aa6f62067cd",
        "IPY_MODEL_4200421fd4a644cd820e7a7e39e1eedb",
        "IPY_MODEL_8a0bb5a9afdd44b1809ddff318499f40"
       ],
       "layout": "IPY_MODEL_42068d9a8a7d4596afd3f35f3db89dd4",
       "tabbable": null,
       "tooltip": null
      }
     },
     "f354e696b9134350bc8809bf9a8cdf51": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "f428e91c06a947a4a5a59fb39114291e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f4290315a5ea4fe29090be497213bf17": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "f6596f4362824242b7b7c318fdb01b2a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_5aa1ed5125974f508bbed4c46d90d1a8",
        "IPY_MODEL_d704ba9cd02e431483aa592529d14dbe",
        "IPY_MODEL_c34a575ad8054acf8094f91d393722a0"
       ],
       "layout": "IPY_MODEL_f354e696b9134350bc8809bf9a8cdf51",
       "tabbable": null,
       "tooltip": null
      }
     },
     "f69f58df3e0749ce8cadc899607a0d0e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "f7122cbeafa0466e9118bf5c5011639d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "f79dc7d9963f486d9ad8d5d534579a7d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f7aca40cc4ea41bf91f5496d40353d17": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "f856c19705304e2da3bfacd07abf6eea": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ae5f20e6deef4a04be93298d36df4b8e",
       "placeholder": "​",
       "style": "IPY_MODEL_69b1bbd536a3423c9d6daa25ca9a134d",
       "tabbable": null,
       "tooltip": null,
       "value": " 3435/3435 [03:22&lt;00:00, 16.40it/s]"
      }
     },
     "f8dbe2962fa94de98affa434991b9ce6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f8dd6679433344e88d9e724c11a2d85f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f94bd17d9cf14f9fb8a33ed771ad4e56": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "fa8e750ec867404699d0483e48c26356": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "fabd84482abe4623ba397e9c20dd9b83": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_6a8362fc732e43eba490d7e21b162704",
       "max": 2.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_954de9cbfe184a7abfaae37fdf67747f",
       "tabbable": null,
       "tooltip": null,
       "value": 2.0
      }
     },
     "fbc746ae6e67419faa2ea1387585e12f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_b9d132c3824f4db0ae9da6a8221bf6ea",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_7ba7b83d849048f597f90727533315fe",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "fc8caf3d9b8e454a93fb2579c6e43881": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "fd0315eefb1241e5a2403d8f730936f6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "fd97edb8e67e40cab1ab144231e593a8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "ff6450f73e9b476da2a6e24c25b96934": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
