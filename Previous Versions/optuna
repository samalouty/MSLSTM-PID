{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":11201333,"sourceType":"datasetVersion","datasetId":6993690},{"sourceId":11201362,"sourceType":"datasetVersion","datasetId":6993708},{"sourceId":11201388,"sourceType":"datasetVersion","datasetId":6993722},{"sourceId":11201422,"sourceType":"datasetVersion","datasetId":6993740},{"sourceId":11201506,"sourceType":"datasetVersion","datasetId":6993794},{"sourceId":11201543,"sourceType":"datasetVersion","datasetId":6993809},{"sourceId":11255589,"sourceType":"datasetVersion","datasetId":7034191},{"sourceId":11382982,"sourceType":"datasetVersion","datasetId":7127490},{"sourceId":11402679,"sourceType":"datasetVersion","datasetId":7142036},{"sourceId":11684148,"sourceType":"datasetVersion","datasetId":7333398},{"sourceId":11720877,"sourceType":"datasetVersion","datasetId":7357780},{"sourceId":302300,"sourceType":"modelInstanceVersion","modelInstanceId":258142,"modelId":279383},{"sourceId":307831,"sourceType":"modelInstanceVersion","modelInstanceId":262207,"modelId":283333},{"sourceId":316944,"sourceType":"modelInstanceVersion","modelInstanceId":267476,"modelId":288527},{"sourceId":329886,"sourceType":"modelInstanceVersion","modelInstanceId":276781,"modelId":297682},{"sourceId":329908,"sourceType":"modelInstanceVersion","modelInstanceId":276800,"modelId":297702},{"sourceId":352620,"sourceType":"modelInstanceVersion","isSourceIdPinned":true,"modelInstanceId":294156,"modelId":314775}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!git clone https://github.com/aras62/PIE.git\n!unzip /content/PIE/annotations/annotations.zip -d /content/PIE\n!unzip /content/PIE/annotations/annotations_vehicle.zip -d /content/PIE\n# !git clone https://github.com/hustvl/YOLOP.git\n!mkdir /kaggle/working/PIE/content","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T13:27:07.771729Z","iopub.execute_input":"2025-04-19T13:27:07.772029Z","iopub.status.idle":"2025-04-19T13:27:08.263278Z","shell.execute_reply.started":"2025-04-19T13:27:07.771999Z","shell.execute_reply":"2025-04-19T13:27:08.262097Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"!pip install -q ultralytics opencv-python-headless ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-01T07:05:30.756957Z","iopub.execute_input":"2025-05-01T07:05:30.757137Z","iopub.status.idle":"2025-05-01T07:05:36.274800Z","shell.execute_reply.started":"2025-05-01T07:05:30.757119Z","shell.execute_reply":"2025-05-01T07:05:36.273824Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import Dataset, DataLoader\nimport xml.etree.ElementTree as ET\nimport os\nimport numpy as np\nfrom sklearn.metrics import accuracy_score, precision_recall_fscore_support, roc_auc_score, confusion_matrix, ConfusionMatrixDisplay\nfrom tqdm.notebook import tqdm\nimport random\nimport math\nimport zipfile\nimport cv2\nfrom ultralytics import YOLO\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport time","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-15T19:55:10.154360Z","iopub.execute_input":"2025-04-15T19:55:10.154719Z","iopub.status.idle":"2025-04-15T19:55:16.590012Z","shell.execute_reply.started":"2025-04-15T19:55:10.154687Z","shell.execute_reply":"2025-04-15T19:55:16.589278Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"zip_path = \"/kaggle/working/PIE/annotations/annotations.zip\"\nextract_to = \"/kaggle/working/PIE/annotations/\"\n\nif os.path.exists(extract_to + 'annotations'):\n    print(\"Exists already. Not unzipping.\")\nelse:\n    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n        zip_ref.extractall(extract_to)\n    print(\"Unzipped successfully.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-15T19:55:16.590843Z","iopub.execute_input":"2025-04-15T19:55:16.591210Z","iopub.status.idle":"2025-04-15T19:55:16.596284Z","shell.execute_reply.started":"2025-04-15T19:55:16.591187Z","shell.execute_reply":"2025-04-15T19:55:16.595261Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"zip_path = \"/kaggle/working/PIE/annotations/annotations_vehicle.zip\"\nextract_to = \"/kaggle/working/PIE/annotations/\"\n\nif os.path.exists(extract_to + 'annotations_vehicle'):\n    print(\"Exists already. Not unzipping.\")\nelse:\n    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n        zip_ref.extractall(extract_to)\n    print(\"Unzipped successfully.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-15T19:55:16.597390Z","iopub.execute_input":"2025-04-15T19:55:16.597839Z","iopub.status.idle":"2025-04-15T19:55:16.618074Z","shell.execute_reply.started":"2025-04-15T19:55:16.597803Z","shell.execute_reply":"2025-04-15T19:55:16.617129Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"zip_path = \"/kaggle/working/PIE/annotations/annotations_attributes.zip\"\nextract_to = \"/kaggle/working/PIE/annotations/\"\n\nif os.path.exists(extract_to + \"annotations_attributes\"):\n    print(\"Exists already. Not unzipping.\")\nelse:\n    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n        zip_ref.extractall(extract_to)\n    print(\"Unzipped successfully.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-15T19:55:16.619029Z","iopub.execute_input":"2025-04-15T19:55:16.619360Z","iopub.status.idle":"2025-04-15T19:55:16.635884Z","shell.execute_reply.started":"2025-04-15T19:55:16.619328Z","shell.execute_reply":"2025-04-15T19:55:16.634975Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# -----------------------------------------------------------------------------\n# CELL 1: DATA PREPARATION & BALANCING  (run once before training)\n# -----------------------------------------------------------------------------\n#  This cell:\n#    1. Loads (or regenerates) the PIE database\n#    2. Computes per-signal standardisation scalers\n#    3. Extracts ALL training sequences for every stream\n#    4. Balances the dataset 50 / 50 on the crossing label\n#    5. Writes two pickles:\n#         - /kaggle/working/balanced_train_data.pkl\n#         - /kaggle/working/scalers.pkl\n# -----------------------------------------------------------------------------\n\nimport os\nimport sys\nimport time\nimport pickle\nimport gc\nfrom pathlib import Path\n\nimport cv2                               # used internally by PIE utilities\nimport numpy as np\nimport torch\nfrom torch.utils.data import Dataset\nfrom tqdm.notebook import tqdm\n\n# -----------------------------------------------------------------------------#\n#                                PIE utilities                                 #\n# -----------------------------------------------------------------------------#\npie_utilities_path = \"/kaggle/working/PIE/utilities\"\nif pie_utilities_path not in sys.path:\n    sys.path.insert(0, pie_utilities_path)\n\ntry:\n    from pie_data import PIE\nexcept ImportError as e:\n    print(\n        f\"[WARN] Could not import PIE from {pie_utilities_path}. \"\n        f\"If the DB cache already exists this is fine.\\nâ†’ {e}\"\n    )\n    PIE = None\n\n# -----------------------------------------------------------------------------#\n#                              configuration                                   #\n# -----------------------------------------------------------------------------#\nPIE_ROOT_PATH           = \"/kaggle/working/PIE\"\nPOSE_DATA_DIR           = \"/kaggle/input/pose-data/extracted_poses2\"\nPIE_DATABASE_CACHE_PATH = \"/kaggle/input/pie-database/pie_database.pkl\"\n\nTRAIN_SETS_STR = [\"set01\", \"set02\", \"set04\"]\n\nBALANCED_DATA_PKL_PATH  = \"/kaggle/working/balanced_train_data.pkl\"\nSCALERS_PKL_PATH        = \"/kaggle/working/scalers.pkl\"\n\n# Streams used throughout the project ----------------------------------------\nALL_POSSIBLE_STREAMS = [\n    \"bbox\",\n    \"pose\",\n    \"ego_speed\",\n    \"ego_acc\",\n    \"ego_gyro\",\n    \"ped_action\",\n    \"ped_look\",\n    \"ped_occlusion\",\n    \"traffic_light\",\n    \"static_context\",\n]\n\n# Feature sizes & categorical constants --------------------------------------\nSEQ_LEN, PRED_LEN = 30, 1\n\nINPUT_SIZE_BBOX       = 4\nINPUT_SIZE_POSE       = 34\nINPUT_SIZE_EGO_SPEED  = 1\nINPUT_SIZE_EGO_ACC    = 2\nINPUT_SIZE_EGO_GYRO   = 1\nINPUT_SIZE_PED_ACTION = 1\nINPUT_SIZE_PED_LOOK   = 1\nINPUT_SIZE_PED_OCC    = 1\nINPUT_SIZE_TL_STATE   = 4\n\nNUM_SIGNALIZED_CATS   = 4\nNUM_INTERSECTION_CATS = 5\nNUM_AGE_CATS          = 4\nNUM_GENDER_CATS       = 3\nNUM_TRAFFIC_DIR_CATS  = 2\n\nLANE_CATEGORIES = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 4, 7: 4, 8: 4}\nNUM_LANE_CATS   = len(set(LANE_CATEGORIES.values()))\n\nINPUT_SIZE_STATIC = (\n    NUM_SIGNALIZED_CATS\n    + NUM_INTERSECTION_CATS\n    + NUM_AGE_CATS\n    + NUM_GENDER_CATS\n    + NUM_TRAFFIC_DIR_CATS\n    + NUM_LANE_CATS\n)  # â†’ 23\n\nTL_STATE_MAP = {\"__undefined__\": 0, \"red\": 1, \"yellow\": 2, \"green\": 3}\nNUM_TL_STATES = len(TL_STATE_MAP)\n\n# -----------------------------------------------------------------------------#\n#                               helper utils                                   #\n# -----------------------------------------------------------------------------#\n\n\ndef to_one_hot(index: int, num_classes: int) -> np.ndarray:\n    vec = np.zeros(num_classes, dtype=np.float32)\n    vec[int(np.clip(index, 0, num_classes - 1))] = 1.0\n    return vec\n\n\ndef balance_samples_count(seq_data: dict, label_key: str, seed: int = 42) -> dict:\n    \"\"\"Undersample majority class so positive and negative labels are equal.\"\"\"\n    labels = [lbl[0] for lbl in seq_data[label_key]]\n    n_pos  = int(np.sum(labels))\n    n_neg  = len(labels) - n_pos\n\n    if n_pos == n_neg:\n        print(\"Dataset already balanced.\")\n        return seq_data.copy()\n\n    majority_label    = 0 if n_neg > n_pos else 1\n    minority_count    = min(n_pos, n_neg)\n    majority_indices  = np.where(np.array(labels) == majority_label)[0]\n    minority_indices  = np.where(np.array(labels) != majority_label)[0]\n\n    rng = np.random.default_rng(seed)\n    keep_majority = rng.choice(majority_indices, size=minority_count, replace=False)\n    final_indices = np.concatenate([minority_indices, keep_majority])\n    rng.shuffle(final_indices)\n\n    balanced = {}\n    for k, v in seq_data.items():\n        balanced[k] = [v[i] for i in final_indices]\n\n    print(f\"Balanced: 1s={minority_count} | 0s={minority_count}\")\n    return balanced\n\n\n# -----------------------------------------------------------------------------#\n#                                PIEDataset                                    #\n# -----------------------------------------------------------------------------#\nclass PIEDataset(Dataset):\n    \"\"\"\n    Lightweight dataset that can generate any subset of the PIE feature streams.\n    \"\"\"\n\n    def __init__(\n        self,\n        pie_db: dict,\n        set_names: list[str],\n        pose_dir: str,\n        seq_len: int,\n        pred_len: int,\n        scalers: dict,\n        streams_to_generate: list[str],\n    ):\n        self.pie_db            = pie_db\n        self.set_names         = set_names\n        self.pose_dir          = pose_dir\n        self.seq_len           = seq_len\n        self.pred_len          = pred_len\n        self.scalers           = scalers\n        self.streams           = streams_to_generate\n        self._input_sizes      = self._build_input_size_map()\n        self.all_pose_data     = {}\n        self.sequences         = []\n\n        if \"pose\" in self.streams:\n            self._load_pose_pkls()\n        self._enumerate_sequences()\n\n    # ------------------------ internal helpers -------------------------------\n    def _build_input_size_map(self) -> dict:\n        special = {\n            \"TRAFFIC_LIGHT\": \"TL_STATE\",\n            \"STATIC_CONTEXT\": \"STATIC\",\n            \"EGO_SPEED\": \"EGO_SPEED\",\n            \"EGO_ACC\": \"EGO_ACC\",\n            \"EGO_GYRO\": \"EGO_GYRO\",\n            \"PED_ACTION\": \"PED_ACTION\",\n            \"PED_LOOK\": \"PED_LOOK\",\n            \"PED_OCCLUSION\": \"PED_OCC\",\n        }\n        sizes = {}\n        for s in ALL_POSSIBLE_STREAMS:\n            const = f\"INPUT_SIZE_{special.get(s.upper(), s.upper())}\"\n            if s == \"bbox\":\n                const = \"INPUT_SIZE_BBOX\"\n            elif s == \"pose\":\n                const = \"INPUT_SIZE_POSE\"\n            sizes[s] = globals().get(const, 1)\n        return sizes\n\n    def _load_pose_pkls(self):\n        print(\"Loading pose PKLs â€¦\")\n        for set_id in self.set_names:\n            set_dir = Path(self.pose_dir) / set_id\n            if not set_dir.is_dir():\n                continue\n            self.all_pose_data[set_id] = {}\n            for pkl_path in tqdm(set_dir.glob(f\"{set_id}_*_poses.pkl\"), leave=False):\n                try:\n                    with open(pkl_path, \"rb\") as fp:\n                        loaded = pickle.load(fp)\n                except Exception as e:\n                    print(f\"[pose load] {pkl_path}: {e}\")\n                    continue\n\n                if len(loaded) != 1:\n                    continue\n                (key, data), *_ = loaded.items()\n                vid = \"_\".join(key.split(\"_\")[1:])\n                if vid in self.pie_db.get(set_id, {}):\n                    self.all_pose_data[set_id][vid] = data\n\n    def _enumerate_sequences(self):\n        print(\"Enumerating sequences â€¦\")\n        for set_id in self.set_names:\n            for vid, vdb in self.pie_db.get(set_id, {}).items():\n                for pid, pdb in vdb.get(\"ped_annotations\", {}).items():\n                    frames = pdb.get(\"frames\", [])\n                    if len(frames) < self.seq_len + self.pred_len:\n                        continue\n                    frames = sorted(frames)\n                    for i in range(len(frames) - self.seq_len - self.pred_len + 1):\n                        start = frames[i]\n                        obs_end = frames[i + self.seq_len - 1]\n                        if obs_end - start != self.seq_len - 1:\n                            continue\n                        target = frames[i + self.seq_len + self.pred_len - 1]\n                        if target - obs_end != self.pred_len:\n                            continue\n                        self.sequences.append((set_id, vid, pid, start))\n        print(f\"Total sequences: {len(self.sequences)}\")\n\n    # ------------------ Dataset API ------------------------------------------\n    def __len__(self):\n        return len(self.sequences)\n\n    def __getitem__(self, idx: int):\n        set_id, vid, pid, start = self.sequences[idx]\n        vdb  = self.pie_db[set_id][vid]\n        pdb  = vdb[\"ped_annotations\"][pid]\n        ego  = vdb.get(\"vehicle_annotations\", {})\n        tldb = vdb.get(\"traffic_annotations\", {})\n\n        frame_nums = list(range(start, start + self.seq_len))\n        target_f   = start + self.seq_len + self.pred_len - 1\n\n        # label ---------------------------------------------------------------\n        label = 0\n        if (\n            \"frames\" in pdb\n            and \"behavior\" in pdb\n            and \"cross\" in pdb[\"behavior\"]\n            and target_f in pdb[\"frames\"]\n        ):\n            try:\n                j = pdb[\"frames\"].index(target_f)\n                label = pdb[\"behavior\"][\"cross\"][j]\n                if label == -1:\n                    label = 0\n            except (ValueError, IndexError):\n                pass\n\n        # static context ------------------------------------------------------\n        static_vec = np.zeros(INPUT_SIZE_STATIC, np.float32)\n        if \"static_context\" in self.streams:\n            attr  = pdb.get(\"attributes\", {})\n            sig   = attr.get(\"signalized\", 0)\n            intr  = attr.get(\"intersection\", 0)\n            age   = attr.get(\"age\", 2)\n            gen   = attr.get(\"gender\", 0)\n            tdir  = int(attr.get(\"traffic_direction\", 0))\n            ln    = attr.get(\"num_lanes\", 2)\n            lncat = LANE_CATEGORIES.get(ln, LANE_CATEGORIES[max(LANE_CATEGORIES)])\n            static_vec = np.concatenate(\n                [\n                    to_one_hot(sig,  NUM_SIGNALIZED_CATS),\n                    to_one_hot(intr, NUM_INTERSECTION_CATS),\n                    to_one_hot(age,  NUM_AGE_CATS),\n                    to_one_hot(gen,  NUM_GENDER_CATS),\n                    to_one_hot(tdir, NUM_TRAFFIC_DIR_CATS),\n                    to_one_hot(lncat, NUM_LANE_CATS),\n                ]\n            ).astype(np.float32)\n\n        # per-frame feature assembly -----------------------------------------\n        feats = {s: [] for s in self.streams}\n\n        for fn in frame_nums:\n            fidx = -1\n            if \"frames\" in pdb:\n                try:\n                    fidx = pdb[\"frames\"].index(fn)\n                except ValueError:\n                    pass\n\n            ego_f = ego.get(fn, {})\n\n            # bbox ----------------------------------------------------------\n            if \"bbox\" in self.streams:\n                bb = np.zeros(INPUT_SIZE_BBOX, np.float32)\n                if (\n                    fidx != -1\n                    and \"bbox\" in pdb\n                    and len(pdb[\"bbox\"]) > fidx\n                ):\n                    try:\n                        x1, y1, x2, y2 = pdb[\"bbox\"][fidx]\n                        w_img = vdb.get(\"width\", 1920)\n                        h_img = vdb.get(\"height\", 1080)\n                        if w_img > 0 and h_img > 0:\n                            cx = ((x1 + x2) / 2) / w_img\n                            cy = ((y1 + y2) / 2) / h_img\n                            w  = (x2 - x1) / w_img\n                            h  = (y2 - y1) / h_img\n                            if 0 < w and 0 < h and 0 <= cx <= 1 and 0 <= cy <= 1:\n                                bb = np.array([cx, cy, w, h], np.float32)\n                    except Exception:\n                        pass\n                feats[\"bbox\"].append(bb)\n\n            # pose ----------------------------------------------------------\n            if \"pose\" in self.streams:\n                pvec = np.zeros(INPUT_SIZE_POSE, np.float32)\n                pose_set = self.all_pose_data.get(set_id, {}).get(vid, {})\n                p_loaded = pose_set.get(fn, {}).get(pid)\n                if (\n                    isinstance(p_loaded, np.ndarray)\n                    and p_loaded.shape == (INPUT_SIZE_POSE,)\n                ):\n                    pvec = p_loaded\n                feats[\"pose\"].append(pvec)\n\n            # ego signals ---------------------------------------------------\n            if \"ego_speed\" in self.streams:\n                s = ego_f.get(\"OBD_speed\", 0.0) or ego_f.get(\"GPS_speed\", 0.0)\n                s = (s - self.scalers.get(\"ego_speed_mean\", 0.0)) / self.scalers.get(\n                    \"ego_speed_std\", 1.0\n                )\n                feats[\"ego_speed\"].append([s])\n\n            if \"ego_acc\" in self.streams:\n                ax = ego_f.get(\"accX\", 0.0)\n                ay = ego_f.get(\"accY\", 0.0)\n                ax = (ax - self.scalers.get(\"accX_mean\", 0.0)) / self.scalers.get(\n                    \"accX_std\", 1.0\n                )\n                ay = (ay - self.scalers.get(\"accY_mean\", 0.0)) / self.scalers.get(\n                    \"accY_std\", 1.0\n                )\n                feats[\"ego_acc\"].append([ax, ay])\n\n            if \"ego_gyro\" in self.streams:\n                gz = ego_f.get(\"gyroZ\", 0.0)\n                gz = (gz - self.scalers.get(\"gyroZ_mean\", 0.0)) / self.scalers.get(\n                    \"gyroZ_std\", 1.0\n                )\n                feats[\"ego_gyro\"].append([gz])\n\n            # pedestrian behaviour -----------------------------------------\n            if \"ped_action\" in self.streams:\n                action = (\n                    pdb[\"behavior\"][\"action\"][fidx]\n                    if fidx != -1\n                    and \"behavior\" in pdb\n                    and \"action\" in pdb[\"behavior\"]\n                    and len(pdb[\"behavior\"][\"action\"]) > fidx\n                    else 0\n                )\n                feats[\"ped_action\"].append([float(action)])\n\n            if \"ped_look\" in self.streams:\n                look = (\n                    pdb[\"behavior\"][\"look\"][fidx]\n                    if fidx != -1\n                    and \"behavior\" in pdb\n                    and \"look\" in pdb[\"behavior\"]\n                    and len(pdb[\"behavior\"][\"look\"]) > fidx\n                    else 0\n                )\n                feats[\"ped_look\"].append([float(look)])\n\n            if \"ped_occlusion\" in self.streams:\n                occ = (\n                    float(pdb[\"occlusion\"][fidx]) / 2.0\n                    if fidx != -1\n                    and \"occlusion\" in pdb\n                    and len(pdb[\"occlusion\"]) > fidx\n                    else 0.0\n                )\n                feats[\"ped_occlusion\"].append([occ])\n\n            # traffic light -------------------------------------------------\n            if \"traffic_light\" in self.streams:\n                tl_state = 0\n                for obj in tldb.values():\n                    if obj.get(\"obj_class\") != \"traffic_light\":\n                        continue\n                    if \"frames\" not in obj or \"state\" not in obj:\n                        continue\n                    try:\n                        j = obj[\"frames\"].index(fn)\n                        if obj[\"state\"][j] != 0:\n                            tl_state = obj[\"state\"][j]\n                            break\n                    except (ValueError, IndexError):\n                        continue\n                feats[\"traffic_light\"].append(to_one_hot(tl_state, NUM_TL_STATES))\n\n            # static context -----------------------------------------------\n            if \"static_context\" in self.streams:\n                feats[\"static_context\"].append(static_vec)\n\n        # numpy â†’ torch ------------------------------------------------------\n        out = {\n            s: torch.tensor(np.asarray(feats[s], np.float32), dtype=torch.float32)\n            for s in self.streams\n        }\n        return out, torch.tensor(label, dtype=torch.long)\n\n\n# =============================================================================\n#                       MAIN: build balanced training set\n# =============================================================================\nif __name__ == \"__main__\" and '__file__' not in globals(): # Avoid running this if imported\n    print(\"\\n--- CELL 1: DATA PREPARATION ---\")\n\n    # 1) load / regenerate PIE DB -------------------------------------------\n    cache = Path(PIE_DATABASE_CACHE_PATH)\n    if cache.is_file():\n        print(\"Loading PIE database cache â€¦\")\n        with cache.open(\"rb\") as fp:\n            pie_db = pickle.load(fp)\n        print(\"âœ“ PIE DB loaded.\")\n    else:\n        if PIE is None:\n            raise RuntimeError(\"PIE class unavailable: cannot rebuild database.\")\n        print(\"Cache not found â€“ regenerating PIE DB â€¦\")\n        pie_db = PIE(data_path=PIE_ROOT_PATH, regen_database=True).generate_database()\n        if not pie_db:\n            raise RuntimeError(\"PIE DB generation failed.\")\n        print(\"âœ“ PIE DB generated.\")\n\n    # 2) compute scalers -----------------------------------------------------\n    print(\"\\nComputing scalers â€¦\")\n    spd, accx, accy, gyz = [], [], [], []\n    for sid in TRAIN_SETS_STR:\n        for vid, vdb in pie_db.get(sid, {}).items():\n            for frame, e in vdb.get(\"vehicle_annotations\", {}).items():\n                s  = e.get(\"OBD_speed\", 0.0) or e.get(\"GPS_speed\", 0.0)\n                spd.append(s)\n                accx.append(e.get(\"accX\", 0.0))\n                accy.append(e.get(\"accY\", 0.0))\n                gyz.append(e.get(\"gyroZ\", 0.0))\n\n    scalers = {}\n    if spd:\n        scalers[\"ego_speed_mean\"] = float(np.mean(spd))\n        scalers[\"ego_speed_std\"]  = float(max(np.std(spd), 1e-6))\n    if accx:\n        scalers[\"accX_mean\"] = float(np.mean(accx))\n        scalers[\"accX_std\"]  = float(max(np.std(accx), 1e-6))\n        scalers[\"accY_mean\"] = float(np.mean(accy))\n        scalers[\"accY_std\"]  = float(max(np.std(accy), 1e-6))\n    if gyz:\n        scalers[\"gyroZ_mean\"] = float(np.mean(gyz))\n        scalers[\"gyroZ_std\"]  = float(max(np.std(gyz), 1e-6))\n\n    print(\"Scalers:\", scalers)\n\n    # 3) extract full training dataset --------------------------------------\n    print(\"\\nExtracting training sequences (all streams) â€¦\")\n    full_ds = PIEDataset(\n        pie_db,\n        TRAIN_SETS_STR,\n        POSE_DATA_DIR,\n        SEQ_LEN,\n        PRED_LEN,\n        scalers,\n        ALL_POSSIBLE_STREAMS,\n    )\n\n    train_dict = {s: [] for s in ALL_POSSIBLE_STREAMS}\n    train_dict[\"label\"] = []\n\n    for i in tqdm(range(len(full_ds)), desc=\"seq\"):\n        feat, lbl = full_ds[i]\n        for s in ALL_POSSIBLE_STREAMS:\n            train_dict[s].append(feat[s].numpy())\n        train_dict[\"label\"].append([lbl.item()])\n\n    print(f\"Raw training samples: {len(train_dict['label'])}\")\n\n    # 4) balance -------------------------------------------------------------\n    balanced = balance_samples_count(train_dict, \"label\")\n    del train_dict, full_ds\n    gc.collect()\n\n    # 5) write pickles -------------------------------------------------------\n    print(\"\\nSaving balanced data â€¦\")\n    with open(BALANCED_DATA_PKL_PATH, \"wb\") as fp:\n        pickle.dump(balanced, fp, pickle.HIGHEST_PROTOCOL)\n    print(f\"âœ“ {BALANCED_DATA_PKL_PATH}\")\n\n    print(\"Saving scalers â€¦\")\n    with open(SCALERS_PKL_PATH, \"wb\") as fp:\n        pickle.dump(scalers, fp, pickle.HIGHEST_PROTOCOL)\n    print(f\"âœ“ {SCALERS_PKL_PATH}\")\n\n    del pie_db\n    gc.collect()\n\n    print(\"\\n--- CELL 1: DATA PREPARATION COMPLETE ---\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-11T15:48:03.811065Z","iopub.execute_input":"2025-05-11T15:48:03.811411Z","execution_failed":"2025-05-11T16:04:33.218Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# -----------------------------------------------------------------------------\n# CELL 1: DATA PREPARATION & BALANCING  (run once before training)\n# -----------------------------------------------------------------------------\n#  This cell:\n#    1. Loads (or regenerates) the PIE database\n#    2. Computes per-signal standardisation scalers\n#    3. Extracts ALL training sequences for every stream\n#    4. Balances the dataset 50 / 50 on the crossing label\n#    5. Writes two pickles:\n#         - /kaggle/working/balanced_train_data.pkl\n#         - /kaggle/working/scalers.pkl\n# -----------------------------------------------------------------------------\n\nimport os\nimport sys\nimport time\nimport pickle\nimport gc\nfrom pathlib import Path\n\nimport cv2                               # used internally by PIE utilities\nimport numpy as np\nimport torch\nfrom torch.utils.data import Dataset\nfrom tqdm.notebook import tqdm\n\n# -----------------------------------------------------------------------------#\n#                                PIE utilities                                 #\n# -----------------------------------------------------------------------------#\npie_utilities_path = \"/kaggle/working/PIE/utilities\"\nif pie_utilities_path not in sys.path:\n    sys.path.insert(0, pie_utilities_path)\n\ntry:\n    from pie_data import PIE\nexcept ImportError as e:\n    print(\n        f\"[WARN] Could not import PIE from {pie_utilities_path}. \"\n        f\"If the DB cache already exists this is fine.\\nâ†’ {e}\"\n    )\n    PIE = None\n\n# -----------------------------------------------------------------------------#\n#                              configuration                                   #\n# -----------------------------------------------------------------------------#\nPIE_ROOT_PATH           = \"/kaggle/working/PIE\"\nPOSE_DATA_DIR           = \"/kaggle/input/pose-data/extracted_poses2\"\nPIE_DATABASE_CACHE_PATH = \"/kaggle/input/pie-database/pie_database.pkl\"\n\nTRAIN_SETS_STR = [\"set01\", \"set02\", \"set04\"] # Used for generating training data and scalers\n\nBALANCED_DATA_PKL_PATH  = \"/kaggle/working/balanced_train_data.pkl\"\nSCALERS_PKL_PATH        = \"/kaggle/working/scalers.pkl\"\n\n# Streams used throughout the project ----------------------------------------\nALL_POSSIBLE_STREAMS = [\n    \"bbox\",\n    \"pose\",\n    \"ego_speed\",\n    \"ego_acc\",\n    \"ego_gyro\",\n    \"ped_action\",\n    \"ped_look\",\n    \"ped_occlusion\",\n    \"traffic_light\",\n    \"static_context\",\n]\n\n# Feature sizes & categorical constants --------------------------------------\nSEQ_LEN, PRED_LEN = 30, 1\n\nINPUT_SIZE_BBOX       = 4\nINPUT_SIZE_POSE       = 34\nINPUT_SIZE_EGO_SPEED  = 1\nINPUT_SIZE_EGO_ACC    = 2\nINPUT_SIZE_EGO_GYRO   = 1\nINPUT_SIZE_PED_ACTION = 1\nINPUT_SIZE_PED_LOOK   = 1\nINPUT_SIZE_PED_OCC    = 1\nINPUT_SIZE_TL_STATE   = 4\n\nNUM_SIGNALIZED_CATS   = 4\nNUM_INTERSECTION_CATS = 5\nNUM_AGE_CATS          = 4\nNUM_GENDER_CATS       = 3\nNUM_TRAFFIC_DIR_CATS  = 2\n\nLANE_CATEGORIES = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 4, 7: 4, 8: 4}\nNUM_LANE_CATS   = len(set(LANE_CATEGORIES.values()))\n\nINPUT_SIZE_STATIC = (\n    NUM_SIGNALIZED_CATS\n    + NUM_INTERSECTION_CATS\n    + NUM_AGE_CATS\n    + NUM_GENDER_CATS\n    + NUM_TRAFFIC_DIR_CATS\n    + NUM_LANE_CATS\n)  # â†’ 23\n\nTL_STATE_MAP = {\"__undefined__\": 0, \"red\": 1, \"yellow\": 2, \"green\": 3}\nNUM_TL_STATES = len(TL_STATE_MAP)\n\n# -----------------------------------------------------------------------------#\n#                               helper utils                                   #\n# -----------------------------------------------------------------------------#\n\n\ndef to_one_hot(index: int, num_classes: int) -> np.ndarray:\n    vec = np.zeros(num_classes, dtype=np.float32)\n    vec[int(np.clip(index, 0, num_classes - 1))] = 1.0\n    return vec\n\n\ndef balance_samples_count(seq_data: dict, label_key: str, seed: int = 42) -> dict:\n    \"\"\"Undersample majority class so positive and negative labels are equal.\"\"\"\n    labels = [lbl[0] for lbl in seq_data[label_key]]\n    n_pos  = int(np.sum(labels))\n    n_neg  = len(labels) - n_pos\n\n    if n_pos == n_neg:\n        print(\"Dataset already balanced.\")\n        return seq_data.copy()\n\n    majority_label    = 0 if n_neg > n_pos else 1\n    minority_count    = min(n_pos, n_neg)\n    majority_indices  = np.where(np.array(labels) == majority_label)[0]\n    minority_indices  = np.where(np.array(labels) != majority_label)[0]\n\n    rng = np.random.default_rng(seed)\n    keep_majority = rng.choice(majority_indices, size=minority_count, replace=False)\n    final_indices = np.concatenate([minority_indices, keep_majority])\n    rng.shuffle(final_indices)\n\n    balanced = {}\n    for k, v in seq_data.items():\n        balanced[k] = [v[i] for i in final_indices]\n\n    print(f\"Balanced: 1s={minority_count} | 0s={minority_count}\")\n    return balanced\n\n\n# -----------------------------------------------------------------------------#\n#                                PIEDataset                                    #\n# -----------------------------------------------------------------------------#\nclass PIEDataset(Dataset):\n    \"\"\"\n    Lightweight dataset that can generate any subset of the PIE feature streams.\n    \"\"\"\n\n    def __init__(\n        self,\n        pie_db: dict,\n        set_names: list[str],\n        pose_dir: str,\n        seq_len: int,\n        pred_len: int,\n        scalers: dict,\n        streams_to_generate: list[str],\n    ):\n        self.pie_db            = pie_db\n        self.set_names         = set_names\n        self.pose_dir          = pose_dir\n        self.seq_len           = seq_len\n        self.pred_len          = pred_len\n        self.scalers           = scalers\n        self.streams           = streams_to_generate\n        self._input_sizes      = self._build_input_size_map()\n        self.all_pose_data     = {}\n        self.sequences         = []\n\n        if \"pose\" in self.streams:\n            self._load_pose_pkls()\n        self._enumerate_sequences()\n\n    # ------------------------ internal helpers -------------------------------\n    def _build_input_size_map(self) -> dict:\n        special = {\n            \"TRAFFIC_LIGHT\": \"TL_STATE\",\n            \"STATIC_CONTEXT\": \"STATIC\",\n            \"EGO_SPEED\": \"EGO_SPEED\",\n            \"EGO_ACC\": \"EGO_ACC\",\n            \"EGO_GYRO\": \"EGO_GYRO\",\n            \"PED_ACTION\": \"PED_ACTION\",\n            \"PED_LOOK\": \"PED_LOOK\",\n            \"PED_OCCLUSION\": \"PED_OCC\",\n        }\n        sizes = {}\n        for s in ALL_POSSIBLE_STREAMS:\n            const = f\"INPUT_SIZE_{special.get(s.upper(), s.upper())}\"\n            if s == \"bbox\":\n                const = \"INPUT_SIZE_BBOX\"\n            elif s == \"pose\":\n                const = \"INPUT_SIZE_POSE\"\n            sizes[s] = globals().get(const, 1)\n        return sizes\n\n    def _load_pose_pkls(self):\n        print(f\"Loading pose PKLs for sets {self.set_names} (streams: {self.streams})â€¦\")\n        for set_id in self.set_names:\n            set_dir = Path(self.pose_dir) / set_id\n            if not set_dir.is_dir():\n                print(f\"Warning: Pose directory not found for set {set_id}: {set_dir}\")\n                continue\n            self.all_pose_data[set_id] = {}\n            # Use tqdm only if there are files to process\n            pkl_files = list(set_dir.glob(f\"{set_id}_*_poses.pkl\"))\n            if not pkl_files:\n                print(f\"No pose PKL files found in {set_dir} matching pattern.\")\n                continue\n\n            for pkl_path in tqdm(pkl_files, desc=f\"Loading poses {set_id}\", leave=False):\n                try:\n                    with open(pkl_path, \"rb\") as fp:\n                        loaded = pickle.load(fp)\n                except Exception as e:\n                    print(f\"[pose load] {pkl_path}: {e}\")\n                    continue\n\n                if len(loaded) != 1:\n                    continue\n                (key, data), *_ = loaded.items()\n                vid = \"_\".join(key.split(\"_\")[1:])\n                if vid in self.pie_db.get(set_id, {}):\n                    self.all_pose_data[set_id][vid] = data\n\n    def _enumerate_sequences(self):\n        print(f\"Enumerating sequences for sets {self.set_names}â€¦\")\n        for set_id in self.set_names:\n            for vid, vdb in self.pie_db.get(set_id, {}).items():\n                for pid, pdb in vdb.get(\"ped_annotations\", {}).items():\n                    frames = pdb.get(\"frames\", [])\n                    if len(frames) < self.seq_len + self.pred_len:\n                        continue\n                    frames = sorted(frames)\n                    for i in range(len(frames) - self.seq_len - self.pred_len + 1):\n                        start = frames[i]\n                        obs_end = frames[i + self.seq_len - 1]\n                        if obs_end - start != self.seq_len - 1:\n                            continue\n                        target = frames[i + self.seq_len + self.pred_len - 1]\n                        if target - obs_end != self.pred_len:\n                            continue\n                        self.sequences.append((set_id, vid, pid, start))\n        print(f\"Total sequences for {self.set_names}: {len(self.sequences)}\")\n\n    # ------------------ Dataset API ------------------------------------------\n    def __len__(self):\n        return len(self.sequences)\n\n    def __getitem__(self, idx: int):\n        set_id, vid, pid, start = self.sequences[idx]\n        vdb  = self.pie_db[set_id][vid]\n        pdb  = vdb[\"ped_annotations\"][pid]\n        ego  = vdb.get(\"vehicle_annotations\", {})\n        tldb = vdb.get(\"traffic_annotations\", {})\n\n        frame_nums = list(range(start, start + self.seq_len))\n        target_f   = start + self.seq_len + self.pred_len - 1\n\n        # label ---------------------------------------------------------------\n        label = 0\n        if (\n            \"frames\" in pdb\n            and \"behavior\" in pdb\n            and \"cross\" in pdb[\"behavior\"]\n            and target_f in pdb[\"frames\"]\n        ):\n            try:\n                j = pdb[\"frames\"].index(target_f)\n                label = pdb[\"behavior\"][\"cross\"][j]\n                if label == -1:\n                    label = 0\n            except (ValueError, IndexError):\n                pass\n\n        # static context ------------------------------------------------------\n        static_vec = np.zeros(INPUT_SIZE_STATIC, np.float32)\n        if \"static_context\" in self.streams:\n            attr  = pdb.get(\"attributes\", {})\n            sig   = attr.get(\"signalized\", 0)\n            intr  = attr.get(\"intersection\", 0)\n            age   = attr.get(\"age\", 2)\n            gen   = attr.get(\"gender\", 0)\n            tdir  = int(attr.get(\"traffic_direction\", 0))\n            ln    = attr.get(\"num_lanes\", 2)\n            lncat = LANE_CATEGORIES.get(ln, LANE_CATEGORIES[max(LANE_CATEGORIES)])\n            static_vec = np.concatenate(\n                [\n                    to_one_hot(sig,  NUM_SIGNALIZED_CATS),\n                    to_one_hot(intr, NUM_INTERSECTION_CATS),\n                    to_one_hot(age,  NUM_AGE_CATS),\n                    to_one_hot(gen,  NUM_GENDER_CATS),\n                    to_one_hot(tdir, NUM_TRAFFIC_DIR_CATS),\n                    to_one_hot(lncat, NUM_LANE_CATS),\n                ]\n            ).astype(np.float32)\n\n        # per-frame feature assembly -----------------------------------------\n        feats = {s: [] for s in self.streams}\n\n        for fn in frame_nums:\n            fidx = -1\n            if \"frames\" in pdb:\n                try:\n                    fidx = pdb[\"frames\"].index(fn)\n                except ValueError:\n                    pass\n\n            ego_f = ego.get(fn, {})\n\n            # bbox ----------------------------------------------------------\n            if \"bbox\" in self.streams:\n                bb = np.zeros(INPUT_SIZE_BBOX, np.float32)\n                if (\n                    fidx != -1\n                    and \"bbox\" in pdb\n                    and len(pdb[\"bbox\"]) > fidx\n                ):\n                    try:\n                        x1, y1, x2, y2 = pdb[\"bbox\"][fidx]\n                        w_img = vdb.get(\"width\", 1920)\n                        h_img = vdb.get(\"height\", 1080)\n                        if w_img > 0 and h_img > 0:\n                            cx = ((x1 + x2) / 2) / w_img\n                            cy = ((y1 + y2) / 2) / h_img\n                            w  = (x2 - x1) / w_img\n                            h  = (y2 - y1) / h_img\n                            if 0 < w and 0 < h and 0 <= cx <= 1 and 0 <= cy <= 1:\n                                bb = np.array([cx, cy, w, h], np.float32)\n                    except Exception:\n                        pass\n                feats[\"bbox\"].append(bb)\n\n            # pose ----------------------------------------------------------\n            if \"pose\" in self.streams:\n                pvec = np.zeros(INPUT_SIZE_POSE, np.float32)\n                pose_set = self.all_pose_data.get(set_id, {}).get(vid, {})\n                p_loaded = pose_set.get(fn, {}).get(pid)\n                if (\n                    isinstance(p_loaded, np.ndarray)\n                    and p_loaded.shape == (INPUT_SIZE_POSE,)\n                ):\n                    pvec = p_loaded\n                feats[\"pose\"].append(pvec)\n\n            # ego signals ---------------------------------------------------\n            if \"ego_speed\" in self.streams:\n                s = ego_f.get(\"OBD_speed\", 0.0) or ego_f.get(\"GPS_speed\", 0.0)\n                s = (s - self.scalers.get(\"ego_speed_mean\", 0.0)) / self.scalers.get(\n                    \"ego_speed_std\", 1.0\n                )\n                feats[\"ego_speed\"].append([s])\n\n            if \"ego_acc\" in self.streams:\n                ax = ego_f.get(\"accX\", 0.0)\n                ay = ego_f.get(\"accY\", 0.0)\n                ax = (ax - self.scalers.get(\"accX_mean\", 0.0)) / self.scalers.get(\n                    \"accX_std\", 1.0\n                )\n                ay = (ay - self.scalers.get(\"accY_mean\", 0.0)) / self.scalers.get(\n                    \"accY_std\", 1.0\n                )\n                feats[\"ego_acc\"].append([ax, ay])\n\n            if \"ego_gyro\" in self.streams:\n                gz = ego_f.get(\"gyroZ\", 0.0)\n                gz = (gz - self.scalers.get(\"gyroZ_mean\", 0.0)) / self.scalers.get(\n                    \"gyroZ_std\", 1.0\n                )\n                feats[\"ego_gyro\"].append([gz])\n\n            # pedestrian behaviour -----------------------------------------\n            if \"ped_action\" in self.streams:\n                action = (\n                    pdb[\"behavior\"][\"action\"][fidx]\n                    if fidx != -1\n                    and \"behavior\" in pdb\n                    and \"action\" in pdb[\"behavior\"]\n                    and len(pdb[\"behavior\"][\"action\"]) > fidx\n                    else 0\n                )\n                feats[\"ped_action\"].append([float(action)])\n\n            if \"ped_look\" in self.streams:\n                look = (\n                    pdb[\"behavior\"][\"look\"][fidx]\n                    if fidx != -1\n                    and \"behavior\" in pdb\n                    and \"look\" in pdb[\"behavior\"]\n                    and len(pdb[\"behavior\"][\"look\"]) > fidx\n                    else 0\n                )\n                feats[\"ped_look\"].append([float(look)])\n\n            if \"ped_occlusion\" in self.streams:\n                occ = (\n                    float(pdb[\"occlusion\"][fidx]) / 2.0\n                    if fidx != -1\n                    and \"occlusion\" in pdb\n                    and len(pdb[\"occlusion\"]) > fidx\n                    else 0.0\n                )\n                feats[\"ped_occlusion\"].append([occ])\n\n            # traffic light -------------------------------------------------\n            if \"traffic_light\" in self.streams:\n                tl_state = 0\n                for obj in tldb.values():\n                    if obj.get(\"obj_class\") != \"traffic_light\":\n                        continue\n                    if \"frames\" not in obj or \"state\" not in obj:\n                        continue\n                    try:\n                        j = obj[\"frames\"].index(fn)\n                        if obj[\"state\"][j] != 0:\n                            tl_state = obj[\"state\"][j]\n                            break\n                    except (ValueError, IndexError):\n                        continue\n                feats[\"traffic_light\"].append(to_one_hot(tl_state, NUM_TL_STATES))\n\n            # static context -----------------------------------------------\n            if \"static_context\" in self.streams:\n                feats[\"static_context\"].append(static_vec)\n\n        # numpy â†’ torch ------------------------------------------------------\n        out = {\n            s: torch.tensor(np.asarray(feats[s], np.float32), dtype=torch.float32)\n            for s in self.streams\n        }\n        return out, torch.tensor(label, dtype=torch.long)\n\n\n# =============================================================================\n#                       MAIN: build balanced training set (Cell 1)\n# =============================================================================\nif __name__ == \"__main__\" and '__file__' not in globals() and not Path(BALANCED_DATA_PKL_PATH).exists(): # Avoid re-running if files exist\n    print(\"\\n--- CELL 1: DATA PREPARATION (Running because balanced data not found) ---\")\n\n    # 1) load / regenerate PIE DB -------------------------------------------\n    cache = Path(PIE_DATABASE_CACHE_PATH)\n    if cache.is_file():\n        print(\"Loading PIE database cache â€¦\")\n        with cache.open(\"rb\") as fp:\n            pie_db_cell1 = pickle.load(fp) # Use a different variable name\n        print(\"âœ“ PIE DB loaded.\")\n    else:\n        if PIE is None:\n            raise RuntimeError(\"PIE class unavailable: cannot rebuild database.\")\n        print(\"Cache not found â€“ regenerating PIE DB â€¦\")\n        pie_db_cell1 = PIE(data_path=PIE_ROOT_PATH, regen_database=True).generate_database()\n        if not pie_db_cell1:\n            raise RuntimeError(\"PIE DB generation failed.\")\n        print(\"âœ“ PIE DB generated.\")\n\n    # 2) compute scalers -----------------------------------------------------\n    print(\"\\nComputing scalers â€¦\")\n    spd, accx, accy, gyz = [], [], [], []\n    for sid in TRAIN_SETS_STR: # Use TRAIN_SETS_STR for scalers\n        for vid, vdb in pie_db_cell1.get(sid, {}).items():\n            for frame, e in vdb.get(\"vehicle_annotations\", {}).items():\n                s  = e.get(\"OBD_speed\", 0.0) or e.get(\"GPS_speed\", 0.0)\n                spd.append(s)\n                accx.append(e.get(\"accX\", 0.0))\n                accy.append(e.get(\"accY\", 0.0))\n                gyz.append(e.get(\"gyroZ\", 0.0))\n\n    scalers_cell1 = {} # Use a different variable name\n    if spd:\n        scalers_cell1[\"ego_speed_mean\"] = float(np.mean(spd))\n        scalers_cell1[\"ego_speed_std\"]  = float(max(np.std(spd), 1e-6))\n    if accx:\n        scalers_cell1[\"accX_mean\"] = float(np.mean(accx))\n        scalers_cell1[\"accX_std\"]  = float(max(np.std(accx), 1e-6))\n        scalers_cell1[\"accY_mean\"] = float(np.mean(accy))\n        scalers_cell1[\"accY_std\"]  = float(max(np.std(accy), 1e-6))\n    if gyz:\n        scalers_cell1[\"gyroZ_mean\"] = float(np.mean(gyz))\n        scalers_cell1[\"gyroZ_std\"]  = float(max(np.std(gyz), 1e-6))\n\n    print(\"Scalers:\", scalers_cell1)\n\n    # 3) extract full training dataset --------------------------------------\n    print(\"\\nExtracting training sequences (all streams) â€¦\")\n    full_ds = PIEDataset(\n        pie_db_cell1,\n        TRAIN_SETS_STR, # Use TRAIN_SETS_STR for training data extraction\n        POSE_DATA_DIR,\n        SEQ_LEN,\n        PRED_LEN,\n        scalers_cell1,\n        ALL_POSSIBLE_STREAMS,\n    )\n\n    train_dict = {s: [] for s in ALL_POSSIBLE_STREAMS}\n    train_dict[\"label\"] = []\n\n    for i in tqdm(range(len(full_ds)), desc=\"seq\"):\n        feat, lbl = full_ds[i]\n        for s in ALL_POSSIBLE_STREAMS:\n            train_dict[s].append(feat[s].numpy())\n        train_dict[\"label\"].append([lbl.item()])\n\n    print(f\"Raw training samples: {len(train_dict['label'])}\")\n\n    # 4) balance -------------------------------------------------------------\n    balanced = balance_samples_count(train_dict, \"label\")\n    del train_dict, full_ds\n    gc.collect()\n\n    # 5) write pickles -------------------------------------------------------\n    print(\"\\nSaving balanced data â€¦\")\n    with open(BALANCED_DATA_PKL_PATH, \"wb\") as fp:\n        pickle.dump(balanced, fp, pickle.HIGHEST_PROTOCOL)\n    print(f\"âœ“ {BALANCED_DATA_PKL_PATH}\")\n\n    print(\"Saving scalers â€¦\")\n    with open(SCALERS_PKL_PATH, \"wb\") as fp:\n        pickle.dump(scalers_cell1, fp, pickle.HIGHEST_PROTOCOL)\n    print(f\"âœ“ {SCALERS_PKL_PATH}\")\n\n    del pie_db_cell1, scalers_cell1 # Clean up cell1 specific vars\n    gc.collect()\n\n    print(\"\\n--- CELL 1: DATA PREPARATION COMPLETE ---\")\nelse:\n    if Path(BALANCED_DATA_PKL_PATH).exists() and Path(SCALERS_PKL_PATH).exists():\n        print(\"\\n--- CELL 1: Skipping data preparation, balanced data and scalers found. ---\")\n    else:\n        print(\"\\n--- CELL 1: ERROR - Balanced data or scalers missing, but not regenerating. Please check paths or remove existing files to force regeneration. ---\")\n\n\n# --- CELL 2: ABLATION STUDY â€“ MODEL TRAINING AND EVALUATION (with Weighted Average Fusion, Hyperparameter Tuning, and Test on Set03) ---\n\nimport os\nimport sys\nimport gc\nimport time\nimport math\nimport random\nimport pickle\nimport torch\nimport numpy as np\nimport pandas as pd                      # results-summary table\nimport torch.nn as nn\nimport torch.optim as optim\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom tqdm.notebook import tqdm\nfrom torch.utils.data import Dataset, DataLoader\nfrom sklearn.metrics import (\n    accuracy_score,\n    precision_recall_fscore_support,\n    roc_auc_score,\n    confusion_matrix,\n    ConfusionMatrixDisplay,\n    f1_score # Explicitly import\n)\nimport optuna # For hyperparameter tuning\n\n# --- Add PIE utilities path if necessary (adjust path) ------------------------\npie_utilities_path = \"/kaggle/working/PIE/utilities\"\nif pie_utilities_path not in sys.path:\n    sys.path.insert(0, pie_utilities_path)\n\ntry:\n    from pie_data import PIE as PIE_imported_cell2 # Rename to avoid conflict with PIE from cell1\nexcept ImportError as e:\n    print(f\"Warn: Could not import PIE class for Cell 2: {e}\")\n    PIE_imported_cell2 = None\n\n# --- Configuration ------------------------------------------------------------\nPIE_ROOT_PATH_CELL2 = \"/kaggle/working/PIE\" # Renamed for clarity\nPOSE_DATA_DIR_CELL2 = \"/kaggle/input/pose-data/extracted_poses2\"\nPIE_DATABASE_CACHE_PATH_CELL2 = \"/kaggle/input/pie-database/pie_database.pkl\"\n\n# --- Define ALL possible streams (used by Dataset class) ----------------------\nALL_POSSIBLE_STREAMS_CELL2 = [ # Renamed to avoid conflict if cell1 not run\n    \"bbox\",\n    \"pose\",\n    \"ego_speed\",\n    \"ego_acc\",\n    \"ego_gyro\",\n    \"ped_action\",\n    \"ped_look\",\n    \"ped_occlusion\",\n    \"traffic_light\",\n    \"static_context\",\n]\n\n# --- *** CHOOSE ACTIVE STREAMS FOR THIS EXPERIMENT *** ------------------------\nACTIVE_STREAMS = [\n    \"bbox\",\n    \"ped_action\",\n    \"ped_look\",\n    \"ego_speed\",\n    \"ego_acc\",\n    \"static_context\",\n]\n# ------------------------------------------------------------------------------\n\nprint(f\"--- Running Weighted Average Fusion With Active Streams: {ACTIVE_STREAMS} ---\")\n\n# --- Model Hyper-parameters (default, will be tuned) --------------------------\n# SEQ_LEN, PRED_LEN already defined in Cell 1, assuming they are globally accessible\n# INPUT_SIZE_* constants also from Cell 1\n\n# Default values, Optuna will override these during tuning\nDEFAULT_LSTM_HIDDEN_SIZE = 256\nDEFAULT_NUM_LSTM_LAYERS = 2\nDEFAULT_DROPOUT_RATE = 0.3\nDEFAULT_ATTENTION_DIM = 128\nNUM_CLASSES = 2 # Fixed\n\n# --- Training Hyper-parameters (default, LR will be tuned) --------------------\nDEFAULT_LEARNING_RATE = 1e-4\nBATCH_SIZE = 32 # Fixed for this example, can also be tuned\nDEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(f\"Using device: {DEVICE}\")\n\n# --- Optuna & Training Epochs Configuration ---\nN_OPTUNA_TRIALS = 15  # Number of hyperparameter tuning trials (adjust as needed)\nNUM_EPOCHS_TUNING = 3 # Epochs for each Optuna trial (short for speed)\nNUM_EPOCHS_FINAL_TRAINING = 5 # Epochs for training the best model (can be same as original NUM_EPOCHS)\nSEED = 42 # For reproducibility\n\n# --- Dataset splits -----------------------------------------------------------\n# VAL_SETS_STR: Used for validating models during Optuna hyperparameter search\nVAL_SETS_STR = [\"set05\", \"set06\"]\n# TEST_SET_STR: Used for final testing of the *best* model from Optuna\nTEST_SET_STR = [\"set03\"]\n\n# --- Paths for pre-processed data (from Cell 1) -------------------------------\n# BALANCED_DATA_PKL_PATH and SCALERS_PKL_PATH already defined in Cell 1\n\n# --- Set random seeds for reproducibility ---\nrandom.seed(SEED)\nnp.random.seed(SEED)\ntorch.manual_seed(SEED)\nif torch.cuda.is_available():\n    torch.cuda.manual_seed_all(SEED)\ntorch.backends.cudnn.deterministic = True\ntorch.backends.cudnn.benchmark = False\n\n\n# -----------------------------------------------------------------------------#\n#                               Helper classes (Dataset)                       #\n# -----------------------------------------------------------------------------\n\n# Using to_one_hot from Cell 1. If Cell 1 is not run, define it here:\nif 'to_one_hot' not in globals():\n    def to_one_hot(index, num_classes):\n        vec = np.zeros(num_classes, dtype=np.float32)\n        safe_index = int(np.clip(index, 0, num_classes - 1))\n        vec[safe_index] = 1.0\n        return vec\n\nclass PIEDataset_Cell2(Dataset): # Renamed to avoid conflict if Cell 1 is run in same notebook\n    \"\"\"\n    Dataset that can dynamically enable/disable streams. (Copied from original cell 2)\n    \"\"\"\n    def __init__(\n        self,\n        pie_database,\n        set_names,\n        pose_data_dir,\n        seq_len,\n        pred_len,\n        scalers=None,\n        streams_to_extract=None, # These are the streams this instance will actually load\n    ):\n        self.pie_db = pie_database\n        self.set_names = set_names\n        self.pose_data_dir = pose_data_dir\n        self.seq_len = seq_len\n        self.pred_len = pred_len\n        self.scalers = scalers or {}\n        self.streams_to_extract = streams_to_extract or ALL_POSSIBLE_STREAMS_CELL2 # Default to all if not specified\n        \n        self.sequences = []\n        self.all_pose_data = {}\n\n        self._input_sizes_for_error = self._get_input_sizes_dict() # For error handling\n\n        if \"pose\" in self.streams_to_extract:\n            self._load_pose_data()\n\n        self._generate_sequence_list()\n        if not self.sequences:\n            print(f\"Warning: PIEDataset_Cell2 init: No sequences found for sets {self.set_names} with current config.\")\n\n\n    def _get_input_sizes_dict(self): # Uses global INPUT_SIZE_* constants\n        input_sizes = {}\n        special_cases = {\n            \"TRAFFIC_LIGHT\": \"TL_STATE\", \"STATIC_CONTEXT\": \"STATIC\",\n            \"EGO_SPEED\": \"EGO_SPEED\", \"EGO_ACC\": \"EGO_ACC\", \"EGO_GYRO\": \"EGO_GYRO\",\n            \"PED_ACTION\": \"PED_ACTION\", \"PED_LOOK\": \"PED_LOOK\", \"PED_OCCLUSION\": \"PED_OCC\",\n        }\n        for stream in ALL_POSSIBLE_STREAMS_CELL2: # Check against all possible for safety\n            size_constant_name = f\"INPUT_SIZE_{stream.upper()}\"\n            suffix = special_cases.get(stream.upper())\n            if suffix: size_constant_name = f\"INPUT_SIZE_{suffix}\"\n            elif stream == \"bbox\": size_constant_name = \"INPUT_SIZE_BBOX\"\n            elif stream == \"pose\": size_constant_name = \"INPUT_SIZE_POSE\"\n            input_sizes[stream] = globals().get(size_constant_name, 1) # globals() is from Cell 1 scope\n        return input_sizes\n\n    def _load_pose_data(self):\n        # print(f\"PIEDataset_Cell2: Loading pose PKLs for sets {self.set_names} (streams_to_extract: {self.streams_to_extract})â€¦\")\n        for set_id in self.set_names:\n            self.all_pose_data[set_id] = {}\n            pose_set_path = os.path.join(self.pose_data_dir, set_id)\n            if not os.path.isdir(pose_set_path): \n                # print(f\"PIEDataset_Cell2: Pose directory not found for set {set_id}: {pose_set_path}\")\n                continue\n            \n            pkl_files_in_set = [f for f in os.listdir(pose_set_path) if f.startswith(f\"{set_id}_\") and f.endswith(\"_poses.pkl\")]\n            if not pkl_files_in_set: \n                # print(f\"PIEDataset_Cell2: No pose PKL files found in {pose_set_path}\")\n                continue\n\n            for pkl_filename in pkl_files_in_set: # Not using tqdm here to reduce noise during HPO\n                pkl_file_path = os.path.join(pose_set_path, pkl_filename)\n                try:\n                    with open(pkl_file_path, \"rb\") as f: loaded_pkl_content = pickle.load(f)\n                except FileNotFoundError: continue\n                except Exception as e: print(f\"PIEDataset_Cell2: Error loading pose PKL {pkl_file_path}: {e}\"); continue\n                \n                if len(loaded_pkl_content) != 1: continue\n                unique_video_key, video_data = list(loaded_pkl_content.items())[0]\n                video_id = \"_\".join(unique_video_key.split(\"_\")[1:])\n                \n                if self.pie_db and set_id in self.pie_db and video_id in self.pie_db.get(set_id, {}):\n                    self.all_pose_data[set_id][video_id] = video_data\n\n    def _generate_sequence_list(self):\n        # print(f\"PIEDataset_Cell2: Enumerating sequences for sets {self.set_names}â€¦\")\n        sequence_count = 0\n        if not self.pie_db:\n            print(f\"PIEDataset_Cell2: PIE database not available for {self.set_names}.\")\n            return\n\n        for set_id in self.set_names:\n            if set_id not in self.pie_db: continue\n            for video_id, video_data in self.pie_db[set_id].items():\n                if \"ped_annotations\" not in video_data: continue\n                for ped_id, ped_data in video_data[\"ped_annotations\"].items():\n                    frames = ped_data.get(\"frames\", [])\n                    if len(frames) < self.seq_len + self.pred_len: continue\n                    frames_sorted = sorted(frames)\n                    for i in range(len(frames_sorted) - self.seq_len - self.pred_len + 1):\n                        start_f, obs_end_f = frames_sorted[i], frames_sorted[i + self.seq_len - 1]\n                        if obs_end_f - start_f != self.seq_len - 1: continue\n                        \n                        target_idx_in_frames_sorted = i + self.seq_len + self.pred_len - 1\n                        if target_idx_in_frames_sorted >= len(frames_sorted): continue # Boundary check\n                        target_f = frames_sorted[target_idx_in_frames_sorted]\n\n                        if target_f - obs_end_f != self.pred_len: continue\n                        self.sequences.append((set_id, video_id, ped_id, start_f))\n                        sequence_count += 1\n        # print(f\"PIEDataset_Cell2: Total sequences for {self.set_names}: {sequence_count}\")\n\n\n    def __len__(self): return len(self.sequences)\n\n    def __getitem__(self, idx):\n        set_id, video_id, ped_id, start_frame = self.sequences[idx]\n        frame_nums = list(range(start_frame, start_frame + self.seq_len))\n        target_frame_num = start_frame + self.seq_len + self.pred_len - 1\n        \n        video_db, ped_db = {}, {}\n        if self.pie_db and set_id in self.pie_db and video_id in self.pie_db[set_id]:\n            video_db = self.pie_db[set_id][video_id]\n            ped_db = video_db.get(\"ped_annotations\", {}).get(ped_id, {})\n        \n        ego_db = video_db.get(\"vehicle_annotations\", {}) if video_db else {}\n        traffic_db = video_db.get(\"traffic_annotations\", {}) if video_db else {}\n        ped_attributes = ped_db.get(\"attributes\", {}) if ped_db else {}\n\n        feature_sequences = {s: [] for s in self.streams_to_extract}\n        label = 0\n        if ped_db and \"frames\" in ped_db and \"behavior\" in ped_db and \"cross\" in ped_db[\"behavior\"]:\n            try:\n                target_idx_in_pdb_frames = ped_db[\"frames\"].index(target_frame_num)\n                label = ped_db[\"behavior\"][\"cross\"][target_idx_in_pdb_frames]\n                if label == -1: label = 0\n            except (ValueError, IndexError): pass\n\n        static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32) # From Cell 1\n        if \"static_context\" in self.streams_to_extract:\n            sig_idx = ped_attributes.get(\"signalized\", 0)\n            int_idx = ped_attributes.get(\"intersection\", 0)\n            age_idx = ped_attributes.get(\"age\", 2) # Default to adult if missing\n            gen_idx = ped_attributes.get(\"gender\", 0) # Default to male/unknown\n            td_idx = int(ped_attributes.get(\"traffic_direction\", 0))\n            nl_val = ped_attributes.get(\"num_lanes\", 2) # Default to 2 lanes\n            nl_cat_idx = LANE_CATEGORIES.get(nl_val, LANE_CATEGORIES[max(LANE_CATEGORIES.keys())]) # Cell 1\n            \n            static_vec = np.concatenate([\n                to_one_hot(sig_idx, NUM_SIGNALIZED_CATS), to_one_hot(int_idx, NUM_INTERSECTION_CATS),\n                to_one_hot(age_idx, NUM_AGE_CATS), to_one_hot(gen_idx, NUM_GENDER_CATS),\n                to_one_hot(td_idx, NUM_TRAFFIC_DIR_CATS), to_one_hot(nl_cat_idx, NUM_LANE_CATS),\n            ]).astype(np.float32)\n            if static_vec.shape[0] != INPUT_SIZE_STATIC: # Should not happen with globals\n                static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n\n\n        for frame_num in frame_nums:\n            frame_db_idx = -1 # Index within ped_db['frames']\n            if ped_db and \"frames\" in ped_db:\n                try: frame_db_idx = ped_db[\"frames\"].index(frame_num)\n                except ValueError: pass\n            \n            ego_frame_data = ego_db.get(frame_num, {})\n\n            if \"bbox\" in self.streams_to_extract:\n                bbox_norm = np.zeros(INPUT_SIZE_BBOX, dtype=np.float32) # Cell 1\n                if ped_db and frame_db_idx!=-1 and \"bbox\" in ped_db and len(ped_db[\"bbox\"]) > frame_db_idx:\n                    try:\n                        x1,y1,x2,y2 = ped_db[\"bbox\"][frame_db_idx]\n                        img_w = video_db.get(\"width\",1920) if video_db else 1920\n                        img_h = video_db.get(\"height\",1080) if video_db else 1080\n                        if img_w > 0 and img_h > 0:\n                            cx,cy,w,h = ((x1+x2)/2)/img_w, ((y1+y2)/2)/img_h, (x2-x1)/img_w, (y2-y1)/img_h\n                            if 0<w and 0<h and 0<=cx<=1 and 0<=cy<=1: \n                                bbox_norm=np.array([cx,cy,w,h],dtype=np.float32)\n                    except Exception: pass\n                feature_sequences[\"bbox\"].append(bbox_norm)\n\n            if \"pose\" in self.streams_to_extract:\n                pose_vector = np.zeros(INPUT_SIZE_POSE, dtype=np.float32) # Cell 1\n                # Ensure all_pose_data and its nested dicts are accessed safely\n                vid_pose_data = self.all_pose_data.get(set_id, {}).get(video_id, {})\n                ped_pose_at_frame = vid_pose_data.get(frame_num, {}).get(ped_id)\n                if isinstance(ped_pose_at_frame, np.ndarray) and ped_pose_at_frame.shape == (INPUT_SIZE_POSE,):\n                    pose_vector = ped_pose_at_frame\n                feature_sequences[\"pose\"].append(pose_vector)\n\n            if \"ego_speed\" in self.streams_to_extract:\n                speed = ego_frame_data.get(\"OBD_speed\",0.0) or ego_frame_data.get(\"GPS_speed\",0.0)\n                speed_scaled = (speed - self.scalers.get(\"ego_speed_mean\",0.0)) / self.scalers.get(\"ego_speed_std\",1.0)\n                feature_sequences[\"ego_speed\"].append([speed_scaled])\n\n            if \"ego_acc\" in self.streams_to_extract:\n                ax,ay = ego_frame_data.get(\"accX\",0.0), ego_frame_data.get(\"accY\",0.0)\n                ax_s = (ax - self.scalers.get(\"accX_mean\",0.0))/self.scalers.get(\"accX_std\",1.0)\n                ay_s = (ay - self.scalers.get(\"accY_mean\",0.0))/self.scalers.get(\"accY_std\",1.0)\n                feature_sequences[\"ego_acc\"].append([ax_s, ay_s])\n\n            if \"ego_gyro\" in self.streams_to_extract:\n                gz = ego_frame_data.get(\"gyroZ\",0.0)\n                gz_s = (gz - self.scalers.get(\"gyroZ_mean\",0.0))/self.scalers.get(\"gyroZ_std\",1.0)\n                feature_sequences[\"ego_gyro\"].append([gz_s])\n\n            if \"ped_action\" in self.streams_to_extract:\n                action=0.0 # Default if not found\n                if ped_db and frame_db_idx!=-1 and \"behavior\" in ped_db and \\\n                   \"action\" in ped_db[\"behavior\"] and len(ped_db[\"behavior\"][\"action\"]) > frame_db_idx:\n                    action = float(ped_db[\"behavior\"][\"action\"][frame_db_idx])\n                feature_sequences[\"ped_action\"].append([action])\n\n            if \"ped_look\" in self.streams_to_extract:\n                look=0.0 # Default\n                if ped_db and frame_db_idx!=-1 and \"behavior\" in ped_db and \\\n                   \"look\" in ped_db[\"behavior\"] and len(ped_db[\"behavior\"][\"look\"]) > frame_db_idx:\n                    look = float(ped_db[\"behavior\"][\"look\"][frame_db_idx])\n                feature_sequences[\"ped_look\"].append([look])\n\n            if \"ped_occlusion\" in self.streams_to_extract:\n                occ=0.0 # Default\n                if ped_db and frame_db_idx!=-1 and \"occlusion\" in ped_db and \\\n                   len(ped_db[\"occlusion\"]) > frame_db_idx:\n                    occ = float(ped_db[\"occlusion\"][frame_db_idx])/2.0 # Normalize 0-2 to 0-1\n                feature_sequences[\"ped_occlusion\"].append([occ])\n            \n            if \"traffic_light\" in self.streams_to_extract:\n                state_int=0 # Default: undefined/no relevant TL\n                for _,obj_data in traffic_db.items(): # Iterate through traffic objects\n                    if obj_data.get(\"obj_class\")==\"traffic_light\" and \"frames\" in obj_data and \"state\" in obj_data:\n                        try:\n                            tl_idx_in_obj_frames = obj_data[\"frames\"].index(frame_num)\n                            if obj_data[\"state\"][tl_idx_in_obj_frames]!=0: # 0 is often undefined/irrelevant\n                                state_int=obj_data[\"state\"][tl_idx_in_obj_frames]\n                                break # Assume first relevant TL is the one\n                        except (ValueError,IndexError): continue\n                feature_sequences[\"traffic_light\"].append(to_one_hot(state_int,INPUT_SIZE_TL_STATE)) # Cell 1\n\n            if \"static_context\" in self.streams_to_extract:\n                feature_sequences[\"static_context\"].append(static_vec) # Already computed per sequence\n\n        # Convert lists of features to tensors\n        final_features = {}\n        try:\n            for stream_name in self.streams_to_extract:\n                # Ensure all sub-lists in feature_sequences[stream_name] have consistent shape before asarray\n                np_array = np.asarray(feature_sequences[stream_name], dtype=np.float32)\n                if np_array.ndim == 1 and self._input_sizes_for_error.get(stream_name,1) > 1: # handles case where list of lists might become 1D\n                     np_array = np_array.reshape(self.seq_len, -1)\n\n                expected_shape_dim1 = self._input_sizes_for_error.get(stream_name,1)\n                if np_array.shape != (self.seq_len, expected_shape_dim1):\n                     # Fallback if shapes are inconsistent, e.g. due to missing data for a frame\n                     # print(f\"Warning: Shape mismatch for stream {stream_name}. Expected {(self.seq_len, expected_shape_dim1)}, got {np_array.shape}. Using zeros.\")\n                     np_array = np.zeros((self.seq_len, expected_shape_dim1), dtype=np.float32)\n\n                final_features[stream_name] = torch.tensor(np_array, dtype=torch.float32)\n\n        except Exception as e: # Catch-all for unexpected errors during tensor conversion\n            print(f\"PIEDataset_Cell2: Error converting features for idx {idx} ({set_id},{video_id},{ped_id},{start_frame}): {e}. Returning zero tensors.\")\n            final_features = {\n                name: torch.zeros((self.seq_len, self._input_sizes_for_error.get(name, 1)), dtype=torch.float32)\n                for name in self.streams_to_extract\n            }\n            \n        return final_features, torch.tensor(label,dtype=torch.long)\n\n\nclass BalancedDataset(Dataset): # For using pre-loaded balanced data\n    def __init__(self, data_dict, active_streams_list, label_key=\"label\"):\n        self.active_streams = active_streams_list # The streams the model will actually use\n        self.label_key = label_key\n        \n        if self.label_key not in data_dict or not data_dict[self.label_key]:\n            raise ValueError(f\"Label key '{self.label_key}' missing or empty in data_dict.\")\n        \n        self.num_samples = len(data_dict[self.label_key])\n        if self.num_samples == 0: \n            print(\"Warning: BalancedDataset initialized with zero samples.\")\n        \n        self.features_from_dict = {} # Stores tensors for active_streams\n        for stream in self.active_streams:\n            if stream in data_dict and data_dict[stream]:\n                try: \n                    # Data from pickle is already numpy array, convert to tensor\n                    self.features_from_dict[stream] = torch.tensor(np.asarray(data_dict[stream]),dtype=torch.float32)\n                except ValueError as e: \n                    raise ValueError(f\"Error converting stream '{stream}' from data_dict: {e}\")\n            else:\n                # This should not happen if Cell 1 ran correctly and ACTIVE_STREAMS are subset of ALL_POSSIBLE_STREAMS\n                raise KeyError(f\"Stream '{stream}' (active) missing or empty in provided data_dict.\")\n\n        try: \n            self.labels = torch.tensor([lbl[0] for lbl in data_dict[self.label_key]],dtype=torch.long)\n        except (IndexError, TypeError) as e: \n            raise ValueError(f\"Error converting labels from data_dict: {e}\")\n\n        # Sanity check lengths\n        for stream in self.active_streams:\n            if len(self.features_from_dict[stream]) != self.num_samples:\n                raise ValueError(f\"Length mismatch: Stream '{stream}' has {len(self.features_from_dict[stream])} samples, but labels have {self.num_samples}.\")\n\n    def __len__(self): return self.num_samples\n    \n    def __getitem__(self, idx):\n        # Return a dictionary of features, only for the active_streams\n        feature_dict_for_model = {s: self.features_from_dict[s][idx] for s in self.active_streams}\n        label = self.labels[idx]\n        return feature_dict_for_model, label\n\n\nclass Attention(nn.Module):\n    def __init__(self, hidden_dim, attention_dim):\n        super().__init__()\n        self.attention_net = nn.Sequential(\n            nn.Linear(hidden_dim, attention_dim), nn.Tanh(), nn.Linear(attention_dim, 1),\n        )\n    def forward(self, lstm_output): # (batch, seq_len, hidden_dim*2)\n        att_scores = self.attention_net(lstm_output).squeeze(2) # (batch, seq_len)\n        att_weights = torch.softmax(att_scores, dim=1) # (batch, seq_len)\n        context_vector = torch.sum(lstm_output * att_weights.unsqueeze(2), dim=1) # (batch, hidden_dim*2)\n        return context_vector, att_weights\n\n# -----------------------------------------------------------------------------#\n#                  ***  MODEL WITH WEIGHTED AVERAGE FUSION  ***                #\n# -----------------------------------------------------------------------------\nclass MultiStreamWeightedAvgLSTM(nn.Module):\n    def __init__(\n        self, input_sizes_dict, lstm_hidden_size, num_lstm_layers,\n        num_classes, attention_dim, dropout_rate, active_stream_names_list=None,\n    ):\n        super().__init__()\n        if not active_stream_names_list: raise ValueError(\"active_stream_names_list cannot be empty.\")\n        \n        self.active_stream_names = active_stream_names_list\n        self.num_active_streams = len(active_stream_names_list)\n        self.lstm_output_dim = lstm_hidden_size * 2 # Bidirectional\n        \n        self.lstms, self.attentions = nn.ModuleDict(), nn.ModuleDict()\n        \n        # print(f\"Initializing Weighted-Avg model with streams: {self.active_stream_names}\")\n        for name in self.active_stream_names:\n            if name not in input_sizes_dict: \n                raise KeyError(f\"Input size for stream '{name}' not provided in input_sizes_dict.\")\n            in_size = input_sizes_dict[name]\n            # print(f\"  â€“ Adding stream '{name}' (input size: {in_size}, LSTM hidden: {lstm_hidden_size})\")\n            self.lstms[name] = nn.LSTM(\n                in_size, lstm_hidden_size, num_lstm_layers, batch_first=True,\n                dropout=dropout_rate if num_lstm_layers > 1 else 0, bidirectional=True,\n            )\n            self.attentions[name] = Attention(self.lstm_output_dim, attention_dim)\n            \n        self.fusion_weights = nn.Parameter(torch.ones(self.num_active_streams))\n        \n        fused_representation_dim = self.lstm_output_dim # Since we average same-sized context vectors\n        \n        self.dropout_layer = nn.Dropout(dropout_rate)\n        \n        # Intermediate FC layer dimension (heuristic)\n        intermediate_fc_dim = max(num_classes * 4, fused_representation_dim // 2)\n        \n        self.fc1 = nn.Linear(fused_representation_dim, intermediate_fc_dim)\n        self.relu_activation = nn.ReLU()\n        self.fc2_final_classifier = nn.Linear(intermediate_fc_dim, num_classes)\n\n    def forward(self, x_input_dict): # x_input_dict contains {stream_name: tensor}\n        context_vectors_list = []\n        \n        for stream_name in self.active_stream_names:\n            if stream_name not in x_input_dict:\n                # This case should ideally be handled by the DataLoader ensuring all active streams are present.\n                # If a stream is truly optional and might be missing, this needs robust handling.\n                # For now, assume all active_stream_names are keys in x_input_dict.\n                # print(f\"Warning: Stream '{stream_name}' not in input dict x. Using zeros.\")\n                # Fallback: create a zero tensor. This might affect training if happens often.\n                batch_size_est = x_input_dict[next(iter(x_input_dict))].shape[0] # Get batch size from another stream\n                zero_ctx = torch.zeros(batch_size_est, self.lstm_output_dim, device=DEVICE)\n                context_vectors_list.append(zero_ctx)\n                continue\n\n            lstm_out, _ = self.lstms[stream_name](x_input_dict[stream_name])\n            context_vector, _ = self.attentions[stream_name](lstm_out)\n            context_vectors_list.append(context_vector)\n            \n        if len(context_vectors_list) != self.num_active_streams:\n            raise RuntimeError(f\"Mismatch: collected {len(context_vectors_list)} context vectors, expected {self.num_active_streams} for streams {self.active_stream_names}\")\n\n        # Stack context vectors for weighted sum: (batch, num_streams, lstm_output_dim)\n        stacked_context_vectors = torch.stack(context_vectors_list, dim=1)\n        \n        # Apply softmax to fusion_weights to make them sum to 1: (num_streams) -> (1, num_streams, 1) for broadcasting\n        normalized_fusion_weights = torch.softmax(self.fusion_weights, dim=0).view(1, -1, 1)\n        \n        # Weighted sum: (batch, num_streams, lstm_output_dim) * (1, num_streams, 1) -> sum over dim=1\n        fused_representation = torch.sum(stacked_context_vectors * normalized_fusion_weights, dim=1) # (batch, lstm_output_dim)\n        \n        # Pass through final classification layers\n        out = self.dropout_layer(fused_representation)\n        out = self.relu_activation(self.fc1(out))\n        out = self.dropout_layer(out)\n        logits = self.fc2_final_classifier(out)\n        \n        return logits\n\n# -----------------------------------------------------------------------------#\n#         Training / evaluation / Threshold Tuning helpers                     #\n# -----------------------------------------------------------------------------\n\ndef get_all_probabilities_and_labels(model, dataloader, device):\n    model.eval()\n    all_true_labels, all_positive_class_probs = [], []\n    # active_streams_for_model = model.active_stream_names # Get from model instance\n\n    with torch.no_grad():\n        for features_dict, true_labels in dataloader: # tqdm removed for less noise in HPO\n            # Ensure only active streams are passed, and they are on the correct device\n            inputs_for_model = {\n                name: features_dict[name].to(device) \n                for name in model.active_stream_names # Use model's configured streams\n                if name in features_dict # Data loader provides these\n            }\n            \n            logits = model(inputs_for_model)\n            probabilities = torch.softmax(logits, dim=1)\n\n            all_true_labels.extend(true_labels.cpu().numpy())\n            all_positive_class_probs.extend(probabilities[:, 1].cpu().numpy()) # Prob for class 1\n\n    return np.asarray(all_true_labels), np.asarray(all_positive_class_probs)\n\n\ndef find_optimal_threshold(y_true, y_probs_positive_class, metric_to_optimize='f1', num_steps=100):\n    best_threshold_val = 0.5\n    best_metric_score = -1.0\n\n    if metric_to_optimize == 'f1':\n        # precision_recall_fscore_support returns (precision, recall, f1, support)\n        # We need the f1_score for the positive class (binary classification)\n        metric_function = lambda true_y, pred_y: f1_score(true_y, pred_y, pos_label=1, zero_division=0)\n    else:\n        raise ValueError(f\"Unsupported metric for threshold tuning: {metric_to_optimize}\")\n\n    # Iterate over potential thresholds\n    threshold_candidates = np.linspace(0.0, 1.0, num_steps + 1)\n\n    for current_threshold in threshold_candidates: # tqdm removed\n        # Apply current threshold to get binary predictions\n        y_pred_at_threshold = (y_probs_positive_class >= current_threshold).astype(int)\n        current_metric_score = metric_function(y_true, y_pred_at_threshold)\n\n        if current_metric_score > best_metric_score:\n            best_metric_score = current_metric_score\n            best_threshold_val = current_threshold\n        elif current_metric_score == best_metric_score: # Tie-breaking: prefer threshold closer to 0.5\n            if abs(current_threshold - 0.5) < abs(best_threshold_val - 0.5):\n                best_threshold_val = current_threshold\n    \n    # print(f\"Optimal threshold for {metric_to_optimize.upper()}: {best_threshold_val:.4f} (Max value: {best_metric_score:.4f})\")\n    return best_threshold_val, best_metric_score\n\n\ndef train_epoch(model, dataloader, optimizer, criterion, device):\n    model.train()\n    current_epoch_loss = 0.0\n    # active_streams_for_model = model.active_stream_names\n\n    for features_dict, true_labels in dataloader: # tqdm removed for HPO\n        inputs_for_model = {\n            name: features_dict[name].to(device) \n            for name in model.active_stream_names if name in features_dict\n        }\n        true_labels = true_labels.to(device)\n        \n        optimizer.zero_grad()\n        logits = model(inputs_for_model)\n        loss = criterion(logits, true_labels)\n        loss.backward()\n        optimizer.step()\n        current_epoch_loss += loss.item()\n        \n    avg_epoch_loss = current_epoch_loss / max(1, len(dataloader))\n    return avg_epoch_loss # Accuracy calculation removed to speed up HPO, F1 is the target\n\n\ndef evaluate_model_performance(model, dataloader, criterion, device, threshold_to_apply=0.5, tune_threshold_on_this_data=False):\n    \"\"\"Evaluates model, returns metrics. Can optionally tune threshold.\"\"\"\n    model.eval()\n    total_eval_loss = 0.0\n    all_true_labels_list, all_predicted_probs_list = [], []\n    # active_streams_for_model = model.active_stream_names\n\n    with torch.no_grad():\n        for features_dict, true_labels in dataloader: # tqdm removed for HPO\n            inputs_for_model = {\n                name: features_dict[name].to(device) \n                for name in model.active_stream_names if name in features_dict\n            }\n            labels_on_gpu = true_labels.to(device)\n            \n            logits = model(inputs_for_model)\n            loss = criterion(logits, labels_on_gpu)\n            total_eval_loss += loss.item()\n            \n            probabilities = torch.softmax(logits, 1)\n            all_true_labels_list.extend(true_labels.cpu().numpy())\n            all_predicted_probs_list.extend(probabilities.cpu().numpy())\n\n    avg_eval_loss = total_eval_loss / max(1, len(dataloader))\n    \n    y_true_np = np.asarray(all_true_labels_list)\n    y_probs_all_classes_np = np.asarray(all_predicted_probs_list)\n    y_probs_positive_class_np = y_probs_all_classes_np[:, 1] # Probabilities for class 1\n\n    current_f1_score = 0.0\n    final_threshold_used = threshold_to_apply\n\n    if tune_threshold_on_this_data:\n        if len(y_true_np) > 0:\n            optimal_eval_threshold, f1_at_optimal = find_optimal_threshold(y_true_np, y_probs_positive_class_np, metric_to_optimize='f1')\n            final_threshold_used = optimal_eval_threshold\n            current_f1_score = f1_at_optimal\n            # print(f\"  (Threshold tuned on this data: {final_threshold_used:.4f} -> F1: {current_f1_score:.4f})\")\n        else: # Should not happen with proper dataset handling\n            # print(\"  (Cannot tune threshold on empty data)\")\n            current_f1_score = 0.0 # Or NaN\n    \n    # Calculate all metrics using the final_threshold_used (either fixed 0.5 or tuned)\n    y_pred_final = (y_probs_positive_class_np >= final_threshold_used).astype(int)\n    \n    acc = accuracy_score(y_true_np, y_pred_final) if len(y_true_np) > 0 else 0.0\n    prec, rec, f1_final_official, _ = precision_recall_fscore_support(\n        y_true_np, y_pred_final, average=\"binary\", pos_label=1, zero_division=0\n    ) if len(y_true_np) > 0 else (0.0,0.0,0.0,None)\n    \n    # AUC is independent of threshold\n    auc = roc_auc_score(y_true_np, y_probs_positive_class_np) if len(np.unique(y_true_np)) > 1 else float(\"nan\")\n    \n    return {\n        \"loss\": avg_eval_loss, \"accuracy\": acc, \"precision\": prec, \n        \"recall\": rec, \"f1\": f1_final_official, \"auc\": auc,\n        \"tuned_threshold_if_any\": final_threshold_used if tune_threshold_on_this_data else None,\n        \"f1_after_tuning_if_any\": current_f1_score if tune_threshold_on_this_data else None,\n        \"true_labels\": y_true_np, # For external CM plotting or further analysis\n        \"positive_class_probs\": y_probs_positive_class_np # For external threshold tuning\n    }\n\n\n# --- Global variables for Optuna objective function ---\n# These are set before calling Optuna study.\n# pie_database_global, scalers_global, balanced_train_data_global\n# train_loader_global, val_loader_for_hpo_global\n# current_input_sizes_global (derived from ACTIVE_STREAMS)\n\npie_database_global = None\nscalers_global = None\nbalanced_train_data_global = None\ntrain_loader_global = None\nval_loader_for_hpo_global = None\ncurrent_input_sizes_global = None\n\n\ndef objective_for_optuna(trial: optuna.Trial):\n    # Hyperparameters to tune\n    lstm_hidden_s = trial.suggest_categorical('lstm_hidden_size', [128, 256, 384]) # Adjusted choices\n    num_lstm_l = trial.suggest_int('num_lstm_layers', 1, 2) # Max 2 to keep model smaller\n    dropout_r = trial.suggest_float('dropout_rate', 0.2, 0.5, step=0.1)\n    learning_r = trial.suggest_float('learning_rate', 5e-5, 5e-4, log=True) # Adjusted range\n    attention_d = trial.suggest_categorical('attention_dim', [64, 128]) # Adjusted choices\n\n    # Create model with suggested HPs\n    model_trial = MultiStreamWeightedAvgLSTM(\n        input_sizes_dict=current_input_sizes_global, # From global scope\n        lstm_hidden_size=lstm_hidden_s,\n        num_lstm_layers=num_lstm_l,\n        num_classes=NUM_CLASSES, # Fixed\n        attention_dim=attention_d,\n        dropout_rate=dropout_r,\n        active_stream_names_list=ACTIVE_STREAMS, # Fixed for this run\n    ).to(DEVICE)\n\n    # Class weights (recalculate in case, though train_loader_global uses balanced data)\n    train_labels_list = train_loader_global.dataset.labels.tolist()\n    n_class0, n_class1 = train_labels_list.count(0), train_labels_list.count(1)\n    total_samples = len(train_labels_list)\n    \n    weight_c0, weight_c1 = (1.0,1.0)\n    if total_samples > 0 and n_class0 > 0 and n_class1 > 0 :\n        weight_c0 = total_samples / (2. * n_class0)\n        weight_c1 = total_samples / (2. * n_class1)\n    \n    criterion_trial = nn.CrossEntropyLoss(weight=torch.tensor([weight_c0, weight_c1], dtype=torch.float32).to(DEVICE))\n    optimizer_trial = optim.Adam(model_trial.parameters(), lr=learning_r)\n\n    # Training loop for this trial\n    for epoch_num in range(NUM_EPOCHS_TUNING):\n        _ = train_epoch(model_trial, train_loader_global, optimizer_trial, criterion_trial, DEVICE)\n        # No intermediate evaluation during tuning epochs to speed up, F1 on val set after all tuning epochs\n\n    # Evaluate on HPO validation set\n    # The `evaluate_model_performance` can do threshold tuning internally if requested\n    if len(val_loader_for_hpo_global.dataset) == 0:\n        print(f\"Optuna trial {trial.number}: HPO Validation dataset is empty. Returning F1=0.\")\n        return 0.0 # Or handle as Optuna pruner would\n\n    eval_results_trial = evaluate_model_performance(\n        model_trial, val_loader_for_hpo_global, criterion_trial, DEVICE, \n        tune_threshold_on_this_data=True # This will find optimal F1 on val set for HPO\n    )\n    \n    f1_for_this_trial = eval_results_trial[\"f1_after_tuning_if_any\"] if eval_results_trial[\"f1_after_tuning_if_any\"] is not None else 0.0\n\n    # Optuna pruner hook (optional, for early stopping of unpromising trials)\n    trial.report(f1_for_this_trial, step=NUM_EPOCHS_TUNING -1) # Report at the end of all tuning epochs\n    if trial.should_prune():\n        raise optuna.exceptions.TrialPruned()\n\n    return f1_for_this_trial # Optuna maximizes this\n\n# -----------------------------------------------------------------------------#\n#                            Main execution block                              #\n# -----------------------------------------------------------------------------\n\nif __name__ == \"__main__\": # Ensures this runs only when script is executed directly\n    print(\"--- CELL 2: Model Training, HPO, and Evaluation on Set03 ---\")\n    print(f\"Active Streams: {ACTIVE_STREAMS}\")\n\n    # --- 1. Load pre-processed data (from Cell 1) and PIE DB ---\n    print(\"\\nLoading balanced training data, scalers, and PIE database â€¦\")\n    try:\n        with open(BALANCED_DATA_PKL_PATH, \"rb\") as f: balanced_train_data_global = pickle.load(f)\n        with open(SCALERS_PKL_PATH, \"rb\") as f: scalers_global = pickle.load(f)\n        if not os.path.exists(PIE_DATABASE_CACHE_PATH_CELL2): \n            raise FileNotFoundError(f\"PIE db cache not found at {PIE_DATABASE_CACHE_PATH_CELL2}\")\n        with open(PIE_DATABASE_CACHE_PATH_CELL2, \"rb\") as f: pie_database_global = pickle.load(f)\n        print(\"   âœ“ Pre-processed data and PIE database loaded.\")\n    except FileNotFoundError as e: \n        print(f\"ERROR: {e}. Ensure Cell 1 has run successfully and paths are correct.\"); sys.exit(1)\n    except Exception as e: \n        print(f\"Error loading data: {e}\"); sys.exit(1)\n\n    # --- 2. Prepare Datasets and DataLoaders for HPO and Final Training ---\n    print(\"\\nCreating Datasets and DataLoaders â€¦\")\n    try:\n        # Training dataset (from balanced pickle)\n        train_dataset_obj = BalancedDataset(\n            balanced_train_data_global, \n            ACTIVE_STREAMS, # Model will use these streams\n            label_key=\"label\"\n        )\n        # Validation dataset for HPO (uses VAL_SETS_STR)\n        # PIEDataset_Cell2 needs all possible streams it *might* be asked for by any model variant.\n        # Model then picks ACTIVE_STREAMS.\n        val_dataset_for_hpo_obj = PIEDataset_Cell2(\n            pie_database_global, VAL_SETS_STR, POSE_DATA_DIR_CELL2, SEQ_LEN, PRED_LEN,\n            scalers_global, streams_to_extract=ALL_POSSIBLE_STREAMS_CELL2, \n        )\n        if len(train_dataset_obj) == 0 : raise ValueError(\"Train dataset (BalancedDataset) is empty!\")\n        if len(val_dataset_for_hpo_obj) == 0 : print(f\"Warning: HPO Validation dataset ({VAL_SETS_STR}) is empty! Check set names and PIE data.\")\n\n        train_loader_global = DataLoader(train_dataset_obj, batch_size=BATCH_SIZE, shuffle=True, num_workers=2, pin_memory=True)\n        val_loader_for_hpo_global = DataLoader(val_dataset_for_hpo_obj, batch_size=BATCH_SIZE, shuffle=False, num_workers=2, pin_memory=True)\n        print(f\"   âœ“ Train DataLoader ready ({len(train_dataset_obj)} samples).\")\n        print(f\"   âœ“ HPO Validation DataLoader ready ({len(val_dataset_for_hpo_obj)} samples for {VAL_SETS_STR}).\")\n\n    except Exception as e: \n        print(f\"Error creating datasets/dataloaders: {e}\"); raise\n\n    # Determine input sizes for active streams (used by model constructor)\n    current_input_sizes_global = {}\n    SPECIAL_MAP_CELL2 = { # To map stream names to global INPUT_SIZE constants\n        \"TRAFFIC_LIGHT\": \"TL_STATE\", \"STATIC_CONTEXT\": \"STATIC\", \"EGO_SPEED\": \"EGO_SPEED\",\n        \"EGO_ACC\": \"EGO_ACC\", \"EGO_GYRO\": \"EGO_GYRO\", \"PED_ACTION\": \"PED_ACTION\",\n        \"PED_LOOK\": \"PED_LOOK\", \"PED_OCCLUSION\": \"PED_OCC\",\n    }\n    for s_name in ACTIVE_STREAMS:\n        const_suffix = SPECIAL_MAP_CELL2.get(s_name.upper(), s_name.upper())\n        if s_name == \"bbox\": const_suffix = \"BBOX\"\n        elif s_name == \"pose\": const_suffix = \"POSE\"\n        size_const_name = f\"INPUT_SIZE_{const_suffix}\"\n        if size_const_name not in globals(): # Check Cell 1 globals\n            raise ValueError(f\"Input-size constant {size_const_name} for stream '{s_name}' not found in globals.\")\n        current_input_sizes_global[s_name] = globals()[size_const_name]\n    \n    # --- 3. Hyperparameter Optimization with Optuna ---\n    print(f\"\\n--- Starting Hyperparameter Optimization ({N_OPTUNA_TRIALS} trials, {NUM_EPOCHS_TUNING} epochs/trial) ---\")\n    # optuna.logging.set_verbosity(optuna.logging.WARNING) # Reduce Optuna's own logging\n    study = optuna.create_study(\n        direction=\"maximize\", # We want to maximize F1 score\n        sampler=optuna.samplers.TPESampler(seed=SEED)\n    )\n    \n    # Pass global vars by assignment before study, objective function will access them\n    # This is done above where they are defined with _global suffix\n\n    start_hpo_time = time.time()\n    study.optimize(objective_for_optuna, n_trials=N_OPTUNA_TRIALS, show_progress_bar=True)\n    hpo_duration = time.time() - start_hpo_time\n    \n    print(f\"\\n--- Hyperparameter Optimization Finished ({hpo_duration:.2f}s) ---\")\n    print(f\"Best HPO F1 score on validation set ({VAL_SETS_STR}): {study.best_value:.4f}\")\n    print(\"Best hyperparameters found:\")\n    for key, value in study.best_params.items():\n        print(f\"  {key}: {value}\")\n    \n    best_hps = study.best_params\n\n    # --- 4. Train Final Model with Best Hyperparameters ---\n    print(\"\\n--- Training Final Model with Best Hyperparameters ---\")\n    final_model = MultiStreamWeightedAvgLSTM(\n        input_sizes_dict=current_input_sizes_global,\n        lstm_hidden_size=best_hps['lstm_hidden_size'],\n        num_lstm_layers=best_hps['num_lstm_layers'],\n        num_classes=NUM_CLASSES,\n        attention_dim=best_hps['attention_dim'],\n        dropout_rate=best_hps['dropout_rate'],\n        active_stream_names_list=ACTIVE_STREAMS,\n    ).to(DEVICE)\n\n    # Print model summary\n    print(\"\\n--- Final Model Architecture ---\")\n    # print(final_model) # Can be very verbose\n    total_params_final = sum(p.numel() for p in final_model.parameters() if p.requires_grad)\n    print(f\"Trainable parameters in final model: {total_params_final:,}\")\n\n    # Optimizer and Criterion for final model\n    train_labels_final = train_loader_global.dataset.labels.tolist() # From the global loader\n    n0_final, n1_final = train_labels_final.count(0), train_labels_final.count(1)\n    total_final = len(train_labels_final)\n    w0_final, w1_final = (1.0,1.0)\n    if total_final > 0 and n0_final > 0 and n1_final > 0:\n        w0_final = total_final / (2. * n0_final)\n        w1_final = total_final / (2. * n1_final)\n    \n    class_weights_final = torch.tensor([w0_final, w1_final], dtype=torch.float32).to(DEVICE)\n    criterion_final = nn.CrossEntropyLoss(weight=class_weights_final)\n    optimizer_final = optim.Adam(final_model.parameters(), lr=best_hps['learning_rate'])\n\n    print(f\"\\nTraining final model for {NUM_EPOCHS_FINAL_TRAINING} epochs with LR={best_hps['learning_rate']:.2e}...\")\n    history_final_model = {\"train_loss\": [], \"val_loss_on_hpo_set\": [], \"val_f1_on_hpo_set\": []} # Track basic metrics\n\n    for epoch in range(NUM_EPOCHS_FINAL_TRAINING):\n        t_epoch_start = time.time()\n        final_train_loss = train_epoch(final_model, train_loader_global, optimizer_final, criterion_final, DEVICE)\n        \n        # Optional: evaluate on HPO val set during final training to monitor\n        # Using fixed 0.5 threshold for this interim check, not tuning threshold every epoch here\n        val_metrics_interim = evaluate_model_performance(\n            final_model, val_loader_for_hpo_global, criterion_final, DEVICE, threshold_to_apply=0.5 \n        )\n        \n        history_final_model[\"train_loss\"].append(final_train_loss)\n        history_final_model[\"val_loss_on_hpo_set\"].append(val_metrics_interim[\"loss\"])\n        history_final_model[\"val_f1_on_hpo_set\"].append(val_metrics_interim[\"f1\"]) # F1 at 0.5 on HPO val set\n\n        print(f\"  Epoch {epoch + 1:02d}/{NUM_EPOCHS_FINAL_TRAINING} â€“ {time.time() - t_epoch_start:.1f}s \"\n              f\"| Train Loss: {final_train_loss:.4f} \"\n              f\"| Val HPO Loss: {val_metrics_interim['loss']:.4f} \"\n              f\"| Val HPO F1@0.5: {val_metrics_interim['f1']:.4f}\")\n\n    # --- 5. Evaluate Final Model on the Test Set (set03) ---\n    print(f\"\\n--- Final Evaluation on Test Set ({TEST_SET_STR}) ---\")\n    # Create Test DataLoader for set03\n    test_dataset_obj = PIEDataset_Cell2(\n        pie_database_global, TEST_SET_STR, POSE_DATA_DIR_CELL2, SEQ_LEN, PRED_LEN,\n        scalers_global, streams_to_extract=ALL_POSSIBLE_STREAMS_CELL2,\n    )\n    if len(test_dataset_obj) == 0:\n        print(f\"ERROR: Test dataset ({TEST_SET_STR}) is empty. Cannot perform final evaluation.\")\n    else:\n        test_loader = DataLoader(test_dataset_obj, batch_size=BATCH_SIZE, shuffle=False, num_workers=2, pin_memory=True)\n        print(f\"   âœ“ Test DataLoader ready ({len(test_dataset_obj)} samples for {TEST_SET_STR}).\")\n\n        # Get probabilities and true labels from the test set (set03)\n        # The criterion_final is just for calculating loss if needed, not strictly for metrics here\n        test_eval_results = evaluate_model_performance(\n            final_model, test_loader, criterion_final, DEVICE, \n            tune_threshold_on_this_data=True # CRUCIAL: Tune threshold on set03 data to get best F1\n        )\n        \n        final_optimal_threshold_set03 = test_eval_results[\"tuned_threshold_if_any\"]\n        final_f1_set03 = test_eval_results[\"f1_after_tuning_if_any\"] # This is the F1 after tuning on set03\n        \n        # Re-calculate metrics with the tuned threshold for consistent reporting\n        y_true_set03 = test_eval_results[\"true_labels\"]\n        y_probs_pos_set03 = test_eval_results[\"positive_class_probs\"]\n        y_pred_set03_tuned = (y_probs_pos_set03 >= final_optimal_threshold_set03).astype(int)\n\n        final_accuracy_set03 = accuracy_score(y_true_set03, y_pred_set03_tuned)\n        final_precision_set03, final_recall_set03, _, = \\\n            precision_recall_fscore_support(y_true_set03, y_pred_set03_tuned, average='binary', pos_label=1, zero_division=0)[0:3]\n        final_auc_set03 = roc_auc_score(y_true_set03, y_probs_pos_set03) if len(np.unique(y_true_set03)) > 1 else float('nan')\n        \n        cm_set03_tuned = confusion_matrix(y_true_set03, y_pred_set03_tuned, labels=[0, 1])\n\n        print(\"\\n--- Final Metrics on Test Set (set03) with Tuned Threshold ---\")\n        print(f\"{'Optimal Threshold on Set03':<30}: {final_optimal_threshold_set03:.4f}\")\n        print(f\"{'F1-score (Maximized on Set03)':<30}: {final_f1_set03:.4f}\")\n        print(f\"{'Accuracy':<30}: {final_accuracy_set03:.4f}\")\n        print(f\"{'Precision':<30}: {final_precision_set03:.4f}\")\n        print(f\"{'Recall':<30}: {final_recall_set03:.4f}\")\n        print(f\"{'AUC':<30}: {final_auc_set03:.4f}\")\n\n        # Display Confusion Matrix for set03\n        ConfusionMatrixDisplay(cm_set03_tuned, display_labels=[\"Not Crossing\", \"Crossing\"]).plot(cmap=plt.cm.Blues)\n        plt.title(f\"Confusion Matrix - Test Set (set03)\\nOptimal Threshold: {final_optimal_threshold_set03:.2f}, F1: {final_f1_set03:.4f}\")\n        plt.show()\n\n        # Display learned fusion weights from the final model\n        if hasattr(final_model, \"fusion_weights\"):\n            f_weights = torch.softmax(final_model.fusion_weights, 0).detach().cpu().numpy()\n            print(\"\\n--- Learned Fusion Weights (Final Model) ---\")\n            for stream_name, weight_val in zip(final_model.active_stream_names, f_weights):\n                print(f\"{stream_name:<20}: {weight_val:.4f}\")\n            print(\"-\" * 30)\n\n    # --- 6. Plot training curves for the final model (optional) ---\n    if NUM_EPOCHS_FINAL_TRAINING > 0 :\n        fig_final, ax_final = plt.subplots(1, 2, figsize=(12, 4))\n        ax_final[0].plot(range(1, NUM_EPOCHS_FINAL_TRAINING + 1), history_final_model[\"train_loss\"], label=\"Final Model Train Loss\")\n        ax_final[0].plot(range(1, NUM_EPOCHS_FINAL_TRAINING + 1), history_final_model[\"val_loss_on_hpo_set\"], label=f\"Final Model Val Loss ({VAL_SETS_STR})\")\n        ax_final[0].set_xlabel(\"Epoch\"); ax_final[0].set_ylabel(\"Loss\"); ax_final[0].set_title(\"Final Model Loss\"); ax_final[0].legend(); ax_final[0].grid(True)\n        \n        ax_final[1].plot(range(1, NUM_EPOCHS_FINAL_TRAINING + 1), history_final_model[\"val_f1_on_hpo_set\"], label=f\"Final Model Val F1@0.5 ({VAL_SETS_STR})\")\n        ax_final[1].set_xlabel(\"Epoch\"); ax_final[1].set_ylabel(\"F1 Score @ 0.5\"); ax_final[1].set_title(f\"Final Model F1 on {VAL_SETS_STR}\"); ax_final[1].legend(); ax_final[1].grid(True)\n        plt.tight_layout(); plt.show()\n\n\n    # Clean up global variables if needed, though script end will do it\n    del pie_database_global, scalers_global, balanced_train_data_global\n    del train_loader_global, val_loader_for_hpo_global, current_input_sizes_global\n    gc.collect()\n\n    print(\"\\n--- CELL 2: Script complete ---\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-13T13:34:49.269048Z","iopub.execute_input":"2025-05-13T13:34:49.269459Z","iopub.status.idle":"2025-05-13T16:24:29.300601Z","shell.execute_reply.started":"2025-05-13T13:34:49.269422Z","shell.execute_reply":"2025-05-13T16:24:29.299797Z"}},"outputs":[{"name":"stdout","text":"\n--- CELL 1: Skipping data preparation, balanced data and scalers found. ---\n--- Running Weighted Average Fusion With Active Streams: ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'static_context'] ---\nUsing device: cuda\n--- CELL 2: Model Training, HPO, and Evaluation on Set03 ---\nActive Streams: ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'static_context']\n\nLoading balanced training data, scalers, and PIE database â€¦\n   âœ“ Pre-processed data and PIE database loaded.\n\nCreating Datasets and DataLoaders â€¦\n","output_type":"stream"},{"name":"stderr","text":"[I 2025-05-13 13:35:10,944] A new study created in memory with name: no-name-d618990b-cad7-45f3-a6cf-2c06e2907320\n","output_type":"stream"},{"name":"stdout","text":"   âœ“ Train DataLoader ready (109934 samples).\n   âœ“ HPO Validation DataLoader ready (77288 samples for ['set05', 'set06']).\n\n--- Starting Hyperparameter Optimization (15 trials, 3 epochs/trial) ---\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/15 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"6149bb3a881e4ee285e639cb3444ae8d"}},"metadata":{}},{"name":"stdout","text":"[I 2025-05-13 13:46:52,717] Trial 0 finished with value: 0.7993573006627838 and parameters: {'lstm_hidden_size': 256, 'num_lstm_layers': 2, 'dropout_rate': 0.2, 'learning_rate': 7.160849144555769e-05, 'attention_dim': 128}. Best is trial 0 with value: 0.7993573006627838.\n[I 2025-05-13 13:58:39,008] Trial 1 finished with value: 0.7872432688138132 and parameters: {'lstm_hidden_size': 256, 'num_lstm_layers': 2, 'dropout_rate': 0.5, 'learning_rate': 8.152843673110742e-05, 'attention_dim': 128}. Best is trial 0 with value: 0.7993573006627838.\n[I 2025-05-13 14:04:40,277] Trial 2 finished with value: 0.8122576919904315 and parameters: {'lstm_hidden_size': 256, 'num_lstm_layers': 1, 'dropout_rate': 0.4, 'learning_rate': 6.893882309676892e-05, 'attention_dim': 128}. Best is trial 2 with value: 0.8122576919904315.\n[I 2025-05-13 14:16:31,230] Trial 3 finished with value: 0.802973061760841 and parameters: {'lstm_hidden_size': 256, 'num_lstm_layers': 2, 'dropout_rate': 0.4, 'learning_rate': 5.564426587452873e-05, 'attention_dim': 64}. Best is trial 2 with value: 0.8122576919904315.\n[I 2025-05-13 14:33:28,580] Trial 4 finished with value: 0.7983091281965429 and parameters: {'lstm_hidden_size': 384, 'num_lstm_layers': 2, 'dropout_rate': 0.30000000000000004, 'learning_rate': 6.260977143530197e-05, 'attention_dim': 64}. Best is trial 2 with value: 0.8122576919904315.\n[I 2025-05-13 14:45:15,828] Trial 5 pruned. \n[I 2025-05-13 15:02:31,682] Trial 6 finished with value: 0.8063825489800039 and parameters: {'lstm_hidden_size': 384, 'num_lstm_layers': 2, 'dropout_rate': 0.5, 'learning_rate': 0.00039246176690796805, 'attention_dim': 128}. Best is trial 2 with value: 0.8122576919904315.\n[I 2025-05-13 15:08:34,202] Trial 7 finished with value: 0.8364736976724358 and parameters: {'lstm_hidden_size': 256, 'num_lstm_layers': 1, 'dropout_rate': 0.30000000000000004, 'learning_rate': 9.33940128553535e-05, 'attention_dim': 64}. Best is trial 7 with value: 0.8364736976724358.\n[I 2025-05-13 15:20:26,595] Trial 8 finished with value: 0.8160869184263558 and parameters: {'lstm_hidden_size': 256, 'num_lstm_layers': 2, 'dropout_rate': 0.2, 'learning_rate': 0.0004851286697060366, 'attention_dim': 64}. Best is trial 7 with value: 0.8364736976724358.\n[I 2025-05-13 15:32:15,327] Trial 9 pruned. \n[I 2025-05-13 15:37:05,040] Trial 10 pruned. \n[I 2025-05-13 15:41:53,846] Trial 11 pruned. \n[I 2025-05-13 15:48:07,691] Trial 12 finished with value: 0.8191309688315678 and parameters: {'lstm_hidden_size': 256, 'num_lstm_layers': 1, 'dropout_rate': 0.2, 'learning_rate': 0.00012504927597997394, 'attention_dim': 64}. Best is trial 7 with value: 0.8364736976724358.\n[I 2025-05-13 15:52:57,561] Trial 13 pruned. \n[I 2025-05-13 15:59:14,232] Trial 14 finished with value: 0.8076523185693493 and parameters: {'lstm_hidden_size': 256, 'num_lstm_layers': 1, 'dropout_rate': 0.30000000000000004, 'learning_rate': 0.0001788791106628247, 'attention_dim': 64}. Best is trial 7 with value: 0.8364736976724358.\n\n--- Hyperparameter Optimization Finished (8643.29s) ---\nBest HPO F1 score on validation set (['set05', 'set06']): 0.8365\nBest hyperparameters found:\n  lstm_hidden_size: 256\n  num_lstm_layers: 1\n  dropout_rate: 0.30000000000000004\n  learning_rate: 9.33940128553535e-05\n  attention_dim: 64\n\n--- Training Final Model with Best Hyperparameters ---\n\n--- Final Model Architecture ---\nTrainable parameters in final model: 3,565,070\n\nTraining final model for 5 epochs with LR=9.34e-05...\n  Epoch 01/5 â€“ 200.1s | Train Loss: 0.2907 | Val HPO Loss: 0.2631 | Val HPO F1@0.5: 0.7286\n  Epoch 02/5 â€“ 195.9s | Train Loss: 0.2234 | Val HPO Loss: 0.2776 | Val HPO F1@0.5: 0.6963\n  Epoch 03/5 â€“ 196.1s | Train Loss: 0.2064 | Val HPO Loss: 0.1733 | Val HPO F1@0.5: 0.7823\n  Epoch 04/5 â€“ 199.4s | Train Loss: 0.1955 | Val HPO Loss: 0.2345 | Val HPO F1@0.5: 0.7471\n  Epoch 05/5 â€“ 201.8s | Train Loss: 0.1834 | Val HPO Loss: 0.2091 | Val HPO F1@0.5: 0.7724\n\n--- Final Evaluation on Test Set (['set03']) ---\n   âœ“ Test DataLoader ready (271078 samples for ['set03']).\n\n--- Final Metrics on Test Set (set03) with Tuned Threshold ---\nOptimal Threshold on Set03    : 0.7300\nF1-score (Maximized on Set03) : 0.7134\nAccuracy                      : 0.8929\nPrecision                     : 0.7036\nRecall                        : 0.7235\nAUC                           : 0.9254\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"\n--- Learned Fusion Weights (Final Model) ---\nbbox                : 0.1770\nped_action          : 0.1688\nped_look            : 0.1564\nego_speed           : 0.1618\nego_acc             : 0.1671\nstatic_context      : 0.1689\n------------------------------\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x400 with 2 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"\n--- CELL 2: Script complete ---\n","output_type":"stream"}],"execution_count":1}]}