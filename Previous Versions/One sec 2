{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e62dd56d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T13:45:59.468364Z",
     "iopub.status.busy": "2025-05-01T13:45:59.468029Z",
     "iopub.status.idle": "2025-05-01T13:46:07.185102Z",
     "shell.execute_reply": "2025-05-01T13:46:07.183885Z"
    },
    "papermill": {
     "duration": 7.728979,
     "end_time": "2025-05-01T13:46:07.186886",
     "exception": false,
     "start_time": "2025-05-01T13:45:59.457907",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cloning into 'PIE'...\r\n",
      "remote: Enumerating objects: 178, done.\u001b[K\r\n",
      "remote: Counting objects: 100% (93/93), done.\u001b[K\r\n",
      "remote: Compressing objects: 100% (74/74), done.\u001b[K\r\n",
      "remote: Total 178 (delta 32), reused 75 (delta 17), pack-reused 85 (from 1)\u001b[K\r\n",
      "Receiving objects: 100% (178/178), 144.63 MiB | 30.19 MiB/s, done.\r\n",
      "Resolving deltas: 100% (73/73), done.\r\n",
      "Updating files: 100% (41/41), done.\r\n",
      "unzip:  cannot find or open /content/PIE/annotations/annotations.zip, /content/PIE/annotations/annotations.zip.zip or /content/PIE/annotations/annotations.zip.ZIP.\r\n",
      "unzip:  cannot find or open /content/PIE/annotations/annotations_vehicle.zip, /content/PIE/annotations/annotations_vehicle.zip.zip or /content/PIE/annotations/annotations_vehicle.zip.ZIP.\r\n"
     ]
    }
   ],
   "source": [
    "!git clone https://github.com/aras62/PIE.git\n",
    "!unzip /content/PIE/annotations/annotations.zip -d /content/PIE\n",
    "!unzip /content/PIE/annotations/annotations_vehicle.zip -d /content/PIE\n",
    "# !git clone https://github.com/hustvl/YOLOP.git\n",
    "!mkdir /kaggle/working/PIE/content"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d22ce262",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T13:46:07.206405Z",
     "iopub.status.busy": "2025-05-01T13:46:07.206140Z",
     "iopub.status.idle": "2025-05-01T13:46:12.504387Z",
     "shell.execute_reply": "2025-05-01T13:46:12.503189Z"
    },
    "papermill": {
     "duration": 5.309517,
     "end_time": "2025-05-01T13:46:12.506112",
     "exception": false,
     "start_time": "2025-05-01T13:46:07.196595",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.0/1.0 MB\u001b[0m \u001b[31m27.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h"
     ]
    }
   ],
   "source": [
    "!pip install -q ultralytics opencv-python-headless "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "79d43427",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T13:46:12.525537Z",
     "iopub.status.busy": "2025-05-01T13:46:12.525257Z",
     "iopub.status.idle": "2025-05-01T13:46:12.531279Z",
     "shell.execute_reply": "2025-05-01T13:46:12.530464Z"
    },
    "papermill": {
     "duration": 0.017219,
     "end_time": "2025-05-01T13:46:12.532545",
     "exception": false,
     "start_time": "2025-05-01T13:46:12.515326",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import os\n",
    "# import pickle\n",
    "# import sys\n",
    "# import numpy as np\n",
    "# from tqdm.notebook import tqdm\n",
    "# import random\n",
    "\n",
    "# print(\"--- PIE Database Cache Verification Script ---\")\n",
    "\n",
    "# # --- Configuration ---\n",
    "# # <<< --- SET THIS TO THE LOCATION OF YOUR GENERATED CACHE --- >>>\n",
    "# PKL_FILE_PATH = \"/kaggle/working/PIE/data_cache/pie_database.pkl\"\n",
    "# # <<< --- END CONFIGURATION --- >>>\n",
    "\n",
    "# # Define expected top-level keys (these are the set IDs)\n",
    "# EXPECTED_SETS = {'set01', 'set02', 'set03', 'set04', 'set05', 'set06'}\n",
    "\n",
    "# # Define expected keys within each video dictionary\n",
    "# EXPECTED_VIDEO_KEYS = {'num_frames', 'width', 'height',\n",
    "#                        'ped_annotations', 'traffic_annotations', 'vehicle_annotations'}\n",
    "\n",
    "# # Define expected keys within each pedestrian annotation dictionary\n",
    "# EXPECTED_PED_KEYS = {'frames', 'bbox', 'occlusion', 'behavior', 'attributes'}\n",
    "# EXPECTED_PED_BEHAVIOR_KEYS = {'gesture', 'look', 'action', 'cross'}\n",
    "# # Attributes can vary, so we won't check all exhaustively here, but check presence\n",
    "\n",
    "# # Define expected keys within vehicle (ego) frame dictionary (sample)\n",
    "# EXPECTED_EGO_FRAME_KEYS = {'OBD_speed', 'GPS_speed', 'accX', 'accY', 'accZ',\n",
    "#                            'gyroX', 'gyroY', 'gyroZ', 'heading_angle', 'latitude',\n",
    "#                            'longitude', 'pitch', 'roll', 'yaw'}\n",
    "\n",
    "\n",
    "# # --- Verification Parameters ---\n",
    "# MAX_FRAMES_TO_CHECK_PER_VIDEO = 50 # Limit checks per video for speed\n",
    "# MAX_PEDS_TO_CHECK_PER_VIDEO = 20  # Limit checks per video for speed\n",
    "# MAX_TRAFFIC_OBJS_TO_CHECK_PER_VIDEO = 20 # Limit checks\n",
    "# PRINT_SAMPLE_COUNT = 3 # How many sample data lines to print\n",
    "\n",
    "# # --- Counters and Flags ---\n",
    "# errors_found = 0\n",
    "# warnings_found = 0\n",
    "# checked_sets = 0\n",
    "# checked_videos = 0\n",
    "# checked_peds = 0\n",
    "# checked_ped_frames = 0\n",
    "# checked_ego_frames = 0\n",
    "\n",
    "# # --- Helper Function for Reporting ---\n",
    "# def report_error(message):\n",
    "#     global errors_found\n",
    "#     print(f\"  ERROR: {message}\")\n",
    "#     errors_found += 1\n",
    "\n",
    "# def report_warning(message):\n",
    "#     global warnings_found\n",
    "#     print(f\"  Warning: {message}\")\n",
    "#     warnings_found += 1\n",
    "\n",
    "# # --- 1. Load the PKL File ---\n",
    "# print(f\"\\n[1] Loading PKL file: {PKL_FILE_PATH}\")\n",
    "# if not os.path.exists(PKL_FILE_PATH):\n",
    "#     print(f\"  ERROR: PKL file not found at the specified path.\")\n",
    "#     exit()\n",
    "\n",
    "# try:\n",
    "#     with open(PKL_FILE_PATH, 'rb') as f:\n",
    "#         pie_database = pickle.load(f)\n",
    "#     print(\"  -> PKL file loaded successfully.\")\n",
    "# except Exception as e:\n",
    "#     print(f\"  ERROR: Failed to load PKL file: {e}\")\n",
    "#     exit()\n",
    "\n",
    "# # --- 2. Basic Structure Checks ---\n",
    "# print(f\"\\n[2] Checking Top-Level Structure...\")\n",
    "# if not isinstance(pie_database, dict):\n",
    "#     report_error(f\"Loaded data is not a dictionary (Type: {type(pie_database)}).\")\n",
    "#     exit()\n",
    "# print(f\"  -> Top level is a dictionary: OK\")\n",
    "\n",
    "# found_sets = set(pie_database.keys())\n",
    "# if found_sets != EXPECTED_SETS:\n",
    "#     report_warning(f\"Set keys mismatch. Found: {found_sets}, Expected: {EXPECTED_SETS}\")\n",
    "# else:\n",
    "#     print(f\"  -> Found expected set keys: OK\")\n",
    "# checked_sets = len(found_sets)\n",
    "\n",
    "# # --- 3. Detailed Content Checks ---\n",
    "# print(f\"\\n[3] Checking Set/Video/Annotation Structures...\")\n",
    "\n",
    "# sample_data_to_print = []\n",
    "\n",
    "# for set_id in tqdm(found_sets, desc=\"Checking Sets\"):\n",
    "#     if not isinstance(pie_database[set_id], dict):\n",
    "#         report_error(f\"Data for set '{set_id}' is not a dictionary.\")\n",
    "#         continue\n",
    "\n",
    "#     video_ids = list(pie_database[set_id].keys())\n",
    "#     checked_videos += len(video_ids)\n",
    "\n",
    "#     for video_id in tqdm(video_ids, desc=f\"Videos in {set_id}\", leave=False):\n",
    "#         video_data = pie_database[set_id][video_id]\n",
    "#         if not isinstance(video_data, dict):\n",
    "#             report_error(f\"Data for video '{set_id}/{video_id}' is not a dictionary.\")\n",
    "#             continue\n",
    "\n",
    "#         # Check video-level keys\n",
    "#         missing_vid_keys = EXPECTED_VIDEO_KEYS - set(video_data.keys())\n",
    "#         if missing_vid_keys:\n",
    "#             report_warning(f\"Video '{set_id}/{video_id}' missing keys: {missing_vid_keys}\")\n",
    "\n",
    "#         # Basic type checks for video keys\n",
    "#         img_width = video_data.get('width', -1)\n",
    "#         img_height = video_data.get('height', -1)\n",
    "#         if not isinstance(video_data.get('num_frames'), int): report_warning(f\"num_frames type mismatch in {set_id}/{video_id}\")\n",
    "#         if not isinstance(img_width, int): report_warning(f\"width type mismatch in {set_id}/{video_id}\")\n",
    "#         if not isinstance(img_height, int): report_warning(f\"height type mismatch in {set_id}/{video_id}\")\n",
    "#         if not isinstance(video_data.get('ped_annotations'), dict): report_error(f\"ped_annotations not a dict in {set_id}/{video_id}\"); continue # Stop checking peds for this video if structure wrong\n",
    "#         if not isinstance(video_data.get('traffic_annotations'), dict): report_warning(f\"traffic_annotations not a dict in {set_id}/{video_id}\")\n",
    "#         if not isinstance(video_data.get('vehicle_annotations'), dict): report_warning(f\"vehicle_annotations not a dict in {set_id}/{video_id}\")\n",
    "\n",
    "\n",
    "#         # --- Check Pedestrian Annotations ---\n",
    "#         ped_annotations = video_data.get('ped_annotations', {})\n",
    "#         ped_ids_to_check = list(ped_annotations.keys())\n",
    "#         random.shuffle(ped_ids_to_check) # Check a random subset\n",
    "\n",
    "#         for i, ped_id in enumerate(ped_ids_to_check):\n",
    "#             if i >= MAX_PEDS_TO_CHECK_PER_VIDEO: break # Limit checks\n",
    "#             checked_peds += 1\n",
    "#             ped_data = ped_annotations[ped_id]\n",
    "#             if not isinstance(ped_data, dict): report_error(f\"Data for ped '{ped_id}' in {set_id}/{video_id} is not a dict.\"); continue\n",
    "\n",
    "#             missing_ped_keys = EXPECTED_PED_KEYS - set(ped_data.keys())\n",
    "#             if missing_ped_keys: report_warning(f\"Ped '{ped_id}' in {set_id}/{video_id} missing keys: {missing_ped_keys}\")\n",
    "\n",
    "#             # Check structure of essential lists/dicts\n",
    "#             frames = ped_data.get('frames', [])\n",
    "#             bboxes = ped_data.get('bbox', [])\n",
    "#             occlusions = ped_data.get('occlusion', [])\n",
    "#             behavior = ped_data.get('behavior', {})\n",
    "#             attributes = ped_data.get('attributes', {})\n",
    "\n",
    "#             if not isinstance(frames, list): report_error(f\"Ped '{ped_id}' frames not a list.\"); continue\n",
    "#             if not isinstance(bboxes, list): report_error(f\"Ped '{ped_id}' bbox not a list.\"); continue\n",
    "#             if not isinstance(occlusions, list): report_error(f\"Ped '{ped_id}' occlusion not a list.\"); continue\n",
    "#             if not isinstance(behavior, dict): report_error(f\"Ped '{ped_id}' behavior not a dict.\"); continue\n",
    "#             if not isinstance(attributes, dict): report_warning(f\"Ped '{ped_id}' attributes not a dict.\"); continue # Attributes might be empty\n",
    "\n",
    "#             # Check list lengths consistency\n",
    "#             n_frames = len(frames)\n",
    "#             if n_frames == 0 and (len(bboxes) > 0 or len(occlusions) > 0): report_warning(f\"Ped '{ped_id}' has bboxes/occlusions but 0 frames listed.\")\n",
    "#             if len(bboxes) != n_frames: report_error(f\"Ped '{ped_id}' bbox length ({len(bboxes)}) != frames length ({n_frames}).\")\n",
    "#             if len(occlusions) != n_frames: report_error(f\"Ped '{ped_id}' occlusion length ({len(occlusions)}) != frames length ({n_frames}).\")\n",
    "\n",
    "#             missing_beh_keys = EXPECTED_PED_BEHAVIOR_KEYS - set(behavior.keys())\n",
    "#             if missing_beh_keys: report_warning(f\"Ped '{ped_id}' behavior missing keys: {missing_beh_keys}\")\n",
    "\n",
    "#             for beh_key, beh_list in behavior.items():\n",
    "#                 if not isinstance(beh_list, list): report_error(f\"Ped '{ped_id}' behavior '{beh_key}' not a list.\"); continue\n",
    "#                 if len(beh_list) != n_frames: report_error(f\"Ped '{ped_id}' behavior '{beh_key}' length ({len(beh_list)}) != frames length ({n_frames}).\")\n",
    "\n",
    "#             # Check sample frame content\n",
    "#             frames_to_check_in_ped = list(range(n_frames))\n",
    "#             random.shuffle(frames_to_check_in_ped)\n",
    "#             for k, frame_idx in enumerate(frames_to_check_in_ped):\n",
    "#                  if k >= MAX_FRAMES_TO_CHECK_PER_VIDEO: break\n",
    "#                  checked_ped_frames +=1\n",
    "#                  # Check frame number type\n",
    "#                  if not isinstance(frames[frame_idx], int): report_warning(f\"Ped '{ped_id}' frame value at index {frame_idx} not int.\")\n",
    "#                  # Check bbox format and range\n",
    "#                  if len(bboxes) > frame_idx:\n",
    "#                       bbox = bboxes[frame_idx]\n",
    "#                       if not isinstance(bbox, list) or len(bbox) != 4: report_error(f\"Ped '{ped_id}' frame {frames[frame_idx]} bbox invalid format: {bbox}\"); continue\n",
    "#                       try:\n",
    "#                            x1,y1,x2,y2 = map(float, bbox)\n",
    "#                            if img_width>0 and img_height>0 and not (0 <= x1 < x2 <= img_width and 0 <= y1 < y2 <= img_height): report_warning(f\"Ped '{ped_id}' frame {frames[frame_idx]} bbox out of bounds: {[int(x) for x in bbox]} vs {img_width}x{img_height}\")\n",
    "#                       except (ValueError, TypeError): report_error(f\"Ped '{ped_id}' frame {frames[frame_idx]} bbox contains non-numeric values: {bbox}\")\n",
    "#                  # Check occlusion value\n",
    "#                  if len(occlusions) > frame_idx:\n",
    "#                       occ = occlusions[frame_idx]\n",
    "#                       if not isinstance(occ, int) or occ not in [0, 1, 2]: report_warning(f\"Ped '{ped_id}' frame {frames[frame_idx]} invalid occlusion value: {occ}\")\n",
    "\n",
    "#                  # Add sample for printing later\n",
    "#                  if len(sample_data_to_print) < PRINT_SAMPLE_COUNT:\n",
    "#                       sample_data_to_print.append(f\" Sample Ped Data: Set={set_id}, Vid={video_id}, Ped={ped_id}, Frame={frames[frame_idx]}, BBox={bboxes[frame_idx] if len(bboxes) > frame_idx else 'N/A'}, Occ={occlusions[frame_idx] if len(occlusions) > frame_idx else 'N/A'}\")\n",
    "\n",
    "#         # --- Check Vehicle Annotations (Ego Data) ---\n",
    "#         vehicle_annotations = video_data.get('vehicle_annotations', {})\n",
    "#         ego_frames_to_check = list(vehicle_annotations.keys())\n",
    "#         random.shuffle(ego_frames_to_check)\n",
    "\n",
    "#         for k, frame_num in enumerate(ego_frames_to_check):\n",
    "#             if k >= MAX_FRAMES_TO_CHECK_PER_VIDEO: break # Limit checks\n",
    "#             checked_ego_frames += 1\n",
    "#             if not isinstance(frame_num, int): report_warning(f\"Ego data frame key '{frame_num}' in {set_id}/{video_id} is not int.\") ; continue\n",
    "#             ego_frame_data = vehicle_annotations[frame_num]\n",
    "#             if not isinstance(ego_frame_data, dict): report_error(f\"Ego data for frame {frame_num} in {set_id}/{video_id} is not dict.\"); continue\n",
    "\n",
    "#             missing_ego_keys = EXPECTED_EGO_FRAME_KEYS - set(ego_frame_data.keys())\n",
    "#             # Don't warn about every missing key, just check a few critical ones\n",
    "#             if 'OBD_speed' not in ego_frame_data and 'GPS_speed' not in ego_frame_data: report_warning(f\"Ego frame {frame_num} in {set_id}/{video_id} missing speed data.\")\n",
    "#             for key in EXPECTED_EGO_FRAME_KEYS:\n",
    "#                 if key in ego_frame_data and not isinstance(ego_frame_data[key], (float, int)): report_warning(f\"Ego frame {frame_num} key '{key}' value is not float/int (type: {type(ego_frame_data[key])})\")\n",
    "\n",
    "#             # Add sample for printing later\n",
    "#             if len(sample_data_to_print) < PRINT_SAMPLE_COUNT * 2 and k < 5: # Print a few ego samples too\n",
    "#                   sample_data_to_print.append(f\" Sample Ego Data: Set={set_id}, Vid={video_id}, Frame={frame_num}, Speed={ego_frame_data.get('OBD_speed', 'N/A'):.2f}, AccX={ego_frame_data.get('accX', 'N/A'):.2f}\")\n",
    "\n",
    "# # --- 4. Print Summary ---\n",
    "# print(f\"\\n[4] Verification Summary ---\")\n",
    "# print(f\"  - Checked {checked_sets} sets.\")\n",
    "# print(f\"  - Checked {checked_videos} videos.\")\n",
    "# print(f\"  - Checked {checked_peds} pedestrian tracks (sampled max {MAX_PEDS_TO_CHECK_PER_VIDEO} per video).\")\n",
    "# print(f\"  - Checked {checked_ped_frames} pedestrian frame entries (sampled max {MAX_FRAMES_TO_CHECK_PER_VIDEO} per ped).\")\n",
    "# print(f\"  - Checked {checked_ego_frames} ego data frame entries (sampled max {MAX_FRAMES_TO_CHECK_PER_VIDEO} per video).\")\n",
    "# print(f\"  - Total Errors Found: {errors_found}\")\n",
    "# print(f\"  - Total Warnings Found: {warnings_found}\")\n",
    "\n",
    "# if errors_found == 0:\n",
    "#     print(\"\\n  >>> Structure and basic content checks PASSED (with potential warnings). <<<\")\n",
    "# else:\n",
    "#     print(\"\\n  >>> ERRORS FOUND during structural/content checks. Review messages above. <<<\")\n",
    "\n",
    "# # --- 5. Print Sample Data ---\n",
    "# if sample_data_to_print:\n",
    "#     print(\"\\n[5] Sample Data Points ---\")\n",
    "#     for line in sample_data_to_print:\n",
    "#         print(line)\n",
    "\n",
    "# print(\"\\n--- Verification Script Finished ---\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a950547b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T13:46:12.550993Z",
     "iopub.status.busy": "2025-05-01T13:46:12.550660Z",
     "iopub.status.idle": "2025-05-01T13:46:21.054230Z",
     "shell.execute_reply": "2025-05-01T13:46:21.053271Z"
    },
    "papermill": {
     "duration": 8.514809,
     "end_time": "2025-05-01T13:46:21.055894",
     "exception": false,
     "start_time": "2025-05-01T13:46:12.541085",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Creating new Ultralytics Settings v0.0.6 file ✅ \n",
      "View Ultralytics Settings with 'yolo settings' or at '/root/.config/Ultralytics/settings.json'\n",
      "Update Settings with 'yolo settings key=value', i.e. 'yolo settings runs_dir=path/to/dir'. For help see https://docs.ultralytics.com/quickstart/#ultralytics-settings.\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "import xml.etree.ElementTree as ET\n",
    "import os\n",
    "import numpy as np\n",
    "from sklearn.metrics import accuracy_score, precision_recall_fscore_support, roc_auc_score, confusion_matrix, ConfusionMatrixDisplay\n",
    "from tqdm.notebook import tqdm\n",
    "import random\n",
    "import math\n",
    "import zipfile\n",
    "import cv2\n",
    "from ultralytics import YOLO\n",
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "44d79258",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T13:46:21.075549Z",
     "iopub.status.busy": "2025-05-01T13:46:21.075069Z",
     "iopub.status.idle": "2025-05-01T13:46:22.606890Z",
     "shell.execute_reply": "2025-05-01T13:46:22.605864Z"
    },
    "papermill": {
     "duration": 1.543063,
     "end_time": "2025-05-01T13:46:22.608466",
     "exception": false,
     "start_time": "2025-05-01T13:46:21.065403",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unzipped successfully.\n"
     ]
    }
   ],
   "source": [
    "zip_path = \"/kaggle/working/PIE/annotations/annotations.zip\"\n",
    "extract_to = \"/kaggle/working/PIE/annotations/\"\n",
    "\n",
    "if os.path.exists(extract_to + 'annotations'):\n",
    "    print(\"Exists already. Not unzipping.\")\n",
    "else:\n",
    "    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n",
    "        zip_ref.extractall(extract_to)\n",
    "    print(\"Unzipped successfully.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2eece9a4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T13:46:22.627869Z",
     "iopub.status.busy": "2025-05-01T13:46:22.627612Z",
     "iopub.status.idle": "2025-05-01T13:46:23.373183Z",
     "shell.execute_reply": "2025-05-01T13:46:23.372246Z"
    },
    "papermill": {
     "duration": 0.756817,
     "end_time": "2025-05-01T13:46:23.374569",
     "exception": false,
     "start_time": "2025-05-01T13:46:22.617752",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unzipped successfully.\n"
     ]
    }
   ],
   "source": [
    "zip_path = \"/kaggle/working/PIE/annotations/annotations_vehicle.zip\"\n",
    "extract_to = \"/kaggle/working/PIE/annotations/\"\n",
    "\n",
    "if os.path.exists(extract_to + 'annotations_vehicle'):\n",
    "    print(\"Exists already. Not unzipping.\")\n",
    "else:\n",
    "    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n",
    "        zip_ref.extractall(extract_to)\n",
    "    print(\"Unzipped successfully.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ca99d24c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T13:46:23.394063Z",
     "iopub.status.busy": "2025-05-01T13:46:23.393753Z",
     "iopub.status.idle": "2025-05-01T13:46:23.406079Z",
     "shell.execute_reply": "2025-05-01T13:46:23.405197Z"
    },
    "papermill": {
     "duration": 0.023663,
     "end_time": "2025-05-01T13:46:23.407521",
     "exception": false,
     "start_time": "2025-05-01T13:46:23.383858",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unzipped successfully.\n"
     ]
    }
   ],
   "source": [
    "zip_path = \"/kaggle/working/PIE/annotations/annotations_attributes.zip\"\n",
    "extract_to = \"/kaggle/working/PIE/annotations/\"\n",
    "\n",
    "if os.path.exists(extract_to + \"annotations_attributes\"):\n",
    "    print(\"Exists already. Not unzipping.\")\n",
    "else:\n",
    "    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n",
    "        zip_ref.extractall(extract_to)\n",
    "    print(\"Unzipped successfully.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "45a532f0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T13:46:23.428132Z",
     "iopub.status.busy": "2025-05-01T13:46:23.427828Z",
     "iopub.status.idle": "2025-05-01T13:46:23.438904Z",
     "shell.execute_reply": "2025-05-01T13:46:23.438293Z"
    },
    "papermill": {
     "duration": 0.023421,
     "end_time": "2025-05-01T13:46:23.440257",
     "exception": false,
     "start_time": "2025-05-01T13:46:23.416836",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # --- IMPORTS ---\n",
    "# import torch\n",
    "# import torch.nn as nn\n",
    "# import torch.optim as optim\n",
    "# from torch.utils.data import Dataset, DataLoader\n",
    "# import xml.etree.ElementTree as ET\n",
    "# import os\n",
    "# import numpy as np\n",
    "# from sklearn.metrics import accuracy_score, precision_recall_fscore_support, roc_auc_score, confusion_matrix, ConfusionMatrixDisplay\n",
    "# from sklearn.preprocessing import StandardScaler # For standardizing ego features\n",
    "# from tqdm.notebook import tqdm\n",
    "# import random\n",
    "# import math\n",
    "# import zipfile\n",
    "# import cv2\n",
    "# import pandas as pd\n",
    "# import matplotlib.pyplot as plt\n",
    "# import seaborn as sns\n",
    "# import pickle\n",
    "# import time\n",
    "# import sys # For path manipulation if needed\n",
    "\n",
    "# # --- Add PIE utilities path if necessary (adjust path) ---\n",
    "# pie_utilities_path = '/kaggle/working/PIE/utilities'\n",
    "# if pie_utilities_path not in sys.path:\n",
    "#     sys.path.insert(0, pie_utilities_path)\n",
    "# try:\n",
    "#     # We only need PIE class to generate the database if needed\n",
    "#     from pie_data import PIE\n",
    "# except ImportError as e:\n",
    "#     print(f\"Warning: Could not import PIE class from {pie_utilities_path}. Database must already exist. Error: {e}\")\n",
    "#     PIE = None # Define PIE as None if import fails\n",
    "\n",
    "# # --- Configuration ---\n",
    "# PIE_ROOT_PATH = '/kaggle/working/PIE' # Path where PIE repo was cloned/unzipped\n",
    "# VIDEO_INPUT_DIR = '/kaggle/input' # Where pie-setXX video dataset folders are\n",
    "# POSE_DATA_DIR = '/kaggle/input/pose-data/extracted_poses2' # Where setXX subdirs with PKLs are\n",
    "# PIE_DATABASE_CACHE_PATH = '/kaggle/input/pie-database/pie_database.pkl'\n",
    "\n",
    "# # --- Stream Control ---\n",
    "# ACTIVE_STREAMS = [\n",
    "#     'bbox',\n",
    "#     # 'pose',\n",
    "#     # 'ego_speed',\n",
    "#     # 'ego_acc',\n",
    "#     # 'ego_gyro',\n",
    "#     # 'ped_action',\n",
    "#     # 'ped_look',\n",
    "#     # 'ped_occlusion',\n",
    "#     # 'traffic_light',\n",
    "#     # 'static_context'\n",
    "# ]\n",
    "# print(f\"Active Streams: {ACTIVE_STREAMS}\")\n",
    "\n",
    "# # Model Hyperparameters\n",
    "# SEQ_LEN = 30\n",
    "# PRED_LEN = 1\n",
    "# # Input Sizes (Define for ALL potential streams)\n",
    "# INPUT_SIZE_BBOX = 4\n",
    "# INPUT_SIZE_POSE = 34\n",
    "# INPUT_SIZE_EGO_SPEED = 1\n",
    "# INPUT_SIZE_EGO_ACC = 2 # X, Y components\n",
    "# INPUT_SIZE_EGO_GYRO = 1 # Z component (Yaw rate)\n",
    "# INPUT_SIZE_PED_ACTION = 1 # 0:standing, 1:walking\n",
    "# INPUT_SIZE_PED_LOOK = 1 # 0:not-looking, 1:looking\n",
    "# INPUT_SIZE_PED_OCC = 1 # 0:none, 0.5:part, 1:full (normalized)\n",
    "# INPUT_SIZE_TL_STATE = 4 # 0:Undef, 1:Red, 2:Yellow, 3:Green (One-Hot)\n",
    "# # Static Feature Sizes (Matches pie_data.py mappings)\n",
    "# NUM_SIGNALIZED_CATS = 4\n",
    "# NUM_INTERSECTION_CATS = 5\n",
    "# NUM_AGE_CATS = 4\n",
    "# NUM_GENDER_CATS = 3\n",
    "# INPUT_SIZE_STATIC = NUM_SIGNALIZED_CATS + NUM_INTERSECTION_CATS + NUM_AGE_CATS + NUM_GENDER_CATS # = 16\n",
    "\n",
    "# LSTM_HIDDEN_SIZE = 256\n",
    "# NUM_LSTM_LAYERS = 2\n",
    "# DROPOUT_RATE = 0.3\n",
    "# NUM_CLASSES = 2\n",
    "# ATTENTION_DIM = 128\n",
    "\n",
    "# # Training Hyperparameters\n",
    "# LEARNING_RATE = 1e-4 # Possibly lower LR needed after balancing/more features\n",
    "# BATCH_SIZE = 32\n",
    "# NUM_EPOCHS = 10 # Increase epochs slightly for balanced data\n",
    "# DEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# print(f\"Using device: {DEVICE}\")\n",
    "\n",
    "# # Dataset Splits (Using PIE default)\n",
    "# TRAIN_SETS_STR = ['set01', 'set02', 'set04']\n",
    "# VAL_SETS_STR = ['set05', 'set06']\n",
    "# TEST_SETS_STR = ['set03'] # Although not used in training loop\n",
    "\n",
    "# # Mappings (Matches pie_data.py)\n",
    "# TL_STATE_MAP = {'__undefined__': 0, 'red': 1, 'yellow': 2, 'green': 3}\n",
    "# NUM_TL_STATES = len(TL_STATE_MAP)\n",
    "# SIGNALIZED_MAP = {'n/a': 0, 'C': 1, 'S': 2, 'CS': 3}\n",
    "# INTERSECTION_MAP = {'midblock': 0, 'T': 1, 'T-left': 2, 'T-right': 3, 'four-way': 4}\n",
    "# AGE_MAP = {'child': 0, 'young': 1, 'adult': 2, 'senior': 3}\n",
    "# GENDER_MAP = {'n/a': 0, 'female': 1, 'male': 2}\n",
    "\n",
    "# # --- Helper: One-Hot Encoding ---\n",
    "# def to_one_hot(index, num_classes):\n",
    "#     vec = np.zeros(num_classes, dtype=np.float32)\n",
    "#     if 0 <= index < num_classes:\n",
    "#         vec[index] = 1.0\n",
    "#     else: # Handle unexpected index\n",
    "#         vec[0] = 1.0 # Default to first class\n",
    "#     return vec\n",
    "\n",
    "# # --- Balancing Function ---\n",
    "# def balance_samples_count(seq_data, label_type, random_seed=42):\n",
    "#     print('---------------------------------------------------------')\n",
    "#     print(f\"Balancing samples based on '{label_type}' key\")\n",
    "#     if label_type not in seq_data:\n",
    "#         raise KeyError(f\"Label type '{label_type}' not found.\")\n",
    "#     try:\n",
    "#         gt_labels = [lbl[0] for lbl in seq_data[label_type]]\n",
    "#     except (IndexError, TypeError):\n",
    "#         raise ValueError(f\"Labels under '{label_type}' not in expected format [[label_val]].\")\n",
    "\n",
    "#     if not all(l in [0, 1] for l in gt_labels):\n",
    "#         print(f\"Warning: Labels for balancing contain values other than 0 or 1.\")\n",
    "\n",
    "#     num_pos_samples = np.count_nonzero(np.array(gt_labels))\n",
    "#     num_neg_samples = len(gt_labels) - num_pos_samples\n",
    "#     new_seq_data = {}\n",
    "\n",
    "#     if num_neg_samples == num_pos_samples:\n",
    "#         print('Samples already balanced.')\n",
    "#         return seq_data.copy()\n",
    "#     else:\n",
    "#         print(f'Unbalanced: Positive (1): {num_pos_samples} | Negative (0): {num_neg_samples}')\n",
    "#         majority_label = 0 if num_neg_samples > num_pos_samples else 1\n",
    "#         minority_count = min(num_neg_samples, num_pos_samples)\n",
    "#         print(f\"Undersampling majority class ({majority_label}) to match count ({minority_count}).\")\n",
    "\n",
    "#         majority_indices = np.where(np.array(gt_labels) == majority_label)[0]\n",
    "#         minority_indices = np.where(np.array(gt_labels) != majority_label)[0]\n",
    "#         np.random.seed(random_seed)\n",
    "#         keep_majority_indices = np.random.choice(majority_indices, size=minority_count, replace=False)\n",
    "#         final_indices = np.concatenate((minority_indices, keep_majority_indices))\n",
    "#         np.random.shuffle(final_indices)\n",
    "\n",
    "#         for k, v_list in seq_data.items():\n",
    "#             if isinstance(v_list, list) and len(v_list) == len(gt_labels):\n",
    "#                  try:\n",
    "#                      # Check if the list contains numpy arrays before converting the whole list\n",
    "#                      if v_list and isinstance(v_list[0], np.ndarray):\n",
    "#                          v_array = np.array(v_list)\n",
    "#                          new_seq_data[k] = list(v_array[final_indices])\n",
    "#                      else: # Assume list of lists or list of scalars\n",
    "#                           new_seq_data[k] = [v_list[i] for i in final_indices]\n",
    "#                  except Exception as e:\n",
    "#                       print(f\"Error processing key '{k}' during balancing: {e}. Skip.\")\n",
    "#                       new_seq_data[k] = []\n",
    "#             else:\n",
    "#                  print(f\"Warn: Skipping key '{k}' in balancing (not list or len mismatch).\")\n",
    "#                  new_seq_data[k] = v_list\n",
    "\n",
    "#         # Check if label key still exists after potential errors\n",
    "#         if label_type in new_seq_data:\n",
    "#              new_gt_labels = [lbl[0] for lbl in new_seq_data[label_type]]\n",
    "#              final_pos = np.count_nonzero(np.array(new_gt_labels))\n",
    "#              final_neg = len(new_gt_labels) - final_pos\n",
    "#              print(f'Balanced:   Positive (1): {final_pos} | Negative (0): {final_neg}')\n",
    "#         else:\n",
    "#              print(\"Error: Label key was lost during balancing process.\")\n",
    "\n",
    "#         print('---------------------------------------------------------')\n",
    "#         return new_seq_data\n",
    "\n",
    "\n",
    "# # --- Dataset Class ---\n",
    "# class PIEDataset(Dataset):\n",
    "#     def __init__(self, pie_database, set_names, pose_data_dir, seq_len, pred_len, scalers=None, active_streams=None):\n",
    "#         self.pie_db = pie_database\n",
    "#         self.set_names = set_names\n",
    "#         self.pose_data_dir = pose_data_dir\n",
    "#         self.seq_len = seq_len\n",
    "#         self.pred_len = pred_len\n",
    "#         self.scalers = scalers or {}\n",
    "#         self.active_streams = active_streams or []\n",
    "#         self.sequences = []\n",
    "#         self.all_pose_data = {}\n",
    "#         # Store input sizes needed for error handling in __getitem__\n",
    "#         self._input_sizes_for_error = self._get_input_sizes_dict()\n",
    "#         self._load_pose_data()\n",
    "#         self._generate_sequence_list()\n",
    "#         if not self.sequences:\n",
    "#             raise ValueError(f\"Dataset init failed: No sequences for {self.set_names}\")\n",
    "\n",
    "#     def _get_input_sizes_dict(self):\n",
    "#         # Helper to create input sizes dict, needed for error fallback in __getitem__\n",
    "#         input_sizes = {}\n",
    "#         for stream in self.active_streams:\n",
    "#             size_constant_name = f'INPUT_SIZE_{stream.upper()}'\n",
    "#             special_cases = {'TRAFFIC_LIGHT': 'TL_STATE', 'STATIC_CONTEXT': 'STATIC', 'EGO_SPEED': 'EGO_SPEED', 'EGO_ACC': 'EGO_ACC', 'EGO_GYRO': 'EGO_GYRO', 'PED_ACTION': 'PED_ACTION', 'PED_LOOK': 'PED_LOOK', 'PED_OCCLUSION': 'PED_OCC'}\n",
    "#             stream_upper_key = stream.upper()\n",
    "#             suffix = special_cases.get(stream_upper_key)\n",
    "#             if suffix:\n",
    "#                  size_constant_name = f'INPUT_SIZE_{suffix}'\n",
    "#             elif stream == 'bbox': size_constant_name = 'INPUT_SIZE_BBOX'\n",
    "#             elif stream == 'pose': size_constant_name = 'INPUT_SIZE_POSE'\n",
    "#             if size_constant_name in globals(): input_sizes[stream] = globals()[size_constant_name]\n",
    "#             else: input_sizes[stream] = 1 # Default size 1 if not found (should not happen ideally)\n",
    "#         return input_sizes\n",
    "\n",
    "#     def _load_pose_data(self):\n",
    "#         print(f\"\\nLoading pose data for sets: {self.set_names} from {self.pose_data_dir}\")\n",
    "#         sets_loaded_count = 0\n",
    "#         for set_id in tqdm(self.set_names, desc=\"Loading Pose Sets\"):\n",
    "#             self.all_pose_data[set_id] = {}\n",
    "#             pose_set_path = os.path.join(self.pose_data_dir, set_id)\n",
    "#             if not os.path.isdir(pose_set_path):\n",
    "#                 print(f\"Warn: Pose dir missing for {set_id} at {pose_set_path}\")\n",
    "#                 continue\n",
    "#             pkl_files_in_set = [f for f in os.listdir(pose_set_path) if f.startswith(f\"{set_id}_\") and f.endswith(\"_poses.pkl\")]\n",
    "#             if not pkl_files_in_set:\n",
    "#                 continue\n",
    "#             loaded_video_count = 0\n",
    "#             for pkl_filename in tqdm(pkl_files_in_set, desc=f\"Loading PKLs for {set_id}\", leave=False):\n",
    "#                 pkl_file_path = os.path.join(pose_set_path, pkl_filename)\n",
    "#                 try:\n",
    "#                     with open(pkl_file_path, 'rb') as f:\n",
    "#                         loaded_pkl_content = pickle.load(f)\n",
    "#                     if len(loaded_pkl_content) != 1:\n",
    "#                         continue\n",
    "#                     unique_video_key, video_data = list(loaded_pkl_content.items())[0]\n",
    "#                     video_id = \"_\".join(unique_video_key.split('_')[1:])\n",
    "#                     self.all_pose_data[set_id][video_id] = video_data\n",
    "#                     loaded_video_count += 1\n",
    "#                 except FileNotFoundError:\n",
    "#                     pass # Expected if some videos failed extraction\n",
    "#                 except Exception as e:\n",
    "#                     print(f\"Error loading pose PKL {pkl_file_path}: {e}\")\n",
    "#             if loaded_video_count > 0:\n",
    "#                 sets_loaded_count += 1\n",
    "#         print(f\"Finished loading pose data for {sets_loaded_count} sets.\")\n",
    "\n",
    "#     def _generate_sequence_list(self):\n",
    "#         print(f\"Generating sequence list from PIE database for sets: {self.set_names}\")\n",
    "#         sequence_count = 0\n",
    "#         ped_count = 0\n",
    "#         for set_id in tqdm(self.set_names, desc=\"Generating Sequences\"):\n",
    "#             if set_id not in self.pie_db:\n",
    "#                 continue\n",
    "#             for video_id, video_data in self.pie_db[set_id].items():\n",
    "#                 if 'ped_annotations' not in video_data:\n",
    "#                     continue\n",
    "#                 for ped_id, ped_data in video_data['ped_annotations'].items():\n",
    "#                     ped_count += 1\n",
    "#                     if 'frames' not in ped_data or len(ped_data['frames']) < self.seq_len + self.pred_len:\n",
    "#                         continue\n",
    "#                     sorted_frames = sorted(ped_data['frames'])\n",
    "#                     for i in range(len(sorted_frames) - self.seq_len - self.pred_len + 1):\n",
    "#                         start_frame = sorted_frames[i]\n",
    "#                         end_frame_observe = sorted_frames[i + self.seq_len - 1]\n",
    "#                         if end_frame_observe - start_frame != self.seq_len - 1:\n",
    "#                             continue\n",
    "#                         target_frame_actual_idx = i + self.seq_len + self.pred_len - 1\n",
    "#                         if target_frame_actual_idx >= len(sorted_frames):\n",
    "#                              continue # Avoid index out of bounds\n",
    "#                         target_frame = sorted_frames[target_frame_actual_idx]\n",
    "#                         if target_frame - end_frame_observe != self.pred_len:\n",
    "#                              continue\n",
    "#                         self.sequences.append((set_id, video_id, ped_id, start_frame))\n",
    "#                         sequence_count += 1\n",
    "#         print(f\"Found {sequence_count} valid sequences from {ped_count} pedestrian tracks.\")\n",
    "\n",
    "#     def __len__(self):\n",
    "#         return len(self.sequences)\n",
    "\n",
    "#     def __getitem__(self, idx):\n",
    "#         set_id, video_id, ped_id, start_frame = self.sequences[idx]\n",
    "#         frame_nums = list(range(start_frame, start_frame + self.seq_len))\n",
    "#         target_frame_num = start_frame + self.seq_len + self.pred_len - 1\n",
    "\n",
    "#         # Get data from the loaded PIE database\n",
    "#         video_db = self.pie_db.get(set_id, {}).get(video_id, {})\n",
    "#         ped_db = video_db.get('ped_annotations', {}).get(ped_id, {})\n",
    "#         ego_db = video_db.get('vehicle_annotations', {}) # Frame -> {sensor: value}\n",
    "#         traffic_db = video_db.get('traffic_annotations', {}) # ObjID -> {frames:[], state:[], ...}\n",
    "#         ped_attributes = ped_db.get('attributes', {})\n",
    "\n",
    "#         # Initialize feature sequences\n",
    "#         feature_sequences = {stream: [] for stream in self.active_streams}\n",
    "\n",
    "#         # Static Features (calculated once)\n",
    "#         static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32) # Default static\n",
    "#         if 'static_context' in self.active_streams:\n",
    "#             sig_idx = ped_attributes.get('signalized', 0)\n",
    "#             int_idx = ped_attributes.get('intersection', 0)\n",
    "#             age_idx = ped_attributes.get('age', 2) # Default to 'adult'\n",
    "#             gen_idx = ped_attributes.get('gender', 0)\n",
    "#             static_vec = np.concatenate([\n",
    "#                 to_one_hot(sig_idx, NUM_SIGNALIZED_CATS),\n",
    "#                 to_one_hot(int_idx, NUM_INTERSECTION_CATS),\n",
    "#                 to_one_hot(age_idx, NUM_AGE_CATS),\n",
    "#                 to_one_hot(gen_idx, NUM_GENDER_CATS)\n",
    "#             ])\n",
    "#             if static_vec.shape[0] != INPUT_SIZE_STATIC: # Sanity check\n",
    "#                  static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "\n",
    "#         # Get Target Label\n",
    "#         label = 0 # Default to not-crossing\n",
    "#         if 'frames' in ped_db and 'behavior' in ped_db and 'cross' in ped_db['behavior']:\n",
    "#              try:\n",
    "#                  target_frame_db_idx = ped_db['frames'].index(target_frame_num)\n",
    "#                  label = ped_db['behavior']['cross'][target_frame_db_idx]\n",
    "#                  if label == -1: label = 0 # Map irrelevant to not-crossing\n",
    "#              except (ValueError, IndexError):\n",
    "#                  pass # Keep default label\n",
    "\n",
    "#         # Iterate through sequence frames\n",
    "#         for frame_num in frame_nums:\n",
    "#             frame_db_idx = -1\n",
    "#             if 'frames' in ped_db:\n",
    "#                  try:\n",
    "#                      frame_db_idx = ped_db['frames'].index(frame_num)\n",
    "#                  except ValueError:\n",
    "#                      pass # Frame not found for this pedestrian in this sequence part\n",
    "#             ego_frame_data = ego_db.get(frame_num, {})\n",
    "\n",
    "#             # --- Extract for ACTIVE streams ---\n",
    "#             if 'bbox' in self.active_streams:\n",
    "#                 bbox_norm = np.zeros(INPUT_SIZE_BBOX, dtype=np.float32) # Default\n",
    "#                 if frame_db_idx != -1 and 'bbox' in ped_db and len(ped_db['bbox']) > frame_db_idx:\n",
    "#                     # --- Start Corrected Try/Except ---\n",
    "#                      try:\n",
    "#                           x1, y1, x2, y2 = ped_db['bbox'][frame_db_idx]\n",
    "#                           img_w = video_db.get('width', 1920) # Use default if missing\n",
    "#                           img_h = video_db.get('height', 1080)\n",
    "#                           if img_w > 0 and img_h > 0: # Check for valid image dimensions\n",
    "#                                cx = ((x1 + x2) / 2) / img_w\n",
    "#                                cy = ((y1 + y2) / 2) / img_h\n",
    "#                                w = (x2 - x1) / img_w\n",
    "#                                h = (y2 - y1) / img_h\n",
    "#                                # Check for valid normalized bbox dimensions\n",
    "#                                if w > 0 and h > 0 and 0 <= cx <= 1 and 0 <= cy <= 1:\n",
    "#                                     bbox_norm = np.array([cx, cy, w, h], dtype=np.float32)\n",
    "#                      except Exception as e:\n",
    "#                           # Keep default zero vector if any error occurs during processing\n",
    "#                           # print(f\"Warning: Error processing bbox F:{frame_num} P:{ped_id} V:{video_id} - {e}\") # Optional warning\n",
    "#                           pass\n",
    "#                     # --- End Corrected Try/Except ---\n",
    "#                 feature_sequences['bbox'].append(bbox_norm)\n",
    "\n",
    "#             # --- (Rest of stream extractions - unchanged logic but ensure proper indentation) ---\n",
    "#             if 'pose' in self.active_streams:\n",
    "#                 pose_vector = np.zeros(INPUT_SIZE_POSE, dtype=np.float32)\n",
    "#                 vid_pose_data = self.all_pose_data.get(set_id, {}).get(video_id, {})\n",
    "#                 frame_pose_data = vid_pose_data.get(frame_num, {})\n",
    "#                 loaded_pose = frame_pose_data.get(ped_id)\n",
    "#                 if loaded_pose is not None and isinstance(loaded_pose, np.ndarray) and loaded_pose.shape == (INPUT_SIZE_POSE,):\n",
    "#                     pose_vector = loaded_pose\n",
    "#                 feature_sequences['pose'].append(pose_vector)\n",
    "\n",
    "#             if 'ego_speed' in self.active_streams:\n",
    "#                 speed = ego_frame_data.get('OBD_speed', 0.0)\n",
    "#                 if speed == 0.0: speed = ego_frame_data.get('GPS_speed', 0.0)\n",
    "#                 speed_scaled = (speed - self.scalers.get('ego_speed_mean', 0.0)) / self.scalers.get('ego_speed_std', 1.0)\n",
    "#                 feature_sequences['ego_speed'].append([speed_scaled])\n",
    "\n",
    "#             if 'ego_acc' in self.active_streams:\n",
    "#                 accX = ego_frame_data.get('accX', 0.0)\n",
    "#                 accY = ego_frame_data.get('accY', 0.0)\n",
    "#                 accX_scaled = (accX - self.scalers.get('accX_mean', 0.0)) / self.scalers.get('accX_std', 1.0)\n",
    "#                 accY_scaled = (accY - self.scalers.get('accY_mean', 0.0)) / self.scalers.get('accY_std', 1.0)\n",
    "#                 feature_sequences['ego_acc'].append([accX_scaled, accY_scaled])\n",
    "\n",
    "#             if 'ego_gyro' in self.active_streams:\n",
    "#                 gyroZ = ego_frame_data.get('gyroZ', 0.0)\n",
    "#                 gyroZ_scaled = (gyroZ - self.scalers.get('gyroZ_mean', 0.0)) / self.scalers.get('gyroZ_std', 1.0)\n",
    "#                 feature_sequences['ego_gyro'].append([gyroZ_scaled])\n",
    "\n",
    "#             if 'ped_action' in self.active_streams:\n",
    "#                 action = 0 # Default standing\n",
    "#                 if frame_db_idx != -1 and 'behavior' in ped_db and 'action' in ped_db['behavior'] and len(ped_db['behavior']['action']) > frame_db_idx:\n",
    "#                      action = ped_db['behavior']['action'][frame_db_idx]\n",
    "#                 feature_sequences['ped_action'].append([float(action)])\n",
    "\n",
    "#             if 'ped_look' in self.active_streams:\n",
    "#                 look = 0 # Default not-looking\n",
    "#                 if frame_db_idx != -1 and 'behavior' in ped_db and 'look' in ped_db['behavior'] and len(ped_db['behavior']['look']) > frame_db_idx:\n",
    "#                      look = ped_db['behavior']['look'][frame_db_idx]\n",
    "#                 feature_sequences['ped_look'].append([float(look)])\n",
    "\n",
    "#             if 'ped_occlusion' in self.active_streams:\n",
    "#                 occ = 0.0 # Default none\n",
    "#                 if frame_db_idx != -1 and 'occlusion' in ped_db and len(ped_db['occlusion']) > frame_db_idx:\n",
    "#                      occ_val = ped_db['occlusion'][frame_db_idx]\n",
    "#                      occ = float(occ_val) / 2.0 # Normalize\n",
    "#                 feature_sequences['ped_occlusion'].append([occ])\n",
    "\n",
    "#             if 'traffic_light' in self.active_streams:\n",
    "#                 state_int = 0\n",
    "#                 for obj_id, obj_data in traffic_db.items():\n",
    "#                      if obj_data.get('obj_class') == 'traffic_light' and 'frames' in obj_data and 'state' in obj_data:\n",
    "#                           try:\n",
    "#                               tl_frame_idx = obj_data['frames'].index(frame_num)\n",
    "#                               state_val = obj_data['state'][tl_frame_idx]\n",
    "#                               if state_val != 0:\n",
    "#                                   state_int = state_val\n",
    "#                                   break # Found first non-undefined state\n",
    "#                           except (ValueError, IndexError):\n",
    "#                               continue\n",
    "#                 feature_sequences['traffic_light'].append(to_one_hot(state_int, NUM_TL_STATES))\n",
    "\n",
    "#             if 'static_context' in self.active_streams:\n",
    "#                 feature_sequences['static_context'].append(static_vec)\n",
    "\n",
    "#         # --- Convert lists to Tensors ---\n",
    "#         features = {}\n",
    "#         try:\n",
    "#             for stream_name in self.active_streams:\n",
    "#                  features[stream_name] = torch.tensor(np.array(feature_sequences[stream_name], dtype=np.float32), dtype=torch.float32)\n",
    "\n",
    "#         except Exception as e:\n",
    "#              print(f\"Error converting features idx {idx}: {e}. Return dummy.\")\n",
    "#              # Use the pre-calculated sizes dictionary for fallback\n",
    "#              features = {\n",
    "#                  name: torch.zeros((self.seq_len, self._input_sizes_for_error.get(name, 1)), dtype=torch.float32)\n",
    "#                  for name in self.active_streams\n",
    "#              }\n",
    "\n",
    "#         return features, torch.tensor(label, dtype=torch.long)\n",
    "\n",
    "# # --- Wrapper Dataset for Balanced Data ---\n",
    "# class BalancedDataset(Dataset):\n",
    "#     def __init__(self, data_dict, active_streams, label_key='label'):\n",
    "#         self.active_streams = active_streams\n",
    "#         self.label_key = label_key\n",
    "#         if self.label_key not in data_dict or not data_dict[self.label_key]:\n",
    "#              raise ValueError(f\"Label key '{self.label_key}' missing/empty.\")\n",
    "#         self.num_samples = len(data_dict[self.label_key])\n",
    "#         if self.num_samples == 0:\n",
    "#             print(\"Warning: BalancedDataset initialized with zero samples.\")\n",
    "\n",
    "#         self.features = {}\n",
    "#         for stream in self.active_streams:\n",
    "#              if stream in data_dict and data_dict[stream]:\n",
    "#                  try:\n",
    "#                      self.features[stream] = torch.tensor(np.array(data_dict[stream]), dtype=torch.float32)\n",
    "#                  except ValueError as e:\n",
    "#                       raise ValueError(f\"Error converting stream '{stream}' data: {e}\")\n",
    "#              else:\n",
    "#                   raise KeyError(f\"Stream '{stream}' missing/empty in balanced data.\")\n",
    "#         try:\n",
    "#             self.labels = torch.tensor([lbl[0] for lbl in data_dict[self.label_key]], dtype=torch.long)\n",
    "#         except (IndexError, TypeError) as e:\n",
    "#              raise ValueError(f\"Error converting labels: {e}\")\n",
    "\n",
    "#         for stream in self.active_streams:\n",
    "#              if len(self.features[stream]) != self.num_samples:\n",
    "#                  raise ValueError(f\"Len mismatch: Stream '{stream}' ({len(self.features[stream])}) vs Labels ({self.num_samples})\")\n",
    "#     def __len__(self):\n",
    "#         return self.num_samples\n",
    "#     def __getitem__(self, idx):\n",
    "#         feature_dict = {stream: self.features[stream][idx] for stream in self.active_streams}\n",
    "#         label = self.labels[idx]\n",
    "#         return feature_dict, label\n",
    "\n",
    "# # --- Model Architecture ---\n",
    "# class Attention(nn.Module):\n",
    "#     def __init__(self, hidden_dim, attention_dim):\n",
    "#         super(Attention, self).__init__()\n",
    "#         self.attention_net = nn.Sequential(\n",
    "#             nn.Linear(hidden_dim, attention_dim),\n",
    "#             nn.Tanh(),\n",
    "#             nn.Linear(attention_dim, 1)\n",
    "#         )\n",
    "#     def forward(self, lstm_output):\n",
    "#         att_scores = self.attention_net(lstm_output).squeeze(2)\n",
    "#         att_weights = torch.softmax(att_scores, dim=1)\n",
    "#         context_vector = torch.sum(lstm_output * att_weights.unsqueeze(2), dim=1)\n",
    "#         return context_vector, att_weights\n",
    "# class MultiStreamAdaptiveLSTM(nn.Module):\n",
    "#     def __init__(self, input_sizes, lstm_hidden_size, num_lstm_layers, num_classes, attention_dim, dropout_rate, stream_names=['bbox', 'pose']):\n",
    "#         super(MultiStreamAdaptiveLSTM, self).__init__()\n",
    "#         if not stream_names: raise ValueError(\"stream_names cannot be empty.\")\n",
    "#         self.stream_names = stream_names\n",
    "#         self.lstms = nn.ModuleDict()\n",
    "#         self.attentions = nn.ModuleDict()\n",
    "#         print(f\"Initializing model with streams: {self.stream_names}\")\n",
    "#         for name in self.stream_names:\n",
    "#             if name not in input_sizes: raise KeyError(f\"Input size for stream '{name}' not provided.\")\n",
    "#             current_input_size = input_sizes[name]\n",
    "#             print(f\"  - Adding stream '{name}' with input size {current_input_size}\")\n",
    "#             self.lstms[name] = nn.LSTM(current_input_size, lstm_hidden_size, num_lstm_layers,\n",
    "#                                        batch_first=True, dropout=dropout_rate if num_lstm_layers > 1 else 0,\n",
    "#                                        bidirectional=True)\n",
    "#             self.attentions[name] = Attention(lstm_hidden_size * 2 , attention_dim)\n",
    "#         num_active_streams = len(self.stream_names)\n",
    "#         combined_feature_dim = lstm_hidden_size * 2 * num_active_streams\n",
    "#         print(f\"  Combined feature dimension: {combined_feature_dim}\")\n",
    "#         self.dropout = nn.Dropout(dropout_rate)\n",
    "#         intermediate_dim = max(num_classes * 4, combined_feature_dim // 2)\n",
    "#         self.fc1 = nn.Linear(combined_feature_dim, intermediate_dim)\n",
    "#         self.relu = nn.ReLU()\n",
    "#         self.fc2 = nn.Linear(intermediate_dim, num_classes)\n",
    "#     def forward(self, x):\n",
    "#         stream_context_vectors = []\n",
    "#         stream_att_weights = {}\n",
    "#         for name in self.stream_names:\n",
    "#             if name not in x: print(f\"Warning: Stream '{name}' expected but not in input data.\"); continue\n",
    "#             lstm_out, _ = self.lstms[name](x[name])\n",
    "#             context_vector, attention_weights = self.attentions[name](lstm_out)\n",
    "#             stream_context_vectors.append(context_vector)\n",
    "#             stream_att_weights[name] = attention_weights\n",
    "#         if not stream_context_vectors: raise RuntimeError(\"No stream outputs generated.\")\n",
    "#         fused_features = torch.cat(stream_context_vectors, dim=1)\n",
    "#         out = self.dropout(fused_features)\n",
    "#         out = self.relu(self.fc1(out))\n",
    "#         out = self.dropout(out)\n",
    "#         logits = self.fc2(out)\n",
    "#         return logits\n",
    "\n",
    "# # --- Training and Evaluation Functions ---\n",
    "# def train_epoch(model, dataloader, optimizer, criterion, device):\n",
    "#     model.train()\n",
    "#     total_loss = 0.0\n",
    "#     all_preds = []\n",
    "#     all_labels = []\n",
    "#     active_streams = model.stream_names\n",
    "#     for features, labels in tqdm(dataloader, desc=\"Training\", leave=False):\n",
    "#         input_features = {name: features[name].to(device) for name in active_streams if name in features}\n",
    "#         labels = labels.to(device)\n",
    "#         optimizer.zero_grad()\n",
    "#         outputs = model(input_features)\n",
    "#         loss = criterion(outputs, labels)\n",
    "#         loss.backward()\n",
    "#         optimizer.step()\n",
    "#         total_loss += loss.item()\n",
    "#         preds = torch.argmax(outputs, dim=1)\n",
    "#         all_preds.extend(preds.cpu().numpy())\n",
    "#         all_labels.extend(labels.cpu().numpy())\n",
    "#     avg_loss = total_loss / len(dataloader)\n",
    "#     accuracy = accuracy_score(all_labels, all_preds)\n",
    "#     return avg_loss, accuracy\n",
    "\n",
    "# def evaluate_epoch(model, dataloader, criterion, device):\n",
    "#     model.eval()\n",
    "#     total_loss = 0.0\n",
    "#     all_labels = []\n",
    "#     all_preds = []\n",
    "#     all_probs = []\n",
    "#     active_streams = model.stream_names\n",
    "#     with torch.no_grad():\n",
    "#         for features, labels in tqdm(dataloader, desc=\"Evaluating\", leave=False):\n",
    "#             input_features = {name: features[name].to(device) for name in active_streams if name in features}\n",
    "#             labels = labels.to(device)\n",
    "#             outputs = model(input_features)\n",
    "#             loss = criterion(outputs, labels)\n",
    "#             total_loss += loss.item()\n",
    "#             probs = torch.softmax(outputs, dim=1)\n",
    "#             preds = torch.argmax(probs, dim=1)\n",
    "#             all_labels.extend(labels.cpu().numpy())\n",
    "#             all_preds.extend(preds.cpu().numpy())\n",
    "#             all_probs.extend(probs.cpu().numpy())\n",
    "#     avg_loss = total_loss / len(dataloader)\n",
    "#     all_probs = np.array(all_probs); all_labels = np.array(all_labels); all_preds = np.array(all_preds)\n",
    "#     accuracy = accuracy_score(all_labels, all_preds)\n",
    "#     precision, recall, f1, _ = precision_recall_fscore_support(all_labels, all_preds, average='binary', pos_label=1, zero_division=0)\n",
    "#     auc = roc_auc_score(all_labels, all_probs[:, 1]) if len(np.unique(all_labels)) > 1 else float('nan')\n",
    "#     return {'loss': avg_loss, 'accuracy': accuracy, 'precision': precision, 'recall': recall, 'f1': f1, 'auc': auc}\n",
    "\n",
    "# def get_predictions_and_labels(model, dataloader, device):\n",
    "#     model.eval(); all_labels = []; all_preds = []\n",
    "#     active_streams = model.stream_names\n",
    "#     with torch.no_grad():\n",
    "#         for features, labels in tqdm(dataloader, desc=\"Generating CM Data\", leave=False):\n",
    "#              input_features = {name: features[name].to(device) for name in active_streams if name in features}\n",
    "#              labels = labels.to(device); outputs = model(input_features); preds = torch.argmax(outputs, dim=1)\n",
    "#              all_labels.extend(labels.cpu().numpy()); all_preds.extend(preds.cpu().numpy())\n",
    "#     return np.array(all_labels), np.array(all_preds)\n",
    "\n",
    "# # --- Main Execution ---\n",
    "# if __name__ == '__main__':\n",
    "\n",
    "#     # --- Generate/Load PIE Database ---\n",
    "#     print(f\"Checking for PIE database cache at: {PIE_DATABASE_CACHE_PATH}\")\n",
    "#     if not os.path.exists(PIE_DATABASE_CACHE_PATH):\n",
    "#         if PIE is None: raise ImportError(\"PIE class not imported, cannot generate database.\")\n",
    "#         print(\"PIE database cache not found. Generating...\");\n",
    "#         pie_dataset_interface = PIE(data_path=PIE_ROOT_PATH, regen_database=True)\n",
    "#         pie_database = pie_dataset_interface.generate_database()\n",
    "#         if not pie_database: raise RuntimeError(\"Failed to generate PIE database.\")\n",
    "#         print(\"PIE database generated successfully.\")\n",
    "#     else:\n",
    "#         print(\"Loading PIE database from cache...\")\n",
    "#         try:\n",
    "#             with open(PIE_DATABASE_CACHE_PATH, 'rb') as f: pie_database = pickle.load(f)\n",
    "#             print(\"PIE database loaded successfully.\")\n",
    "#         except Exception as e: raise RuntimeError(f\"Failed to load PIE database: {e}\")\n",
    "\n",
    "#     # --- Calculate Standardization Parameters ---\n",
    "#     print(\"\\nCalculating standardization parameters from training set...\")\n",
    "#     all_train_ego_speeds = []; all_train_accX = []; all_train_accY = []; all_train_gyroZ = []\n",
    "#     for set_id in TRAIN_SETS_STR:\n",
    "#          if set_id in pie_database:\n",
    "#              for video_id, video_data in pie_database[set_id].items():\n",
    "#                   if 'vehicle_annotations' in video_data:\n",
    "#                        for frame_num, ego_frame_data in video_data['vehicle_annotations'].items():\n",
    "#                            speed = ego_frame_data.get('OBD_speed', 0.0);\n",
    "#                            if speed == 0.0: speed = ego_frame_data.get('GPS_speed', 0.0)\n",
    "#                            all_train_ego_speeds.append(speed); all_train_accX.append(ego_frame_data.get('accX', 0.0));\n",
    "#                            all_train_accY.append(ego_frame_data.get('accY', 0.0)); all_train_gyroZ.append(ego_frame_data.get('gyroZ', 0.0))\n",
    "#     scalers = {}\n",
    "#     if all_train_ego_speeds: scalers['ego_speed_mean'] = np.mean(all_train_ego_speeds); scalers['ego_speed_std'] = np.std(all_train_ego_speeds) if np.std(all_train_ego_speeds) > 1e-6 else 1.0; print(f\"  Ego Speed: Mean={scalers['ego_speed_mean']:.2f}, Std={scalers['ego_speed_std']:.2f}\")\n",
    "#     if all_train_accX: scalers['accX_mean'] = np.mean(all_train_accX); scalers['accX_std'] = np.std(all_train_accX) if np.std(all_train_accX) > 1e-6 else 1.0; scalers['accY_mean'] = np.mean(all_train_accY); scalers['accY_std'] = np.std(all_train_accY) if np.std(all_train_accY) > 1e-6 else 1.0; print(f\"  Ego AccX: Mean={scalers['accX_mean']:.2f}, Std={scalers['accX_std']:.2f}\"); print(f\"  Ego AccY: Mean={scalers['accY_mean']:.2f}, Std={scalers['accY_std']:.2f}\")\n",
    "#     if all_train_gyroZ: scalers['gyroZ_mean'] = np.mean(all_train_gyroZ); scalers['gyroZ_std'] = np.std(all_train_gyroZ) if np.std(all_train_gyroZ) > 1e-6 else 1.0; print(f\"  Ego GyroZ: Mean={scalers['gyroZ_mean']:.2f}, Std={scalers['gyroZ_std']:.2f}\")\n",
    "#     print(\"Standardization parameters calculated.\")\n",
    "\n",
    "#     # --- Initialize FULL Datasets ---\n",
    "#     print(\"\\nInitializing full datasets...\")\n",
    "#     full_train_dataset = PIEDataset(pie_database, TRAIN_SETS_STR, POSE_DATA_DIR, SEQ_LEN, PRED_LEN, scalers, ACTIVE_STREAMS)\n",
    "#     val_dataset = PIEDataset(pie_database, VAL_SETS_STR, POSE_DATA_DIR, SEQ_LEN, PRED_LEN, scalers, ACTIVE_STREAMS)\n",
    "#     if len(full_train_dataset) == 0 or len(val_dataset) == 0: raise ValueError(\"Dataset loading failed.\")\n",
    "\n",
    "#     # --- Prepare and Balance Training Data ---\n",
    "#     print(\"\\nExtracting training data for balancing...\")\n",
    "#     training_data_dict = {stream: [] for stream in ACTIVE_STREAMS}; training_data_dict['label'] = []\n",
    "#     for i in tqdm(range(len(full_train_dataset)), desc=\"Extracting data\"):\n",
    "#          features, label = full_train_dataset[i]\n",
    "#          for stream_name in ACTIVE_STREAMS: training_data_dict[stream_name].append(features[stream_name].numpy())\n",
    "#          training_data_dict['label'].append([label.item()]) # Store label as list containing the item\n",
    "#     print(f\"Original training samples: {len(training_data_dict['label'])}\")\n",
    "#     del full_train_dataset # Free memory\n",
    "\n",
    "#     label_key_for_balancing = 'label' # Key used in training_data_dict\n",
    "#     balanced_train_data_dict = balance_samples_count(training_data_dict, label_type=label_key_for_balancing)\n",
    "#     del training_data_dict # Free up memory\n",
    "\n",
    "#     # --- Create Balanced Training Dataset and DataLoaders ---\n",
    "#     print(\"\\nCreating DataLoaders...\")\n",
    "#     try: balanced_train_dataset = BalancedDataset(balanced_train_data_dict, ACTIVE_STREAMS, label_key=label_key_for_balancing); del balanced_train_data_dict\n",
    "#     except Exception as e: print(f\"Error creating BalancedDataset: {e}\"); raise\n",
    "#     if len(balanced_train_dataset) == 0: raise ValueError(\"Balanced training dataset is empty!\")\n",
    "\n",
    "#     train_loader = DataLoader(balanced_train_dataset, batch_size=BATCH_SIZE, shuffle=True, num_workers=2, pin_memory=True)\n",
    "#     val_loader = DataLoader(val_dataset, batch_size=BATCH_SIZE, shuffle=False, num_workers=2, pin_memory=True)\n",
    "#     print(\"DataLoaders created.\")\n",
    "\n",
    "#     # --- Initialize Model ---\n",
    "#     input_sizes = {}\n",
    "#     for stream in ACTIVE_STREAMS:\n",
    "#         size_constant_name = f'INPUT_SIZE_{stream.upper()}'\n",
    "#         special_cases = {'TRAFFIC_LIGHT': 'TL_STATE', 'STATIC_CONTEXT': 'STATIC', 'EGO_SPEED': 'EGO_SPEED', 'EGO_ACC': 'EGO_ACC', 'EGO_GYRO': 'EGO_GYRO', 'PED_ACTION': 'PED_ACTION', 'PED_LOOK': 'PED_LOOK', 'PED_OCCLUSION': 'PED_OCC'}\n",
    "#         stream_upper_key = stream.upper()\n",
    "#         suffix = special_cases.get(stream_upper_key)\n",
    "#         if suffix: size_constant_name = f'INPUT_SIZE_{suffix}'\n",
    "#         elif stream == 'bbox': size_constant_name = 'INPUT_SIZE_BBOX'\n",
    "#         elif stream == 'pose': size_constant_name = 'INPUT_SIZE_POSE'\n",
    "#         if size_constant_name in globals(): input_sizes[stream] = globals()[size_constant_name]\n",
    "#         else: raise ValueError(f\"Input size constant {size_constant_name} not found for stream {stream}\")\n",
    "\n",
    "#     model = MultiStreamAdaptiveLSTM(\n",
    "#         input_sizes=input_sizes, lstm_hidden_size=LSTM_HIDDEN_SIZE,\n",
    "#         num_lstm_layers=NUM_LSTM_LAYERS, num_classes=NUM_CLASSES, attention_dim=ATTENTION_DIM,\n",
    "#         dropout_rate=DROPOUT_RATE, stream_names=ACTIVE_STREAMS ).to(DEVICE)\n",
    "\n",
    "#     print(\"\\n--- Model Architecture ---\"); print(model); num_params = sum(p.numel() for p in model.parameters() if p.requires_grad); print(f\"Total Trainable Parameters: {num_params:,}\"); print(\"-\" * 30)\n",
    "\n",
    "#     # --- Class Weighting & Optimizer ---\n",
    "#     print(\"\\nCalculating Class Weights for Loss Function...\")\n",
    "#     balanced_train_labels_list = balanced_train_dataset.labels.tolist() # Use balanced list\n",
    "#     count_0 = balanced_train_labels_list.count(0); count_1 = balanced_train_labels_list.count(1)\n",
    "#     total = len(balanced_train_labels_list)\n",
    "#     if total == 0: print(\"Warning: Balanced dataset empty. Use equal weights.\"); weight_0 = 1.0; weight_1 = 1.0\n",
    "#     elif count_0 == 0: print(\"Warning: Class 0 missing. Adjust weights.\"); weight_0 = 0.0; weight_1 = 1.0\n",
    "#     elif count_1 == 0: print(\"Warning: Class 1 missing. Adjust weights.\"); weight_0 = 1.0; weight_1 = 0.0\n",
    "#     else: weight_0 = total / (2.0 * count_0); weight_1 = total / (2.0 * count_1) # Inverse frequency\n",
    "#     class_weights = torch.tensor([weight_0, weight_1], dtype=torch.float32).to(DEVICE)\n",
    "#     print(f\"Using Class Weights for Loss: 0={weight_0:.2f}, 1={weight_1:.2f}\")\n",
    "#     criterion = nn.CrossEntropyLoss(weight=class_weights)\n",
    "#     # criterion = nn.CrossEntropyLoss() # Uncomment to disable class weighting\n",
    "#     optimizer = optim.Adam(model.parameters(), lr=LEARNING_RATE)\n",
    "#     best_val_f1 = -1.0; train_losses, val_losses = [], []; train_accs, val_accs = [], []; val_f1s = []\n",
    "\n",
    "#     # --- Training Loop ---\n",
    "#     print(\"\\n--- Starting Training on Balanced Data---\")\n",
    "#     for epoch in range(NUM_EPOCHS):\n",
    "#         epoch_start_time = time.time()\n",
    "#         train_loss, train_acc = train_epoch(model, train_loader, optimizer, criterion, DEVICE)\n",
    "#         val_metrics = evaluate_epoch(model, val_loader, criterion, DEVICE)\n",
    "#         epoch_duration = time.time() - epoch_start_time\n",
    "#         train_losses.append(train_loss); val_losses.append(val_metrics['loss'])\n",
    "#         train_accs.append(train_acc); val_accs.append(val_metrics['accuracy'])\n",
    "#         val_f1s.append(val_metrics['f1'])\n",
    "#         print(f\"--- Epoch {epoch+1}/{NUM_EPOCHS} ({epoch_duration:.2f} sec) ---\")\n",
    "#         print(f\"  Train Loss: {train_loss:.4f}, Train Acc: {train_acc:.4f}\")\n",
    "#         print(f\"  Val Loss:   {val_metrics['loss']:.4f}, Val Acc:  {val_metrics['accuracy']:.4f}\")\n",
    "#         print(f\"  Val Prec:   {val_metrics['precision']:.4f}, Recall: {val_metrics['recall']:.4f}, F1: {val_metrics['f1']:.4f}\")\n",
    "#         print(f\"  Val AUC:    {val_metrics['auc']:.4f}\")\n",
    "#         if val_metrics['f1'] > best_val_f1:\n",
    "#             best_val_f1 = val_metrics['f1']\n",
    "#             torch.save(model.state_dict(), 'best_model_balanced.pth')\n",
    "#             print(f\"  >> Saved new best model with F1: {best_val_f1:.4f}\")\n",
    "#         print(\"-\" * 30)\n",
    "#     print(\"--- Training Finished ---\")\n",
    "\n",
    "#     # --- Plotting ---\n",
    "#     print(\"\\n--- Plotting Training History ---\")\n",
    "#     fig, axes = plt.subplots(1, 2, figsize=(12, 5))\n",
    "#     axes[0].plot(range(1, NUM_EPOCHS + 1), train_losses, label='Train Loss')\n",
    "#     axes[0].plot(range(1, NUM_EPOCHS + 1), val_losses, label='Val Loss')\n",
    "#     axes[0].set_xlabel('Epoch'); axes[0].set_ylabel('Loss'); axes[0].set_title('Loss Curve'); axes[0].legend(); axes[0].grid(True)\n",
    "#     axes[1].plot(range(1, NUM_EPOCHS + 1), train_accs, label='Train Accuracy')\n",
    "#     axes[1].plot(range(1, NUM_EPOCHS + 1), val_accs, label='Val Accuracy')\n",
    "#     axes[1].plot(range(1, NUM_EPOCHS + 1), val_f1s, label='Val F1-Score', linestyle='--')\n",
    "#     axes[1].set_xlabel('Epoch'); axes[1].set_ylabel('Metric'); axes[1].set_title('Accuracy & F1-Score Curve'); axes[1].legend(); axes[1].grid(True)\n",
    "#     plt.tight_layout(); plt.show()\n",
    "\n",
    "#     # --- Final Evaluation ---\n",
    "#     print(\"\\n--- Final Evaluation on Validation Set using Best Model ---\")\n",
    "#     best_model_path = 'best_model_balanced.pth'\n",
    "#     if os.path.exists(best_model_path):\n",
    "#         print(f\"Loading best saved model '{best_model_path}'\")\n",
    "#         model.load_state_dict(torch.load(best_model_path, map_location=DEVICE))\n",
    "#     else: print(\"Warning: No saved best model found. Evaluating final model.\")\n",
    "#     final_metrics = evaluate_epoch(model, val_loader, criterion, DEVICE)\n",
    "#     true_labels, pred_labels = get_predictions_and_labels(model, val_loader, DEVICE)\n",
    "#     cm = confusion_matrix(true_labels, pred_labels, labels=[0, 1])\n",
    "#     labels_display = ['Not Crossing', 'Crossing']\n",
    "#     print(\"\\n--- Final Performance Metrics ---\")\n",
    "#     print(f\"  Accuracy:  {final_metrics['accuracy']:.4f}\"); print(f\"  Precision: {final_metrics['precision']:.4f}\"); print(f\"  Recall:    {final_metrics['recall']:.4f}\"); print(f\"  F1 Score:  {final_metrics['f1']:.4f}\"); print(f\"  AUC:       {final_metrics['auc']:.4f}\"); print(f\"  Loss:      {final_metrics['loss']:.4f}\")\n",
    "#     print(\"\\n--- Confusion Matrix ---\")\n",
    "#     disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=labels_display); disp.plot(cmap=plt.cm.Blues); plt.title('Confusion Matrix (Validation Set)'); plt.show()\n",
    "\n",
    "#     print(\"\\n--- Script Complete ---\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ac222766",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T13:46:23.460447Z",
     "iopub.status.busy": "2025-05-01T13:46:23.460170Z",
     "iopub.status.idle": "2025-05-01T13:46:23.468993Z",
     "shell.execute_reply": "2025-05-01T13:46:23.468118Z"
    },
    "papermill": {
     "duration": 0.020571,
     "end_time": "2025-05-01T13:46:23.470319",
     "exception": false,
     "start_time": "2025-05-01T13:46:23.449748",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # --- CELL 1: DATA PREPARATION AND BALANCING (RUN ONCE) ---\n",
    "\n",
    "# import torch\n",
    "# import torch.nn as nn\n",
    "# import torch.optim as optim\n",
    "# from torch.utils.data import Dataset, DataLoader\n",
    "# import xml.etree.ElementTree as ET\n",
    "# import os\n",
    "# import numpy as np\n",
    "# from sklearn.metrics import accuracy_score, precision_recall_fscore_support, roc_auc_score, confusion_matrix, ConfusionMatrixDisplay\n",
    "# from sklearn.preprocessing import StandardScaler  # For standardizing ego features\n",
    "# from tqdm.notebook import tqdm\n",
    "# import random\n",
    "# import math\n",
    "# import zipfile\n",
    "# import cv2\n",
    "# import pandas as pd\n",
    "# import matplotlib.pyplot as plt\n",
    "# import seaborn as sns\n",
    "# import pickle\n",
    "# import time\n",
    "# import sys\n",
    "\n",
    "# # --- Add PIE utilities path if necessary (adjust path) ---\n",
    "# pie_utilities_path = '/kaggle/working/PIE/utilities'\n",
    "# if pie_utilities_path not in sys.path:\n",
    "#     sys.path.insert(0, pie_utilities_path)\n",
    "# try:\n",
    "#     from pie_data import PIE\n",
    "# except ImportError as e:\n",
    "#     print(f\"Warning: Could not import PIE class from {pie_utilities_path}. Database must already exist. Error: {e}\")\n",
    "#     PIE = None\n",
    "\n",
    "# # --- Configuration (Copy relevant parts here) ---\n",
    "# PIE_ROOT_PATH = '/kaggle/working/PIE'\n",
    "# VIDEO_INPUT_DIR = '/kaggle/input'\n",
    "# POSE_DATA_DIR = '/kaggle/input/pose-data/extracted_poses2'\n",
    "# PIE_DATABASE_CACHE_PATH = '/kaggle/input/pie-database/pie_database.pkl'\n",
    "\n",
    "# # --- Define ALL possible streams you might want to experiment with ---\n",
    "# # --- The data extraction will prepare ALL of these ---\n",
    "# ALL_POSSIBLE_STREAMS = [\n",
    "#     'bbox', 'pose', 'ego_speed', 'ego_acc', 'ego_gyro',\n",
    "#     'ped_action', 'ped_look', 'ped_occlusion', 'traffic_light', 'static_context'\n",
    "# ]\n",
    "# print(f\"Data will be prepared for streams: {ALL_POSSIBLE_STREAMS}\")\n",
    "\n",
    "# # --- Model Hyperparameters (Needed for Dataset) ---\n",
    "# SEQ_LEN = 30\n",
    "# PRED_LEN = 1\n",
    "\n",
    "# # --- Input Sizes (Needed for Dataset Error Handling & Definitions) ---\n",
    "# INPUT_SIZE_BBOX = 4\n",
    "# INPUT_SIZE_POSE = 34\n",
    "# INPUT_SIZE_EGO_SPEED = 1\n",
    "# INPUT_SIZE_EGO_ACC = 2\n",
    "# INPUT_SIZE_EGO_GYRO = 1\n",
    "# INPUT_SIZE_PED_ACTION = 1\n",
    "# INPUT_SIZE_PED_LOOK = 1\n",
    "# INPUT_SIZE_PED_OCC = 1\n",
    "# INPUT_SIZE_TL_STATE = 4\n",
    "# NUM_SIGNALIZED_CATS = 4\n",
    "# NUM_INTERSECTION_CATS = 5\n",
    "# NUM_AGE_CATS = 4\n",
    "# NUM_GENDER_CATS = 3\n",
    "# INPUT_SIZE_STATIC = NUM_SIGNALIZED_CATS + NUM_INTERSECTION_CATS + NUM_AGE_CATS + NUM_GENDER_CATS  # = 16\n",
    "\n",
    "# # --- Dataset Splits ---\n",
    "# TRAIN_SETS_STR = ['set01', 'set02', 'set04']\n",
    "# VAL_SETS_STR = ['set05', 'set06']\n",
    "\n",
    "# # --- Mappings ---\n",
    "# TL_STATE_MAP = {'__undefined__': 0, 'red': 1, 'yellow': 2, 'green': 3}\n",
    "# NUM_TL_STATES = len(TL_STATE_MAP)\n",
    "# SIGNALIZED_MAP = {'n/a': 0, 'C': 1, 'S': 2, 'CS': 3}\n",
    "# INTERSECTION_MAP = {'midblock': 0, 'T': 1, 'T-left': 2, 'T-right': 3, 'four-way': 4}\n",
    "# AGE_MAP = {'child': 0, 'young': 1, 'adult': 2, 'senior': 3}\n",
    "# GENDER_MAP = {'n/a': 0, 'female': 1, 'male': 2}\n",
    "\n",
    "# # --- Output Files from this Cell ---\n",
    "# BALANCED_DATA_PKL_PATH = \"/kaggle/working/balanced_train_data.pkl\"\n",
    "# SCALERS_PKL_PATH = \"/kaggle/working/scalers.pkl\"\n",
    "# VAL_SEQUENCES_PKL_PATH = \"/kaggle/working/val_sequences.pkl\"  # Save sequence info for val set\n",
    "\n",
    "# # --- Helper: One-Hot Encoding ---\n",
    "# def to_one_hot(index, num_classes):\n",
    "#     vec = np.zeros(num_classes, dtype=np.float32)\n",
    "#     if 0 <= index < num_classes:\n",
    "#         vec[index] = 1.0\n",
    "#     else:\n",
    "#         vec[0] = 1.0  # Default\n",
    "#     return vec\n",
    "\n",
    "# # --- Balancing Function ---\n",
    "# def balance_samples_count(seq_data, label_type, random_seed=42):\n",
    "#     print('---------------------------------------------------------')\n",
    "#     print(f\"Balancing samples based on '{label_type}' key\")\n",
    "#     if label_type not in seq_data:\n",
    "#         raise KeyError(f\"Label type '{label_type}' not found.\")\n",
    "#     try:\n",
    "#         gt_labels = [lbl[0] for lbl in seq_data[label_type]]\n",
    "#     except (IndexError, TypeError):\n",
    "#         raise ValueError(f\"Labels under '{label_type}' not in expected format [[label_val]].\")\n",
    "#     if not all(l in [0, 1] for l in gt_labels):\n",
    "#         print(f\"Warning: Labels for balancing contain values other than 0 or 1.\")\n",
    "#     num_pos_samples = np.count_nonzero(np.array(gt_labels))\n",
    "#     num_neg_samples = len(gt_labels) - num_pos_samples\n",
    "#     new_seq_data = {}\n",
    "#     if num_neg_samples == num_pos_samples:\n",
    "#         print('Samples already balanced.')\n",
    "#         return seq_data.copy()\n",
    "#     else:\n",
    "#         print(f'Unbalanced: Positive (1): {num_pos_samples} | Negative (0): {num_neg_samples}')\n",
    "#         majority_label = 0 if num_neg_samples > num_pos_samples else 1\n",
    "#         minority_count = min(num_neg_samples, num_pos_samples)\n",
    "#         print(f\"Undersampling majority class ({majority_label}) to match count ({minority_count}).\")\n",
    "#         majority_indices = np.where(np.array(gt_labels) == majority_label)[0]\n",
    "#         minority_indices = np.where(np.array(gt_labels) != majority_label)[0]\n",
    "#         np.random.seed(random_seed)\n",
    "#         keep_majority_indices = np.random.choice(majority_indices, size=minority_count, replace=False)\n",
    "#         final_indices = np.concatenate((minority_indices, keep_majority_indices))\n",
    "#         np.random.shuffle(final_indices)\n",
    "#         for k, v_list in seq_data.items():\n",
    "#             if isinstance(v_list, list) and len(v_list) == len(gt_labels):\n",
    "#                 try:\n",
    "#                     if v_list and isinstance(v_list[0], np.ndarray):\n",
    "#                         v_array = np.array(v_list)\n",
    "#                         new_seq_data[k] = list(v_array[final_indices])\n",
    "#                     else:\n",
    "#                         new_seq_data[k] = [v_list[i] for i in final_indices]\n",
    "#                 except Exception as e:\n",
    "#                     print(f\"Error processing key '{k}' during balancing: {e}. Skip.\")\n",
    "#                     new_seq_data[k] = []\n",
    "#             else:\n",
    "#                 print(f\"Warn: Skipping key '{k}' in balancing.\")\n",
    "#                 new_seq_data[k] = v_list\n",
    "#         if label_type in new_seq_data:\n",
    "#             new_gt_labels = [lbl[0] for lbl in new_seq_data[label_type]]\n",
    "#             final_pos = np.count_nonzero(np.array(new_gt_labels))\n",
    "#             final_neg = len(new_gt_labels) - final_pos\n",
    "#             print(f'Balanced:   Positive (1): {final_pos} | Negative (0): {final_neg}')\n",
    "#         else:\n",
    "#             print(\"Error: Label key lost during balancing.\")\n",
    "#         print('---------------------------------------------------------')\n",
    "#         return new_seq_data\n",
    "\n",
    "# # --- Dataset Class (Needed for initial loading) ---\n",
    "# class PIEDataset(Dataset):\n",
    "#     # --- (Dataset class definition - identical to the previous working version) ---\n",
    "#     # --- (Includes __init__, _load_pose_data, _generate_sequence_list, __len__, __getitem__) ---\n",
    "#     def __init__(self, pie_database, set_names, pose_data_dir, seq_len, pred_len, scalers=None, active_streams=None):\n",
    "#         self.pie_db = pie_database\n",
    "#         self.set_names = set_names\n",
    "#         self.pose_data_dir = pose_data_dir\n",
    "#         self.seq_len = seq_len\n",
    "#         self.pred_len = pred_len\n",
    "#         self.scalers = scalers or {}\n",
    "#         # Store ALL possible streams; __getitem__ will generate data for all streams.\n",
    "#         self.active_streams = ALL_POSSIBLE_STREAMS  # Generate all streams for potential use\n",
    "#         self.sequences = []\n",
    "#         self.all_pose_data = {}\n",
    "#         self._input_sizes_for_error = self._get_input_sizes_dict()  # Get sizes for all streams\n",
    "#         self._load_pose_data()\n",
    "#         self._generate_sequence_list()\n",
    "#         if not self.sequences:\n",
    "#             raise ValueError(f\"Dataset init failed: No sequences for {self.set_names}\")\n",
    "\n",
    "#     def _get_input_sizes_dict(self):\n",
    "#         input_sizes = {}\n",
    "#         special_cases = {\n",
    "#             'TRAFFIC_LIGHT': 'TL_STATE',\n",
    "#             'STATIC_CONTEXT': 'STATIC',\n",
    "#             'EGO_SPEED': 'EGO_SPEED',\n",
    "#             'EGO_ACC': 'EGO_ACC',\n",
    "#             'EGO_GYRO': 'EGO_GYRO',\n",
    "#             'PED_ACTION': 'PED_ACTION',\n",
    "#             'PED_LOOK': 'PED_LOOK',\n",
    "#             'PED_OCCLUSION': 'PED_OCC'\n",
    "#         }\n",
    "#         for stream in self.active_streams:\n",
    "#             stream_upper_key = stream.upper()\n",
    "#             if stream_upper_key in special_cases:\n",
    "#                 size_constant_name = f\"INPUT_SIZE_{special_cases[stream_upper_key]}\"\n",
    "#             elif stream == 'bbox':\n",
    "#                 size_constant_name = 'INPUT_SIZE_BBOX'\n",
    "#             elif stream == 'pose':\n",
    "#                 size_constant_name = 'INPUT_SIZE_POSE'\n",
    "#             else:\n",
    "#                 size_constant_name = f\"INPUT_SIZE_{stream.upper()}\"\n",
    "#             if size_constant_name in globals():\n",
    "#                 input_sizes[stream] = globals()[size_constant_name]\n",
    "#             else:\n",
    "#                 input_sizes[stream] = 1\n",
    "#         return input_sizes\n",
    "\n",
    "#     def _load_pose_data(self):\n",
    "#         print(f\"\\nLoading pose data for sets: {self.set_names} from {self.pose_data_dir}\")\n",
    "#         sets_loaded_count = 0\n",
    "#         for set_id in tqdm(self.set_names, desc=\"Loading Pose Sets\"):\n",
    "#             self.all_pose_data[set_id] = {}\n",
    "#             pose_set_path = os.path.join(self.pose_data_dir, set_id)\n",
    "#             if not os.path.isdir(pose_set_path):\n",
    "#                 print(f\"Warn: Pose dir missing for {set_id} at {pose_set_path}\")\n",
    "#                 continue\n",
    "#             pkl_files_in_set = [f for f in os.listdir(pose_set_path)\n",
    "#                                 if f.startswith(f\"{set_id}_\") and f.endswith(\"_poses.pkl\")]\n",
    "#             if not pkl_files_in_set:\n",
    "#                 continue\n",
    "#             loaded_video_count = 0\n",
    "#             for pkl_filename in tqdm(pkl_files_in_set, desc=f\"Loading PKLs for {set_id}\", leave=False):\n",
    "#                 pkl_file_path = os.path.join(pose_set_path, pkl_filename)\n",
    "#                 try:\n",
    "#                     with open(pkl_file_path, 'rb') as f:\n",
    "#                         loaded_pkl_content = pickle.load(f)\n",
    "#                     if len(loaded_pkl_content) != 1:\n",
    "#                         continue\n",
    "#                     unique_video_key, video_data = list(loaded_pkl_content.items())[0]\n",
    "#                     video_id = \"_\".join(unique_video_key.split('_')[1:])\n",
    "#                     self.all_pose_data[set_id][video_id] = video_data\n",
    "#                     loaded_video_count += 1\n",
    "#                 except FileNotFoundError:\n",
    "#                     pass\n",
    "#                 except Exception as e:\n",
    "#                     print(f\"Error loading pose PKL {pkl_file_path}: {e}\")\n",
    "#             if loaded_video_count > 0:\n",
    "#                 sets_loaded_count += 1\n",
    "#         print(f\"Finished loading pose data for {sets_loaded_count} sets.\")\n",
    "\n",
    "#     def _generate_sequence_list(self):\n",
    "#         print(f\"Generating sequence list from PIE database for sets: {self.set_names}\")\n",
    "#         sequence_count = 0\n",
    "#         ped_count = 0\n",
    "#         for set_id in tqdm(self.set_names, desc=\"Generating Sequences\"):\n",
    "#             if set_id not in self.pie_db:\n",
    "#                 continue\n",
    "#             for video_id, video_data in self.pie_db[set_id].items():\n",
    "#                 if 'ped_annotations' not in video_data:\n",
    "#                     continue\n",
    "#                 for ped_id, ped_data in video_data['ped_annotations'].items():\n",
    "#                     ped_count += 1\n",
    "#                     if 'frames' not in ped_data or len(ped_data['frames']) < self.seq_len + self.pred_len:\n",
    "#                         continue\n",
    "#                     sorted_frames = sorted(ped_data['frames'])\n",
    "#                     for i in range(len(sorted_frames) - self.seq_len - self.pred_len + 1):\n",
    "#                         start_frame = sorted_frames[i]\n",
    "#                         end_frame_observe = sorted_frames[i + self.seq_len - 1]\n",
    "#                         if end_frame_observe - start_frame != self.seq_len - 1:\n",
    "#                             continue\n",
    "#                         target_frame_actual_idx = i + self.seq_len + self.pred_len - 1\n",
    "#                         if target_frame_actual_idx >= len(sorted_frames):\n",
    "#                             continue\n",
    "#                         target_frame = sorted_frames[target_frame_actual_idx]\n",
    "#                         if target_frame - end_frame_observe != self.pred_len:\n",
    "#                             continue\n",
    "#                         self.sequences.append((set_id, video_id, ped_id, start_frame))\n",
    "#                         sequence_count += 1\n",
    "#         print(f\"Found {sequence_count} valid sequences from {ped_count} pedestrian tracks.\")\n",
    "\n",
    "#     def __len__(self):\n",
    "#         return len(self.sequences)\n",
    "\n",
    "#     def __getitem__(self, idx):\n",
    "#         # Get sequence identifiers\n",
    "#         set_id, video_id, ped_id, start_frame = self.sequences[idx]\n",
    "#         frame_nums = list(range(start_frame, start_frame + self.seq_len))\n",
    "#         target_frame_num = start_frame + self.seq_len + self.pred_len - 1\n",
    "\n",
    "#         video_db = self.pie_db.get(set_id, {}).get(video_id, {})\n",
    "#         ped_db = video_db.get('ped_annotations', {}).get(ped_id, {})\n",
    "#         ego_db = video_db.get('vehicle_annotations', {})\n",
    "#         traffic_db = video_db.get('traffic_annotations', {})\n",
    "#         ped_attributes = ped_db.get('attributes', {})\n",
    "\n",
    "#         # Initialize feature sequences and label\n",
    "#         feature_sequences = {stream: [] for stream in self.active_streams}\n",
    "#         label = 0\n",
    "\n",
    "#         # Determine target label (default is 0 if not found)\n",
    "#         if 'frames' in ped_db and 'behavior' in ped_db and 'cross' in ped_db['behavior']:\n",
    "#             try:\n",
    "#                 target_frame_db_idx = ped_db['frames'].index(target_frame_num)\n",
    "#                 label = ped_db['behavior']['cross'][target_frame_db_idx]\n",
    "#                 if label == -1:\n",
    "#                     label = 0\n",
    "#             except (ValueError, IndexError):\n",
    "#                 pass\n",
    "\n",
    "#         # Static features\n",
    "#         static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "#         if 'static_context' in self.active_streams:\n",
    "#             sig_idx = ped_attributes.get('signalized', 0)\n",
    "#             int_idx = ped_attributes.get('intersection', 0)\n",
    "#             age_idx = ped_attributes.get('age', 2)\n",
    "#             gen_idx = ped_attributes.get('gender', 0)\n",
    "#             static_vec = np.concatenate([\n",
    "#                 to_one_hot(sig_idx, NUM_SIGNALIZED_CATS),\n",
    "#                 to_one_hot(int_idx, NUM_INTERSECTION_CATS),\n",
    "#                 to_one_hot(age_idx, NUM_AGE_CATS),\n",
    "#                 to_one_hot(gen_idx, NUM_GENDER_CATS)\n",
    "#             ])\n",
    "#             if static_vec.shape[0] != INPUT_SIZE_STATIC:\n",
    "#                 static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "\n",
    "#         # Loop over each frame in the sequence\n",
    "#         for frame_num in frame_nums:\n",
    "#             frame_db_idx = -1\n",
    "#             if 'frames' in ped_db:\n",
    "#                 try:\n",
    "#                     frame_db_idx = ped_db['frames'].index(frame_num)\n",
    "#                 except ValueError:\n",
    "#                     pass\n",
    "#             ego_frame_data = ego_db.get(frame_num, {})\n",
    "\n",
    "#             # 'bbox' stream\n",
    "#             if 'bbox' in self.active_streams:\n",
    "#                 bbox_norm = np.zeros(INPUT_SIZE_BBOX, dtype=np.float32)\n",
    "#                 if frame_db_idx != -1 and 'bbox' in ped_db and len(ped_db['bbox']) > frame_db_idx:\n",
    "#                     try:\n",
    "#                         x1, y1, x2, y2 = ped_db['bbox'][frame_db_idx]\n",
    "#                         img_w = video_db.get('width', 1920)\n",
    "#                         img_h = video_db.get('height', 1080)\n",
    "#                         if img_w > 0 and img_h > 0:\n",
    "#                             cx = ((x1 + x2) / 2) / img_w\n",
    "#                             cy = ((y1 + y2) / 2) / img_h\n",
    "#                             w = (x2 - x1) / img_w\n",
    "#                             h = (y2 - y1) / img_h\n",
    "#                             if w > 0 and h > 0 and 0 <= cx <= 1 and 0 <= cy <= 1:\n",
    "#                                 bbox_norm = np.array([cx, cy, w, h], dtype=np.float32)\n",
    "#                     except Exception:\n",
    "#                         pass\n",
    "#                 feature_sequences['bbox'].append(bbox_norm)\n",
    "\n",
    "#             # 'pose' stream\n",
    "#             if 'pose' in self.active_streams:\n",
    "#                 pose_vector = np.zeros(INPUT_SIZE_POSE, dtype=np.float32)\n",
    "#                 vid_pose_data = self.all_pose_data.get(set_id, {}).get(video_id, {})\n",
    "#                 frame_pose_data = vid_pose_data.get(frame_num, {})\n",
    "#                 loaded_pose = frame_pose_data.get(ped_id)\n",
    "#                 if loaded_pose is not None and isinstance(loaded_pose, np.ndarray) and loaded_pose.shape == (INPUT_SIZE_POSE,):\n",
    "#                     pose_vector = loaded_pose\n",
    "#                 feature_sequences['pose'].append(pose_vector)\n",
    "\n",
    "#             # 'ego_speed' stream\n",
    "#             if 'ego_speed' in self.active_streams:\n",
    "#                 speed = ego_frame_data.get('OBD_speed', 0.0)\n",
    "#                 if speed == 0.0:\n",
    "#                     speed = ego_frame_data.get('GPS_speed', 0.0)\n",
    "#                 speed_scaled = (speed - self.scalers.get('ego_speed_mean', 0.0)) / self.scalers.get('ego_speed_std', 1.0)\n",
    "#                 feature_sequences['ego_speed'].append([speed_scaled])\n",
    "\n",
    "#             # 'ego_acc' stream\n",
    "#             if 'ego_acc' in self.active_streams:\n",
    "#                 accX = ego_frame_data.get('accX', 0.0)\n",
    "#                 accY = ego_frame_data.get('accY', 0.0)\n",
    "#                 accX_scaled = (accX - self.scalers.get('accX_mean', 0.0)) / self.scalers.get('accX_std', 1.0)\n",
    "#                 accY_scaled = (accY - self.scalers.get('accY_mean', 0.0)) / self.scalers.get('accY_std', 1.0)\n",
    "#                 feature_sequences['ego_acc'].append([accX_scaled, accY_scaled])\n",
    "\n",
    "#             # 'ego_gyro' stream\n",
    "#             if 'ego_gyro' in self.active_streams:\n",
    "#                 gyroZ = ego_frame_data.get('gyroZ', 0.0)\n",
    "#                 gyroZ_scaled = (gyroZ - self.scalers.get('gyroZ_mean', 0.0)) / self.scalers.get('gyroZ_std', 1.0)\n",
    "#                 feature_sequences['ego_gyro'].append([gyroZ_scaled])\n",
    "\n",
    "#             # 'ped_action' stream\n",
    "#             if 'ped_action' in self.active_streams:\n",
    "#                 action = 0\n",
    "#                 if frame_db_idx != -1 and 'behavior' in ped_db and 'action' in ped_db['behavior'] and len(ped_db['behavior']['action']) > frame_db_idx:\n",
    "#                     action = ped_db['behavior']['action'][frame_db_idx]\n",
    "#                 feature_sequences['ped_action'].append([float(action)])\n",
    "\n",
    "#             # 'ped_look' stream\n",
    "#             if 'ped_look' in self.active_streams:\n",
    "#                 look = 0\n",
    "#                 if frame_db_idx != -1 and 'behavior' in ped_db and 'look' in ped_db['behavior'] and len(ped_db['behavior']['look']) > frame_db_idx:\n",
    "#                     look = ped_db['behavior']['look'][frame_db_idx]\n",
    "#                 feature_sequences['ped_look'].append([float(look)])\n",
    "\n",
    "#             # 'ped_occlusion' stream\n",
    "#             if 'ped_occlusion' in self.active_streams:\n",
    "#                 occ = 0.0\n",
    "#                 if frame_db_idx != -1 and 'occlusion' in ped_db and len(ped_db['occlusion']) > frame_db_idx:\n",
    "#                     occ_val = ped_db['occlusion'][frame_db_idx]\n",
    "#                     occ = float(occ_val) / 2.0\n",
    "#                 feature_sequences['ped_occlusion'].append([occ])\n",
    "\n",
    "#             # 'traffic_light' stream\n",
    "#             if 'traffic_light' in self.active_streams:\n",
    "#                 state_int = 0\n",
    "#                 for obj_id, obj_data in traffic_db.items():\n",
    "#                     if obj_data.get('obj_class') == 'traffic_light' and 'frames' in obj_data and 'state' in obj_data:\n",
    "#                         try:\n",
    "#                             tl_frame_idx = obj_data['frames'].index(frame_num)\n",
    "#                             state_val = obj_data['state'][tl_frame_idx]\n",
    "#                             if state_val != 0:\n",
    "#                                 state_int = state_val\n",
    "#                                 break\n",
    "#                         except (ValueError, IndexError):\n",
    "#                             continue\n",
    "#                 feature_sequences['traffic_light'].append(to_one_hot(state_int, NUM_TL_STATES))\n",
    "\n",
    "#             # 'static_context' stream\n",
    "#             if 'static_context' in self.active_streams:\n",
    "#                 feature_sequences['static_context'].append(static_vec)\n",
    "\n",
    "#         features = {}\n",
    "#         try:\n",
    "#             for stream_name in self.active_streams:\n",
    "#                 features[stream_name] = torch.tensor(\n",
    "#                     np.array(feature_sequences[stream_name], dtype=np.float32),\n",
    "#                     dtype=torch.float32\n",
    "#                 )\n",
    "#         except Exception as e:\n",
    "#             print(f\"Error converting features idx {idx}: {e}. Return dummy.\")\n",
    "#             features = {\n",
    "#                 name: torch.zeros((self.seq_len, self._input_sizes_for_error.get(name, 1)), dtype=torch.float32)\n",
    "#                 for name in self.active_streams\n",
    "#             }\n",
    "#         return features, torch.tensor(label, dtype=torch.long)\n",
    "\n",
    "# # --- Main Data Prep Execution Block ---\n",
    "# if __name__ == '__main__':\n",
    "\n",
    "#     # --- Generate/Load PIE Database ---\n",
    "#     print(f\"Checking for PIE database cache at: {PIE_DATABASE_CACHE_PATH}\")\n",
    "#     if not os.path.exists(PIE_DATABASE_CACHE_PATH):\n",
    "#         if PIE is None:\n",
    "#             raise ImportError(\"PIE class not imported, cannot generate database.\")\n",
    "#         print(\"PIE database cache not found. Generating...\")\n",
    "#         pie_dataset_interface = PIE(data_path=PIE_ROOT_PATH, regen_database=True)\n",
    "#         pie_database = pie_dataset_interface.generate_database()\n",
    "#         if not pie_database:\n",
    "#             raise RuntimeError(\"Failed to generate PIE database.\")\n",
    "#         print(\"PIE database generated successfully.\")\n",
    "#     else:\n",
    "#         print(\"Loading PIE database from cache...\")\n",
    "#         try:\n",
    "#             with open(PIE_DATABASE_CACHE_PATH, 'rb') as f:\n",
    "#                 pie_database = pickle.load(f)\n",
    "#             print(\"PIE database loaded successfully.\")\n",
    "#         except Exception as e:\n",
    "#             raise RuntimeError(f\"Failed to load PIE database: {e}\")\n",
    "\n",
    "#     # --- Calculate Standardization Parameters ---\n",
    "#     print(\"\\nCalculating standardization parameters from training set...\")\n",
    "#     all_train_ego_speeds = []\n",
    "#     all_train_accX = []\n",
    "#     all_train_accY = []\n",
    "#     all_train_gyroZ = []\n",
    "#     for set_id in TRAIN_SETS_STR:\n",
    "#         if set_id in pie_database:\n",
    "#             for video_id, video_data in pie_database[set_id].items():\n",
    "#                 if 'vehicle_annotations' in video_data:\n",
    "#                     for frame_num, ego_frame_data in video_data['vehicle_annotations'].items():\n",
    "#                         speed = ego_frame_data.get('OBD_speed', 0.0)\n",
    "#                         if speed == 0.0:\n",
    "#                             speed = ego_frame_data.get('GPS_speed', 0.0)\n",
    "#                         all_train_ego_speeds.append(speed)\n",
    "#                         all_train_accX.append(ego_frame_data.get('accX', 0.0))\n",
    "#                         all_train_accY.append(ego_frame_data.get('accY', 0.0))\n",
    "#                         all_train_gyroZ.append(ego_frame_data.get('gyroZ', 0.0))\n",
    "#     scalers = {}\n",
    "#     if all_train_ego_speeds:\n",
    "#         scalers['ego_speed_mean'] = np.mean(all_train_ego_speeds)\n",
    "#         scalers['ego_speed_std'] = np.std(all_train_ego_speeds) if np.std(all_train_ego_speeds) > 1e-6 else 1.0\n",
    "#         print(f\"  Ego Speed: Mean={scalers['ego_speed_mean']:.2f}, Std={scalers['ego_speed_std']:.2f}\")\n",
    "#     if all_train_accX:\n",
    "#         scalers['accX_mean'] = np.mean(all_train_accX)\n",
    "#         scalers['accX_std'] = np.std(all_train_accX) if np.std(all_train_accX) > 1e-6 else 1.0\n",
    "#         scalers['accY_mean'] = np.mean(all_train_accY)\n",
    "#         scalers['accY_std'] = np.std(all_train_accY) if np.std(all_train_accY) > 1e-6 else 1.0\n",
    "#         print(f\"  Ego AccX: Mean={scalers['accX_mean']:.2f}, Std={scalers['accX_std']:.2f}\")\n",
    "#         print(f\"  Ego AccY: Mean={scalers['accY_mean']:.2f}, Std={scalers['accY_std']:.2f}\")\n",
    "#     if all_train_gyroZ:\n",
    "#         scalers['gyroZ_mean'] = np.mean(all_train_gyroZ)\n",
    "#         scalers['gyroZ_std'] = np.std(all_train_gyroZ) if np.std(all_train_gyroZ) > 1e-6 else 1.0\n",
    "#         print(f\"  Ego GyroZ: Mean={scalers['gyroZ_mean']:.2f}, Std={scalers['gyroZ_std']:.2f}\")\n",
    "#     print(\"Standardization parameters calculated.\")\n",
    "\n",
    "#     # --- Initialize FULL Training Dataset ---\n",
    "#     print(\"\\nInitializing full training dataset (for extraction)...\")\n",
    "#     full_train_dataset = PIEDataset(\n",
    "#         pie_database,\n",
    "#         TRAIN_SETS_STR,\n",
    "#         POSE_DATA_DIR,\n",
    "#         SEQ_LEN,\n",
    "#         PRED_LEN,\n",
    "#         scalers,\n",
    "#         ALL_POSSIBLE_STREAMS\n",
    "#     )\n",
    "#     if len(full_train_dataset) == 0:\n",
    "#         raise ValueError(\"Full Train Dataset loading failed.\")\n",
    "\n",
    "#     # --- Prepare and Balance Training Data ---\n",
    "#     print(\"\\nExtracting ALL stream data from training set for balancing...\")\n",
    "#     training_data_dict = {stream: [] for stream in ALL_POSSIBLE_STREAMS}\n",
    "#     training_data_dict['label'] = []\n",
    "#     for i in tqdm(range(len(full_train_dataset)), desc=\"Extracting data\"):\n",
    "#         features, label = full_train_dataset[i]\n",
    "#         for stream_name in ALL_POSSIBLE_STREAMS:\n",
    "#             if stream_name in features:\n",
    "#                 training_data_dict[stream_name].append(features[stream_name].numpy())\n",
    "#             else:\n",
    "#                 print(f\"Warning: Stream {stream_name} missing from dataset output index {i}.\")\n",
    "#                 # Append zeros of correct shape as placeholder\n",
    "#                 size_const = f\"INPUT_SIZE_{stream_name.upper()}\"\n",
    "#                 special_cases = {\n",
    "#                     'TRAFFIC_LIGHT': 'TL_STATE',\n",
    "#                     'STATIC_CONTEXT': 'STATIC',\n",
    "#                     'EGO_SPEED': 'EGO_SPEED',\n",
    "#                     'EGO_ACC': 'EGO_ACC',\n",
    "#                     'EGO_GYRO': 'EGO_GYRO',\n",
    "#                     'PED_ACTION': 'PED_ACTION',\n",
    "#                     'PED_LOOK': 'PED_LOOK',\n",
    "#                     'PED_OCCLUSION': 'PED_OCC'\n",
    "#                 }\n",
    "#                 if stream_name.upper() in special_cases:\n",
    "#                     size_const = f\"INPUT_SIZE_{special_cases[stream_name.upper()]}\"\n",
    "#                 elif stream_name == 'bbox':\n",
    "#                     size_const = 'INPUT_SIZE_BBOX'\n",
    "#                 elif stream_name == 'pose':\n",
    "#                     size_const = 'INPUT_SIZE_POSE'\n",
    "#                 stream_size = globals().get(size_const, 1)\n",
    "#                 training_data_dict[stream_name].append(np.zeros((SEQ_LEN, stream_size), dtype=np.float32))\n",
    "#         training_data_dict['label'].append([label.item()])\n",
    "#     print(f\"Original training samples: {len(training_data_dict['label'])}\")\n",
    "#     del full_train_dataset  # Free memory\n",
    "\n",
    "#     label_key_for_balancing = 'label'\n",
    "#     balanced_train_data_dict = balance_samples_count(training_data_dict, label_type=label_key_for_balancing)\n",
    "#     del training_data_dict  # Free up memory\n",
    "\n",
    "#     # --- Save Balanced Data and Scalers ---\n",
    "#     print(f\"\\nSaving balanced training data to: {BALANCED_DATA_PKL_PATH}\")\n",
    "#     try:\n",
    "#         with open(BALANCED_DATA_PKL_PATH, 'wb') as f:\n",
    "#             pickle.dump(balanced_train_data_dict, f, pickle.HIGHEST_PROTOCOL)\n",
    "#         print(\" -> Balanced data saved.\")\n",
    "#     except Exception as e:\n",
    "#         print(f\"  Error saving balanced data: {e}\")\n",
    "\n",
    "#     print(f\"\\nSaving scalers to: {SCALERS_PKL_PATH}\")\n",
    "#     try:\n",
    "#         with open(SCALERS_PKL_PATH, 'wb') as f:\n",
    "#             pickle.dump(scalers, f, pickle.HIGHEST_PROTOCOL)\n",
    "#         print(\" -> Scalers saved.\")\n",
    "#     except Exception as e:\n",
    "#         print(f\"  Error saving scalers: {e}\")\n",
    "\n",
    "#     # --- Prepare and Save Validation Sequence Info ---\n",
    "#     print(\"\\nInitializing validation dataset (for sequence info)...\")\n",
    "#     # Pass an empty list for streams if only sequence identifiers are needed.\n",
    "#     val_dataset = PIEDataset(pie_database, VAL_SETS_STR, POSE_DATA_DIR, SEQ_LEN, PRED_LEN, scalers, [])\n",
    "#     val_sequences_info = val_dataset.sequences\n",
    "#     del val_dataset\n",
    "\n",
    "#     print(f\"Saving validation sequence info ({len(val_sequences_info)} sequences) to: {VAL_SEQUENCES_PKL_PATH}\")\n",
    "#     try:\n",
    "#         with open(VAL_SEQUENCES_PKL_PATH, 'wb') as f:\n",
    "#             pickle.dump(val_sequences_info, f, pickle.HIGHEST_PROTOCOL)\n",
    "#         print(\" -> Validation sequence info saved.\")\n",
    "#     except Exception as e:\n",
    "#         print(f\" Error saving validation sequence info: {e}\")\n",
    "\n",
    "#     print(\"\\n--- Data Preparation and Balancing Cell Finished ---\")\n",
    "#     print(\"You can now run the next cell for training and evaluation.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "4eb52f76",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T13:46:23.489726Z",
     "iopub.status.busy": "2025-05-01T13:46:23.489456Z",
     "iopub.status.idle": "2025-05-01T13:46:23.494969Z",
     "shell.execute_reply": "2025-05-01T13:46:23.494113Z"
    },
    "papermill": {
     "duration": 0.016838,
     "end_time": "2025-05-01T13:46:23.496398",
     "exception": false,
     "start_time": "2025-05-01T13:46:23.479560",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # --- CELL 2: ABLATION STUDY - MODEL TRAINING AND EVALUATION ---\n",
    "\n",
    "# import torch\n",
    "# import torch.nn as nn\n",
    "# import torch.optim as optim\n",
    "# from torch.utils.data import Dataset, DataLoader\n",
    "# import os\n",
    "# import sys\n",
    "# import numpy as np\n",
    "# import pandas as pd\n",
    "# import pickle\n",
    "# import time\n",
    "# from tqdm.notebook import tqdm\n",
    "# from sklearn.metrics import (\n",
    "#     accuracy_score,\n",
    "#     precision_recall_fscore_support,\n",
    "#     roc_auc_score,\n",
    "#     confusion_matrix,\n",
    "#     ConfusionMatrixDisplay\n",
    "# )\n",
    "# import matplotlib.pyplot as plt\n",
    "# import seaborn as sns\n",
    "\n",
    "# # --- Add PIE utilities path if necessary ---\n",
    "# pie_utilities_path = '/kaggle/working/PIE/utilities'\n",
    "# if pie_utilities_path not in sys.path:\n",
    "#     sys.path.insert(0, pie_utilities_path)\n",
    "\n",
    "# try:\n",
    "#     from pie_data import PIE\n",
    "# except ImportError as e:\n",
    "#     print(f\"Warn: Could not import PIE class: {e}\")\n",
    "#     PIE = None\n",
    "\n",
    "# # --- Configuration ---\n",
    "# PIE_DATABASE_CACHE_PATH = '/kaggle/input/pie-database/pie_database.pkl'\n",
    "# POSE_DATA_DIR = '/kaggle/input/pose-data/extracted_poses2'\n",
    "# VAL_SETS_STR = ['set05', 'set06']\n",
    "\n",
    "# # --- Experiment settings ---\n",
    "# ALL_POSSIBLE_STREAMS = [\n",
    "#     'bbox', 'pose', 'ego_speed', 'ego_acc', 'ego_gyro',\n",
    "#     'ped_action', 'ped_look', 'ped_occlusion', 'traffic_light', 'static_context'\n",
    "# ]\n",
    "\n",
    "# STREAM_COMBINATIONS_TO_TEST = [\n",
    "#     ['bbox'],\n",
    "#     ['bbox', 'ped_action'],\n",
    "#     ['bbox', 'ped_look'],\n",
    "#     ['bbox', 'ego_speed'],\n",
    "#     ['bbox', 'ego_acc'],\n",
    "#     ['bbox', 'ped_action', 'ped_look'],\n",
    "#     ['bbox', 'ego_speed', 'ego_acc'],\n",
    "#     ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc'],\n",
    "#     ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'traffic_light', 'static_context']\n",
    "# ]\n",
    "\n",
    "# # --- Hyperparameters ---\n",
    "# SEQ_LEN = 30\n",
    "# PRED_LEN = 1\n",
    "\n",
    "# INPUT_SIZE_BBOX = 4\n",
    "# INPUT_SIZE_POSE = 34\n",
    "# INPUT_SIZE_EGO_SPEED = 1\n",
    "# INPUT_SIZE_EGO_ACC = 2\n",
    "# INPUT_SIZE_EGO_GYRO = 1\n",
    "# INPUT_SIZE_PED_ACTION = 1\n",
    "# INPUT_SIZE_PED_LOOK = 1\n",
    "# INPUT_SIZE_PED_OCC = 1\n",
    "# INPUT_SIZE_TL_STATE = 4\n",
    "\n",
    "# NUM_SIGNALIZED_CATS = 4\n",
    "# NUM_INTERSECTION_CATS = 5\n",
    "# NUM_AGE_CATS = 4\n",
    "# NUM_GENDER_CATS = 3\n",
    "# NUM_TRAFFIC_DIR_CATS = 2\n",
    "# LANE_CATEGORIES = {1:0,2:1,3:2,4:3,5:4,6:4,7:4,8:4}\n",
    "# NUM_LANE_CATS = len(set(LANE_CATEGORIES.values()))\n",
    "\n",
    "# INPUT_SIZE_STATIC = (\n",
    "#     NUM_SIGNALIZED_CATS +\n",
    "#     NUM_INTERSECTION_CATS +\n",
    "#     NUM_AGE_CATS +\n",
    "#     NUM_GENDER_CATS +\n",
    "#     NUM_TRAFFIC_DIR_CATS +\n",
    "#     NUM_LANE_CATS\n",
    "# )\n",
    "\n",
    "# LSTM_HIDDEN_SIZE = 256\n",
    "# NUM_LSTM_LAYERS = 2\n",
    "# DROPOUT_RATE = 0.3\n",
    "# NUM_CLASSES = 2\n",
    "# ATTENTION_DIM = 128\n",
    "\n",
    "# LEARNING_RATE = 1e-4\n",
    "# BATCH_SIZE = 32\n",
    "# NUM_EPOCHS = 10\n",
    "# DEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "\n",
    "# print(f\"Using device: {DEVICE}\")\n",
    "\n",
    "# # --- Paths for data ---\n",
    "# BALANCED_DATA_PKL_PATH = \"/kaggle/working/balanced_train_data.pkl\"\n",
    "# SCALERS_PKL_PATH = \"/kaggle/working/scalers.pkl\"\n",
    "\n",
    "# # --- Helpers, Dataset & Model definitions ---\n",
    "# # (Use the fully corrected versions from Cell 1 and Cell 2 above,\n",
    "# # ensuring no inline semicolons remain and each block is properly indented.)\n",
    "\n",
    "# def to_one_hot(index, num_classes):\n",
    "#     vec = np.zeros(num_classes, dtype=np.float32)\n",
    "#     idx = int(np.clip(index, 0, num_classes - 1))\n",
    "#     vec[idx] = 1.0\n",
    "#     return vec\n",
    "\n",
    "# # ... Paste full corrected definitions for:\n",
    "# #   PIEDataset, BalancedDataset,\n",
    "# #   Attention, MultiStreamAdaptiveLSTM,\n",
    "# #   train_epoch, evaluate_epoch, get_predictions_and_labels ...\n",
    "\n",
    "# # --- Main Ablation Loop ---\n",
    "# if __name__ == '__main__':\n",
    "#     # Load balanced training data and scalers\n",
    "#     try:\n",
    "#         with open(BALANCED_DATA_PKL_PATH, 'rb') as f:\n",
    "#             balanced_train_data_dict = pickle.load(f)\n",
    "#         with open(SCALERS_PKL_PATH, 'rb') as f:\n",
    "#             scalers = pickle.load(f)\n",
    "#     except Exception as e:\n",
    "#         print(f\"Error loading pre-processed data: {e}\")\n",
    "#         sys.exit(1)\n",
    "\n",
    "#     # Load PIE database\n",
    "#     if not os.path.exists(PIE_DATABASE_CACHE_PATH):\n",
    "#         raise FileNotFoundError(\"PIE database cache not found.\")\n",
    "#     with open(PIE_DATABASE_CACHE_PATH, 'rb') as f:\n",
    "#         pie_database = pickle.load(f)\n",
    "\n",
    "#     # Prepare validation dataset once\n",
    "#     val_dataset = PIEDataset(\n",
    "#         pie_database, VAL_SETS_STR, POSE_DATA_DIR,\n",
    "#         SEQ_LEN, PRED_LEN, scalers,\n",
    "#         ALL_POSSIBLE_STREAMS\n",
    "#     )\n",
    "#     val_loader = DataLoader(\n",
    "#         val_dataset, batch_size=BATCH_SIZE,\n",
    "#         shuffle=False, num_workers=2, pin_memory=True\n",
    "#     )\n",
    "\n",
    "#     results_summary = {}\n",
    "\n",
    "#     for streams in STREAM_COMBINATIONS_TO_TEST:\n",
    "#         print(f\"\\n=== Streams: {streams} ===\")\n",
    "#         # Create train dataset for this combo\n",
    "#         train_ds = BalancedDataset(\n",
    "#             balanced_train_data_dict, streams, label_key='label'\n",
    "#         )\n",
    "#         train_loader = DataLoader(\n",
    "#             train_ds, batch_size=BATCH_SIZE,\n",
    "#             shuffle=True, num_workers=2, pin_memory=True\n",
    "#         )\n",
    "\n",
    "#         # Model, optimizer, loss\n",
    "#         input_sizes = {\n",
    "#             s: globals()[f\"INPUT_SIZE_{s.upper()}\"] for s in streams\n",
    "#         }\n",
    "#         model = MultiStreamAdaptiveLSTM(\n",
    "#             input_sizes, LSTM_HIDDEN_SIZE, NUM_LSTM_LAYERS,\n",
    "#             NUM_CLASSES, ATTENTION_DIM, DROPOUT_RATE, streams\n",
    "#         ).to(DEVICE)\n",
    "\n",
    "#         # Class weights\n",
    "#         labels = train_ds.labels.tolist()\n",
    "#         c0 = labels.count(0)\n",
    "#         c1 = labels.count(1)\n",
    "#         tot = len(labels)\n",
    "#         if tot > 0 and c0 and c1:\n",
    "#             w0 = tot / (2*c0)\n",
    "#             w1 = tot / (2*c1)\n",
    "#         else:\n",
    "#             w0 = w1 = 1.0\n",
    "#         criterion = nn.CrossEntropyLoss(weight=torch.tensor([w0,w1]).to(DEVICE))\n",
    "#         optimizer = optim.Adam(model.parameters(), lr=LEARNING_RATE)\n",
    "\n",
    "#         best_val_f1 = -1.0\n",
    "#         best_model_path = None\n",
    "\n",
    "#         for ep in range(NUM_EPOCHS):\n",
    "#             train_epoch(model, train_loader, optimizer, criterion, DEVICE)\n",
    "#             m = evaluate_epoch(model, val_loader, criterion, DEVICE)\n",
    "#             if m['f1'] > best_val_f1:\n",
    "#                 best_val_f1 = m['f1']\n",
    "#                 best_model_path = f\"best_{'_'.join(streams)}_ep{ep+1}.pth\"\n",
    "#                 torch.save(model.state_dict(), best_model_path)\n",
    "\n",
    "#         if best_model_path:\n",
    "#             model.load_state_dict(torch.load(best_model_path, map_location=DEVICE))\n",
    "#         final_m = evaluate_epoch(model, val_loader, criterion, DEVICE)\n",
    "#         results_summary[tuple(streams)] = final_m\n",
    "\n",
    "#     # Print summary\n",
    "#     df = pd.DataFrame.from_dict(results_summary, orient='index')\n",
    "#     df.index = ['+'.join(k) for k in df.index]\n",
    "#     df = df.sort_values('f1', ascending=False)\n",
    "#     print(\"\\nAblation Results:\")\n",
    "#     print(df.to_markdown(floatfmt=\".4f\"))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "bb008a06",
   "metadata": {
    "_kg_hide-input": true,
    "execution": {
     "iopub.execute_input": "2025-05-01T13:46:23.544574Z",
     "iopub.status.busy": "2025-05-01T13:46:23.544231Z",
     "iopub.status.idle": "2025-05-01T13:46:23.559787Z",
     "shell.execute_reply": "2025-05-01T13:46:23.558824Z"
    },
    "papermill": {
     "duration": 0.047451,
     "end_time": "2025-05-01T13:46:23.561623",
     "exception": false,
     "start_time": "2025-05-01T13:46:23.514172",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # --- IMPORTS ---\n",
    "# import torch\n",
    "# import torch.nn as nn\n",
    "# import torch.optim as optim\n",
    "# from torch.utils.data import Dataset, DataLoader\n",
    "# import xml.etree.ElementTree as ET\n",
    "# import os\n",
    "# import numpy as np\n",
    "# from sklearn.metrics import (\n",
    "#     accuracy_score,\n",
    "#     precision_recall_fscore_support,\n",
    "#     roc_auc_score,\n",
    "#     confusion_matrix,\n",
    "#     ConfusionMatrixDisplay,\n",
    "# )\n",
    "# from sklearn.preprocessing import StandardScaler\n",
    "# from tqdm.notebook import tqdm\n",
    "# import random\n",
    "# import math\n",
    "# import zipfile\n",
    "# import cv2\n",
    "# import pandas as pd\n",
    "# import matplotlib.pyplot as plt\n",
    "# import seaborn as sns\n",
    "# import pickle\n",
    "# import time\n",
    "# import sys\n",
    "# import gc  # garbage collector for cleanup calls\n",
    "\n",
    "# # --- Add PIE utilities path if necessary (adjust path) ---\n",
    "# pie_utilities_path = '/kaggle/working/PIE/utilities'\n",
    "# if pie_utilities_path not in sys.path:\n",
    "#     sys.path.insert(0, pie_utilities_path)\n",
    "# try:\n",
    "#     from pie_data import PIE\n",
    "# except ImportError as e:\n",
    "#     print(f\"Warning: Could not import PIE class from {pie_utilities_path}. Database must already exist. Error: {e}\")\n",
    "#     PIE = None\n",
    "\n",
    "# # --- Configuration ---\n",
    "# PIE_ROOT_PATH = '/kaggle/working/PIE'\n",
    "# VIDEO_INPUT_DIR = '/kaggle/input'\n",
    "# POSE_DATA_DIR = '/kaggle/input/pose-data/extracted_poses2'\n",
    "# PIE_DATABASE_CACHE_PATH = '/kaggle/input/pie-database/pie_database.pkl'\n",
    "\n",
    "# # --- Define ALL possible streams (used by Dataset class) ---\n",
    "# ALL_POSSIBLE_STREAMS = [\n",
    "#     'bbox', 'pose', 'ego_speed', 'ego_acc', 'ego_gyro',\n",
    "#     'ped_action', 'ped_look', 'ped_occlusion', 'traffic_light', 'static_context'\n",
    "# ]\n",
    "# print(f\"All possible streams: {ALL_POSSIBLE_STREAMS}\")\n",
    "\n",
    "# # --- STREAM COMBINATIONS TO TEST FOR ABLATION STUDY ---\n",
    "\n",
    "# STREAM_COMBINATIONS_TO_TEST = [\n",
    "#     ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc'], \n",
    "#     ['traffic_light', 'bbox', 'pose', 'ped_action'],\n",
    "#     ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'traffic_light'],\n",
    "#     ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'static_context'],\n",
    "#     ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'ego_gyro'],\n",
    "#     ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'ped_occlusion'],\n",
    "#     ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'pose'],\n",
    "#     ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'traffic_light', 'static_context'],\n",
    "#     ['bbox', 'ped_action', 'ped_look'], \n",
    "# ]\n",
    "\n",
    "# print(f\"Stream combinations to test: {STREAM_COMBINATIONS_TO_TEST}\")\n",
    "\n",
    "# # --- Model Hyperparameters ---\n",
    "# SEQ_LEN = 30\n",
    "# PRED_LEN = 1\n",
    "\n",
    "# # --- Input Sizes ---\n",
    "# INPUT_SIZE_BBOX = 4\n",
    "# INPUT_SIZE_POSE = 34\n",
    "# INPUT_SIZE_EGO_SPEED = 1\n",
    "# INPUT_SIZE_EGO_ACC = 2\n",
    "# INPUT_SIZE_EGO_GYRO = 1\n",
    "# INPUT_SIZE_PED_ACTION = 1\n",
    "# INPUT_SIZE_PED_LOOK = 1\n",
    "# INPUT_SIZE_PED_OCC = 1\n",
    "# INPUT_SIZE_TL_STATE = 4\n",
    "# NUM_SIGNALIZED_CATS = 4\n",
    "# NUM_INTERSECTION_CATS = 5\n",
    "# NUM_AGE_CATS = 4\n",
    "# NUM_GENDER_CATS = 3\n",
    "# NUM_TRAFFIC_DIR_CATS = 2\n",
    "# LANE_CATEGORIES = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 4, 7: 4, 8: 4}\n",
    "# NUM_LANE_CATS = len(set(LANE_CATEGORIES.values()))\n",
    "# INPUT_SIZE_STATIC = (\n",
    "#     NUM_SIGNALIZED_CATS\n",
    "#     + NUM_INTERSECTION_CATS\n",
    "#     + NUM_AGE_CATS\n",
    "#     + NUM_GENDER_CATS\n",
    "#     + NUM_TRAFFIC_DIR_CATS\n",
    "#     + NUM_LANE_CATS\n",
    "# )\n",
    "\n",
    "# LSTM_HIDDEN_SIZE = 256\n",
    "# NUM_LSTM_LAYERS = 2\n",
    "# DROPOUT_RATE = 0.3\n",
    "# NUM_CLASSES = 2\n",
    "# ATTENTION_DIM = 128\n",
    "\n",
    "# # --- Training Hyperparameters ---\n",
    "# LEARNING_RATE = 1e-4\n",
    "# BATCH_SIZE = 32\n",
    "# NUM_EPOCHS = 10\n",
    "# DEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# print(f\"Using device: {DEVICE}\")\n",
    "\n",
    "# # --- Dataset Splits ---\n",
    "# TRAIN_SETS_STR = ['set01', 'set02', 'set04']\n",
    "# VAL_SETS_STR = ['set05', 'set06']\n",
    "\n",
    "# # --- Mappings ---\n",
    "# TL_STATE_MAP = {'__undefined__': 0, 'red': 1, 'yellow': 2, 'green': 3}\n",
    "# NUM_TL_STATES = len(TL_STATE_MAP)\n",
    "# SIGNALIZED_MAP = {'n/a': 0, 'C': 1, 'S': 2, 'CS': 3}\n",
    "# INTERSECTION_MAP = {'midblock': 0, 'T': 1, 'T-left': 2, 'T-right': 3, 'four-way': 4}\n",
    "# AGE_MAP = {'child': 0, 'young': 1, 'adult': 2, 'senior': 3}\n",
    "# GENDER_MAP = {'n/a': 0, 'female': 1, 'male': 2}\n",
    "# TRAFFIC_DIR_MAP = {'OW': 0, 'TW': 1}\n",
    "\n",
    "# # --- Output Files (for intermediate balanced data/scalers) ---\n",
    "# BALANCED_DATA_PKL_PATH = \"/kaggle/working/balanced_train_data.pkl\"\n",
    "# SCALERS_PKL_PATH = \"/kaggle/working/scalers.pkl\"\n",
    "\n",
    "\n",
    "# # --- Helper: One-Hot Encoding ---\n",
    "# def to_one_hot(index, num_classes):\n",
    "#     vec = np.zeros(num_classes, dtype=np.float32)\n",
    "#     safe_index = int(np.clip(index, 0, num_classes - 1))\n",
    "#     vec[safe_index] = 1.0\n",
    "#     return vec\n",
    "\n",
    "\n",
    "# # --- Balancing Function ---\n",
    "# def balance_samples_count(seq_data, label_type, random_seed=42):\n",
    "#     print('---------------------------------------------------------')\n",
    "#     print(f\"Balancing samples based on '{label_type}' key\")\n",
    "#     if label_type not in seq_data:\n",
    "#         raise KeyError(f\"Label type '{label_type}' not found.\")\n",
    "#     try:\n",
    "#         gt_labels = [lbl[0] for lbl in seq_data[label_type]]\n",
    "#     except (IndexError, TypeError):\n",
    "#         raise ValueError(f\"Labels under '{label_type}' not in expected format [[label_val]].\")\n",
    "\n",
    "#     if not all(l in [0, 1] for l in gt_labels):\n",
    "#         print(f\"Warning: Labels for balancing contain values other than 0 or 1.\")\n",
    "\n",
    "#     num_pos_samples = np.count_nonzero(np.array(gt_labels))\n",
    "#     num_neg_samples = len(gt_labels) - num_pos_samples\n",
    "#     new_seq_data = {}\n",
    "\n",
    "#     if num_neg_samples == num_pos_samples:\n",
    "#         print('Samples already balanced.')\n",
    "#         return seq_data.copy()\n",
    "#     else:\n",
    "#         print(f'Unbalanced: Positive (1): {num_pos_samples} | Negative (0): {num_neg_samples}')\n",
    "#         majority_label = 0 if num_neg_samples > num_pos_samples else 1\n",
    "#         minority_count = min(num_neg_samples, num_pos_samples)\n",
    "#         print(f\"Undersampling majority class ({majority_label}) to match count ({minority_count}).\")\n",
    "\n",
    "#         majority_indices = np.where(np.array(gt_labels) == majority_label)[0]\n",
    "#         minority_indices = np.where(np.array(gt_labels) != majority_label)[0]\n",
    "#         np.random.seed(random_seed)\n",
    "#         keep_majority_indices = np.random.choice(\n",
    "#             majority_indices, size=minority_count, replace=False\n",
    "#         )\n",
    "#         final_indices = np.concatenate((minority_indices, keep_majority_indices))\n",
    "#         np.random.shuffle(final_indices)\n",
    "\n",
    "#         for k, v_list in seq_data.items():\n",
    "#             if isinstance(v_list, list) and len(v_list) == len(gt_labels):\n",
    "#                 try:\n",
    "#                     if v_list and isinstance(v_list[0], np.ndarray):\n",
    "#                         v_array = np.array(v_list)\n",
    "#                         new_seq_data[k] = list(v_array[final_indices])\n",
    "#                     else:\n",
    "#                         new_seq_data[k] = [v_list[i] for i in final_indices]\n",
    "#                 except Exception as e:\n",
    "#                     print(f\"Error processing key '{k}' during balancing: {e}. Skip.\")\n",
    "#                     new_seq_data[k] = []\n",
    "#             else:\n",
    "#                 print(f\"Warn: Skipping key '{k}' in balancing (not list or len mismatch).\")\n",
    "#                 new_seq_data[k] = v_list\n",
    "\n",
    "#         if label_type in new_seq_data:\n",
    "#             new_gt_labels = [lbl[0] for lbl in new_seq_data[label_type]]\n",
    "#             final_pos = np.count_nonzero(np.array(new_gt_labels))\n",
    "#             final_neg = len(new_gt_labels) - final_pos\n",
    "#             print(f'Balanced:   Positive (1): {final_pos} | Negative (0): {final_neg}')\n",
    "#         else:\n",
    "#             print(\"Error: Label key was lost during balancing process.\")\n",
    "\n",
    "#         print('---------------------------------------------------------')\n",
    "#         return new_seq_data\n",
    "\n",
    "\n",
    "# # --- Dataset Class ---\n",
    "# class PIEDataset(Dataset):\n",
    "#     def __init__(\n",
    "#         self,\n",
    "#         pie_database,\n",
    "#         set_names,\n",
    "#         pose_data_dir,\n",
    "#         seq_len,\n",
    "#         pred_len,\n",
    "#         scalers=None,\n",
    "#         streams_to_generate=None,\n",
    "#     ):\n",
    "#         self.pie_db = pie_database\n",
    "#         self.set_names = set_names\n",
    "#         self.pose_data_dir = pose_data_dir\n",
    "#         self.seq_len = seq_len\n",
    "#         self.pred_len = pred_len\n",
    "#         self.scalers = scalers or {}\n",
    "#         self.streams_to_generate = (\n",
    "#             streams_to_generate or ALL_POSSIBLE_STREAMS\n",
    "#         )  # Streams this instance CAN generate\n",
    "#         self.sequences = []\n",
    "#         self.all_pose_data = {}\n",
    "#         self._input_sizes_for_error = self._get_input_sizes_dict()\n",
    "#         if 'pose' in self.streams_to_generate:\n",
    "#             self._load_pose_data()\n",
    "#         self._generate_sequence_list()\n",
    "#         if not self.sequences:\n",
    "#             raise ValueError(f\"Dataset init failed: No sequences for {self.set_names}\")\n",
    "\n",
    "#     def _get_input_sizes_dict(self):\n",
    "#         input_sizes = {}\n",
    "#         special_cases = {\n",
    "#             'TRAFFIC_LIGHT': 'TL_STATE',\n",
    "#             'STATIC_CONTEXT': 'STATIC',\n",
    "#             'EGO_SPEED': 'EGO_SPEED',\n",
    "#             'EGO_ACC': 'EGO_ACC',\n",
    "#             'EGO_GYRO': 'EGO_GYRO',\n",
    "#             'PED_ACTION': 'PED_ACTION',\n",
    "#             'PED_LOOK': 'PED_LOOK',\n",
    "#             'PED_OCCLUSION': 'PED_OCC',\n",
    "#         }\n",
    "#         for stream in ALL_POSSIBLE_STREAMS:\n",
    "#             size_constant_name = f'INPUT_SIZE_{stream.upper()}'\n",
    "#             stream_upper_key = stream.upper()\n",
    "#             suffix = special_cases.get(stream_upper_key)\n",
    "#             if suffix:\n",
    "#                 size_constant_name = f'INPUT_SIZE_{suffix}'\n",
    "#             elif stream == 'bbox':\n",
    "#                 size_constant_name = 'INPUT_SIZE_BBOX'\n",
    "#             elif stream == 'pose':\n",
    "#                 size_constant_name = 'INPUT_SIZE_POSE'\n",
    "\n",
    "#             input_sizes[stream] = globals().get(size_constant_name, 1)\n",
    "#         return input_sizes\n",
    "\n",
    "#     def _load_pose_data(self):\n",
    "#         print(f\"\\nLoading pose data for sets: {self.set_names} from {self.pose_data_dir}\")\n",
    "#         sets_loaded_count = 0\n",
    "#         for set_id in self.set_names:\n",
    "#             self.all_pose_data[set_id] = {}\n",
    "#             pose_set_path = os.path.join(self.pose_data_dir, set_id)\n",
    "#             if not os.path.isdir(pose_set_path):\n",
    "#                 continue\n",
    "#             pkl_files_in_set = [\n",
    "#                 f\n",
    "#                 for f in os.listdir(pose_set_path)\n",
    "#                 if f.startswith(f\"{set_id}_\") and f.endswith(\"_poses.pkl\")\n",
    "#             ]\n",
    "#             if not pkl_files_in_set:\n",
    "#                 continue\n",
    "#             loaded_video_count = 0\n",
    "#             for pkl_filename in pkl_files_in_set:\n",
    "#                 pkl_file_path = os.path.join(pose_set_path, pkl_filename)\n",
    "#                 try:\n",
    "#                     with open(pkl_file_path, 'rb') as f:\n",
    "#                         loaded_pkl_content = pickle.load(f)\n",
    "#                     if len(loaded_pkl_content) != 1:\n",
    "#                         continue\n",
    "#                     unique_video_key, video_data = list(loaded_pkl_content.items())[0]\n",
    "#                     video_id = \"_\".join(unique_video_key.split(\"_\")[1:])\n",
    "#                     if video_id in self.pie_db.get(set_id, {}):\n",
    "#                         self.all_pose_data[set_id][video_id] = video_data\n",
    "#                         loaded_video_count += 1\n",
    "#                 except FileNotFoundError:\n",
    "#                     pass\n",
    "#                 except Exception as e:\n",
    "#                     print(f\"Error loading pose PKL {pkl_file_path}: {e}\")\n",
    "#             if loaded_video_count > 0:\n",
    "#                 sets_loaded_count += 1\n",
    "#         print(f\"Finished loading pose data for {sets_loaded_count} sets for this Dataset instance.\")\n",
    "\n",
    "#     def _generate_sequence_list(self):\n",
    "#         sequence_count = 0\n",
    "#         for set_id in self.set_names:\n",
    "#             if set_id not in self.pie_db:\n",
    "#                 continue\n",
    "#             for video_id, video_data in self.pie_db[set_id].items():\n",
    "#                 if \"ped_annotations\" not in video_data:\n",
    "#                     continue\n",
    "#                 for ped_id, ped_data in video_data[\"ped_annotations\"].items():\n",
    "#                     if \"frames\" not in ped_data or len(ped_data[\"frames\"]) < self.seq_len + self.pred_len:\n",
    "#                         continue\n",
    "#                     sorted_frames = sorted(ped_data[\"frames\"])\n",
    "#                     for i in range(len(sorted_frames) - self.seq_len - self.pred_len + 1):\n",
    "#                         start_frame = sorted_frames[i]\n",
    "#                         end_frame_observe = sorted_frames[i + self.seq_len - 1]\n",
    "#                         if end_frame_observe - start_frame != self.seq_len - 1:\n",
    "#                             continue\n",
    "#                         target_frame_actual_idx = i + self.seq_len + self.pred_len - 1\n",
    "#                         if target_frame_actual_idx >= len(sorted_frames):\n",
    "#                             continue\n",
    "#                         target_frame = sorted_frames[target_frame_actual_idx]\n",
    "#                         if target_frame - end_frame_observe != self.pred_len:\n",
    "#                             continue\n",
    "#                         self.sequences.append((set_id, video_id, ped_id, start_frame))\n",
    "#                         sequence_count += 1\n",
    "#         print(f\"Dataset initialized with {sequence_count} sequences for sets {self.set_names}.\")\n",
    "\n",
    "#     def __len__(self):\n",
    "#         return len(self.sequences)\n",
    "\n",
    "#     def __getitem__(self, idx):\n",
    "#         set_id, video_id, ped_id, start_frame = self.sequences[idx]\n",
    "#         frame_nums = list(range(start_frame, start_frame + self.seq_len))\n",
    "#         target_frame_num = start_frame + self.seq_len + self.pred_len - 1\n",
    "\n",
    "#         video_db = self.pie_db.get(set_id, {}).get(video_id, {})\n",
    "#         ped_db = video_db.get(\"ped_annotations\", {}).get(ped_id, {})\n",
    "#         ego_db = video_db.get(\"vehicle_annotations\", {})\n",
    "#         traffic_db = video_db.get(\"traffic_annotations\", {})\n",
    "#         ped_attributes = ped_db.get(\"attributes\", {})\n",
    "\n",
    "#         feature_sequences = {s: [] for s in self.streams_to_generate}\n",
    "#         label = 0\n",
    "#         if \"frames\" in ped_db and \"behavior\" in ped_db and \"cross\" in ped_db[\"behavior\"]:\n",
    "#             try:\n",
    "#                 tf_idx = ped_db[\"frames\"].index(target_frame_num)\n",
    "#                 label = ped_db[\"behavior\"][\"cross\"][tf_idx]\n",
    "#                 if label == -1:\n",
    "#                     label = 0\n",
    "#             except (ValueError, IndexError):\n",
    "#                 pass\n",
    "\n",
    "#         static_vec = None\n",
    "#         if \"static_context\" in self.streams_to_generate:\n",
    "#             sig = ped_attributes.get(\"signalized\", 0)\n",
    "#             inter = ped_attributes.get(\"intersection\", 0)\n",
    "#             age = ped_attributes.get(\"age\", 2)\n",
    "#             gen = ped_attributes.get(\"gender\", 0)\n",
    "#             td = int(ped_attributes.get(\"traffic_direction\", 0))\n",
    "#             nl = ped_attributes.get(\"num_lanes\", 2)\n",
    "#             nl_idx = LANE_CATEGORIES.get(nl, list(LANE_CATEGORIES.values())[-1])\n",
    "#             static_features = [\n",
    "#                 to_one_hot(sig, NUM_SIGNALIZED_CATS),\n",
    "#                 to_one_hot(inter, NUM_INTERSECTION_CATS),\n",
    "#                 to_one_hot(age, NUM_AGE_CATS),\n",
    "#                 to_one_hot(gen, NUM_GENDER_CATS),\n",
    "#                 to_one_hot(td, NUM_TRAFFIC_DIR_CATS),\n",
    "#                 to_one_hot(nl_idx, NUM_LANE_CATS),\n",
    "#             ]\n",
    "#             static_vec = np.concatenate(static_features)\n",
    "#             if static_vec.shape[0] != INPUT_SIZE_STATIC:\n",
    "#                 static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "\n",
    "#         for frame_num in frame_nums:\n",
    "#             idx_in = -1\n",
    "#             if \"frames\" in ped_db:\n",
    "#                 try:\n",
    "#                     idx_in = ped_db[\"frames\"].index(frame_num)\n",
    "#                 except ValueError:\n",
    "#                     pass\n",
    "#             ego_f = ego_db.get(frame_num, {})\n",
    "\n",
    "#             if \"bbox\" in self.streams_to_generate:\n",
    "#                 bbox_norm = np.zeros(INPUT_SIZE_BBOX, dtype=np.float32)\n",
    "#                 if idx_in != -1 and \"bbox\" in ped_db and len(ped_db[\"bbox\"]) > idx_in:\n",
    "#                     try:\n",
    "#                         x1, y1, x2, y2 = ped_db[\"bbox\"][idx_in]\n",
    "#                         w_img = video_db.get(\"width\", 1920)\n",
    "#                         h_img = video_db.get(\"height\", 1080)\n",
    "#                         if w_img > 0 and h_img > 0:\n",
    "#                             cx = ((x1 + x2) / 2) / w_img\n",
    "#                             cy = ((y1 + y2) / 2) / h_img\n",
    "#                             w = (x2 - x1) / w_img\n",
    "#                             h = (y2 - y1) / h_img\n",
    "#                             if 0 <= cx <= 1 and 0 <= cy <= 1 and w > 0 and h > 0:\n",
    "#                                 bbox_norm = np.array([cx, cy, w, h], dtype=np.float32)\n",
    "#                     except Exception:\n",
    "#                         pass\n",
    "#                 feature_sequences[\"bbox\"].append(bbox_norm)\n",
    "\n",
    "#             if \"pose\" in self.streams_to_generate:\n",
    "#                 pose_v = np.zeros(INPUT_SIZE_POSE, dtype=np.float32)\n",
    "#                 if set_id in self.all_pose_data and video_id in self.all_pose_data[set_id]:\n",
    "#                     pdict = self.all_pose_data[set_id][video_id].get(frame_num, {})\n",
    "#                     lp = pdict.get(ped_id)\n",
    "#                     if isinstance(lp, np.ndarray) and lp.shape == (INPUT_SIZE_POSE,):\n",
    "#                         pose_v = lp\n",
    "#                 feature_sequences[\"pose\"].append(pose_v)\n",
    "\n",
    "#             if \"ego_speed\" in self.streams_to_generate:\n",
    "#                 sp = ego_f.get(\"OBD_speed\", 0.0) or ego_f.get(\"GPS_speed\", 0.0) or 0.0\n",
    "#                 sp_s = (sp - self.scalers.get(\"ego_speed_mean\", 0.0)) / self.scalers.get(\"ego_speed_std\", 1.0)\n",
    "#                 feature_sequences[\"ego_speed\"].append([sp_s])\n",
    "\n",
    "#             if \"ego_acc\" in self.streams_to_generate:\n",
    "#                 ax = ego_f.get(\"accX\", 0.0)\n",
    "#                 ay = ego_f.get(\"accY\", 0.0)\n",
    "#                 ax_s = (ax - self.scalers.get(\"accX_mean\", 0.0)) / self.scalers.get(\"accX_std\", 1.0)\n",
    "#                 ay_s = (ay - self.scalers.get(\"accY_mean\", 0.0)) / self.scalers.get(\"accY_std\", 1.0)\n",
    "#                 feature_sequences[\"ego_acc\"].append([ax_s, ay_s])\n",
    "\n",
    "#             if \"ego_gyro\" in self.streams_to_generate:\n",
    "#                 gz = ego_f.get(\"gyroZ\", 0.0)\n",
    "#                 gz_s = (gz - self.scalers.get(\"gyroZ_mean\", 0.0)) / self.scalers.get(\"gyroZ_std\", 1.0)\n",
    "#                 feature_sequences[\"ego_gyro\"].append([gz_s])\n",
    "\n",
    "#             if \"ped_action\" in self.streams_to_generate:\n",
    "#                 ac = 0\n",
    "#                 if idx_in != -1 and \"behavior\" in ped_db and \"action\" in ped_db[\"behavior\"]:\n",
    "#                     arr = ped_db[\"behavior\"][\"action\"]\n",
    "#                     if len(arr) > idx_in:\n",
    "#                         ac = arr[idx_in]\n",
    "#                 feature_sequences[\"ped_action\"].append([float(ac)])\n",
    "\n",
    "#             if \"ped_look\" in self.streams_to_generate:\n",
    "#                 lk = 0\n",
    "#                 if idx_in != -1 and \"behavior\" in ped_db and \"look\" in ped_db[\"behavior\"]:\n",
    "#                     arr = ped_db[\"behavior\"][\"look\"]\n",
    "#                     if len(arr) > idx_in:\n",
    "#                         lk = arr[idx_in]\n",
    "#                 feature_sequences[\"ped_look\"].append([float(lk)])\n",
    "\n",
    "#             if \"ped_occlusion\" in self.streams_to_generate:\n",
    "#                 oc = 0.0\n",
    "#                 if idx_in != -1 and \"occlusion\" in ped_db:\n",
    "#                     arr = ped_db[\"occlusion\"]\n",
    "#                     if len(arr) > idx_in:\n",
    "#                         oc = float(arr[idx_in]) / 2.0\n",
    "#                 feature_sequences[\"ped_occlusion\"].append([oc])\n",
    "\n",
    "#             if \"traffic_light\" in self.streams_to_generate:\n",
    "#                 st = 0\n",
    "#                 for obj_id, od in traffic_db.items():\n",
    "#                     if od.get(\"obj_class\") == \"traffic_light\" and \"frames\" in od and \"state\" in od:\n",
    "#                         try:\n",
    "#                             fi = od[\"frames\"].index(frame_num)\n",
    "#                             sv = od[\"state\"][fi]\n",
    "#                             if sv != 0:\n",
    "#                                 st = sv\n",
    "#                                 break\n",
    "#                         except (ValueError, IndexError):\n",
    "#                             continue\n",
    "#                 feature_sequences[\"traffic_light\"].append(to_one_hot(st, NUM_TL_STATES))\n",
    "\n",
    "#             if \"static_context\" in self.streams_to_generate:\n",
    "#                 feature_sequences[\"static_context\"].append(\n",
    "#                     static_vec\n",
    "#                     if static_vec is not None\n",
    "#                     else np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "#                 )\n",
    "\n",
    "#         # Convert lists to tensors\n",
    "#         features = {}\n",
    "#         try:\n",
    "#             for sn in self.streams_to_generate:\n",
    "#                 arr = np.array(feature_sequences[sn], dtype=np.float32)\n",
    "#                 features[sn] = torch.tensor(arr, dtype=torch.float32)\n",
    "#         except Exception as e:\n",
    "#             print(f\"Error converting features idx {idx}: {e}. Return dummy.\")\n",
    "#             features = {\n",
    "#                 name: torch.zeros(\n",
    "#                     (self.seq_len, self._input_sizes_for_error.get(name, 1)),\n",
    "#                     dtype=torch.float32,\n",
    "#                 )\n",
    "#                 for name in self.streams_to_generate\n",
    "#             }\n",
    "\n",
    "#         return features, torch.tensor(label, dtype=torch.long)\n",
    "\n",
    "\n",
    "# # --- Wrapper Dataset for Balanced Data ---\n",
    "# class BalancedDataset(Dataset):\n",
    "#     def __init__(self, data_dict, active_streams, label_key='label'):\n",
    "#         self.active_streams = active_streams\n",
    "#         self.label_key = label_key\n",
    "#         if label_key not in data_dict or not data_dict[label_key]:\n",
    "#             raise ValueError(f\"Label key '{label_key}' missing/empty.\")\n",
    "#         self.num_samples = len(data_dict[label_key])\n",
    "#         if self.num_samples == 0:\n",
    "#             print(\"Warning: BalancedDataset initialized with zero samples.\")\n",
    "#         self.features = {}\n",
    "#         for s in active_streams:\n",
    "#             if s in data_dict and data_dict[s]:\n",
    "#                 self.features[s] = torch.tensor(\n",
    "#                     np.array(data_dict[s]), dtype=torch.float32\n",
    "#                 )\n",
    "#             else:\n",
    "#                 raise KeyError(f\"Stream '{s}' requested but missing/empty in balanced data.\")\n",
    "#         try:\n",
    "#             self.labels = torch.tensor(\n",
    "#                 [lbl[0] for lbl in data_dict[label_key]], dtype=torch.long\n",
    "#             )\n",
    "#         except (IndexError, TypeError) as e:\n",
    "#             raise ValueError(f\"Error converting labels: {e}\")\n",
    "#         for s in active_streams:\n",
    "#             if len(self.features[s]) != self.num_samples:\n",
    "#                 raise ValueError(f\"Len mismatch: Stream '{s}' vs Labels\")\n",
    "\n",
    "#     def __len__(self):\n",
    "#         return self.num_samples\n",
    "\n",
    "#     def __getitem__(self, idx):\n",
    "#         fd = {s: self.features[s][idx] for s in self.active_streams}\n",
    "#         return fd, self.labels[idx]\n",
    "\n",
    "\n",
    "# # --- Model Architecture ---\n",
    "# class Attention(nn.Module):\n",
    "#     def __init__(self, hidden_dim, attention_dim):\n",
    "#         super(Attention, self).__init__()\n",
    "#         self.attention_net = nn.Sequential(\n",
    "#             nn.Linear(hidden_dim, attention_dim),\n",
    "#             nn.Tanh(),\n",
    "#             nn.Linear(attention_dim, 1),\n",
    "#         )\n",
    "\n",
    "#     def forward(self, lstm_output):\n",
    "#         scores = self.attention_net(lstm_output).squeeze(2)\n",
    "#         weights = torch.softmax(scores, dim=1)\n",
    "#         context = torch.sum(lstm_output * weights.unsqueeze(2), dim=1)\n",
    "#         return context, weights\n",
    "\n",
    "\n",
    "# class MultiStreamAdaptiveLSTM(nn.Module):\n",
    "#     def __init__(\n",
    "#         self,\n",
    "#         input_sizes,\n",
    "#         lstm_hidden_size,\n",
    "#         num_lstm_layers,\n",
    "#         num_classes,\n",
    "#         attention_dim,\n",
    "#         dropout_rate,\n",
    "#         stream_names=['bbox', 'pose'],\n",
    "#     ):\n",
    "#         super(MultiStreamAdaptiveLSTM, self).__init__()\n",
    "#         if not stream_names:\n",
    "#             raise ValueError(\"stream_names cannot be empty.\")\n",
    "#         self.stream_names = stream_names\n",
    "#         self.lstms = nn.ModuleDict()\n",
    "#         self.attentions = nn.ModuleDict()\n",
    "#         print(f\"Initializing model with streams: {self.stream_names}\")\n",
    "#         for name in stream_names:\n",
    "#             if name not in input_sizes:\n",
    "#                 raise KeyError(f\"Input size for stream '{name}' not provided.\")\n",
    "#             insize = input_sizes[name]\n",
    "#             print(f\"  - Adding stream '{name}' with input size {insize}\")\n",
    "#             self.lstms[name] = nn.LSTM(\n",
    "#                 insize,\n",
    "#                 lstm_hidden_size,\n",
    "#                 num_lstm_layers,\n",
    "#                 batch_first=True,\n",
    "#                 dropout=dropout_rate if num_lstm_layers > 1 else 0,\n",
    "#                 bidirectional=True,\n",
    "#             )\n",
    "#             self.attentions[name] = Attention(lstm_hidden_size * 2, attention_dim)\n",
    "#         nf = lstm_hidden_size * 2 * len(stream_names)\n",
    "#         print(f\"  Combined feature dimension: {nf}\")\n",
    "#         self.dropout = nn.Dropout(dropout_rate)\n",
    "#         interm = max(num_classes * 4, nf // 2)\n",
    "#         self.fc1 = nn.Linear(nf, interm)\n",
    "#         self.relu = nn.ReLU()\n",
    "#         self.fc2 = nn.Linear(interm, num_classes)\n",
    "\n",
    "#     def forward(self, x):\n",
    "#         ctxs = []\n",
    "#         for name in self.stream_names:\n",
    "#             if name not in x:\n",
    "#                 print(f\"Warning: Stream '{name}' expected but missing.\")\n",
    "#                 continue\n",
    "#             out, _ = self.lstms[name](x[name])\n",
    "#             ctx, _ = self.attentions[name](out)\n",
    "#             ctxs.append(ctx)\n",
    "#         if not ctxs:\n",
    "#             raise RuntimeError(\"No stream outputs generated.\")\n",
    "#         f = torch.cat(ctxs, dim=1)\n",
    "#         y = self.dropout(f)\n",
    "#         y = self.relu(self.fc1(y))\n",
    "#         y = self.dropout(y)\n",
    "#         return self.fc2(y)\n",
    "\n",
    "\n",
    "# # --- Training and Evaluation Functions ---\n",
    "# def train_epoch(model, loader, optim, crit, device):\n",
    "#     model.train()\n",
    "#     total, allp, allg = 0.0, [], []\n",
    "#     for feats, labs in tqdm(loader, desc=\"Training\", leave=False):\n",
    "#         inp = {n: feats[n].to(device) for n in model.stream_names if n in feats}\n",
    "#         labs = labs.to(device)\n",
    "#         optim.zero_grad()\n",
    "#         out = model(inp)\n",
    "#         loss = crit(out, labs)\n",
    "#         loss.backward()\n",
    "#         optim.step()\n",
    "#         total += loss.item()\n",
    "#         preds = out.argmax(1).cpu().numpy()\n",
    "#         allp.extend(preds)\n",
    "#         allg.extend(labs.cpu().numpy())\n",
    "#     return total / max(1, len(loader)), accuracy_score(allg, allp)\n",
    "\n",
    "\n",
    "# def evaluate_epoch(model, loader, crit, device):\n",
    "#     model.eval()\n",
    "#     total, allg, allp, allpr = 0.0, [], [], []\n",
    "#     with torch.no_grad():\n",
    "#         for feats, labs in tqdm(loader, desc=\"Evaluating\", leave=False):\n",
    "#             inp = {n: feats[n].to(device) for n in model.stream_names if n in feats}\n",
    "#             labs = labs.to(device)\n",
    "#             out = model(inp)\n",
    "#             loss = crit(out, labs)\n",
    "#             total += loss.item()\n",
    "#             probs = torch.softmax(out, 1).cpu().numpy()\n",
    "#             preds = probs.argmax(1)\n",
    "#             allg.extend(labs.cpu().numpy())\n",
    "#             allp.extend(preds)\n",
    "#             allpr.extend(probs)\n",
    "#     allg = np.array(allg)\n",
    "#     allp = np.array(allp)\n",
    "#     allpr = np.array(allpr)\n",
    "#     acc = accuracy_score(allg, allp)\n",
    "#     prec, rec, f1, _ = precision_recall_fscore_support(\n",
    "#         allg, allp, average='binary', pos_label=1, zero_division=0\n",
    "#     )\n",
    "#     auc = roc_auc_score(allg, allpr[:, 1]) if len(np.unique(allg)) > 1 else float('nan')\n",
    "#     return {'loss': total / max(1, len(loader)), 'accuracy': acc,\n",
    "#             'precision': prec, 'recall': rec, 'f1': f1, 'auc': auc}\n",
    "\n",
    "\n",
    "# def get_predictions_and_labels(model, loader, device):\n",
    "#     model.eval()\n",
    "#     allg, allp = [], []\n",
    "#     with torch.no_grad():\n",
    "#         for feats, labs in tqdm(loader, desc=\"Generating CM Data\", leave=False):\n",
    "#             inp = {n: feats[n].to(device) for n in model.stream_names if n in feats}\n",
    "#             labs = labs.to(device)\n",
    "#             out = model(inp)\n",
    "#             preds = out.argmax(1)\n",
    "#             allg.extend(labs.cpu().numpy())\n",
    "#             allp.extend(preds.cpu().numpy())\n",
    "#     return np.array(allg), np.array(allp)\n",
    "\n",
    "\n",
    "# # --- Main Execution Block ---\n",
    "# if __name__ == '__main__':\n",
    "#     # --- Step 1: Data Preparation ---\n",
    "#     print(\"--- Running Data Preparation ---\")\n",
    "#     print(f\"Checking for PIE database cache at: {PIE_DATABASE_CACHE_PATH}\")\n",
    "#     if not os.path.exists(PIE_DATABASE_CACHE_PATH):\n",
    "#         if PIE is None:\n",
    "#             raise ImportError(\"PIE class not imported, cannot generate database.\")\n",
    "#         print(\"PIE database cache not found. Generating...\")\n",
    "#         pie_interface = PIE(data_path=PIE_ROOT_PATH, regen_database=True)\n",
    "#         pie_database = pie_interface.generate_database()\n",
    "#         if not pie_database:\n",
    "#             raise RuntimeError(\"Failed to generate PIE database.\")\n",
    "#         print(\"PIE database generated successfully.\")\n",
    "#     else:\n",
    "#         print(\"Loading PIE database from cache...\")\n",
    "#         try:\n",
    "#             with open(PIE_DATABASE_CACHE_PATH, 'rb') as f:\n",
    "#                 pie_database = pickle.load(f)\n",
    "#             print(\"PIE database loaded successfully.\")\n",
    "#         except Exception as e:\n",
    "#             raise RuntimeError(f\"Failed to load PIE database: {e}\")\n",
    "\n",
    "#     # --- Calculate Standardization Parameters ---\n",
    "#     print(\"\\nCalculating standardization parameters from training set...\")\n",
    "#     all_train_ego_speeds, all_train_accX, all_train_accY, all_train_gyroZ = [], [], [], []\n",
    "#     for sid in TRAIN_SETS_STR:\n",
    "#         if sid in pie_database:\n",
    "#             for vid, vdata in pie_database[sid].items():\n",
    "#                 va = vdata.get('vehicle_annotations', {})\n",
    "#                 for fn, ed in va.items():\n",
    "#                     sp = ed.get('OBD_speed', 0.0) or ed.get('GPS_speed', 0.0) or 0.0\n",
    "#                     all_train_ego_speeds.append(sp)\n",
    "#                     all_train_accX.append(ed.get('accX', 0.0))\n",
    "#                     all_train_accY.append(ed.get('accY', 0.0))\n",
    "#                     all_train_gyroZ.append(ed.get('gyroZ', 0.0))\n",
    "#     scalers = {}\n",
    "#     if all_train_ego_speeds:\n",
    "#         scalers['ego_speed_mean'] = np.mean(all_train_ego_speeds)\n",
    "#         scalers['ego_speed_std'] = np.std(all_train_ego_speeds) or 1.0\n",
    "#         print(f\"  Ego Speed: Mean={scalers['ego_speed_mean']:.2f}, Std={scalers['ego_speed_std']:.2f}\")\n",
    "#     if all_train_accX:\n",
    "#         scalers['accX_mean'] = np.mean(all_train_accX)\n",
    "#         scalers['accX_std'] = np.std(all_train_accX) or 1.0\n",
    "#         scalers['accY_mean'] = np.mean(all_train_accY)\n",
    "#         scalers['accY_std'] = np.std(all_train_accY) or 1.0\n",
    "#         print(f\"  Ego AccX: Mean={scalers['accX_mean']:.2f}, Std={scalers['accX_std']:.2f}\")\n",
    "#         print(f\"  Ego AccY: Mean={scalers['accY_mean']:.2f}, Std={scalers['accY_std']:.2f}\")\n",
    "#     if all_train_gyroZ:\n",
    "#         scalers['gyroZ_mean'] = np.mean(all_train_gyroZ)\n",
    "#         scalers['gyroZ_std'] = np.std(all_train_gyroZ) or 1.0\n",
    "#         print(f\"  Ego GyroZ: Mean={scalers['gyroZ_mean']:.2f}, Std={scalers['gyroZ_std']:.2f}\")\n",
    "#     print(\"Standardization parameters calculated.\")\n",
    "\n",
    "#     # --- Initialize FULL Training Dataset ---\n",
    "#     print(\"\\nInitializing full training dataset (for extraction)...\")\n",
    "#     full_train_dataset = PIEDataset(\n",
    "#         pie_database, TRAIN_SETS_STR, POSE_DATA_DIR, SEQ_LEN, PRED_LEN, scalers, ALL_POSSIBLE_STREAMS\n",
    "#     )\n",
    "#     if len(full_train_dataset) == 0:\n",
    "#         raise ValueError(\"Full Train Dataset loading failed.\")\n",
    "\n",
    "#     # --- Prepare and Balance Training Data ---\n",
    "#     print(\"\\nExtracting ALL stream data from training set for balancing...\")\n",
    "#     training_data_dict = {s: [] for s in ALL_POSSIBLE_STREAMS}\n",
    "#     training_data_dict['label'] = []\n",
    "#     for i in tqdm(range(len(full_train_dataset)), desc=\"Extracting data\"):\n",
    "#         feats, lab = full_train_dataset[i]\n",
    "#         for s in ALL_POSSIBLE_STREAMS:\n",
    "#             arr = feats.get(s)\n",
    "#             if arr is not None:\n",
    "#                 training_data_dict[s].append(arr.numpy())\n",
    "#             else:\n",
    "#                 size = full_train_dataset._input_sizes_for_error.get(s, 1)\n",
    "#                 training_data_dict[s].append(np.zeros((SEQ_LEN, size), dtype=np.float32))\n",
    "#         training_data_dict['label'].append([lab.item()])\n",
    "#     print(f\"Original training samples: {len(training_data_dict['label'])}\")\n",
    "#     del full_train_dataset\n",
    "#     gc.collect()\n",
    "\n",
    "#     balanced_train_data_dict = balance_samples_count(\n",
    "#         training_data_dict, label_type='label'\n",
    "#     )\n",
    "#     del training_data_dict\n",
    "#     gc.collect()\n",
    "\n",
    "#     print(f\"\\nSaving balanced training data to: {BALANCED_DATA_PKL_PATH}\")\n",
    "#     with open(BALANCED_DATA_PKL_PATH, 'wb') as f:\n",
    "#         pickle.dump(balanced_train_data_dict, f, pickle.HIGHEST_PROTOCOL)\n",
    "#     print(\" -> Balanced data saved.\")\n",
    "\n",
    "#     print(f\"\\nSaving scalers to: {SCALERS_PKL_PATH}\")\n",
    "#     with open(SCALERS_PKL_PATH, 'wb') as f:\n",
    "#         pickle.dump(scalers, f, pickle.HIGHEST_PROTOCOL)\n",
    "#     print(\" -> Scalers saved.\")\n",
    "\n",
    "#     # --- Clean up and start Step 2 ---\n",
    "#     del pie_database\n",
    "#     gc.collect()\n",
    "\n",
    "#     print(\"\\n--- Data Preparation and Balancing Completed ---\")\n",
    "#     print(\"--- Ablation Study Starting Below ---\")\n",
    "#     print(\"-\" * 70)\n",
    "\n",
    "#     # --- Step 2: Ablation Study ---\n",
    "#     print(f\"\\nLoading balanced training data from: {BALANCED_DATA_PKL_PATH}\")\n",
    "#     print(f\"Loading scalers from: {SCALERS_PKL_PATH}\")\n",
    "#     with open(BALANCED_DATA_PKL_PATH, 'rb') as f:\n",
    "#         balanced_train_data_dict = pickle.load(f)\n",
    "#     with open(SCALERS_PKL_PATH, 'rb') as f:\n",
    "#         scalers = pickle.load(f)\n",
    "#     print(\" -> Pre-processed data loaded successfully.\")\n",
    "\n",
    "#     print(\"\\nLoading PIE database cache for Validation...\")\n",
    "#     with open(PIE_DATABASE_CACHE_PATH, 'rb') as f:\n",
    "#         pie_database = pickle.load(f)\n",
    "#     print(\" -> PIE database loaded successfully.\")\n",
    "\n",
    "#     print(\"\\nInitializing validation dataset...\")\n",
    "#     val_dataset = PIEDataset(\n",
    "#         pie_database, VAL_SETS_STR, POSE_DATA_DIR, SEQ_LEN, PRED_LEN, scalers, ALL_POSSIBLE_STREAMS\n",
    "#     )\n",
    "#     val_loader = DataLoader(\n",
    "#         val_dataset, batch_size=BATCH_SIZE, shuffle=False, num_workers=2, pin_memory=True\n",
    "#     )\n",
    "#     print(\"Validation dataset and loader created.\")\n",
    "#     del pie_database\n",
    "#     gc.collect()\n",
    "\n",
    "#     # --- Ablation Study Loop ---\n",
    "#     results_summary = {}\n",
    "\n",
    "#     for streams in STREAM_COMBINATIONS_TO_TEST:\n",
    "#         key = tuple(sorted(streams))\n",
    "#         print(f\"\\n===== Experiment: Active Streams: {streams} =====\")\n",
    "\n",
    "#         try:\n",
    "#             curr_ds = BalancedDataset(balanced_train_data_dict, streams, label_key='label')\n",
    "#         except Exception as e:\n",
    "#             print(f\"Error creating BalancedDataset: {e}. Skipping.\")\n",
    "#             continue\n",
    "#         train_loader = DataLoader(\n",
    "#             curr_ds, batch_size=BATCH_SIZE, shuffle=True, num_workers=2, pin_memory=True\n",
    "#         )\n",
    "\n",
    "#         print(\"Initializing model...\")\n",
    "#         curr_ins = {}\n",
    "#         special = {\n",
    "#             'TRAFFIC_LIGHT': 'TL_STATE',\n",
    "#             'STATIC_CONTEXT': 'STATIC',\n",
    "#             'EGO_SPEED': 'EGO_SPEED',\n",
    "#             'EGO_ACC': 'EGO_ACC',\n",
    "#             'EGO_GYRO': 'EGO_GYRO',\n",
    "#             'PED_ACTION': 'PED_ACTION',\n",
    "#             'PED_LOOK': 'PED_LOOK',\n",
    "#             'PED_OCCLUSION': 'PED_OCC',\n",
    "#         }\n",
    "#         for s in streams:\n",
    "#             name = f'INPUT_SIZE_{s.upper()}'\n",
    "#             suf = special.get(s.upper(), None)\n",
    "#             if suf:\n",
    "#                 name = f'INPUT_SIZE_{suf}'\n",
    "#             elif s == 'bbox':\n",
    "#                 name = 'INPUT_SIZE_BBOX'\n",
    "#             elif s == 'pose':\n",
    "#                 name = 'INPUT_SIZE_POSE'\n",
    "#             curr_ins[s] = globals()[name]\n",
    "\n",
    "#         model = MultiStreamAdaptiveLSTM(\n",
    "#             input_sizes=curr_ins,\n",
    "#             lstm_hidden_size=LSTM_HIDDEN_SIZE,\n",
    "#             num_lstm_layers=NUM_LSTM_LAYERS,\n",
    "#             num_classes=NUM_CLASSES,\n",
    "#             attention_dim=ATTENTION_DIM,\n",
    "#             dropout_rate=DROPOUT_RATE,\n",
    "#             stream_names=streams,\n",
    "#         ).to(DEVICE)\n",
    "#         print(\n",
    "#             f\"Model Initialized. Trainable Parameters: \"\n",
    "#             f\"{sum(p.numel() for p in model.parameters() if p.requires_grad):,}\"\n",
    "#         )\n",
    "\n",
    "#         labs = curr_ds.labels.tolist()\n",
    "#         c0, c1 = labs.count(0), labs.count(1)\n",
    "#         tot = len(labs)\n",
    "#         if tot == 0:\n",
    "#             w0 = w1 = 1.0\n",
    "#         elif c0 == 0:\n",
    "#             w0, w1 = 0.0, 1.0\n",
    "#         elif c1 == 0:\n",
    "#             w0, w1 = 1.0, 0.0\n",
    "#         else:\n",
    "#             w0, w1 = tot / (2 * c0), tot / (2 * c1)\n",
    "#         cw = torch.tensor([w0, w1], dtype=torch.float32).to(DEVICE)\n",
    "#         crit = nn.CrossEntropyLoss(weight=cw)\n",
    "#         opt = optim.Adam(model.parameters(), lr=LEARNING_RATE)\n",
    "\n",
    "#         best_f1 = -1.0\n",
    "#         best_path = None\n",
    "\n",
    "#         for ep in range(NUM_EPOCHS):\n",
    "#             t_loss, t_acc = train_epoch(model, train_loader, opt, crit, DEVICE)\n",
    "#             vmet = evaluate_epoch(model, val_loader, crit, DEVICE)\n",
    "#             print(\n",
    "#                 f\"Epoch {ep+1}/{NUM_EPOCHS}: \"\n",
    "#                 f\"Train Loss={t_loss:.4f}, Train Acc={t_acc:.4f} | \"\n",
    "#                 f\"Val Loss={vmet['loss']:.4f}, Val Acc={vmet['accuracy']:.4f}, F1={vmet['f1']:.4f}\"\n",
    "#             )\n",
    "#             if vmet['f1'] > best_f1:\n",
    "#                 best_f1 = vmet['f1']\n",
    "#                 path = f\"best_model_{'_'.join(sorted(streams))}_ep{ep+1}.pth\"\n",
    "#                 torch.save(model.state_dict(), path)\n",
    "#                 best_path = path\n",
    "#                 print(f\"  → New best F1, saved to {path}\")\n",
    "\n",
    "#         # final eval\n",
    "#         if best_path:\n",
    "#             model.load_state_dict(torch.load(best_path, map_location=DEVICE))\n",
    "#             final_met = evaluate_epoch(model, val_loader, crit, DEVICE)\n",
    "#         else:\n",
    "#             final_met = vmet\n",
    "\n",
    "#         results_summary[key] = {\n",
    "#             'Best Val F1': best_f1,\n",
    "#             'Final F1': final_met['f1'],\n",
    "#             'Final Precision': final_met['precision'],\n",
    "#             'Final Recall': final_met['recall'],\n",
    "#             'Final Accuracy': final_met['accuracy'],\n",
    "#             'Final AUC': final_met['auc'],\n",
    "#             'Final Loss': final_met['loss'],\n",
    "#         }\n",
    "#         print(f\"Results for {streams}: {results_summary[key]}\")\n",
    "\n",
    "#         del model, opt, crit, train_loader, curr_ds\n",
    "#         gc.collect()\n",
    "#         torch.cuda.empty_cache()\n",
    "#         time.sleep(1)\n",
    "\n",
    "#     # --- Print Summary Table ---\n",
    "#     print(\"\\n--- Ablation Study Summary ---\")\n",
    "#     if results_summary:\n",
    "#         # Filter out keys that are not tuples before creating DataFrame\n",
    "#         valid_results = {k: v for k, v in results_summary.items() if isinstance(k, tuple)}\n",
    "#         if not valid_results:\n",
    "#              print(\"No valid experiment results found in summary dictionary.\")\n",
    "#         else:\n",
    "#             summary_df = pd.DataFrame.from_dict(valid_results, orient='index')\n",
    "#             # Format index - ensure keys are tuples of strings before joining\n",
    "#             summary_df.index = [\", \".join(map(str, k)) for k in summary_df.index]\n",
    "#             cols_order = ['Best Val F1', 'Final F1', 'Final Recall', 'Final Precision', 'Final Accuracy', 'Final AUC', 'Final Loss']\n",
    "#             summary_df = summary_df[[col for col in cols_order if col in summary_df.columns]]\n",
    "#             summary_df = summary_df.sort_values(by='Best Val F1', ascending=False)\n",
    "#             print(summary_df.to_markdown(floatfmt=\".4f\"))\n",
    "#     else:\n",
    "#         print(\"No experiments were completed successfully.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "0e4100e0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T13:46:23.623833Z",
     "iopub.status.busy": "2025-05-01T13:46:23.623541Z",
     "iopub.status.idle": "2025-05-01T13:46:23.634142Z",
     "shell.execute_reply": "2025-05-01T13:46:23.633278Z"
    },
    "papermill": {
     "duration": 0.054189,
     "end_time": "2025-05-01T13:46:23.635514",
     "exception": false,
     "start_time": "2025-05-01T13:46:23.581325",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # --- IMPORTS ---------------------------------------------------------------\n",
    "# import torch\n",
    "# import torch.nn as nn\n",
    "# import torch.optim as optim\n",
    "# from torch.utils.data import Dataset, DataLoader        # keep DataLoader around\n",
    "# import xml.etree.ElementTree as ET\n",
    "# import os\n",
    "# import numpy as np\n",
    "# from tqdm.notebook import tqdm                         # progress-bar\n",
    "# import random, math, zipfile, cv2, pandas as pd\n",
    "# import matplotlib.pyplot as plt, seaborn as sns\n",
    "# import pickle, time, sys, gc\n",
    "\n",
    "# # ---------------------------------------------------------------------------\n",
    "# # Optional PIE utilities path (not required for visualisation-only script)\n",
    "# # pie_utilities_path = '/kaggle/working/PIE/utilities'\n",
    "# # if pie_utilities_path not in sys.path:\n",
    "# #     sys.path.insert(0, pie_utilities_path)\n",
    "# # try:\n",
    "# #     from pie_data import PIE\n",
    "# # except ImportError:\n",
    "# #     PIE = None\n",
    "# # ---------------------------------------------------------------------------\n",
    "\n",
    "# # ------------------------------- Configuration -----------------------------\n",
    "# VIDEO_ID_TO_PROCESS = \"video_0001\"\n",
    "# SET_ID_TO_PROCESS   = \"set01\"\n",
    "\n",
    "# # ------------------------------- Paths ------------------------------------\n",
    "# IMAGE_FRAME_DIR         = \"/kaggle/input/sample-images2/Frames\"\n",
    "# PIE_DATABASE_CACHE_PATH = \"/kaggle/input/pie-database/pie_database.pkl\"\n",
    "# SCALERS_PKL_PATH        = \"/kaggle/working/scalers.pkl\"\n",
    "# MODEL_PATH              = (\"/kaggle/input/best_model_ablation/pytorch/default/1/\"\n",
    "#                            \"best_model_bbox_ego_acc_ego_speed_ped_action_ped_look_static_context_ep1.pth\")\n",
    "# OUTPUT_VIDEO_PATH       = f\"/kaggle/working/{SET_ID_TO_PROCESS}_{VIDEO_ID_TO_PROCESS}_predictions.mp4\"\n",
    "\n",
    "# POSE_DATA_DIR = \"/kaggle/input/sample-poses\"   # <-- NEW: required for pose loading\n",
    "# # ---------------------------------------------------------------------------\n",
    "\n",
    "# # *** Define the streams this specific model was trained with ***\n",
    "# MODEL_ACTIVE_STREAMS = [\n",
    "#     \"bbox\",\n",
    "#     \"ego_speed\",\n",
    "#     \"ego_acc\",\n",
    "#     \"ped_action\",\n",
    "#     \"ped_look\",\n",
    "#     \"static_context\",\n",
    "# ]\n",
    "# print(f\"Model uses Active Streams: {MODEL_ACTIVE_STREAMS}\")\n",
    "\n",
    "# # -------------------- Model & dataset hyper-parameters --------------------\n",
    "# SEQ_LEN = 30\n",
    "# PRED_LEN = 1          # prediction at end of sequence\n",
    "\n",
    "# INPUT_SIZE_BBOX       = 4\n",
    "# INPUT_SIZE_POSE       = 34\n",
    "# INPUT_SIZE_EGO_SPEED  = 1\n",
    "# INPUT_SIZE_EGO_ACC    = 2\n",
    "# INPUT_SIZE_EGO_GYRO   = 1\n",
    "# INPUT_SIZE_PED_ACTION = 1\n",
    "# INPUT_SIZE_PED_LOOK   = 1\n",
    "# INPUT_SIZE_PED_OCC    = 1\n",
    "# INPUT_SIZE_TL_STATE   = 4\n",
    "\n",
    "# NUM_SIGNALIZED_CATS   = 4\n",
    "# NUM_INTERSECTION_CATS = 5\n",
    "# NUM_AGE_CATS          = 4\n",
    "# NUM_GENDER_CATS       = 3\n",
    "# NUM_TRAFFIC_DIR_CATS  = 2\n",
    "# LANE_CATEGORIES       = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 4, 7: 4, 8: 4}\n",
    "# NUM_LANE_CATS         = len(set(LANE_CATEGORIES.values()))\n",
    "# INPUT_SIZE_STATIC     = (NUM_SIGNALIZED_CATS + NUM_INTERSECTION_CATS + NUM_AGE_CATS\n",
    "#                          + NUM_GENDER_CATS + NUM_TRAFFIC_DIR_CATS + NUM_LANE_CATS)\n",
    "\n",
    "# LSTM_HIDDEN_SIZE = 256\n",
    "# NUM_LSTM_LAYERS  = 2\n",
    "# DROPOUT_RATE     = 0.3\n",
    "# NUM_CLASSES      = 2\n",
    "# ATTENTION_DIM    = 128\n",
    "\n",
    "# DEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# print(f\"Using device: {DEVICE}\")\n",
    "\n",
    "# # ----------------------------- label maps ---------------------------------\n",
    "# TL_STATE_MAP    = {\"__undefined__\": 0, \"red\": 1, \"yellow\": 2, \"green\": 3}\n",
    "# NUM_TL_STATES   = len(TL_STATE_MAP)\n",
    "# SIGNALIZED_MAP  = {\"n/a\": 0, \"C\": 1, \"S\": 2, \"CS\": 3}\n",
    "# INTERSECTION_MAP= {\"midblock\": 0, \"T\": 1, \"T-left\": 2, \"T-right\": 3, \"four-way\": 4}\n",
    "# AGE_MAP         = {\"child\": 0, \"young\": 1, \"adult\": 2, \"senior\": 3}\n",
    "# GENDER_MAP      = {\"n/a\": 0, \"female\": 1, \"male\": 2}\n",
    "# TRAFFIC_DIR_MAP = {\"OW\": 0, \"TW\": 1}\n",
    "\n",
    "# # ----------------------------- utilities ----------------------------------\n",
    "# def to_one_hot(index: int, num_classes: int) -> np.ndarray:\n",
    "#     vec = np.zeros(num_classes, dtype=np.float32)\n",
    "#     vec[int(np.clip(index, 0, num_classes - 1))] = 1.0\n",
    "#     return vec\n",
    "\n",
    "# ALL_POSSIBLE_STREAMS = [\n",
    "#     \"bbox\", \"pose\", \"ego_speed\", \"ego_acc\", \"ego_gyro\",\n",
    "#     \"ped_action\", \"ped_look\", \"ped_occlusion\", \"traffic_light\", \"static_context\",\n",
    "# ]\n",
    "\n",
    "# # ==========================================================================#\n",
    "# #                                DATASET                                    #\n",
    "# # ==========================================================================#\n",
    "# class PIEDatasetInference:\n",
    "#     def __init__(self, pie_database: dict, set_names: list[str],\n",
    "#                  pose_data_dir: str, scalers: dict | None = None):\n",
    "#         self.pie_db    = pie_database\n",
    "#         self.set_names = set_names\n",
    "#         self.pose_data_dir = pose_data_dir\n",
    "#         self.scalers   = scalers or {}\n",
    "#         self.all_pose_data = {}\n",
    "#         self._input_sizes_for_error = self._get_input_sizes_dict()\n",
    "#         self._load_pose_data()\n",
    "\n",
    "#     # ----------------------------------------------------------------------\n",
    "#     def _get_input_sizes_dict(self) -> dict[str, int]:\n",
    "#         input_sizes, special = {}, {\n",
    "#             \"TRAFFIC_LIGHT\": \"TL_STATE\",\n",
    "#             \"STATIC_CONTEXT\": \"STATIC\",\n",
    "#             \"EGO_SPEED\": \"EGO_SPEED\",\n",
    "#             \"EGO_ACC\": \"EGO_ACC\",\n",
    "#             \"EGO_GYRO\": \"EGO_GYRO\",\n",
    "#             \"PED_ACTION\": \"PED_ACTION\",\n",
    "#             \"PED_LOOK\": \"PED_LOOK\",\n",
    "#             \"PED_OCCLUSION\": \"PED_OCC\",\n",
    "#         }\n",
    "#         for stream in ALL_POSSIBLE_STREAMS:\n",
    "#             const_name = f\"INPUT_SIZE_{stream.upper()}\"\n",
    "#             suffix     = special.get(stream.upper())\n",
    "#             if suffix:\n",
    "#                 const_name = f\"INPUT_SIZE_{suffix}\"\n",
    "#             elif stream == \"bbox\":\n",
    "#                 const_name = \"INPUT_SIZE_BBOX\"\n",
    "#             elif stream == \"pose\":\n",
    "#                 const_name = \"INPUT_SIZE_POSE\"\n",
    "#             input_sizes[stream] = globals().get(const_name, 1)\n",
    "#         return input_sizes\n",
    "\n",
    "#     # ----------------------------------------------------------------------\n",
    "#     def _load_pose_data(self):\n",
    "#         print(\"Loading pose data (if available)...\")\n",
    "#         sets_loaded = 0\n",
    "#         for set_id in self.set_names:\n",
    "#             self.all_pose_data[set_id] = {}\n",
    "#             pose_set_path = os.path.join(self.pose_data_dir, set_id)\n",
    "#             if not os.path.isdir(pose_set_path):\n",
    "#                 continue\n",
    "\n",
    "#             pkl_files = [f for f in os.listdir(pose_set_path)\n",
    "#                          if f.startswith(f\"{set_id}_\") and f.endswith(\"_poses.pkl\")]\n",
    "\n",
    "#             loaded = 0\n",
    "#             for pkl_name in pkl_files:\n",
    "#                 pkl_path = os.path.join(pose_set_path, pkl_name)\n",
    "#                 try:\n",
    "#                     with open(pkl_path, \"rb\") as f:\n",
    "#                         loaded_pkl = pickle.load(f)\n",
    "#                     if len(loaded_pkl) != 1:\n",
    "#                         continue\n",
    "#                     video_key, video_data = list(loaded_pkl.items())[0]\n",
    "#                     video_id = \"_\".join(video_key.split(\"_\")[1:])\n",
    "#                     if video_id in self.pie_db.get(set_id, {}):\n",
    "#                         self.all_pose_data[set_id][video_id] = video_data\n",
    "#                         loaded += 1\n",
    "#                 except Exception as e:\n",
    "#                     print(f\"Pose load error {pkl_path}: {e}\")\n",
    "#             if loaded:\n",
    "#                 sets_loaded += 1\n",
    "#         print(f\"Finished loading pose data for {sets_loaded} set(s).\")\n",
    "\n",
    "#     # ----------------------------------------------------------------------\n",
    "#     def get_feature_sequence(\n",
    "#         self,\n",
    "#         set_id: str,\n",
    "#         video_id: str,\n",
    "#         ped_id: str,\n",
    "#         end_frame_num: int,\n",
    "#         seq_len: int,\n",
    "#         streams_needed: list[str],\n",
    "#     ):\n",
    "#         \"\"\"Return {stream: tensor[1, seq_len, dim]} or None if invalid.\"\"\"\n",
    "#         frames = list(range(end_frame_num - seq_len + 1, end_frame_num + 1))\n",
    "#         if frames[0] < 0:\n",
    "#             return None\n",
    "\n",
    "#         video_db   = self.pie_db.get(set_id, {}).get(video_id, {})\n",
    "#         ped_db     = video_db.get(\"ped_annotations\", {}).get(ped_id, {})\n",
    "#         ego_db     = video_db.get(\"vehicle_annotations\", {})\n",
    "#         traffic_db = video_db.get(\"traffic_annotations\", {})\n",
    "#         ped_attr   = ped_db.get(\"attributes\", {})\n",
    "\n",
    "#         feats = {s: [] for s in streams_needed}\n",
    "#         valid = True\n",
    "\n",
    "#         # static-context vector (once per sequence)\n",
    "#         static_vec = None\n",
    "#         if \"static_context\" in streams_needed:\n",
    "#             sig_idx = ped_attr.get(\"signalized\", 0)\n",
    "#             int_idx = ped_attr.get(\"intersection\", 0)\n",
    "#             age_idx = ped_attr.get(\"age\", 2)\n",
    "#             gen_idx = ped_attr.get(\"gender\", 0)\n",
    "#             td_idx  = int(ped_attr.get(\"traffic_direction\", 0))\n",
    "#             nl_cat  = LANE_CATEGORIES.get(\n",
    "#                 ped_attr.get(\"num_lanes\", 2),\n",
    "#                 LANE_CATEGORIES[max(LANE_CATEGORIES)],\n",
    "#             )\n",
    "#             static_vec = np.concatenate([\n",
    "#                 to_one_hot(sig_idx, NUM_SIGNALIZED_CATS),\n",
    "#                 to_one_hot(int_idx, NUM_INTERSECTION_CATS),\n",
    "#                 to_one_hot(age_idx, NUM_AGE_CATS),\n",
    "#                 to_one_hot(gen_idx, NUM_GENDER_CATS),\n",
    "#                 to_one_hot(td_idx, NUM_TRAFFIC_DIR_CATS),\n",
    "#                 to_one_hot(nl_cat, NUM_LANE_CATS),\n",
    "#             ])\n",
    "#             if static_vec.size != INPUT_SIZE_STATIC:\n",
    "#                 static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "\n",
    "#         # ----------------------- per-frame extraction ----------------------\n",
    "#         for f in frames:\n",
    "#             # index of this frame in pedestrian’s annotation list\n",
    "#             if \"frames\" in ped_db:\n",
    "#                 try:\n",
    "#                     frame_db_idx = ped_db[\"frames\"].index(f)\n",
    "#                 except ValueError:\n",
    "#                     valid = False\n",
    "#                     break\n",
    "#             else:\n",
    "#                 valid = False\n",
    "#                 break\n",
    "\n",
    "#             ego_frame = ego_db.get(f)\n",
    "\n",
    "#             if ego_frame is None and any(s in streams_needed\n",
    "#                                          for s in (\"ego_speed\", \"ego_acc\", \"ego_gyro\")):\n",
    "#                 valid = False\n",
    "#                 break\n",
    "\n",
    "#             # ---------- bbox ----------\n",
    "#             if \"bbox\" in streams_needed:\n",
    "#                 bbox_norm = np.zeros(INPUT_SIZE_BBOX, dtype=np.float32)\n",
    "#                 if \"bbox\" in ped_db and len(ped_db[\"bbox\"]) > frame_db_idx:\n",
    "#                     try:\n",
    "#                         x1, y1, x2, y2 = ped_db[\"bbox\"][frame_db_idx]\n",
    "#                         img_w = video_db.get(\"width\", 1920)\n",
    "#                         img_h = video_db.get(\"height\", 1080)\n",
    "#                         if img_w > 0 and img_h > 0:\n",
    "#                             cx = (x1 + x2) / 2 / img_w\n",
    "#                             cy = (y1 + y2) / 2 / img_h\n",
    "#                             w  = (x2 - x1) / img_w\n",
    "#                             h  = (y2 - y1) / img_h\n",
    "#                             if (\n",
    "#                                 w > 0\n",
    "#                                 and h > 0\n",
    "#                                 and 0 <= cx <= 1\n",
    "#                                 and 0 <= cy <= 1\n",
    "#                             ):\n",
    "#                                 bbox_norm = np.array([cx, cy, w, h], np.float32)\n",
    "#                     except Exception:\n",
    "#                         pass\n",
    "#                 feats[\"bbox\"].append(bbox_norm)\n",
    "\n",
    "#             # ---------- pose ----------\n",
    "#             if \"pose\" in streams_needed:\n",
    "#                 pose_vec = np.zeros(INPUT_SIZE_POSE, dtype=np.float32)\n",
    "#                 vid_pose = self.all_pose_data.get(set_id, {}).get(video_id, {})\n",
    "#                 frame_pose = vid_pose.get(f, {})\n",
    "#                 loaded_pose = frame_pose.get(ped_id)\n",
    "#                 if (loaded_pose is not None\n",
    "#                         and isinstance(loaded_pose, np.ndarray)\n",
    "#                         and loaded_pose.shape == (INPUT_SIZE_POSE,)):\n",
    "#                     pose_vec = loaded_pose\n",
    "#                 feats[\"pose\"].append(pose_vec)\n",
    "\n",
    "#             # ---------- ego streams ----------\n",
    "#             if \"ego_speed\" in streams_needed:\n",
    "#                 speed = ego_frame.get(\"OBD_speed\", 0.0)\n",
    "#                 if speed == 0.0:\n",
    "#                     speed = ego_frame.get(\"GPS_speed\", 0.0)\n",
    "#                 speed_scaled = ((speed - self.scalers.get(\"ego_speed_mean\", 0.0))\n",
    "#                                 / self.scalers.get(\"ego_speed_std\", 1.0))\n",
    "#                 feats[\"ego_speed\"].append([speed_scaled])\n",
    "\n",
    "#             if \"ego_acc\" in streams_needed:\n",
    "#                 acc_x = ego_frame.get(\"accX\", 0.0)\n",
    "#                 acc_y = ego_frame.get(\"accY\", 0.0)\n",
    "#                 feats[\"ego_acc\"].append([\n",
    "#                     (acc_x - self.scalers.get(\"accX_mean\", 0.0))\n",
    "#                     / self.scalers.get(\"accX_std\", 1.0),\n",
    "#                     (acc_y - self.scalers.get(\"accY_mean\", 0.0))\n",
    "#                     / self.scalers.get(\"accY_std\", 1.0),\n",
    "#                 ])\n",
    "\n",
    "#             if \"ego_gyro\" in streams_needed:\n",
    "#                 gyro_z = ego_frame.get(\"gyroZ\", 0.0)\n",
    "#                 gyro_z_scaled = ((gyro_z - self.scalers.get(\"gyroZ_mean\", 0.0))\n",
    "#                                  / self.scalers.get(\"gyroZ_std\", 1.0))\n",
    "#                 feats[\"ego_gyro\"].append([gyro_z_scaled])\n",
    "\n",
    "#             # ---------- pedestrian behaviour ----------\n",
    "#             if \"ped_action\" in streams_needed:\n",
    "#                 action_val = 0\n",
    "#                 if (\n",
    "#                     \"behavior\" in ped_db\n",
    "#                     and \"action\" in ped_db[\"behavior\"]\n",
    "#                     and len(ped_db[\"behavior\"][\"action\"]) > frame_db_idx\n",
    "#                 ):\n",
    "#                     action_val = ped_db[\"behavior\"][\"action\"][frame_db_idx]\n",
    "#                 feats[\"ped_action\"].append([float(action_val)])\n",
    "\n",
    "#             if \"ped_look\" in streams_needed:\n",
    "#                 look_val = 0\n",
    "#                 if (\n",
    "#                     \"behavior\" in ped_db\n",
    "#                     and \"look\" in ped_db[\"behavior\"]\n",
    "#                     and len(ped_db[\"behavior\"][\"look\"]) > frame_db_idx\n",
    "#                 ):\n",
    "#                     look_val = ped_db[\"behavior\"][\"look\"][frame_db_idx]\n",
    "#                 feats[\"ped_look\"].append([float(look_val)])\n",
    "\n",
    "#             if \"ped_occlusion\" in streams_needed:\n",
    "#                 occ = 0.0\n",
    "#                 if \"occlusion\" in ped_db and len(ped_db[\"occlusion\"]) > frame_db_idx:\n",
    "#                     occ_val = ped_db[\"occlusion\"][frame_db_idx]\n",
    "#                     occ = float(occ_val) / 2.0\n",
    "#                 feats[\"ped_occlusion\"].append([occ])\n",
    "\n",
    "#             # ---------- traffic light ----------\n",
    "#             if \"traffic_light\" in streams_needed:\n",
    "#                 state_int = 0\n",
    "#                 for obj_id, obj_data in traffic_db.items():\n",
    "#                     if (\n",
    "#                         obj_data.get(\"obj_class\") == \"traffic_light\"\n",
    "#                         and \"frames\" in obj_data\n",
    "#                         and \"state\" in obj_data\n",
    "#                     ):\n",
    "#                         try:\n",
    "#                             tl_idx   = obj_data[\"frames\"].index(f)\n",
    "#                             state_val = obj_data[\"state\"][tl_idx]\n",
    "#                             if state_val != 0:\n",
    "#                                 state_int = state_val\n",
    "#                                 break\n",
    "#                         except (ValueError, IndexError):\n",
    "#                             continue\n",
    "#                 feats[\"traffic_light\"].append(to_one_hot(state_int, NUM_TL_STATES))\n",
    "\n",
    "#             # ---------- static context ----------\n",
    "#             if \"static_context\" in streams_needed:\n",
    "#                 feats[\"static_context\"].append(\n",
    "#                     static_vec if static_vec is not None\n",
    "#                     else np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "#                 )\n",
    "\n",
    "#         # ------------------------------------------------------------------\n",
    "#         if not valid:\n",
    "#             return None\n",
    "\n",
    "#         try:\n",
    "#             out = {}\n",
    "#             for name in streams_needed:\n",
    "#                 tensor = torch.tensor(\n",
    "#                     np.array(feats[name], dtype=np.float32),\n",
    "#                     dtype=torch.float32,\n",
    "#                 ).unsqueeze(0)                           # add batch dim\n",
    "#                 exp_shape = (1, seq_len,\n",
    "#                              self._input_sizes_for_error.get(name, 1))\n",
    "#                 if tensor.shape != exp_shape:\n",
    "#                     print(f\"Shape mismatch {name}: {tensor.shape} vs {exp_shape}\")\n",
    "#                     return None\n",
    "#                 out[name] = tensor\n",
    "#             return out\n",
    "#         except Exception as e:\n",
    "#             print(f\"Sequence→tensor error: {e}\")\n",
    "#             return None\n",
    "\n",
    "# # ==========================================================================#\n",
    "# #                          MODEL ARCHITECTURE                               #\n",
    "# # ==========================================================================#\n",
    "# class Attention(nn.Module):\n",
    "#     def __init__(self, hidden_dim: int, att_dim: int):\n",
    "#         super().__init__()\n",
    "#         # must be called attention_net so the saved keys match:\n",
    "#         self.attention_net = nn.Sequential(\n",
    "#             nn.Linear(hidden_dim, att_dim),\n",
    "#             nn.Tanh(),\n",
    "#             nn.Linear(att_dim, 1),\n",
    "#         )\n",
    "\n",
    "#     def forward(self, lstm_out: torch.Tensor):\n",
    "#         # lstm_out: [B, T, 2H]\n",
    "#         att_scores  = self.attention_net(lstm_out).squeeze(2)   # [B, T]\n",
    "#         att_weights = torch.softmax(att_scores, dim=1)          # [B, T]\n",
    "#         ctx         = torch.sum(lstm_out * att_weights.unsqueeze(2), dim=1)\n",
    "#         return ctx, att_weights\n",
    "\n",
    "\n",
    "# class MultiStreamAdaptiveLSTM(nn.Module):\n",
    "#     def __init__(\n",
    "#         self,\n",
    "#         input_sizes: dict[str, int],\n",
    "#         lstm_hidden_size: int,\n",
    "#         num_lstm_layers: int,\n",
    "#         num_classes: int,\n",
    "#         attention_dim: int,\n",
    "#         dropout_rate: float,\n",
    "#         stream_names: list[str] | None = None,\n",
    "#     ):\n",
    "#         super().__init__()\n",
    "#         if not stream_names:\n",
    "#             raise ValueError(\"stream_names cannot be empty\")\n",
    "\n",
    "#         self.stream_names = list(stream_names)\n",
    "#         self.lstms       = nn.ModuleDict()\n",
    "#         self.attentions  = nn.ModuleDict()\n",
    "\n",
    "#         for name in self.stream_names:\n",
    "#             if name not in input_sizes:\n",
    "#                 raise KeyError(f\"Missing input size for stream '{name}'\")\n",
    "#             self.lstms[name] = nn.LSTM(\n",
    "#                 input_sizes[name],\n",
    "#                 lstm_hidden_size,\n",
    "#                 num_lstm_layers,\n",
    "#                 batch_first=True,\n",
    "#                 dropout=dropout_rate if num_lstm_layers > 1 else 0.0,\n",
    "#                 bidirectional=True,\n",
    "#             )\n",
    "#             self.attentions[name] = Attention(lstm_hidden_size * 2, attention_dim)\n",
    "\n",
    "#         combined_dim = lstm_hidden_size * 2 * len(self.stream_names)\n",
    "#         inter_dim    = max(num_classes * 4, combined_dim // 2)\n",
    "\n",
    "#         self.dropout = nn.Dropout(dropout_rate)\n",
    "#         self.fc1     = nn.Linear(combined_dim, inter_dim)\n",
    "#         self.relu    = nn.ReLU()\n",
    "#         self.fc2     = nn.Linear(inter_dim, num_classes)\n",
    "\n",
    "#     def forward(self, x_dict: dict[str, torch.Tensor]):\n",
    "#         ctx_list = []\n",
    "#         for name in self.stream_names:\n",
    "#             if name not in x_dict:\n",
    "#                 print(f\"Warning: missing stream '{name}' in forward()\")\n",
    "#                 continue\n",
    "#             lstm_out, _ = self.lstms[name](x_dict[name])\n",
    "#             ctx, _      = self.attentions[name](lstm_out)\n",
    "#             ctx_list.append(ctx)\n",
    "\n",
    "#         if not ctx_list:\n",
    "#             raise RuntimeError(\"No stream outputs generated\")\n",
    "\n",
    "#         fused = torch.cat(ctx_list, dim=1)\n",
    "#         out   = self.dropout(fused)\n",
    "#         out   = self.relu(self.fc1(out))\n",
    "#         out   = self.dropout(out)\n",
    "#         logits= self.fc2(out)\n",
    "#         return logits\n",
    "\n",
    "# # ==========================================================================#\n",
    "# #                              MAIN SCRIPT                                  #\n",
    "# # ==========================================================================#\n",
    "# if __name__ == \"__main__\":\n",
    "\n",
    "#     # --------------------- load PIE database ------------------------------\n",
    "#     print(\"\\nLoading PIE database cache …\")\n",
    "#     if not os.path.exists(PIE_DATABASE_CACHE_PATH):\n",
    "#         raise FileNotFoundError(\"PIE database cache not found.\")\n",
    "#     with open(PIE_DATABASE_CACHE_PATH, \"rb\") as f:\n",
    "#         pie_database = pickle.load(f)\n",
    "#     print(\" -> database loaded.\")\n",
    "\n",
    "#     # --------------------- load scalers -----------------------------------\n",
    "#     print(f\"\\nLoading scalers from {SCALERS_PKL_PATH}\")\n",
    "#     try:\n",
    "#         with open(SCALERS_PKL_PATH, \"rb\") as f:\n",
    "#             scalers = pickle.load(f)\n",
    "#         print(\" -> scalers loaded.\")\n",
    "#     except FileNotFoundError:\n",
    "#         sys.exit(f\"ERROR: Scalers file not found at {SCALERS_PKL_PATH}\")\n",
    "\n",
    "#     # --------------------- helper dataset ---------------------------------\n",
    "#     print(\"\\nInitialising dataset helper …\")\n",
    "#     dataset_helper = PIEDatasetInference(\n",
    "#         pie_database, [SET_ID_TO_PROCESS], POSE_DATA_DIR, scalers\n",
    "#     )\n",
    "#     print(\"Helper dataset ready.\")\n",
    "\n",
    "#     # --------------------- build model ------------------------------------\n",
    "#     print(\"\\nBuilding model …\")\n",
    "#     input_sizes = {}\n",
    "#     special = {\n",
    "#         \"TRAFFIC_LIGHT\": \"TL_STATE\",\n",
    "#         \"STATIC_CONTEXT\": \"STATIC\",\n",
    "#         \"EGO_SPEED\": \"EGO_SPEED\",\n",
    "#         \"EGO_ACC\": \"EGO_ACC\",\n",
    "#         \"EGO_GYRO\": \"EGO_GYRO\",\n",
    "#         \"PED_ACTION\": \"PED_ACTION\",\n",
    "#         \"PED_LOOK\": \"PED_LOOK\",\n",
    "#         \"PED_OCCLUSION\": \"PED_OCC\",\n",
    "#     }\n",
    "#     for s in MODEL_ACTIVE_STREAMS:\n",
    "#         cname = f\"INPUT_SIZE_{s.upper()}\"\n",
    "#         suff  = special.get(s.upper())\n",
    "#         if suff:\n",
    "#             cname = f\"INPUT_SIZE_{suff}\"\n",
    "#         elif s == \"bbox\":\n",
    "#             cname = \"INPUT_SIZE_BBOX\"\n",
    "#         elif s == \"pose\":\n",
    "#             cname = \"INPUT_SIZE_POSE\"\n",
    "#         if cname not in globals():\n",
    "#             raise ValueError(f\"Missing constant {cname}\")\n",
    "#         input_sizes[s] = globals()[cname]\n",
    "\n",
    "#     model = MultiStreamAdaptiveLSTM(\n",
    "#         input_sizes,\n",
    "#         LSTM_HIDDEN_SIZE,\n",
    "#         NUM_LSTM_LAYERS,\n",
    "#         NUM_CLASSES,\n",
    "#         ATTENTION_DIM,\n",
    "#         DROPOUT_RATE,\n",
    "#         MODEL_ACTIVE_STREAMS,\n",
    "#     ).to(DEVICE)\n",
    "\n",
    "#     # --------------------- load weights -----------------------------------\n",
    "#     print(f\"\\nLoading weights from {MODEL_PATH}\")\n",
    "#     if not os.path.exists(MODEL_PATH):\n",
    "#         raise FileNotFoundError(f\"Model file not found: {MODEL_PATH}\")\n",
    "#     model.load_state_dict(torch.load(MODEL_PATH, map_location=DEVICE))\n",
    "#     model.eval()\n",
    "#     print(\" -> model ready.\")\n",
    "\n",
    "#     # --------------------- collect annotated frames -----------------------\n",
    "#     print(f\"\\nScanning annotations for {SET_ID_TO_PROCESS}/{VIDEO_ID_TO_PROCESS} …\")\n",
    "#     ped_ann = (pie_database\n",
    "#                .get(SET_ID_TO_PROCESS, {})\n",
    "#                .get(VIDEO_ID_TO_PROCESS, {})\n",
    "#                .get(\"ped_annotations\", {}))\n",
    "#     if not ped_ann:\n",
    "#         raise ValueError(\"No pedestrian annotations found.\")\n",
    "\n",
    "#     annotated = set()\n",
    "#     for ped_data in ped_ann.values():\n",
    "#         annotated.update(ped_data.get(\"frames\", []))\n",
    "#     frames_sorted = sorted(annotated)\n",
    "#     if not frames_sorted:\n",
    "#         raise ValueError(\"No annotated frames found.\")\n",
    "#     print(f\" -> found {len(frames_sorted)} frames.\")\n",
    "\n",
    "#     # --------------------- inference --------------------------------------\n",
    "#     print(\"\\nRunning inference on annotated frames …\")\n",
    "#     preds_per_frame, error_frames = {}, 0\n",
    "\n",
    "#     with torch.no_grad():\n",
    "#         for fnum in tqdm(frames_sorted, desc=\"Predicting\"):\n",
    "#             preds_per_frame[fnum] = {}\n",
    "#             peds_here = [\n",
    "#                 pid for pid, pdata in ped_ann.items()\n",
    "#                 if fnum in pdata.get(\"frames\", [])\n",
    "#             ]\n",
    "#             for pid in peds_here:\n",
    "#                 seq = dataset_helper.get_feature_sequence(\n",
    "#                     SET_ID_TO_PROCESS,\n",
    "#                     VIDEO_ID_TO_PROCESS,\n",
    "#                     pid,\n",
    "#                     fnum,\n",
    "#                     SEQ_LEN,\n",
    "#                     MODEL_ACTIVE_STREAMS,\n",
    "#                 )\n",
    "#                 if seq is None:\n",
    "#                     preds_per_frame[fnum][pid] = -1\n",
    "#                     continue\n",
    "#                 try:\n",
    "#                     seq = {k: v.to(DEVICE) for k, v in seq.items()}\n",
    "#                     logits = model(seq)\n",
    "#                     prob   = torch.softmax(logits, dim=1)\n",
    "#                     pred   = torch.argmax(prob, dim=1).item()\n",
    "#                     preds_per_frame[fnum][pid] = pred\n",
    "#                 except Exception as e:\n",
    "#                     print(f\"Inference error F{fnum} P{pid}: {e}\")\n",
    "#                     preds_per_frame[fnum][pid] = -1\n",
    "#                     error_frames += 1\n",
    "\n",
    "#     print(f\"Predictions complete. Errors on {error_frames} instances.\")\n",
    "\n",
    "# # -------------------------------------------------------------------------\n",
    "# # ------- Create & write the *annotated-only* video  -----------------------\n",
    "# print(f\"\\nCreating video with annotated frames only → {OUTPUT_VIDEO_PATH}\")\n",
    "\n",
    "# # Use the first annotated frame to get size\n",
    "# first_annotated_idx = frames_sorted[0] - 1        # convert 1-based → 0-based file index\n",
    "# first_frame_path    = os.path.join(\n",
    "#     IMAGE_FRAME_DIR, f\"frame_{first_annotated_idx:05d}.jpg\"\n",
    "# )\n",
    "# sample_img = cv2.imread(first_frame_path)\n",
    "# if sample_img is None:\n",
    "#     raise IOError(f\"Could not read first annotated frame: {first_frame_path}\")\n",
    "# height, width, _ = sample_img.shape\n",
    "# print(f\" -> video size {width}×{height}, total annotated frames {len(frames_sorted)}\")\n",
    "\n",
    "# fourcc = cv2.VideoWriter_fourcc(*\"mp4v\")\n",
    "# fps    = 30                                   # keep whatever FPS you prefer\n",
    "# writer = cv2.VideoWriter(OUTPUT_VIDEO_PATH, fourcc, fps, (width, height))\n",
    "# if not writer.isOpened():\n",
    "#     raise IOError(\"Could not open cv2 VideoWriter\")\n",
    "\n",
    "# # colours\n",
    "# col_nc, col_cr, col_un = (0,255,0), (0,0,255), (255,255,0)\n",
    "\n",
    "# for lookup in tqdm(frames_sorted, desc=\"Writing video\"):\n",
    "#     idx = lookup - 1                          # image file index (0-based)\n",
    "#     img_path = os.path.join(IMAGE_FRAME_DIR, f\"frame_{idx:05d}.jpg\")\n",
    "\n",
    "#     frame = cv2.imread(img_path)\n",
    "#     if frame is None:\n",
    "#         frame = np.zeros((height, width, 3), np.uint8)\n",
    "\n",
    "#     # draw predictions\n",
    "#     preds_here = preds_per_frame.get(lookup, {})\n",
    "#     for pid, bbox in [\n",
    "#         (pid, pdata[\"bbox\"][pdata[\"frames\"].index(lookup)])\n",
    "#         for pid, pdata in ped_ann.items()\n",
    "#         if lookup in pdata.get(\"frames\", [])\n",
    "#     ]:\n",
    "#         pred = preds_here.get(pid, -1)\n",
    "#         colour, label = (col_un, \"Unknown\")\n",
    "#         if pred == 0:\n",
    "#             colour, label = (col_nc, \"Not Crossing\")\n",
    "#         elif pred == 1:\n",
    "#             colour, label = (col_cr, \"Crossing\")\n",
    "\n",
    "#         try:\n",
    "#             x1, y1, x2, y2 = map(int, bbox)\n",
    "#             cv2.rectangle(frame, (x1, y1), (x2, y2), colour, 2)\n",
    "#             cv2.putText(frame, label, (x1, y1 - 10),\n",
    "#                         cv2.FONT_HERSHEY_SIMPLEX, 0.6, colour, 2)\n",
    "#         except Exception:\n",
    "#             pass\n",
    "\n",
    "#     writer.write(frame)\n",
    "\n",
    "# writer.release()\n",
    "# print(f\"\\nAnnotated-only video saved to: {OUTPUT_VIDEO_PATH}\")\n",
    "# # -------------------------------------------------------------------------\n",
    "\n",
    "# print(\"\\n--- Visualisation script finished ---\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f09083f7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T13:46:23.655846Z",
     "iopub.status.busy": "2025-05-01T13:46:23.655571Z",
     "iopub.status.idle": "2025-05-01T13:57:52.848662Z",
     "shell.execute_reply": "2025-05-01T13:57:52.847695Z"
    },
    "papermill": {
     "duration": 689.204823,
     "end_time": "2025-05-01T13:57:52.850062",
     "exception": false,
     "start_time": "2025-05-01T13:46:23.645239",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- DATA PREPARATION ---\n",
      "Loading PIE database cache …\n",
      "✓ PIE DB loaded.\n",
      "\n",
      "Computing scalers …\n",
      "Scalers: {'ego_speed_mean': 13.428368358531902, 'ego_speed_std': 13.306451814881573, 'accX_mean': -0.028068299916188515, 'accX_std': 0.07827638994593288, 'accY_mean': -0.5235171297788667, 'accY_std': 0.8514409917161664, 'gyroZ_mean': -0.037905654051963104, 'gyroZ_std': 4.475510697376237}\n",
      "\n",
      "Extracting training sequences (all streams) …\n",
      "Loading pose PKLs …\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "68292e89e36b4bc4879caa5b4263c319",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "67dbd1aaf0594b189b92f534bc8eb66d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ccea5a9a578a43a8a80adb69ac846c45",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enumerating sequences …\n",
      "Total sequences: 281342\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b83c4990b89847e1bbeb3ce985f40ba3",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "seq:   0%|          | 0/281342 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Raw training samples: 281342\n",
      "Balanced: 1s=51749 | 0s=51749\n",
      "\n",
      "Saving balanced data …\n",
      "✓ /kaggle/working/balanced_train_data.pkl\n",
      "Saving scalers …\n",
      "✓ /kaggle/working/scalers.pkl\n",
      "\n",
      "--- DATA PREPARATION COMPLETE ---\n"
     ]
    }
   ],
   "source": [
    "# -----------------------------------------------------------------------------\n",
    "# CELL 1: DATA PREPARATION & BALANCING  (run once before training)\n",
    "# -----------------------------------------------------------------------------\n",
    "#  This cell:\n",
    "#    1. Loads (or regenerates) the PIE database\n",
    "#    2. Computes per-signal standardisation scalers\n",
    "#    3. Extracts ALL training sequences for every stream\n",
    "#    4. Balances the dataset 50 / 50 on the crossing label\n",
    "#    5. Writes two pickles:\n",
    "#         - /kaggle/working/balanced_train_data.pkl\n",
    "#         - /kaggle/working/scalers.pkl\n",
    "# -----------------------------------------------------------------------------\n",
    "\n",
    "import os\n",
    "import sys\n",
    "import time\n",
    "import pickle\n",
    "import gc\n",
    "from pathlib import Path\n",
    "\n",
    "import cv2                               # used internally by PIE utilities\n",
    "import numpy as np\n",
    "import torch\n",
    "from torch.utils.data import Dataset\n",
    "from tqdm.notebook import tqdm\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                                PIE utilities                                 #\n",
    "# -----------------------------------------------------------------------------#\n",
    "pie_utilities_path = \"/kaggle/working/PIE/utilities\"\n",
    "if pie_utilities_path not in sys.path:\n",
    "    sys.path.insert(0, pie_utilities_path)\n",
    "\n",
    "try:\n",
    "    from pie_data import PIE\n",
    "except ImportError as e:\n",
    "    print(\n",
    "        f\"[WARN] Could not import PIE from {pie_utilities_path}. \"\n",
    "        f\"If the DB cache already exists this is fine.\\n→ {e}\"\n",
    "    )\n",
    "    PIE = None\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                              configuration                                   #\n",
    "# -----------------------------------------------------------------------------#\n",
    "PIE_ROOT_PATH           = \"/kaggle/working/PIE\"\n",
    "POSE_DATA_DIR           = \"/kaggle/input/pose-data/extracted_poses2\"\n",
    "PIE_DATABASE_CACHE_PATH = \"/kaggle/input/pie-database/pie_database.pkl\"\n",
    "\n",
    "TRAIN_SETS_STR = [\"set01\", \"set02\", \"set04\"]\n",
    "\n",
    "BALANCED_DATA_PKL_PATH  = \"/kaggle/working/balanced_train_data.pkl\"\n",
    "SCALERS_PKL_PATH        = \"/kaggle/working/scalers.pkl\"\n",
    "\n",
    "# Streams used throughout the project ----------------------------------------\n",
    "ALL_POSSIBLE_STREAMS = [\n",
    "    \"bbox\",\n",
    "    \"pose\",\n",
    "    \"ego_speed\",\n",
    "    \"ego_acc\",\n",
    "    \"ego_gyro\",\n",
    "    \"ped_action\",\n",
    "    \"ped_look\",\n",
    "    \"ped_occlusion\",\n",
    "    \"traffic_light\",\n",
    "    \"static_context\",\n",
    "]\n",
    "\n",
    "# Feature sizes & categorical constants --------------------------------------\n",
    "SEQ_LEN, PRED_LEN = 30, 60\n",
    "\n",
    "INPUT_SIZE_BBOX       = 4\n",
    "INPUT_SIZE_POSE       = 34\n",
    "INPUT_SIZE_EGO_SPEED  = 1\n",
    "INPUT_SIZE_EGO_ACC    = 2\n",
    "INPUT_SIZE_EGO_GYRO   = 1\n",
    "INPUT_SIZE_PED_ACTION = 1\n",
    "INPUT_SIZE_PED_LOOK   = 1\n",
    "INPUT_SIZE_PED_OCC    = 1\n",
    "INPUT_SIZE_TL_STATE   = 4\n",
    "\n",
    "NUM_SIGNALIZED_CATS   = 4\n",
    "NUM_INTERSECTION_CATS = 5\n",
    "NUM_AGE_CATS          = 4\n",
    "NUM_GENDER_CATS       = 3\n",
    "NUM_TRAFFIC_DIR_CATS  = 2\n",
    "\n",
    "LANE_CATEGORIES = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 4, 7: 4, 8: 4}\n",
    "NUM_LANE_CATS   = len(set(LANE_CATEGORIES.values()))\n",
    "\n",
    "INPUT_SIZE_STATIC = (\n",
    "    NUM_SIGNALIZED_CATS\n",
    "    + NUM_INTERSECTION_CATS\n",
    "    + NUM_AGE_CATS\n",
    "    + NUM_GENDER_CATS\n",
    "    + NUM_TRAFFIC_DIR_CATS\n",
    "    + NUM_LANE_CATS\n",
    ")  # → 23\n",
    "\n",
    "TL_STATE_MAP = {\"__undefined__\": 0, \"red\": 1, \"yellow\": 2, \"green\": 3}\n",
    "NUM_TL_STATES = len(TL_STATE_MAP)\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                               helper utils                                   #\n",
    "# -----------------------------------------------------------------------------#\n",
    "\n",
    "\n",
    "def to_one_hot(index: int, num_classes: int) -> np.ndarray:\n",
    "    vec = np.zeros(num_classes, dtype=np.float32)\n",
    "    vec[int(np.clip(index, 0, num_classes - 1))] = 1.0\n",
    "    return vec\n",
    "\n",
    "\n",
    "def balance_samples_count(seq_data: dict, label_key: str, seed: int = 42) -> dict:\n",
    "    \"\"\"Undersample majority class so positive and negative labels are equal.\"\"\"\n",
    "    labels = [lbl[0] for lbl in seq_data[label_key]]\n",
    "    n_pos  = int(np.sum(labels))\n",
    "    n_neg  = len(labels) - n_pos\n",
    "\n",
    "    if n_pos == n_neg:\n",
    "        print(\"Dataset already balanced.\")\n",
    "        return seq_data.copy()\n",
    "\n",
    "    majority_label    = 0 if n_neg > n_pos else 1\n",
    "    minority_count    = min(n_pos, n_neg)\n",
    "    majority_indices  = np.where(np.array(labels) == majority_label)[0]\n",
    "    minority_indices  = np.where(np.array(labels) != majority_label)[0]\n",
    "\n",
    "    rng = np.random.default_rng(seed)\n",
    "    keep_majority = rng.choice(majority_indices, size=minority_count, replace=False)\n",
    "    final_indices = np.concatenate([minority_indices, keep_majority])\n",
    "    rng.shuffle(final_indices)\n",
    "\n",
    "    balanced = {}\n",
    "    for k, v in seq_data.items():\n",
    "        balanced[k] = [v[i] for i in final_indices]\n",
    "\n",
    "    print(f\"Balanced: 1s={minority_count} | 0s={minority_count}\")\n",
    "    return balanced\n",
    "\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                                PIEDataset                                    #\n",
    "# -----------------------------------------------------------------------------#\n",
    "class PIEDataset(Dataset):\n",
    "    \"\"\"\n",
    "    Lightweight dataset that can generate any subset of the PIE feature streams.\n",
    "    \"\"\"\n",
    "\n",
    "    def __init__(\n",
    "        self,\n",
    "        pie_db: dict,\n",
    "        set_names: list[str],\n",
    "        pose_dir: str,\n",
    "        seq_len: int,\n",
    "        pred_len: int,\n",
    "        scalers: dict,\n",
    "        streams_to_generate: list[str],\n",
    "    ):\n",
    "        self.pie_db            = pie_db\n",
    "        self.set_names         = set_names\n",
    "        self.pose_dir          = pose_dir\n",
    "        self.seq_len           = seq_len\n",
    "        self.pred_len          = pred_len\n",
    "        self.scalers           = scalers\n",
    "        self.streams           = streams_to_generate\n",
    "        self._input_sizes      = self._build_input_size_map()\n",
    "        self.all_pose_data     = {}\n",
    "        self.sequences         = []\n",
    "\n",
    "        if \"pose\" in self.streams:\n",
    "            self._load_pose_pkls()\n",
    "        self._enumerate_sequences()\n",
    "\n",
    "    # ------------------------ internal helpers -------------------------------\n",
    "    def _build_input_size_map(self) -> dict:\n",
    "        special = {\n",
    "            \"TRAFFIC_LIGHT\": \"TL_STATE\",\n",
    "            \"STATIC_CONTEXT\": \"STATIC\",\n",
    "            \"EGO_SPEED\": \"EGO_SPEED\",\n",
    "            \"EGO_ACC\": \"EGO_ACC\",\n",
    "            \"EGO_GYRO\": \"EGO_GYRO\",\n",
    "            \"PED_ACTION\": \"PED_ACTION\",\n",
    "            \"PED_LOOK\": \"PED_LOOK\",\n",
    "            \"PED_OCCLUSION\": \"PED_OCC\",\n",
    "        }\n",
    "        sizes = {}\n",
    "        for s in ALL_POSSIBLE_STREAMS:\n",
    "            const = f\"INPUT_SIZE_{special.get(s.upper(), s.upper())}\"\n",
    "            if s == \"bbox\":\n",
    "                const = \"INPUT_SIZE_BBOX\"\n",
    "            elif s == \"pose\":\n",
    "                const = \"INPUT_SIZE_POSE\"\n",
    "            sizes[s] = globals().get(const, 1)\n",
    "        return sizes\n",
    "\n",
    "    def _load_pose_pkls(self):\n",
    "        print(\"Loading pose PKLs …\")\n",
    "        for set_id in self.set_names:\n",
    "            set_dir = Path(self.pose_dir) / set_id\n",
    "            if not set_dir.is_dir():\n",
    "                continue\n",
    "            self.all_pose_data[set_id] = {}\n",
    "            for pkl_path in tqdm(set_dir.glob(f\"{set_id}_*_poses.pkl\"), leave=False):\n",
    "                try:\n",
    "                    with open(pkl_path, \"rb\") as fp:\n",
    "                        loaded = pickle.load(fp)\n",
    "                except Exception as e:\n",
    "                    print(f\"[pose load] {pkl_path}: {e}\")\n",
    "                    continue\n",
    "\n",
    "                if len(loaded) != 1:\n",
    "                    continue\n",
    "                (key, data), *_ = loaded.items()\n",
    "                vid = \"_\".join(key.split(\"_\")[1:])\n",
    "                if vid in self.pie_db.get(set_id, {}):\n",
    "                    self.all_pose_data[set_id][vid] = data\n",
    "\n",
    "    def _enumerate_sequences(self):\n",
    "        print(\"Enumerating sequences …\")\n",
    "        for set_id in self.set_names:\n",
    "            for vid, vdb in self.pie_db.get(set_id, {}).items():\n",
    "                for pid, pdb in vdb.get(\"ped_annotations\", {}).items():\n",
    "                    frames = pdb.get(\"frames\", [])\n",
    "                    if len(frames) < self.seq_len + self.pred_len:\n",
    "                        continue\n",
    "                    frames = sorted(frames)\n",
    "                    for i in range(len(frames) - self.seq_len - self.pred_len + 1):\n",
    "                        start = frames[i]\n",
    "                        obs_end = frames[i + self.seq_len - 1]\n",
    "                        if obs_end - start != self.seq_len - 1:\n",
    "                            continue\n",
    "                        target = frames[i + self.seq_len + self.pred_len - 1]\n",
    "                        if target - obs_end != self.pred_len:\n",
    "                            continue\n",
    "                        self.sequences.append((set_id, vid, pid, start))\n",
    "        print(f\"Total sequences: {len(self.sequences)}\")\n",
    "\n",
    "    # ------------------ Dataset API ------------------------------------------\n",
    "    def __len__(self):\n",
    "        return len(self.sequences)\n",
    "\n",
    "    def __getitem__(self, idx: int):\n",
    "        set_id, vid, pid, start = self.sequences[idx]\n",
    "        vdb  = self.pie_db[set_id][vid]\n",
    "        pdb  = vdb[\"ped_annotations\"][pid]\n",
    "        ego  = vdb.get(\"vehicle_annotations\", {})\n",
    "        tldb = vdb.get(\"traffic_annotations\", {})\n",
    "\n",
    "        frame_nums = list(range(start, start + self.seq_len))\n",
    "        target_f   = start + self.seq_len + self.pred_len - 1\n",
    "\n",
    "        # label ---------------------------------------------------------------\n",
    "        label = 0\n",
    "        if (\n",
    "            \"frames\" in pdb\n",
    "            and \"behavior\" in pdb\n",
    "            and \"cross\" in pdb[\"behavior\"]\n",
    "            and target_f in pdb[\"frames\"]\n",
    "        ):\n",
    "            try:\n",
    "                j = pdb[\"frames\"].index(target_f)\n",
    "                label = pdb[\"behavior\"][\"cross\"][j]\n",
    "                if label == -1:\n",
    "                    label = 0\n",
    "            except (ValueError, IndexError):\n",
    "                pass\n",
    "\n",
    "        # static context ------------------------------------------------------\n",
    "        static_vec = np.zeros(INPUT_SIZE_STATIC, np.float32)\n",
    "        if \"static_context\" in self.streams:\n",
    "            attr  = pdb.get(\"attributes\", {})\n",
    "            sig   = attr.get(\"signalized\", 0)\n",
    "            intr  = attr.get(\"intersection\", 0)\n",
    "            age   = attr.get(\"age\", 2)\n",
    "            gen   = attr.get(\"gender\", 0)\n",
    "            tdir  = int(attr.get(\"traffic_direction\", 0))\n",
    "            ln    = attr.get(\"num_lanes\", 2)\n",
    "            lncat = LANE_CATEGORIES.get(ln, LANE_CATEGORIES[max(LANE_CATEGORIES)])\n",
    "            static_vec = np.concatenate(\n",
    "                [\n",
    "                    to_one_hot(sig,  NUM_SIGNALIZED_CATS),\n",
    "                    to_one_hot(intr, NUM_INTERSECTION_CATS),\n",
    "                    to_one_hot(age,  NUM_AGE_CATS),\n",
    "                    to_one_hot(gen,  NUM_GENDER_CATS),\n",
    "                    to_one_hot(tdir, NUM_TRAFFIC_DIR_CATS),\n",
    "                    to_one_hot(lncat, NUM_LANE_CATS),\n",
    "                ]\n",
    "            ).astype(np.float32)\n",
    "\n",
    "        # per-frame feature assembly -----------------------------------------\n",
    "        feats = {s: [] for s in self.streams}\n",
    "\n",
    "        for fn in frame_nums:\n",
    "            fidx = -1\n",
    "            if \"frames\" in pdb:\n",
    "                try:\n",
    "                    fidx = pdb[\"frames\"].index(fn)\n",
    "                except ValueError:\n",
    "                    pass\n",
    "\n",
    "            ego_f = ego.get(fn, {})\n",
    "\n",
    "            # bbox ----------------------------------------------------------\n",
    "            if \"bbox\" in self.streams:\n",
    "                bb = np.zeros(INPUT_SIZE_BBOX, np.float32)\n",
    "                if (\n",
    "                    fidx != -1\n",
    "                    and \"bbox\" in pdb\n",
    "                    and len(pdb[\"bbox\"]) > fidx\n",
    "                ):\n",
    "                    try:\n",
    "                        x1, y1, x2, y2 = pdb[\"bbox\"][fidx]\n",
    "                        w_img = vdb.get(\"width\", 1920)\n",
    "                        h_img = vdb.get(\"height\", 1080)\n",
    "                        if w_img > 0 and h_img > 0:\n",
    "                            cx = ((x1 + x2) / 2) / w_img\n",
    "                            cy = ((y1 + y2) / 2) / h_img\n",
    "                            w  = (x2 - x1) / w_img\n",
    "                            h  = (y2 - y1) / h_img\n",
    "                            if 0 < w and 0 < h and 0 <= cx <= 1 and 0 <= cy <= 1:\n",
    "                                bb = np.array([cx, cy, w, h], np.float32)\n",
    "                    except Exception:\n",
    "                        pass\n",
    "                feats[\"bbox\"].append(bb)\n",
    "\n",
    "            # pose ----------------------------------------------------------\n",
    "            if \"pose\" in self.streams:\n",
    "                pvec = np.zeros(INPUT_SIZE_POSE, np.float32)\n",
    "                pose_set = self.all_pose_data.get(set_id, {}).get(vid, {})\n",
    "                p_loaded = pose_set.get(fn, {}).get(pid)\n",
    "                if (\n",
    "                    isinstance(p_loaded, np.ndarray)\n",
    "                    and p_loaded.shape == (INPUT_SIZE_POSE,)\n",
    "                ):\n",
    "                    pvec = p_loaded\n",
    "                feats[\"pose\"].append(pvec)\n",
    "\n",
    "            # ego signals ---------------------------------------------------\n",
    "            if \"ego_speed\" in self.streams:\n",
    "                s = ego_f.get(\"OBD_speed\", 0.0) or ego_f.get(\"GPS_speed\", 0.0)\n",
    "                s = (s - self.scalers.get(\"ego_speed_mean\", 0.0)) / self.scalers.get(\n",
    "                    \"ego_speed_std\", 1.0\n",
    "                )\n",
    "                feats[\"ego_speed\"].append([s])\n",
    "\n",
    "            if \"ego_acc\" in self.streams:\n",
    "                ax = ego_f.get(\"accX\", 0.0)\n",
    "                ay = ego_f.get(\"accY\", 0.0)\n",
    "                ax = (ax - self.scalers.get(\"accX_mean\", 0.0)) / self.scalers.get(\n",
    "                    \"accX_std\", 1.0\n",
    "                )\n",
    "                ay = (ay - self.scalers.get(\"accY_mean\", 0.0)) / self.scalers.get(\n",
    "                    \"accY_std\", 1.0\n",
    "                )\n",
    "                feats[\"ego_acc\"].append([ax, ay])\n",
    "\n",
    "            if \"ego_gyro\" in self.streams:\n",
    "                gz = ego_f.get(\"gyroZ\", 0.0)\n",
    "                gz = (gz - self.scalers.get(\"gyroZ_mean\", 0.0)) / self.scalers.get(\n",
    "                    \"gyroZ_std\", 1.0\n",
    "                )\n",
    "                feats[\"ego_gyro\"].append([gz])\n",
    "\n",
    "            # pedestrian behaviour -----------------------------------------\n",
    "            if \"ped_action\" in self.streams:\n",
    "                action = (\n",
    "                    pdb[\"behavior\"][\"action\"][fidx]\n",
    "                    if fidx != -1\n",
    "                    and \"behavior\" in pdb\n",
    "                    and \"action\" in pdb[\"behavior\"]\n",
    "                    and len(pdb[\"behavior\"][\"action\"]) > fidx\n",
    "                    else 0\n",
    "                )\n",
    "                feats[\"ped_action\"].append([float(action)])\n",
    "\n",
    "            if \"ped_look\" in self.streams:\n",
    "                look = (\n",
    "                    pdb[\"behavior\"][\"look\"][fidx]\n",
    "                    if fidx != -1\n",
    "                    and \"behavior\" in pdb\n",
    "                    and \"look\" in pdb[\"behavior\"]\n",
    "                    and len(pdb[\"behavior\"][\"look\"]) > fidx\n",
    "                    else 0\n",
    "                )\n",
    "                feats[\"ped_look\"].append([float(look)])\n",
    "\n",
    "            if \"ped_occlusion\" in self.streams:\n",
    "                occ = (\n",
    "                    float(pdb[\"occlusion\"][fidx]) / 2.0\n",
    "                    if fidx != -1\n",
    "                    and \"occlusion\" in pdb\n",
    "                    and len(pdb[\"occlusion\"]) > fidx\n",
    "                    else 0.0\n",
    "                )\n",
    "                feats[\"ped_occlusion\"].append([occ])\n",
    "\n",
    "            # traffic light -------------------------------------------------\n",
    "            if \"traffic_light\" in self.streams:\n",
    "                tl_state = 0\n",
    "                for obj in tldb.values():\n",
    "                    if obj.get(\"obj_class\") != \"traffic_light\":\n",
    "                        continue\n",
    "                    if \"frames\" not in obj or \"state\" not in obj:\n",
    "                        continue\n",
    "                    try:\n",
    "                        j = obj[\"frames\"].index(fn)\n",
    "                        if obj[\"state\"][j] != 0:\n",
    "                            tl_state = obj[\"state\"][j]\n",
    "                            break\n",
    "                    except (ValueError, IndexError):\n",
    "                        continue\n",
    "                feats[\"traffic_light\"].append(to_one_hot(tl_state, NUM_TL_STATES))\n",
    "\n",
    "            # static context -----------------------------------------------\n",
    "            if \"static_context\" in self.streams:\n",
    "                feats[\"static_context\"].append(static_vec)\n",
    "\n",
    "        # numpy → torch ------------------------------------------------------\n",
    "        out = {\n",
    "            s: torch.tensor(np.asarray(feats[s], np.float32), dtype=torch.float32)\n",
    "            for s in self.streams\n",
    "        }\n",
    "        return out, torch.tensor(label, dtype=torch.long)\n",
    "\n",
    "\n",
    "# =============================================================================\n",
    "#                       MAIN: build balanced training set\n",
    "# =============================================================================\n",
    "if __name__ == \"__main__\":\n",
    "    print(\"\\n--- DATA PREPARATION ---\")\n",
    "\n",
    "    # 1) load / regenerate PIE DB -------------------------------------------\n",
    "    cache = Path(PIE_DATABASE_CACHE_PATH)\n",
    "    if cache.is_file():\n",
    "        print(\"Loading PIE database cache …\")\n",
    "        with cache.open(\"rb\") as fp:\n",
    "            pie_db = pickle.load(fp)\n",
    "        print(\"✓ PIE DB loaded.\")\n",
    "    else:\n",
    "        if PIE is None:\n",
    "            raise RuntimeError(\"PIE class unavailable: cannot rebuild database.\")\n",
    "        print(\"Cache not found – regenerating PIE DB …\")\n",
    "        pie_db = PIE(data_path=PIE_ROOT_PATH, regen_database=True).generate_database()\n",
    "        if not pie_db:\n",
    "            raise RuntimeError(\"PIE DB generation failed.\")\n",
    "        print(\"✓ PIE DB generated.\")\n",
    "\n",
    "    # 2) compute scalers -----------------------------------------------------\n",
    "    print(\"\\nComputing scalers …\")\n",
    "    spd, accx, accy, gyz = [], [], [], []\n",
    "    for sid in TRAIN_SETS_STR:\n",
    "        for vid, vdb in pie_db.get(sid, {}).items():\n",
    "            for frame, e in vdb.get(\"vehicle_annotations\", {}).items():\n",
    "                s  = e.get(\"OBD_speed\", 0.0) or e.get(\"GPS_speed\", 0.0)\n",
    "                spd.append(s)\n",
    "                accx.append(e.get(\"accX\", 0.0))\n",
    "                accy.append(e.get(\"accY\", 0.0))\n",
    "                gyz.append(e.get(\"gyroZ\", 0.0))\n",
    "\n",
    "    scalers = {}\n",
    "    if spd:\n",
    "        scalers[\"ego_speed_mean\"] = float(np.mean(spd))\n",
    "        scalers[\"ego_speed_std\"]  = float(max(np.std(spd), 1e-6))\n",
    "    if accx:\n",
    "        scalers[\"accX_mean\"] = float(np.mean(accx))\n",
    "        scalers[\"accX_std\"]  = float(max(np.std(accx), 1e-6))\n",
    "        scalers[\"accY_mean\"] = float(np.mean(accy))\n",
    "        scalers[\"accY_std\"]  = float(max(np.std(accy), 1e-6))\n",
    "    if gyz:\n",
    "        scalers[\"gyroZ_mean\"] = float(np.mean(gyz))\n",
    "        scalers[\"gyroZ_std\"]  = float(max(np.std(gyz), 1e-6))\n",
    "\n",
    "    print(\"Scalers:\", scalers)\n",
    "\n",
    "    # 3) extract full training dataset --------------------------------------\n",
    "    print(\"\\nExtracting training sequences (all streams) …\")\n",
    "    full_ds = PIEDataset(\n",
    "        pie_db,\n",
    "        TRAIN_SETS_STR,\n",
    "        POSE_DATA_DIR,\n",
    "        SEQ_LEN,\n",
    "        PRED_LEN,\n",
    "        scalers,\n",
    "        ALL_POSSIBLE_STREAMS,\n",
    "    )\n",
    "\n",
    "    train_dict = {s: [] for s in ALL_POSSIBLE_STREAMS}\n",
    "    train_dict[\"label\"] = []\n",
    "\n",
    "    for i in tqdm(range(len(full_ds)), desc=\"seq\"):\n",
    "        feat, lbl = full_ds[i]\n",
    "        for s in ALL_POSSIBLE_STREAMS:\n",
    "            train_dict[s].append(feat[s].numpy())\n",
    "        train_dict[\"label\"].append([lbl.item()])\n",
    "\n",
    "    print(f\"Raw training samples: {len(train_dict['label'])}\")\n",
    "\n",
    "    # 4) balance -------------------------------------------------------------\n",
    "    balanced = balance_samples_count(train_dict, \"label\")\n",
    "    del train_dict, full_ds\n",
    "    gc.collect()\n",
    "\n",
    "    # 5) write pickles -------------------------------------------------------\n",
    "    print(\"\\nSaving balanced data …\")\n",
    "    with open(BALANCED_DATA_PKL_PATH, \"wb\") as fp:\n",
    "        pickle.dump(balanced, fp, pickle.HIGHEST_PROTOCOL)\n",
    "    print(f\"✓ {BALANCED_DATA_PKL_PATH}\")\n",
    "\n",
    "    print(\"Saving scalers …\")\n",
    "    with open(SCALERS_PKL_PATH, \"wb\") as fp:\n",
    "        pickle.dump(scalers, fp, pickle.HIGHEST_PROTOCOL)\n",
    "    print(f\"✓ {SCALERS_PKL_PATH}\")\n",
    "\n",
    "    del pie_db\n",
    "    gc.collect()\n",
    "\n",
    "    print(\"\\n--- DATA PREPARATION COMPLETE ---\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "a7d948c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T13:57:52.897770Z",
     "iopub.status.busy": "2025-05-01T13:57:52.897337Z",
     "iopub.status.idle": "2025-05-01T14:49:14.767542Z",
     "shell.execute_reply": "2025-05-01T14:49:14.766718Z"
    },
    "papermill": {
     "duration": 3081.908261,
     "end_time": "2025-05-01T14:49:14.768791",
     "exception": false,
     "start_time": "2025-05-01T13:57:52.860530",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Running Weighted Average Fusion With Active Streams: ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'static_context'] ---\n",
      "Using device: cuda\n",
      "--- Running Model Training/Evaluation with Weighted Fusion ---\n",
      "Active Streams: ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'static_context']\n",
      "\n",
      "Loading balanced training data …\n",
      "   ✓ pre-processed data loaded.\n",
      "\n",
      "Loading PIE database cache for validation …\n",
      "   ✓ PIE database loaded.\n",
      "\n",
      "Creating Datasets and DataLoaders …\n",
      "Dataset initialized with 62581 sequences for sets ['set05', 'set06'].\n",
      "   ✓ DataLoaders ready.\n",
      "\n",
      "Initialising model …\n",
      "Initializing Weighted-Avg model with streams: ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'static_context']\n",
      "  – Adding stream 'bbox' (input 4)\n",
      "  – Adding stream 'ped_action' (input 1)\n",
      "  – Adding stream 'ped_look' (input 1)\n",
      "  – Adding stream 'ego_speed' (input 1)\n",
      "  – Adding stream 'ego_acc' (input 2)\n",
      "  – Adding stream 'static_context' (input 23)\n",
      "\n",
      "--- Model architecture ---\n",
      "MultiStreamWeightedAvgLSTM(\n",
      "  (lstms): ModuleDict(\n",
      "    (bbox): LSTM(4, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "    (ped_action): LSTM(1, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "    (ped_look): LSTM(1, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "    (ego_speed): LSTM(1, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "    (ego_acc): LSTM(2, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "    (static_context): LSTM(23, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "  )\n",
      "  (attentions): ModuleDict(\n",
      "    (bbox): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "    (ped_action): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "    (ped_look): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "    (ego_speed): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "    (ego_acc): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "    (static_context): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "  )\n",
      "  (dropout): Dropout(p=0.3, inplace=False)\n",
      "  (fc1): Linear(in_features=512, out_features=256, bias=True)\n",
      "  (relu): ReLU()\n",
      "  (fc2): Linear(in_features=256, out_features=2, bias=True)\n",
      ")\n",
      "Trainable parameters: 13,224,206\n",
      "------------------------------\n",
      "\n",
      "Calculating class weights …\n",
      "Loss weights → 0: 1.00, 1: 1.00\n",
      "\n",
      "--- Starting training ---\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "eb222b1704984f319f6f685d4f091ef3",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3235 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "5d25e39d5ea24348a5a470cb18f3c5a6",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/1956 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 01/10 – 293.7s\n",
      "  train loss 0.3633 | acc 0.8420\n",
      "  val   loss 0.2820 | acc 0.8674\n",
      "           prec 0.5756 | rec 0.8608 | f1 0.6899 | auc 0.9425\n",
      "  ✓ new best model saved → best_model_weighted_bbox_ego_acc_ego_speed_ped_action_ped_look_static_context_ep1.pth (F1 0.6899)\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "41c5015bbbf243959b5d1b1b36ecb999",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3235 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "cd84008de62f47389f085cc34ea1d6d9",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/1956 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 02/10 – 294.9s\n",
      "  train loss 0.3049 | acc 0.8719\n",
      "  val   loss 0.2777 | acc 0.8908\n",
      "           prec 0.6454 | rec 0.8060 | f1 0.7168 | auc 0.9390\n",
      "  ✓ new best model saved → best_model_weighted_bbox_ego_acc_ego_speed_ped_action_ped_look_static_context_ep2.pth (F1 0.7168)\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f0197d7d74e44db5b93afff9569c361b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3235 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "db27ce886ef04a128b1163a66e5e366e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/1956 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 03/10 – 283.9s\n",
      "  train loss 0.2794 | acc 0.8842\n",
      "  val   loss 0.3013 | acc 0.8870\n",
      "           prec 0.6403 | rec 0.7774 | f1 0.7022 | auc 0.9236\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b76ad24d4d33466e9904bcbf0f25004e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3235 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "23f17709af314e1b9381ca01c5d9e265",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/1956 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 04/10 – 288.2s\n",
      "  train loss 0.2532 | acc 0.8985\n",
      "  val   loss 0.3178 | acc 0.8927\n",
      "           prec 0.6582 | rec 0.7782 | f1 0.7132 | auc 0.9266\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f7e8fe67cc534282971923d143d3bbda",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3235 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "07c324c311a743d18ca49db403ac54ec",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/1956 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 05/10 – 285.9s\n",
      "  train loss 0.2273 | acc 0.9082\n",
      "  val   loss 0.3991 | acc 0.8765\n",
      "           prec 0.6119 | rec 0.7645 | f1 0.6798 | auc 0.9033\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "bb18484ab1824df7acbdbbc631911034",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3235 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c5003355a0c5408ba8a6d9124e7f58df",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/1956 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 06/10 – 287.5s\n",
      "  train loss 0.2047 | acc 0.9181\n",
      "  val   loss 0.4173 | acc 0.8923\n",
      "           prec 0.6839 | rec 0.6912 | f1 0.6875 | auc 0.9056\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b5c2a4f1fabc485ba749798b7261f8fe",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3235 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "db0edfb55d6c45a5ab6d32ea5fd307b3",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/1956 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 07/10 – 285.7s\n",
      "  train loss 0.1889 | acc 0.9249\n",
      "  val   loss 0.4470 | acc 0.8852\n",
      "           prec 0.6495 | rec 0.7169 | f1 0.6816 | auc 0.8977\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "5602b5be5b82440bb15af2bbe480afd4",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3235 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c2b134ec4b3444ed9752e01b4f2e8ca4",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/1956 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 08/10 – 287.0s\n",
      "  train loss 0.1738 | acc 0.9325\n",
      "  val   loss 0.3910 | acc 0.8818\n",
      "           prec 0.6489 | rec 0.6768 | f1 0.6626 | auc 0.9129\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "fca951cdd67a41348dbf8dd5d4123415",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3235 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "49330ab421984e7a97d20be572cbf9ec",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/1956 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 09/10 – 283.4s\n",
      "  train loss 0.1595 | acc 0.9392\n",
      "  val   loss 0.4917 | acc 0.8859\n",
      "           prec 0.6527 | rec 0.7142 | f1 0.6820 | auc 0.9042\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "145c0a6bde404c2093ff764503e5ef47",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3235 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "da815651d2114fc9b34414116feab195",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/1956 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 10/10 – 286.4s\n",
      "  train loss 0.1488 | acc 0.9433\n",
      "  val   loss 0.4749 | acc 0.8734\n",
      "           prec 0.6319 | rec 0.6255 | f1 0.6287 | auc 0.9061\n",
      "\n",
      "--- Training finished ---\n",
      "\n",
      "Plotting training curves …\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Final Evaluation on Validation set ---\n",
      "Loaded best model: best_model_weighted_bbox_ego_acc_ego_speed_ped_action_ped_look_static_context_ep2.pth\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b2e203934f0b4164915f7e4d7437cef5",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/1956 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "75784ff2c7fe402987fdc992ed314718",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Generating CM Data:   0%|          | 0/1956 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Final metrics (Weighted Avg Fusion) ---\n",
      "loss      : 0.2777\n",
      "accuracy  : 0.8908\n",
      "precision : 0.6454\n",
      "recall    : 0.8060\n",
      "f1        : 0.7168\n",
      "auc       : 0.9390\n",
      "(Best validation F1 during training: 0.7168)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Learned fusion weights ---\n",
      "bbox           : 0.1683\n",
      "ped_action     : 0.1665\n",
      "ped_look       : 0.1644\n",
      "ego_speed      : 0.1634\n",
      "ego_acc        : 0.1663\n",
      "static_context : 0.1711\n",
      "------------------------------\n",
      "\n",
      "--- Script complete ---\n"
     ]
    }
   ],
   "source": [
    "# --- CELL 2: ABLATION STUDY – MODEL TRAINING AND EVALUATION (with Weighted Average Fusion) ---\n",
    "\n",
    "import os\n",
    "import sys\n",
    "import gc\n",
    "import time\n",
    "import math\n",
    "import random\n",
    "import pickle\n",
    "import torch\n",
    "import numpy as np\n",
    "import pandas as pd                      # results-summary table\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from tqdm.notebook import tqdm\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "from sklearn.metrics import (\n",
    "    accuracy_score,\n",
    "    precision_recall_fscore_support,\n",
    "    roc_auc_score,\n",
    "    confusion_matrix,\n",
    "    ConfusionMatrixDisplay,\n",
    ")\n",
    "\n",
    "# --- Add PIE utilities path if necessary (adjust path) ------------------------\n",
    "pie_utilities_path = \"/kaggle/working/PIE/utilities\"\n",
    "if pie_utilities_path not in sys.path:\n",
    "    sys.path.insert(0, pie_utilities_path)\n",
    "\n",
    "try:\n",
    "    from pie_data import PIE\n",
    "except ImportError as e:\n",
    "    print(f\"Warn: Could not import PIE class: {e}\")\n",
    "    PIE = None\n",
    "\n",
    "# --- Configuration ------------------------------------------------------------\n",
    "PIE_ROOT_PATH = \"/kaggle/working/PIE\"\n",
    "POSE_DATA_DIR = \"/kaggle/input/pose-data/extracted_poses2\"\n",
    "PIE_DATABASE_CACHE_PATH = \"/kaggle/input/pie-database/pie_database.pkl\"\n",
    "\n",
    "# --- Define ALL possible streams (used by Dataset class) ----------------------\n",
    "ALL_POSSIBLE_STREAMS = [\n",
    "    \"bbox\",\n",
    "    \"pose\",\n",
    "    \"ego_speed\",\n",
    "    \"ego_acc\",\n",
    "    \"ego_gyro\",\n",
    "    \"ped_action\",\n",
    "    \"ped_look\",\n",
    "    \"ped_occlusion\",\n",
    "    \"traffic_light\",\n",
    "    \"static_context\",\n",
    "]\n",
    "\n",
    "# --- *** CHOOSE ACTIVE STREAMS FOR THIS EXPERIMENT *** ------------------------\n",
    "ACTIVE_STREAMS = [\n",
    "    \"bbox\",\n",
    "    \"ped_action\",\n",
    "    \"ped_look\",\n",
    "    \"ego_speed\",\n",
    "    \"ego_acc\",\n",
    "    \"static_context\",\n",
    "]\n",
    "# ------------------------------------------------------------------------------\n",
    "\n",
    "print(f\"--- Running Weighted Average Fusion With Active Streams: {ACTIVE_STREAMS} ---\")\n",
    "\n",
    "# --- Model Hyper-parameters ---------------------------------------------------\n",
    "SEQ_LEN, PRED_LEN = 30, 60\n",
    "INPUT_SIZE_BBOX = 4\n",
    "INPUT_SIZE_POSE = 34\n",
    "INPUT_SIZE_EGO_SPEED = 1\n",
    "INPUT_SIZE_EGO_ACC = 2\n",
    "INPUT_SIZE_EGO_GYRO = 1\n",
    "INPUT_SIZE_PED_ACTION = 1\n",
    "INPUT_SIZE_PED_LOOK = 1\n",
    "INPUT_SIZE_PED_OCC = 1\n",
    "INPUT_SIZE_TL_STATE = 4\n",
    "NUM_SIGNALIZED_CATS = 4\n",
    "NUM_INTERSECTION_CATS = 5\n",
    "NUM_AGE_CATS = 4\n",
    "NUM_GENDER_CATS = 3\n",
    "NUM_TRAFFIC_DIR_CATS = 2\n",
    "LANE_CATEGORIES = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 4, 7: 4, 8: 4}\n",
    "NUM_LANE_CATS = len(set(LANE_CATEGORIES.values()))\n",
    "INPUT_SIZE_STATIC = (\n",
    "    NUM_SIGNALIZED_CATS\n",
    "    + NUM_INTERSECTION_CATS\n",
    "    + NUM_AGE_CATS\n",
    "    + NUM_GENDER_CATS\n",
    "    + NUM_TRAFFIC_DIR_CATS\n",
    "    + NUM_LANE_CATS\n",
    ")\n",
    "\n",
    "LSTM_HIDDEN_SIZE = 256\n",
    "NUM_LSTM_LAYERS = 2\n",
    "DROPOUT_RATE = 0.3\n",
    "NUM_CLASSES = 2\n",
    "ATTENTION_DIM = 128\n",
    "\n",
    "# --- Training Hyper-parameters ------------------------------------------------\n",
    "LEARNING_RATE = 1e-4\n",
    "BATCH_SIZE = 32\n",
    "NUM_EPOCHS = 10\n",
    "DEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "print(f\"Using device: {DEVICE}\")\n",
    "\n",
    "# --- Dataset splits -----------------------------------------------------------\n",
    "VAL_SETS_STR = [\"set05\", \"set06\"]\n",
    "\n",
    "# --- Paths for pre-processed data --------------------------------------------\n",
    "BALANCED_DATA_PKL_PATH = \"/kaggle/working/balanced_train_data.pkl\"\n",
    "SCALERS_PKL_PATH = \"/kaggle/working/scalers.pkl\"\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                               Helper classes                                #\n",
    "# -----------------------------------------------------------------------------\n",
    "\n",
    "\n",
    "def to_one_hot(index, num_classes):\n",
    "    vec = np.zeros(num_classes, dtype=np.float32)\n",
    "    safe_index = int(np.clip(index, 0, num_classes - 1))\n",
    "    vec[safe_index] = 1.0\n",
    "    return vec\n",
    "\n",
    "\n",
    "class PIEDataset(Dataset):\n",
    "    \"\"\"\n",
    "    Dataset that can dynamically enable/disable streams.\n",
    "    \"\"\"\n",
    "\n",
    "    def __init__(\n",
    "        self,\n",
    "        pie_database,\n",
    "        set_names,\n",
    "        pose_data_dir,\n",
    "        seq_len,\n",
    "        pred_len,\n",
    "        scalers=None,\n",
    "        active_streams=None,\n",
    "    ):\n",
    "        self.pie_db = pie_database\n",
    "        self.set_names = set_names\n",
    "        self.pose_data_dir = pose_data_dir\n",
    "        self.seq_len = seq_len\n",
    "        self.pred_len = pred_len\n",
    "        self.scalers = scalers or {}\n",
    "        self.active_streams = active_streams or ALL_POSSIBLE_STREAMS\n",
    "        self.sequences = []\n",
    "        self.all_pose_data = {}\n",
    "\n",
    "        self._input_sizes_for_error = self._get_input_sizes_dict()\n",
    "\n",
    "        if \"pose\" in self.active_streams:\n",
    "            self._load_pose_data()\n",
    "\n",
    "        self._generate_sequence_list()\n",
    "        if not self.sequences:\n",
    "            raise ValueError(f\"Dataset init failed: No sequences for {self.set_names}\")\n",
    "\n",
    "    # --------------------------------------------------------------------- #\n",
    "    #                        internal helper methods                        #\n",
    "    # --------------------------------------------------------------------- #\n",
    "\n",
    "    def _get_input_sizes_dict(self):\n",
    "        \"\"\"\n",
    "        Build a dict {stream_name: feature_size}.\n",
    "        \"\"\"\n",
    "        input_sizes = {}\n",
    "        special_cases = {\n",
    "            \"TRAFFIC_LIGHT\": \"TL_STATE\",\n",
    "            \"STATIC_CONTEXT\": \"STATIC\",\n",
    "            \"EGO_SPEED\": \"EGO_SPEED\",\n",
    "            \"EGO_ACC\": \"EGO_ACC\",\n",
    "            \"EGO_GYRO\": \"EGO_GYRO\",\n",
    "            \"PED_ACTION\": \"PED_ACTION\",\n",
    "            \"PED_LOOK\": \"PED_LOOK\",\n",
    "            \"PED_OCCLUSION\": \"PED_OCC\",\n",
    "        }\n",
    "\n",
    "        for stream in ALL_POSSIBLE_STREAMS:\n",
    "            size_constant_name = f\"INPUT_SIZE_{stream.upper()}\"\n",
    "            stream_upper_key = stream.upper()\n",
    "            suffix = special_cases.get(stream_upper_key)\n",
    "\n",
    "            if suffix:\n",
    "                size_constant_name = f\"INPUT_SIZE_{suffix}\"\n",
    "            elif stream == \"bbox\":\n",
    "                size_constant_name = \"INPUT_SIZE_BBOX\"\n",
    "            elif stream == \"pose\":\n",
    "                size_constant_name = \"INPUT_SIZE_POSE\"\n",
    "\n",
    "            input_sizes[stream] = globals().get(size_constant_name, 1)\n",
    "\n",
    "        return input_sizes\n",
    "\n",
    "    def _load_pose_data(self):\n",
    "        \"\"\"\n",
    "        Load pose dictionaries once per dataset instance.\n",
    "        \"\"\"\n",
    "        sets_loaded_count = 0\n",
    "        for set_id in self.set_names:\n",
    "            self.all_pose_data[set_id] = {}\n",
    "            pose_set_path = os.path.join(self.pose_data_dir, set_id)\n",
    "            if not os.path.isdir(pose_set_path):\n",
    "                continue\n",
    "\n",
    "            pkl_files_in_set = [\n",
    "                f\n",
    "                for f in os.listdir(pose_set_path)\n",
    "                if f.startswith(f\"{set_id}_\") and f.endswith(\"_poses.pkl\")\n",
    "            ]\n",
    "            if not pkl_files_in_set:\n",
    "                continue\n",
    "\n",
    "            loaded_video_count = 0\n",
    "            for pkl_filename in pkl_files_in_set:\n",
    "                pkl_file_path = os.path.join(pose_set_path, pkl_filename)\n",
    "                try:\n",
    "                    with open(pkl_file_path, \"rb\") as f:\n",
    "                        loaded_pkl_content = pickle.load(f)\n",
    "                except FileNotFoundError:\n",
    "                    continue\n",
    "                except Exception as e:\n",
    "                    print(f\"Error loading pose PKL {pkl_file_path}: {e}\")\n",
    "                    continue\n",
    "\n",
    "                # Every pose-PKL contains a single key (video), by convention\n",
    "                if len(loaded_pkl_content) != 1:\n",
    "                    continue\n",
    "\n",
    "                unique_video_key, video_data = list(loaded_pkl_content.items())[0]\n",
    "                video_id = \"_\".join(unique_video_key.split(\"_\")[1:])\n",
    "                if video_id in self.pie_db.get(set_id, {}):\n",
    "                    self.all_pose_data[set_id][video_id] = video_data\n",
    "                    loaded_video_count += 1\n",
    "\n",
    "            if loaded_video_count > 0:\n",
    "                sets_loaded_count += 1\n",
    "\n",
    "    def _generate_sequence_list(self):\n",
    "        \"\"\"\n",
    "        Enumerate every sliding window that satisfies length + prediction horizon.\n",
    "        \"\"\"\n",
    "        sequence_count = 0\n",
    "        for set_id in self.set_names:\n",
    "            if set_id not in self.pie_db:\n",
    "                continue\n",
    "            for video_id, video_data in self.pie_db[set_id].items():\n",
    "                if \"ped_annotations\" not in video_data:\n",
    "                    continue\n",
    "                for ped_id, ped_data in video_data[\"ped_annotations\"].items():\n",
    "                    frames = ped_data.get(\"frames\", [])\n",
    "                    if len(frames) < self.seq_len + self.pred_len:\n",
    "                        continue\n",
    "\n",
    "                    frames_sorted = sorted(frames)\n",
    "                    for i in range(len(frames_sorted) - self.seq_len - self.pred_len + 1):\n",
    "                        start_f = frames_sorted[i]\n",
    "                        obs_end_f = frames_sorted[i + self.seq_len - 1]\n",
    "\n",
    "                        # consecutiveness check\n",
    "                        if obs_end_f - start_f != self.seq_len - 1:\n",
    "                            continue\n",
    "\n",
    "                        target_idx = i + self.seq_len + self.pred_len - 1\n",
    "                        if target_idx >= len(frames_sorted):\n",
    "                            continue\n",
    "\n",
    "                        target_f = frames_sorted[target_idx]\n",
    "                        if target_f - obs_end_f != self.pred_len:\n",
    "                            continue\n",
    "\n",
    "                        self.sequences.append((set_id, video_id, ped_id, start_f))\n",
    "                        sequence_count += 1\n",
    "\n",
    "        print(f\"Dataset initialized with {sequence_count} sequences for sets {self.set_names}.\")\n",
    "\n",
    "    # --------------------------------------------------------------------- #\n",
    "    #                              overrides                                #\n",
    "    # --------------------------------------------------------------------- #\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.sequences)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        \"\"\"\n",
    "        Returns:\n",
    "            features_dict   {stream_name: Tensor(seq_len, feat_dim)}\n",
    "            label_tensor    Tensor([])\n",
    "        \"\"\"\n",
    "        set_id, video_id, ped_id, start_frame = self.sequences[idx]\n",
    "        frame_nums = list(range(start_frame, start_frame + self.seq_len))\n",
    "        target_frame_num = start_frame + self.seq_len + self.pred_len - 1\n",
    "\n",
    "        # convenient aliases\n",
    "        video_db = self.pie_db.get(set_id, {}).get(video_id, {})\n",
    "        ped_db = video_db.get(\"ped_annotations\", {}).get(ped_id, {})\n",
    "        ego_db = video_db.get(\"vehicle_annotations\", {})\n",
    "        traffic_db = video_db.get(\"traffic_annotations\", {})\n",
    "        ped_attributes = ped_db.get(\"attributes\", {})\n",
    "\n",
    "        feature_sequences = {s: [] for s in self.active_streams}\n",
    "        label = 0\n",
    "\n",
    "        if (\n",
    "            \"frames\" in ped_db\n",
    "            and \"behavior\" in ped_db\n",
    "            and \"cross\" in ped_db[\"behavior\"]\n",
    "        ):\n",
    "            try:\n",
    "                target_idx = ped_db[\"frames\"].index(target_frame_num)\n",
    "                label = ped_db[\"behavior\"][\"cross\"][target_idx]\n",
    "                if label == -1:\n",
    "                    label = 0\n",
    "            except (ValueError, IndexError):\n",
    "                pass\n",
    "\n",
    "        # --- static context ------------------------------------------------\n",
    "        static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "        if \"static_context\" in self.active_streams:\n",
    "            sig_idx = ped_attributes.get(\"signalized\", 0)\n",
    "            int_idx = ped_attributes.get(\"intersection\", 0)\n",
    "            age_idx = ped_attributes.get(\"age\", 2)\n",
    "            gen_idx = ped_attributes.get(\"gender\", 0)\n",
    "            td_idx = int(ped_attributes.get(\"traffic_direction\", 0))\n",
    "            nl_val = ped_attributes.get(\"num_lanes\", 2)\n",
    "            nl_cat_idx = LANE_CATEGORIES.get(\n",
    "                nl_val, LANE_CATEGORIES[max(LANE_CATEGORIES.keys())]\n",
    "            )\n",
    "\n",
    "            static_vec = np.concatenate(\n",
    "                [\n",
    "                    to_one_hot(sig_idx, NUM_SIGNALIZED_CATS),\n",
    "                    to_one_hot(int_idx, NUM_INTERSECTION_CATS),\n",
    "                    to_one_hot(age_idx, NUM_AGE_CATS),\n",
    "                    to_one_hot(gen_idx, NUM_GENDER_CATS),\n",
    "                    to_one_hot(td_idx, NUM_TRAFFIC_DIR_CATS),\n",
    "                    to_one_hot(nl_cat_idx, NUM_LANE_CATS),\n",
    "                ]\n",
    "            )\n",
    "\n",
    "            if static_vec.shape[0] != INPUT_SIZE_STATIC:\n",
    "                static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "\n",
    "        # -------------------------------------------------------------------\n",
    "        #                    per-frame feature extraction                    #\n",
    "        # -------------------------------------------------------------------\n",
    "        for frame_num in frame_nums:\n",
    "            frame_db_idx = -1\n",
    "            if \"frames\" in ped_db:\n",
    "                try:\n",
    "                    frame_db_idx = ped_db[\"frames\"].index(frame_num)\n",
    "                except ValueError:\n",
    "                    pass\n",
    "\n",
    "            ego_frame_data = ego_db.get(frame_num, {})\n",
    "\n",
    "            # ---------- bbox ------------------------------------------------\n",
    "            if \"bbox\" in self.active_streams:\n",
    "                bbox_norm = np.zeros(INPUT_SIZE_BBOX, dtype=np.float32)\n",
    "                if (\n",
    "                    frame_db_idx != -1\n",
    "                    and \"bbox\" in ped_db\n",
    "                    and len(ped_db[\"bbox\"]) > frame_db_idx\n",
    "                ):\n",
    "                    try:\n",
    "                        x1, y1, x2, y2 = ped_db[\"bbox\"][frame_db_idx]\n",
    "                        img_w = video_db.get(\"width\", 1920)\n",
    "                        img_h = video_db.get(\"height\", 1080)\n",
    "                        if img_w > 0 and img_h > 0:\n",
    "                            cx = ((x1 + x2) / 2) / img_w\n",
    "                            cy = ((y1 + y2) / 2) / img_h\n",
    "                            w = (x2 - x1) / img_w\n",
    "                            h = (y2 - y1) / img_h\n",
    "                            if 0 < w and 0 < h and 0 <= cx <= 1 and 0 <= cy <= 1:\n",
    "                                bbox_norm = np.array([cx, cy, w, h], dtype=np.float32)\n",
    "                    except Exception:\n",
    "                        pass\n",
    "\n",
    "                feature_sequences[\"bbox\"].append(bbox_norm)\n",
    "\n",
    "            # ---------- pose -----------------------------------------------\n",
    "            if \"pose\" in self.active_streams:\n",
    "                pose_vector = np.zeros(INPUT_SIZE_POSE, dtype=np.float32)\n",
    "                vid_pose = self.all_pose_data.get(set_id, {}).get(video_id, {})\n",
    "                frame_pose = vid_pose.get(frame_num, {})\n",
    "                loaded_pose = frame_pose.get(ped_id)\n",
    "\n",
    "                if (\n",
    "                    loaded_pose is not None\n",
    "                    and isinstance(loaded_pose, np.ndarray)\n",
    "                    and loaded_pose.shape == (INPUT_SIZE_POSE,)\n",
    "                ):\n",
    "                    pose_vector = loaded_pose\n",
    "\n",
    "                feature_sequences[\"pose\"].append(pose_vector)\n",
    "\n",
    "            # ---------- ego-speed ------------------------------------------\n",
    "            if \"ego_speed\" in self.active_streams:\n",
    "                speed = ego_frame_data.get(\"OBD_speed\", 0.0)\n",
    "                if speed == 0.0:\n",
    "                    speed = ego_frame_data.get(\"GPS_speed\", 0.0)\n",
    "\n",
    "                speed_scaled = (\n",
    "                    speed - self.scalers.get(\"ego_speed_mean\", 0.0)\n",
    "                ) / self.scalers.get(\"ego_speed_std\", 1.0)\n",
    "                feature_sequences[\"ego_speed\"].append([speed_scaled])\n",
    "\n",
    "            # ---------- ego-acc --------------------------------------------\n",
    "            if \"ego_acc\" in self.active_streams:\n",
    "                acc_x = ego_frame_data.get(\"accX\", 0.0)\n",
    "                acc_y = ego_frame_data.get(\"accY\", 0.0)\n",
    "                acc_x_scaled = (\n",
    "                    acc_x - self.scalers.get(\"accX_mean\", 0.0)\n",
    "                ) / self.scalers.get(\"accX_std\", 1.0)\n",
    "                acc_y_scaled = (\n",
    "                    acc_y - self.scalers.get(\"accY_mean\", 0.0)\n",
    "                ) / self.scalers.get(\"accY_std\", 1.0)\n",
    "                feature_sequences[\"ego_acc\"].append([acc_x_scaled, acc_y_scaled])\n",
    "\n",
    "            # ---------- ego-gyro -------------------------------------------\n",
    "            if \"ego_gyro\" in self.active_streams:\n",
    "                gyro_z = ego_frame_data.get(\"gyroZ\", 0.0)\n",
    "                gyro_z_scaled = (\n",
    "                    gyro_z - self.scalers.get(\"gyroZ_mean\", 0.0)\n",
    "                ) / self.scalers.get(\"gyroZ_std\", 1.0)\n",
    "                feature_sequences[\"ego_gyro\"].append([gyro_z_scaled])\n",
    "\n",
    "            # ---------- ped_action -----------------------------------------\n",
    "            if \"ped_action\" in self.active_streams:\n",
    "                action = 0\n",
    "                if (\n",
    "                    frame_db_idx != -1\n",
    "                    and \"behavior\" in ped_db\n",
    "                    and \"action\" in ped_db[\"behavior\"]\n",
    "                    and len(ped_db[\"behavior\"][\"action\"]) > frame_db_idx\n",
    "                ):\n",
    "                    action = ped_db[\"behavior\"][\"action\"][frame_db_idx]\n",
    "                feature_sequences[\"ped_action\"].append([float(action)])\n",
    "\n",
    "            # ---------- ped_look -------------------------------------------\n",
    "            if \"ped_look\" in self.active_streams:\n",
    "                look = 0\n",
    "                if (\n",
    "                    frame_db_idx != -1\n",
    "                    and \"behavior\" in ped_db\n",
    "                    and \"look\" in ped_db[\"behavior\"]\n",
    "                    and len(ped_db[\"behavior\"][\"look\"]) > frame_db_idx\n",
    "                ):\n",
    "                    look = ped_db[\"behavior\"][\"look\"][frame_db_idx]\n",
    "                feature_sequences[\"ped_look\"].append([float(look)])\n",
    "\n",
    "            # ---------- ped_occlusion --------------------------------------\n",
    "            if \"ped_occlusion\" in self.active_streams:\n",
    "                occ = 0.0\n",
    "                if (\n",
    "                    frame_db_idx != -1\n",
    "                    and \"occlusion\" in ped_db\n",
    "                    and len(ped_db[\"occlusion\"]) > frame_db_idx\n",
    "                ):\n",
    "                    occ_val = ped_db[\"occlusion\"][frame_db_idx]\n",
    "                    occ = float(occ_val) / 2.0\n",
    "                feature_sequences[\"ped_occlusion\"].append([occ])\n",
    "\n",
    "            # ---------- traffic_light --------------------------------------\n",
    "            if \"traffic_light\" in self.active_streams:\n",
    "                state_int = 0\n",
    "                for obj_id, obj_data in traffic_db.items():\n",
    "                    if (\n",
    "                        obj_data.get(\"obj_class\") == \"traffic_light\"\n",
    "                        and \"frames\" in obj_data\n",
    "                        and \"state\" in obj_data\n",
    "                    ):\n",
    "                        try:\n",
    "                            tl_idx = obj_data[\"frames\"].index(frame_num)\n",
    "                            state_val = obj_data[\"state\"][tl_idx]\n",
    "                            if state_val != 0:\n",
    "                                state_int = state_val\n",
    "                                break\n",
    "                        except (ValueError, IndexError):\n",
    "                            continue\n",
    "                feature_sequences[\"traffic_light\"].append(\n",
    "                    to_one_hot(state_int, INPUT_SIZE_TL_STATE)\n",
    "                )\n",
    "\n",
    "            # ---------- static_context (per-frame replicate) ---------------\n",
    "            if \"static_context\" in self.active_streams:\n",
    "                feature_sequences[\"static_context\"].append(static_vec)\n",
    "\n",
    "        # -------------------------------------------------------------------\n",
    "        # convert to tensors / safe fallback\n",
    "        # -------------------------------------------------------------------\n",
    "        features = {}\n",
    "        try:\n",
    "            for name in self.active_streams:\n",
    "                features[name] = torch.tensor(\n",
    "                    np.asarray(feature_sequences[name], dtype=np.float32),\n",
    "                    dtype=torch.float32,\n",
    "                )\n",
    "        except Exception as e:\n",
    "            print(f\"Error converting features idx {idx}: {e}. Returning zeros.\")\n",
    "            features = {\n",
    "                name: torch.zeros(\n",
    "                    (self.seq_len, self._input_sizes_for_error.get(name, 1)),\n",
    "                    dtype=torch.float32,\n",
    "                )\n",
    "                for name in self.active_streams\n",
    "            }\n",
    "\n",
    "        return features, torch.tensor(label, dtype=torch.long)\n",
    "\n",
    "\n",
    "class BalancedDataset(Dataset):\n",
    "    \"\"\"\n",
    "    Memory-based balanced dataset generated by the prep notebook cell.\n",
    "    \"\"\"\n",
    "\n",
    "    def __init__(self, data_dict, active_streams, label_key=\"label\"):\n",
    "        self.active_streams = active_streams\n",
    "        self.label_key = label_key\n",
    "\n",
    "        if self.label_key not in data_dict or not data_dict[self.label_key]:\n",
    "            raise ValueError(f\"Label key '{self.label_key}' missing/empty.\")\n",
    "\n",
    "        self.num_samples = len(data_dict[self.label_key])\n",
    "        if self.num_samples == 0:\n",
    "            print(\"Warning: BalancedDataset initialized with zero samples.\")\n",
    "\n",
    "        # convert every requested stream to tensor\n",
    "        self.features = {}\n",
    "        for stream in self.active_streams:\n",
    "            if stream in data_dict and data_dict[stream]:\n",
    "                try:\n",
    "                    self.features[stream] = torch.tensor(\n",
    "                        np.asarray(data_dict[stream]), dtype=torch.float32\n",
    "                    )\n",
    "                except ValueError as e:\n",
    "                    raise ValueError(f\"Error converting stream '{stream}': {e}\")\n",
    "            else:\n",
    "                raise KeyError(f\"Stream '{stream}' missing or empty in data.\")\n",
    "\n",
    "        try:\n",
    "            self.labels = torch.tensor(\n",
    "                [lbl[0] for lbl in data_dict[self.label_key]], dtype=torch.long\n",
    "            )\n",
    "        except (IndexError, TypeError) as e:\n",
    "            raise ValueError(f\"Error converting labels: {e}\")\n",
    "\n",
    "        for stream in self.active_streams:\n",
    "            if len(self.features[stream]) != self.num_samples:\n",
    "                raise ValueError(\n",
    "                    f\"Len mismatch: '{stream}' ({len(self.features[stream])}) vs labels ({self.num_samples})\"\n",
    "                )\n",
    "\n",
    "    def __len__(self):\n",
    "        return self.num_samples\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        feature_dict = {s: self.features[s][idx] for s in self.active_streams}\n",
    "        label = self.labels[idx]\n",
    "        return feature_dict, label\n",
    "\n",
    "\n",
    "class Attention(nn.Module):\n",
    "    def __init__(self, hidden_dim, attention_dim):\n",
    "        super().__init__()\n",
    "        self.attention_net = nn.Sequential(\n",
    "            nn.Linear(hidden_dim, attention_dim),\n",
    "            nn.Tanh(),\n",
    "            nn.Linear(attention_dim, 1),\n",
    "        )\n",
    "\n",
    "    def forward(self, lstm_output):\n",
    "        att_scores = self.attention_net(lstm_output).squeeze(2)\n",
    "        att_weights = torch.softmax(att_scores, dim=1)\n",
    "        context_vector = torch.sum(lstm_output * att_weights.unsqueeze(2), dim=1)\n",
    "        return context_vector, att_weights\n",
    "\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                  ***  MODEL WITH WEIGHTED AVERAGE FUSION  ***                #\n",
    "# -----------------------------------------------------------------------------\n",
    "\n",
    "\n",
    "class MultiStreamWeightedAvgLSTM(nn.Module):\n",
    "    def __init__(\n",
    "        self,\n",
    "        input_sizes,\n",
    "        lstm_hidden_size,\n",
    "        num_lstm_layers,\n",
    "        num_classes,\n",
    "        attention_dim,\n",
    "        dropout_rate,\n",
    "        stream_names=None,\n",
    "    ):\n",
    "        super().__init__()\n",
    "\n",
    "        if not stream_names:\n",
    "            raise ValueError(\"stream_names cannot be empty.\")\n",
    "        self.stream_names = stream_names\n",
    "        self.num_active_streams = len(stream_names)\n",
    "        self.lstm_output_dim = lstm_hidden_size * 2  # Bi-LSTM doubles hidden\n",
    "\n",
    "        self.lstms = nn.ModuleDict()\n",
    "        self.attentions = nn.ModuleDict()\n",
    "\n",
    "        print(f\"Initializing Weighted-Avg model with streams: {self.stream_names}\")\n",
    "\n",
    "        for name in self.stream_names:\n",
    "            if name not in input_sizes:\n",
    "                raise KeyError(f\"Input size for stream '{name}' not provided.\")\n",
    "\n",
    "            in_size = input_sizes[name]\n",
    "            print(f\"  – Adding stream '{name}' (input {in_size})\")\n",
    "\n",
    "            self.lstms[name] = nn.LSTM(\n",
    "                in_size,\n",
    "                lstm_hidden_size,\n",
    "                num_lstm_layers,\n",
    "                batch_first=True,\n",
    "                dropout=dropout_rate if num_lstm_layers > 1 else 0,\n",
    "                bidirectional=True,\n",
    "            )\n",
    "            self.attentions[name] = Attention(self.lstm_output_dim, attention_dim)\n",
    "\n",
    "        # learnable fusion weights (one per stream)\n",
    "        self.fusion_weights = nn.Parameter(torch.ones(self.num_active_streams))\n",
    "\n",
    "        # classification head\n",
    "        fused_dim = self.lstm_output_dim\n",
    "        self.dropout = nn.Dropout(dropout_rate)\n",
    "        inter_dim = max(num_classes * 4, fused_dim // 2)\n",
    "        self.fc1 = nn.Linear(fused_dim, inter_dim)\n",
    "        self.relu = nn.ReLU()\n",
    "        self.fc2 = nn.Linear(inter_dim, num_classes)\n",
    "\n",
    "    # --------------------------------------------------------------------- #\n",
    "\n",
    "    def forward(self, x):\n",
    "        # gather context vectors ------------------------------------------------\n",
    "        ctx_vecs = []\n",
    "        for name in self.stream_names:\n",
    "            if name not in x:\n",
    "                # gracefully handle a missing stream during inference\n",
    "                zero_ctx = torch.zeros(\n",
    "                    x[next(iter(x))].shape[0],\n",
    "                    self.lstm_output_dim,\n",
    "                    device=x[next(iter(x))].device,\n",
    "                )\n",
    "                ctx_vecs.append(zero_ctx)\n",
    "                continue\n",
    "\n",
    "            lstm_out, _ = self.lstms[name](x[name])\n",
    "            context_vector, _ = self.attentions[name](lstm_out)\n",
    "            ctx_vecs.append(context_vector)\n",
    "\n",
    "        if len(ctx_vecs) != self.num_active_streams:\n",
    "            raise RuntimeError(\n",
    "                f\"context_vectors({len(ctx_vecs)}) != num_streams({self.num_active_streams})\"\n",
    "            )\n",
    "\n",
    "        # weighted average fusion ---------------------------------------------\n",
    "        stacked = torch.stack(ctx_vecs, dim=1)  # (B, N, D)\n",
    "        weights = torch.softmax(self.fusion_weights, dim=0).view(1, -1, 1)\n",
    "        fused = torch.sum(stacked * weights, dim=1)\n",
    "\n",
    "        # classification head --------------------------------------------------\n",
    "        out = self.dropout(fused)\n",
    "        out = self.relu(self.fc1(out))\n",
    "        out = self.dropout(out)\n",
    "        logits = self.fc2(out)\n",
    "        return logits\n",
    "\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                       Training / evaluation helpers                          #\n",
    "# -----------------------------------------------------------------------------\n",
    "\n",
    "\n",
    "def train_epoch(model, dataloader, optimizer, criterion, device):\n",
    "    model.train()\n",
    "    total_loss = 0.0\n",
    "    all_preds, all_labels = [], []\n",
    "    active = model.stream_names\n",
    "\n",
    "    for feats, labels in tqdm(dataloader, desc=\"Training\", leave=False):\n",
    "        inputs = {n: feats[n].to(device) for n in active if n in feats}\n",
    "        labels = labels.to(device)\n",
    "\n",
    "        optimizer.zero_grad()\n",
    "        outputs = model(inputs)\n",
    "        loss = criterion(outputs, labels)\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "\n",
    "        total_loss += loss.item()\n",
    "        all_preds.extend(torch.argmax(outputs, 1).cpu().numpy())\n",
    "        all_labels.extend(labels.cpu().numpy())\n",
    "\n",
    "    return total_loss / max(1, len(dataloader)), accuracy_score(all_labels, all_preds)\n",
    "\n",
    "\n",
    "def evaluate_epoch(model, dataloader, criterion, device):\n",
    "    model.eval()\n",
    "    total_loss = 0.0\n",
    "    all_labels, all_preds, all_probs = [], [], []\n",
    "    active = model.stream_names\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for feats, labels in tqdm(dataloader, desc=\"Evaluating\", leave=False):\n",
    "            inputs = {n: feats[n].to(device) for n in active if n in feats}\n",
    "            labels = labels.to(device)\n",
    "\n",
    "            outputs = model(inputs)\n",
    "            loss = criterion(outputs, labels)\n",
    "            total_loss += loss.item()\n",
    "\n",
    "            probs = torch.softmax(outputs, 1)\n",
    "            preds = torch.argmax(probs, 1)\n",
    "\n",
    "            all_labels.extend(labels.cpu().numpy())\n",
    "            all_preds.extend(preds.cpu().numpy())\n",
    "            all_probs.extend(probs.cpu().numpy())\n",
    "\n",
    "    avg_loss = total_loss / max(1, len(dataloader))\n",
    "    all_probs = np.asarray(all_probs)\n",
    "    all_labels = np.asarray(all_labels)\n",
    "    all_preds = np.asarray(all_preds)\n",
    "\n",
    "    acc = accuracy_score(all_labels, all_preds)\n",
    "    prec, rec, f1, _ = precision_recall_fscore_support(\n",
    "        all_labels, all_preds, average=\"binary\", pos_label=1, zero_division=0\n",
    "    )\n",
    "    auc = (\n",
    "        roc_auc_score(all_labels, all_probs[:, 1])\n",
    "        if len(np.unique(all_labels)) > 1\n",
    "        else float(\"nan\")\n",
    "    )\n",
    "\n",
    "    return {\n",
    "        \"loss\": avg_loss,\n",
    "        \"accuracy\": acc,\n",
    "        \"precision\": prec,\n",
    "        \"recall\": rec,\n",
    "        \"f1\": f1,\n",
    "        \"auc\": auc,\n",
    "    }\n",
    "\n",
    "\n",
    "def get_predictions_and_labels(model, dataloader, device):\n",
    "    model.eval()\n",
    "    labels_all, preds_all = [], []\n",
    "    active = model.stream_names\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for feats, labels in tqdm(dataloader, desc=\"Generating CM Data\", leave=False):\n",
    "            inputs = {n: feats[n].to(device) for n in active if n in feats}\n",
    "            outputs = model(inputs)\n",
    "            preds = torch.argmax(outputs, 1)\n",
    "            labels_all.extend(labels.cpu().numpy())\n",
    "            preds_all.extend(preds.cpu().numpy())\n",
    "\n",
    "    return np.asarray(labels_all), np.asarray(preds_all)\n",
    "\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                            Main execution block                              #\n",
    "# -----------------------------------------------------------------------------\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    print(\"--- Running Model Training/Evaluation with Weighted Fusion ---\")\n",
    "    print(f\"Active Streams: {ACTIVE_STREAMS}\")\n",
    "\n",
    "    # ------------------ load balanced data & scalers -------------------------\n",
    "    print(\"\\nLoading balanced training data …\")\n",
    "    try:\n",
    "        with open(BALANCED_DATA_PKL_PATH, \"rb\") as f:\n",
    "            balanced_train_data_dict = pickle.load(f)\n",
    "        with open(SCALERS_PKL_PATH, \"rb\") as f:\n",
    "            scalers = pickle.load(f)\n",
    "        print(\"   ✓ pre-processed data loaded.\")\n",
    "    except FileNotFoundError as e:\n",
    "        print(f\"ERROR: {e}.  Run the preprocessing cell first.\")\n",
    "        sys.exit(1)\n",
    "    except Exception as e:\n",
    "        print(f\"Error loading pre-processed data: {e}\")\n",
    "        sys.exit(1)\n",
    "\n",
    "    # -------------------------- load PIE database ----------------------------\n",
    "    print(\"\\nLoading PIE database cache for validation …\")\n",
    "    if not os.path.exists(PIE_DATABASE_CACHE_PATH):\n",
    "        raise FileNotFoundError(\"PIE database cache not found.\")\n",
    "\n",
    "    try:\n",
    "        with open(PIE_DATABASE_CACHE_PATH, \"rb\") as f:\n",
    "            pie_database = pickle.load(f)\n",
    "    except Exception as e:\n",
    "        raise RuntimeError(f\"Failed to load PIE database: {e}\")\n",
    "    print(\"   ✓ PIE database loaded.\")\n",
    "\n",
    "    # ------------------- create datasets / dataloaders -----------------------\n",
    "    print(\"\\nCreating Datasets and DataLoaders …\")\n",
    "    try:\n",
    "        train_dataset = BalancedDataset(\n",
    "            balanced_train_data_dict, ACTIVE_STREAMS, label_key=\"label\"\n",
    "        )\n",
    "        del balanced_train_data_dict\n",
    "\n",
    "        val_dataset = PIEDataset(\n",
    "            pie_database,\n",
    "            VAL_SETS_STR,\n",
    "            POSE_DATA_DIR,\n",
    "            SEQ_LEN,\n",
    "            PRED_LEN,\n",
    "            scalers,\n",
    "            ALL_POSSIBLE_STREAMS,  # provide all streams for val\n",
    "        )\n",
    "    except Exception as e:\n",
    "        print(f\"Error creating datasets: {e}\")\n",
    "        raise\n",
    "\n",
    "    if len(train_dataset) == 0 or len(val_dataset) == 0:\n",
    "        raise ValueError(\"One of the datasets is empty!\")\n",
    "\n",
    "    train_loader = DataLoader(\n",
    "        train_dataset,\n",
    "        batch_size=BATCH_SIZE,\n",
    "        shuffle=True,\n",
    "        num_workers=2,\n",
    "        pin_memory=True,\n",
    "    )\n",
    "    val_loader = DataLoader(\n",
    "        val_dataset,\n",
    "        batch_size=BATCH_SIZE,\n",
    "        shuffle=False,\n",
    "        num_workers=2,\n",
    "        pin_memory=True,\n",
    "    )\n",
    "    print(\"   ✓ DataLoaders ready.\")\n",
    "    del pie_database\n",
    "    gc.collect()\n",
    "\n",
    "    # ------------------------- initialise the model --------------------------\n",
    "    print(\"\\nInitialising model …\")\n",
    "    current_input_sizes = {}\n",
    "    SPECIAL = {\n",
    "        \"TRAFFIC_LIGHT\": \"TL_STATE\",\n",
    "        \"STATIC_CONTEXT\": \"STATIC\",\n",
    "        \"EGO_SPEED\": \"EGO_SPEED\",\n",
    "        \"EGO_ACC\": \"EGO_ACC\",\n",
    "        \"EGO_GYRO\": \"EGO_GYRO\",\n",
    "        \"PED_ACTION\": \"PED_ACTION\",\n",
    "        \"PED_LOOK\": \"PED_LOOK\",\n",
    "        \"PED_OCCLUSION\": \"PED_OCC\",\n",
    "    }\n",
    "\n",
    "    for s in ACTIVE_STREAMS:\n",
    "        name = f\"INPUT_SIZE_{SPECIAL.get(s.upper(), s.upper())}\"\n",
    "        if s == \"bbox\":\n",
    "            name = \"INPUT_SIZE_BBOX\"\n",
    "        elif s == \"pose\":\n",
    "            name = \"INPUT_SIZE_POSE\"\n",
    "\n",
    "        if name not in globals():\n",
    "            raise ValueError(f\"Input-size constant {name} not found.\")\n",
    "\n",
    "        current_input_sizes[s] = globals()[name]\n",
    "\n",
    "    model = MultiStreamWeightedAvgLSTM(\n",
    "        current_input_sizes,\n",
    "        LSTM_HIDDEN_SIZE,\n",
    "        NUM_LSTM_LAYERS,\n",
    "        NUM_CLASSES,\n",
    "        ATTENTION_DIM,\n",
    "        DROPOUT_RATE,\n",
    "        stream_names=ACTIVE_STREAMS,\n",
    "    ).to(DEVICE)\n",
    "\n",
    "    print(\"\\n--- Model architecture ---\")\n",
    "    print(model)\n",
    "    total_params = sum(p.numel() for p in model.parameters() if p.requires_grad)\n",
    "    print(f\"Trainable parameters: {total_params:,}\")\n",
    "    print(\"-\" * 30)\n",
    "\n",
    "    # ---------------- loss / optimiser --------------------------------------\n",
    "    print(\"\\nCalculating class weights …\")\n",
    "    train_labels = train_dataset.labels.tolist()\n",
    "    n0, n1 = train_labels.count(0), train_labels.count(1)\n",
    "    total = len(train_labels)\n",
    "    if total == 0:\n",
    "        w0, w1 = 1.0, 1.0\n",
    "    elif n0 == 0:\n",
    "        w0, w1 = 0.0, 1.0\n",
    "    elif n1 == 0:\n",
    "        w0, w1 = 1.0, 0.0\n",
    "    else:\n",
    "        w0, w1 = total / (2.0 * n0), total / (2.0 * n1)\n",
    "\n",
    "    class_weights = torch.tensor([w0, w1], dtype=torch.float32).to(DEVICE)\n",
    "    print(f\"Loss weights → 0: {w0:.2f}, 1: {w1:.2f}\")\n",
    "\n",
    "    criterion = nn.CrossEntropyLoss(weight=class_weights)\n",
    "    optimizer = optim.Adam(model.parameters(), lr=LEARNING_RATE)\n",
    "\n",
    "    best_val_f1 = -1.0\n",
    "    history = {\"train_loss\": [], \"val_loss\": [], \"train_acc\": [], \"val_acc\": [], \"val_f1\": []}\n",
    "    best_model_path = \"\"\n",
    "\n",
    "    # --------------------------- training loop -------------------------------\n",
    "    print(\"\\n--- Starting training ---\")\n",
    "    for epoch in range(NUM_EPOCHS):\n",
    "        t0 = time.time()\n",
    "\n",
    "        train_loss, train_acc = train_epoch(model, train_loader, optimizer, criterion, DEVICE)\n",
    "        metrics = evaluate_epoch(model, val_loader, criterion, DEVICE)\n",
    "\n",
    "        history[\"train_loss\"].append(train_loss)\n",
    "        history[\"val_loss\"].append(metrics[\"loss\"])\n",
    "        history[\"train_acc\"].append(train_acc)\n",
    "        history[\"val_acc\"].append(metrics[\"accuracy\"])\n",
    "        history[\"val_f1\"].append(metrics[\"f1\"])\n",
    "\n",
    "        print(f\"\\nEpoch {epoch + 1:02d}/{NUM_EPOCHS} – {time.time() - t0:.1f}s\")\n",
    "        print(f\"  train loss {train_loss:.4f} | acc {train_acc:.4f}\")\n",
    "        print(f\"  val   loss {metrics['loss']:.4f} | acc {metrics['accuracy']:.4f}\")\n",
    "        print(\n",
    "            f\"           prec {metrics['precision']:.4f} | rec {metrics['recall']:.4f} | f1 {metrics['f1']:.4f} | auc {metrics['auc']:.4f}\"\n",
    "        )\n",
    "\n",
    "        if metrics[\"f1\"] > best_val_f1:\n",
    "            best_val_f1 = metrics[\"f1\"]\n",
    "            best_model_path = f\"best_model_weighted_{'_'.join(sorted(ACTIVE_STREAMS))}_ep{epoch + 1}.pth\"\n",
    "            torch.save(model.state_dict(), best_model_path)\n",
    "            print(f\"  ✓ new best model saved → {best_model_path} (F1 {best_val_f1:.4f})\")\n",
    "\n",
    "    print(\"\\n--- Training finished ---\")\n",
    "\n",
    "    # --------------------------- plots ---------------------------------------\n",
    "    print(\"\\nPlotting training curves …\")\n",
    "    fig, ax = plt.subplots(1, 2, figsize=(12, 5))\n",
    "\n",
    "    ax[0].plot(range(1, NUM_EPOCHS + 1), history[\"train_loss\"], label=\"Train\")\n",
    "    ax[0].plot(range(1, NUM_EPOCHS + 1), history[\"val_loss\"], label=\"Val\")\n",
    "    ax[0].set_xlabel(\"Epoch\")\n",
    "    ax[0].set_ylabel(\"Loss\")\n",
    "    ax[0].set_title(\"Loss curve\")\n",
    "    ax[0].legend()\n",
    "    ax[0].grid(True)\n",
    "\n",
    "    ax[1].plot(range(1, NUM_EPOCHS + 1), history[\"train_acc\"], label=\"Train Acc\")\n",
    "    ax[1].plot(range(1, NUM_EPOCHS + 1), history[\"val_acc\"], label=\"Val Acc\")\n",
    "    ax[1].plot(range(1, NUM_EPOCHS + 1), history[\"val_f1\"], \"--\", label=\"Val F1\")\n",
    "    ax[1].set_xlabel(\"Epoch\")\n",
    "    ax[1].set_ylabel(\"Metric\")\n",
    "    ax[1].set_title(\"Accuracy & F1\")\n",
    "    ax[1].legend()\n",
    "    ax[1].grid(True)\n",
    "\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "    # ------------------- final evaluation (best model) -----------------------\n",
    "    print(\"\\n--- Final Evaluation on Validation set ---\")\n",
    "    if best_model_path and os.path.exists(best_model_path):\n",
    "        try:\n",
    "            model.load_state_dict(torch.load(best_model_path, map_location=DEVICE))\n",
    "            print(f\"Loaded best model: {best_model_path}\")\n",
    "        except Exception as e:\n",
    "            print(f\"Warning: could not load best model ({e}).  Using last epoch params.\")\n",
    "    else:\n",
    "        print(\"Warning: best model not found, using last epoch parameters.\")\n",
    "\n",
    "    final_metrics = evaluate_epoch(model, val_loader, criterion, DEVICE)\n",
    "    y_true, y_pred = get_predictions_and_labels(model, val_loader, DEVICE)\n",
    "    cm = confusion_matrix(y_true, y_pred, labels=[0, 1])\n",
    "\n",
    "    print(\"\\n--- Final metrics (Weighted Avg Fusion) ---\")\n",
    "    for k, v in final_metrics.items():\n",
    "        print(f\"{k:<10}: {v:.4f}\")\n",
    "\n",
    "    print(f\"(Best validation F1 during training: {best_val_f1:.4f})\")\n",
    "\n",
    "    ConfusionMatrixDisplay(cm, display_labels=[\"Not Crossing\", \"Crossing\"]).plot(\n",
    "        cmap=plt.cm.Blues\n",
    "    )\n",
    "    plt.title(\"Confusion Matrix\")\n",
    "    plt.show()\n",
    "\n",
    "    # ------------------- inspect learned fusion weights ----------------------\n",
    "    if hasattr(model, \"fusion_weights\"):\n",
    "        w = torch.softmax(model.fusion_weights, 0).detach().cpu().numpy()\n",
    "        print(\"\\n--- Learned fusion weights ---\")\n",
    "        for stream, weight in zip(model.stream_names, w):\n",
    "            print(f\"{stream:<15}: {weight:.4f}\")\n",
    "        print(\"-\" * 30)\n",
    "\n",
    "    print(\"\\n--- Script complete ---\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "92f2bae9",
   "metadata": {
    "papermill": {
     "duration": 0.014258,
     "end_time": "2025-05-01T14:49:14.799625",
     "exception": false,
     "start_time": "2025-05-01T14:49:14.785367",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 6993690,
     "sourceId": 11201333,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6993708,
     "sourceId": 11201362,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6993722,
     "sourceId": 11201388,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6993740,
     "sourceId": 11201422,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6993794,
     "sourceId": 11201506,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6993809,
     "sourceId": 11201543,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7034191,
     "sourceId": 11255589,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7127490,
     "sourceId": 11382982,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7142036,
     "sourceId": 11402679,
     "sourceType": "datasetVersion"
    },
    {
     "modelId": 279383,
     "modelInstanceId": 258142,
     "sourceId": 302300,
     "sourceType": "modelInstanceVersion"
    },
    {
     "modelId": 283333,
     "modelInstanceId": 262207,
     "sourceId": 307831,
     "sourceType": "modelInstanceVersion"
    },
    {
     "modelId": 288527,
     "modelInstanceId": 267476,
     "sourceId": 316944,
     "sourceType": "modelInstanceVersion"
    },
    {
     "modelId": 297682,
     "modelInstanceId": 276781,
     "sourceId": 329886,
     "sourceType": "modelInstanceVersion"
    },
    {
     "modelId": 297702,
     "modelInstanceId": 276800,
     "sourceId": 329908,
     "sourceType": "modelInstanceVersion"
    },
    {
     "isSourceIdPinned": true,
     "modelId": 314775,
     "modelInstanceId": 294156,
     "sourceId": 352620,
     "sourceType": "modelInstanceVersion"
    }
   ],
   "dockerImageVersionId": 30918,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3801.302984,
   "end_time": "2025-05-01T14:49:18.145833",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-01T13:45:56.842849",
   "version": "2.6.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "02c02d4fe9d145539214b684ed4ab246": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "046ec7543cfb4e1da5146c45b460d335": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "049dda5e5ad44fcfab14693d94b052f6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "04b3d9c97768472fa1940dae448b9fbd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "04f5759bc3a849e9968d3d5dc631211f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "0638ecf1a7d24174af6b9569244b83b6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e742d51e1a7648f4b697f6bf57b34818",
       "placeholder": "​",
       "style": "IPY_MODEL_4ebb298c4c3d457daad52a875e892d5e",
       "tabbable": null,
       "tooltip": null,
       "value": " 1/? [00:00&lt;00:00,  9.96it/s]"
      }
     },
     "0707212a7e3d43d993f11521e2e23df4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "07408493e1e54af29be4f433a75ecc9b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_fabe30de996c491da306ba7a5c66ea3f",
       "placeholder": "​",
       "style": "IPY_MODEL_315ff09766fc4efc961928b7fa23cb9f",
       "tabbable": null,
       "tooltip": null,
       "value": ""
      }
     },
     "07596cf2aa06425eb39f29dd0bc4fccb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "079c4ad4b60d43048b7470361c887052": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "07c324c311a743d18ca49db403ac54ec": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_dfe472ed348c4ef2ad4cb46d996df648",
        "IPY_MODEL_26b05d442188495aa47715fcc8b01202",
        "IPY_MODEL_e5dce99b4c53431c892c646156e3b65d"
       ],
       "layout": "IPY_MODEL_cd989db7697e4c21b3d65e901176a414",
       "tabbable": null,
       "tooltip": null
      }
     },
     "07f43d541169491bb3f01476c0a3ee73": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_895d4c9ad7534e528cde014c3a1d7db3",
       "placeholder": "​",
       "style": "IPY_MODEL_1f2130589780457db6898f6ba3fc6ece",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "09e29b4a056e4454a7edaa6f0cd3d8e8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0a04e14099c44d70b52a4e91c10e5f27": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "0a19f1a04beb4907b24c018c7cbc3492": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0a6a9766ec18484e9171879d2d010579": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "0aef00f7052a45aeb1d38438216d1e4f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "0ba5b83ecf644739b716ecc988e99af9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "0bd7fb1f89f04710a00679a699fe4a7a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f8e9bc45a6334b1f92093e116bbda326",
       "placeholder": "​",
       "style": "IPY_MODEL_6f0f44fcd2eb438db93e5bf92cd468a0",
       "tabbable": null,
       "tooltip": null,
       "value": "Generating CM Data: 100%"
      }
     },
     "0bfd93fba239481993c6b1a48f31a01c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "0c3878752e4e4e4cbfcd5c78883dc491": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0cf0dacc33534b1c989d70e588fef894": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0f5a2e4b3a5541e8aebb2613a671d76d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "10357086284744849a499836831cf401": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "130845c13c4f470aa06159d862e6152e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_19c537a721b04adb8eac74fca091f8c5",
       "placeholder": "​",
       "style": "IPY_MODEL_f73829147f4645e4b964e609ac6df128",
       "tabbable": null,
       "tooltip": null,
       "value": " 1955/1956 [01:34&lt;00:00, 12.23it/s]"
      }
     },
     "145c0a6bde404c2093ff764503e5ef47": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_d9edb6aa679c4676af838adbec3930cf",
        "IPY_MODEL_92bd59f4ec5e4abbb4e11719d236724f",
        "IPY_MODEL_5ae23f5e32bd4915bdeca7725bf27140"
       ],
       "layout": "IPY_MODEL_d53b934d4d6241188f1f5c6582bb190f",
       "tabbable": null,
       "tooltip": null
      }
     },
     "15bde93f873a4e20969faff780aee57b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "15cb84a1fb0a4a79b1c5625d51ea0078": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "1707438912954520a347971772f06332": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "17764bb243784133955e5fa29f7d2c35": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_6ad86657eb1148198426a3bd1527460e",
       "placeholder": "​",
       "style": "IPY_MODEL_18cfe890c4c7455995ef14ec493cd199",
       "tabbable": null,
       "tooltip": null,
       "value": " 1955/1956 [01:34&lt;00:00, 14.11it/s]"
      }
     },
     "183912b2eabf4c7fbf53fdf4e4005a73": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "18cfe890c4c7455995ef14ec493cd199": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "19c537a721b04adb8eac74fca091f8c5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1a7abeb40c4e4ab980e8ba8e20d1ad5f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e0137c86b2cd42fca6e1e872119ca545",
       "max": 1956.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_5a16872c0d704db7a6ad3f066b526fc1",
       "tabbable": null,
       "tooltip": null,
       "value": 1956.0
      }
     },
     "1aafbce91dad4f06a59903b3d67b918c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "1c6bd788c1d743649370120208ccc566": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "1cf463a46b584e1dac78cb017b0fa886": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1f2130589780457db6898f6ba3fc6ece": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "2127db93df55467c83495d94b55e71b4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "2166a96f77a7453faf635e32e32d2286": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9da1df1ab70045a09c889a6deed27fbf",
       "placeholder": "​",
       "style": "IPY_MODEL_4026e88fdaa3454abdb4656d57147a06",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "231d69768274491795a2d23524b1a64b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "23f17709af314e1b9381ca01c5d9e265": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_3ff58ddd255248c1bf42f1ea9ab37ac2",
        "IPY_MODEL_3f0725df6d304ed0846fb9935b0ce91b",
        "IPY_MODEL_debdcc8377854f2c80cb6ad111061fa4"
       ],
       "layout": "IPY_MODEL_079c4ad4b60d43048b7470361c887052",
       "tabbable": null,
       "tooltip": null
      }
     },
     "249739e0130e4668bb8c466169a964b2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "25bad1ec0d0949a4baa2b1daa72f0b73": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_966f81f8852e4613a07cd97c23ca300c",
       "placeholder": "​",
       "style": "IPY_MODEL_0aef00f7052a45aeb1d38438216d1e4f",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "265152e3d3324f3faeecf3d13e7632ee": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "26b05d442188495aa47715fcc8b01202": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9b3bcbbd1e4649e28f0ab2f2941bbb1a",
       "max": 1956.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_fc0562c8759d49789b5f6cd90ecc53cf",
       "tabbable": null,
       "tooltip": null,
       "value": 1956.0
      }
     },
     "26be6c5fdd074bcd87c8ff2815dc353f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "2859d63cbae3404ab90804413f7ed117": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "28f061cc5c684090ba192d69f79cd305": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_61f85cc21d6a49e084bbfec695a17920",
       "placeholder": "​",
       "style": "IPY_MODEL_049dda5e5ad44fcfab14693d94b052f6",
       "tabbable": null,
       "tooltip": null,
       "value": " 3233/3235 [03:20&lt;00:00, 15.89it/s]"
      }
     },
     "2a06de29f5b84bbfb5774ea85df44545": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2d1442c68da34fe1859576cba1def7df": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "2de288a5aa7940fb8884b5a375e6a133": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2fbaf8d539014fe7bfb9d47eedce97f5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3132df20c1bc448c849876cc225db660": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_1cf463a46b584e1dac78cb017b0fa886",
       "max": 1956.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_9b1ee1222d96427f9ced4cca80951f26",
       "tabbable": null,
       "tooltip": null,
       "value": 1956.0
      }
     },
     "315ff09766fc4efc961928b7fa23cb9f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "3260d39438f440f1835bdd0ac1900ea8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "32c3c7fc05564d139e2b47fe588357d6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_d303163d6cb74bc48870cf28bb1c2cce",
       "max": 3235.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_34927c8fb25f4c2eba7c860027e4d3e6",
       "tabbable": null,
       "tooltip": null,
       "value": 3235.0
      }
     },
     "34927c8fb25f4c2eba7c860027e4d3e6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "34c780710071421784b8afa998ff5aa5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "358e49560f684605a5b6f595ea085bfb": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "35ba0b1b091543b0a61d63f3529d1905": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "36408d2d7f4147f4b831bafab4e86c93": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_518683a154a5449ebc0663e7f11ae60e",
       "max": 1956.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_6771cd34eba844ac95ef1647b6d3e8b7",
       "tabbable": null,
       "tooltip": null,
       "value": 1956.0
      }
     },
     "372b4ee3cc4d4e6fabeb07bc6d130f6e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_2de288a5aa7940fb8884b5a375e6a133",
       "max": 3235.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_37d7ff13e83443078d90735fcd1aba6a",
       "tabbable": null,
       "tooltip": null,
       "value": 3235.0
      }
     },
     "37b295052b074846b406ced32b4671ab": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "37d7ff13e83443078d90735fcd1aba6a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "394138a4e55f4b02a9de002d29931726": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "3b204a0789bc45289b41cafeccb24aa1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c90d1ed153dd403baa362978873180b5",
       "placeholder": "​",
       "style": "IPY_MODEL_2d1442c68da34fe1859576cba1def7df",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "3bde8f80382d441f87b06985eb53028b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_88e49696ae72481386f9e909f20202a5",
       "placeholder": "​",
       "style": "IPY_MODEL_3fc24467fc7a4412b9c1c6a35955eda7",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "3cc4b0899c324881bb716ae63182766e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3e4e4e12dd674b849d5830007fe3626b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_dec0fd5c7e0240f29e5bfa1af3b0f790",
       "placeholder": "​",
       "style": "IPY_MODEL_3e9fac2674ae49b6a727e8208506e092",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "3e9fac2674ae49b6a727e8208506e092": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "3efde38c8fc5456798e56453c3263cb4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "3f0725df6d304ed0846fb9935b0ce91b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0c3878752e4e4e4cbfcd5c78883dc491",
       "max": 1956.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_915a29afee124f5893ebbea7f4145b50",
       "tabbable": null,
       "tooltip": null,
       "value": 1956.0
      }
     },
     "3f3ea4f15c1242bfb9791a46bed1f6b9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9d3da8ce061248b49f6bc703e2920fe9",
       "max": 281342.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_425ed0a1cca046158222b45851980d01",
       "tabbable": null,
       "tooltip": null,
       "value": 281342.0
      }
     },
     "3fc24467fc7a4412b9c1c6a35955eda7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "3ff58ddd255248c1bf42f1ea9ab37ac2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_df18bb14315b4e228fa2555275c5f9ed",
       "placeholder": "​",
       "style": "IPY_MODEL_61a1dad48a094008975b60b2dc26ba5e",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "4026e88fdaa3454abdb4656d57147a06": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "402cca4459f54b86b9815eb2ebd78b33": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "41789339c07d4bfab5cef0853d2044d8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "419bccc6688e4fc9b70b15e79a60d930": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "41c5015bbbf243959b5d1b1b36ecb999": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_907e03faa43048f7b037572233c1f248",
        "IPY_MODEL_32c3c7fc05564d139e2b47fe588357d6",
        "IPY_MODEL_28f061cc5c684090ba192d69f79cd305"
       ],
       "layout": "IPY_MODEL_69a0c4a252f04971be9779c7327e4664",
       "tabbable": null,
       "tooltip": null
      }
     },
     "41dfa226d98d4e539efce842d8304948": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "425ed0a1cca046158222b45851980d01": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "45197abd33e146b0896021cde78da624": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "47a66a8bb1a34f31be8bff66212670da": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "49330ab421984e7a97d20be572cbf9ec": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_5d4c0fb2c18146b5b829ea49c4a16eb0",
        "IPY_MODEL_874c8bb48fd34f04be0a97f59dcf29d4",
        "IPY_MODEL_a690bddf257e422c8734019d9749b113"
       ],
       "layout": "IPY_MODEL_358e49560f684605a5b6f595ea085bfb",
       "tabbable": null,
       "tooltip": null
      }
     },
     "4a8c7f41f3a842d2a52f98732cf8bbeb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "4b6756f32b384fe28b17612f9c97411b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f4d39ab299cf46c9be18fa474e905f0e",
       "placeholder": "​",
       "style": "IPY_MODEL_e1f52d4df8624ad79703d01f675633c3",
       "tabbable": null,
       "tooltip": null,
       "value": " 1955/1956 [01:33&lt;00:00, 13.51it/s]"
      }
     },
     "4e09e791c6c24ef6887ebde0c53a0fcb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "4ebb298c4c3d457daad52a875e892d5e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "518683a154a5449ebc0663e7f11ae60e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "524526c01b8f4b11acbf18722f4946ce": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "5391cb554407439ab2e650c5ffa062d7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "info",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_71395baa414c4b7da8cefe211214c030",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_07596cf2aa06425eb39f29dd0bc4fccb",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "53a100a5045144648a5f6202560989b0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_41dfa226d98d4e539efce842d8304948",
       "max": 3235.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_0a04e14099c44d70b52a4e91c10e5f27",
       "tabbable": null,
       "tooltip": null,
       "value": 3235.0
      }
     },
     "53d59c4cf77d4460bd01fd8452522d06": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "5602b5be5b82440bb15af2bbe480afd4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_3b204a0789bc45289b41cafeccb24aa1",
        "IPY_MODEL_b2a3e40a9e2f4290a039f4eb848e2851",
        "IPY_MODEL_9becd828d2634537a4b85fc9d84ea918"
       ],
       "layout": "IPY_MODEL_ece34c52f09e4198b60e36ad3b494942",
       "tabbable": null,
       "tooltip": null
      }
     },
     "5a16872c0d704db7a6ad3f066b526fc1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "5a4f9639ca0446aa8031dbfffda2b530": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "5ae23f5e32bd4915bdeca7725bf27140": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7c7c8f09bd334e88a58c3143b7470fdd",
       "placeholder": "​",
       "style": "IPY_MODEL_fe5d4dcbd688486fa67db012357e39c4",
       "tabbable": null,
       "tooltip": null,
       "value": " 3234/3235 [03:11&lt;00:00, 16.12it/s]"
      }
     },
     "5c0f27bf6ccf4bac9b900b1b308f8b8d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3cc4b0899c324881bb716ae63182766e",
       "placeholder": "​",
       "style": "IPY_MODEL_ad4aa9b786264d59af3f09bac5647638",
       "tabbable": null,
       "tooltip": null,
       "value": ""
      }
     },
     "5d1959b38d42489bacb22f5dd2677322": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_fba8bbcfe2774348a275635d2f248c5f",
       "placeholder": "​",
       "style": "IPY_MODEL_0a6a9766ec18484e9171879d2d010579",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "5d25e39d5ea24348a5a470cb18f3c5a6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_642fbea8c1374ee7a394b8a1f553d769",
        "IPY_MODEL_3132df20c1bc448c849876cc225db660",
        "IPY_MODEL_b2916cf75a244752aa3756fd35f3d79f"
       ],
       "layout": "IPY_MODEL_a7ee1ce0463b40e688dda3f8af9c50a2",
       "tabbable": null,
       "tooltip": null
      }
     },
     "5d4c0fb2c18146b5b829ea49c4a16eb0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_fdbded8ce32f41e6b802eaaa80ac08c9",
       "placeholder": "​",
       "style": "IPY_MODEL_6440a6ab9c224cc8a384ed795aedc5ed",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "5e23750efa1f4a3e94765339921aa857": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5f66de631159459d8cd0bdad4ae85d4b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_6fea945b564c4b8b8dbbd4561d95e83d",
       "max": 3235.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_a8affa7b8b794e2283ced6391acecff8",
       "tabbable": null,
       "tooltip": null,
       "value": 3235.0
      }
     },
     "61a1dad48a094008975b60b2dc26ba5e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "61f85cc21d6a49e084bbfec695a17920": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "642fbea8c1374ee7a394b8a1f553d769": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_d471695eb05844a7a24684e36542408f",
       "placeholder": "​",
       "style": "IPY_MODEL_7082a23e3a19412d91775140c1e689bf",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "6440a6ab9c224cc8a384ed795aedc5ed": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "64aab672c4fd48abbff3d470c95edea1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ee94a576873d4fbdb48e852b1201637f",
       "placeholder": "​",
       "style": "IPY_MODEL_86af16e68f8a4f9b9289b4b8f320b197",
       "tabbable": null,
       "tooltip": null,
       "value": " 281342/281342 [11:04&lt;00:00, 425.17it/s]"
      }
     },
     "65585bdffdf54925b84225e892d76326": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "655be6d0e3de41e6b12cfd6f2d3ea8e6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "65d805a19a7a450590b2838ebb7f3899": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "660e316a52414de58f59b88bf637cd17": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6771cd34eba844ac95ef1647b6d3e8b7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "67dbd1aaf0594b189b92f534bc8eb66d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_5c0f27bf6ccf4bac9b900b1b308f8b8d",
        "IPY_MODEL_5391cb554407439ab2e650c5ffa062d7",
        "IPY_MODEL_0638ecf1a7d24174af6b9569244b83b6"
       ],
       "layout": "IPY_MODEL_fb20f7ad773841139c51bee4a5e31dff",
       "tabbable": null,
       "tooltip": null
      }
     },
     "68292e89e36b4bc4879caa5b4263c319": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_a8a68c82fff7485984d0512b588b69a9",
        "IPY_MODEL_7e68119b85b94877b257bfa0dd352074",
        "IPY_MODEL_efd142f0345140d2bbf9e7f2afdf5f75"
       ],
       "layout": "IPY_MODEL_dba5c8bfb1a14f439d3452616244a726",
       "tabbable": null,
       "tooltip": null
      }
     },
     "69a0c4a252f04971be9779c7327e4664": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "6ad86657eb1148198426a3bd1527460e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6c48cd98754e42b6bee799606582b1e1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_fb7b23f98a03433380c2241a553aecbb",
       "max": 3235.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_8432a25304f748acac0b0da147802de5",
       "tabbable": null,
       "tooltip": null,
       "value": 3235.0
      }
     },
     "6c5eaad9112f4fa28728a7d20e64e3f6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_2859d63cbae3404ab90804413f7ed117",
       "placeholder": "​",
       "style": "IPY_MODEL_f04bf8262fcb40b3891f62f4cff6f63f",
       "tabbable": null,
       "tooltip": null,
       "value": " 16/? [00:00&lt;00:00, 17.40it/s]"
      }
     },
     "6d135fc3b4a34af8a9a2dbcb85f4edf3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "6e1350edf30e496ea9810b0486f8c2cf": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6f0f44fcd2eb438db93e5bf92cd468a0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "6f7fb6b991bc455ba194aab388ace00a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6fea945b564c4b8b8dbbd4561d95e83d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7082a23e3a19412d91775140c1e689bf": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "70eb9c48bb154bac8df8b817b8aef0ba": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_6e1350edf30e496ea9810b0486f8c2cf",
       "placeholder": "​",
       "style": "IPY_MODEL_4a8c7f41f3a842d2a52f98732cf8bbeb",
       "tabbable": null,
       "tooltip": null,
       "value": " 1954/1956 [01:33&lt;00:00, 12.53it/s]"
      }
     },
     "71395baa414c4b7da8cefe211214c030": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "7372d7c5740f4bc8b37ce33a287146af": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_b9e1165763a1473d93263b1b158865dc",
       "max": 3235.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_8469405951d9478ea3f1554eb109dca6",
       "tabbable": null,
       "tooltip": null,
       "value": 3235.0
      }
     },
     "73b18001fb2148a48c8addf41e9685ed": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "754e2fd61e8d45f1ab38b3b457042b8b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "75784ff2c7fe402987fdc992ed314718": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_0bd7fb1f89f04710a00679a699fe4a7a",
        "IPY_MODEL_7e01d309d5c446df8e8e4aa437d85d15",
        "IPY_MODEL_a89b4ec311af4c61a5a7addadefe0f63"
       ],
       "layout": "IPY_MODEL_b361341edd9c49c1bb62f778f273b9f9",
       "tabbable": null,
       "tooltip": null
      }
     },
     "7716f0ff45644dfc8c93e7aa7a8b56c0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "790001d0aae742eab7b78707d99c249e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "7b33c0a950444757bad4887321a8a1ad": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7c7c8f09bd334e88a58c3143b7470fdd": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7e01d309d5c446df8e8e4aa437d85d15": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e00e3ead8ce54983b827b0c8d9f1cf50",
       "max": 1956.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_04b3d9c97768472fa1940dae448b9fbd",
       "tabbable": null,
       "tooltip": null,
       "value": 1956.0
      }
     },
     "7e68119b85b94877b257bfa0dd352074": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "info",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_d42bd52769794527b6f0b4c748baedc5",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_fe69d1991f6741338d970fd941098787",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "7e6f0f9cdc724568a1b7bfc18d4cd022": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "815807236d164809afa4bbb415f700ad": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_2a06de29f5b84bbfb5774ea85df44545",
       "placeholder": "​",
       "style": "IPY_MODEL_9d3b8edc44b449f8a35852fe32693cde",
       "tabbable": null,
       "tooltip": null,
       "value": " 3233/3235 [03:10&lt;00:00, 16.69it/s]"
      }
     },
     "822389ac7fee47a0937ee1d9f86ac056": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_bec75fb8ea864ec6beb02188b6390884",
       "placeholder": "​",
       "style": "IPY_MODEL_15bde93f873a4e20969faff780aee57b",
       "tabbable": null,
       "tooltip": null,
       "value": " 1955/1956 [01:33&lt;00:00, 12.44it/s]"
      }
     },
     "8432a25304f748acac0b0da147802de5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "8469405951d9478ea3f1554eb109dca6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "8499391c53e64cd1872eb943b39b418a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "86af16e68f8a4f9b9289b4b8f320b197": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "874c8bb48fd34f04be0a97f59dcf29d4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e89938323e6c4d8aa0730132df254d4c",
       "max": 1956.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_04f5759bc3a849e9968d3d5dc631211f",
       "tabbable": null,
       "tooltip": null,
       "value": 1956.0
      }
     },
     "88e49696ae72481386f9e909f20202a5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "895d4c9ad7534e528cde014c3a1d7db3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8a5b6ead4b93450697f5c07d9f1ecde3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c89dbc1fdbb8408dbd5f724139df4f85",
       "placeholder": "​",
       "style": "IPY_MODEL_3260d39438f440f1835bdd0ac1900ea8",
       "tabbable": null,
       "tooltip": null,
       "value": " 3234/3235 [03:08&lt;00:00, 16.63it/s]"
      }
     },
     "8ab28decbf7d41ba94d82ee08c2aa5d4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ec72ade740614cebbe41b59174d7eaf4",
       "placeholder": "​",
       "style": "IPY_MODEL_65585bdffdf54925b84225e892d76326",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "907e03faa43048f7b037572233c1f248": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0cf0dacc33534b1c989d70e588fef894",
       "placeholder": "​",
       "style": "IPY_MODEL_e4e3dc997a9240c589f187e62b0c4b04",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "915a29afee124f5893ebbea7f4145b50": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "92bd59f4ec5e4abbb4e11719d236724f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_2fbaf8d539014fe7bfb9d47eedce97f5",
       "max": 3235.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_5a4f9639ca0446aa8031dbfffda2b530",
       "tabbable": null,
       "tooltip": null,
       "value": 3235.0
      }
     },
     "9303273ed87040b79aad283ea0f6b99a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "938af976af9b41d2afe6353b076ce694": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "944faa0e2a614e8fbf729fb503a1b83c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_41789339c07d4bfab5cef0853d2044d8",
       "max": 1956.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_9d9370e089aa435ea2405998b24a8c02",
       "tabbable": null,
       "tooltip": null,
       "value": 1956.0
      }
     },
     "945b739b260a4b42b22c221bca2ac7bc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "958801e44cdc4df4b2db985742daf7e1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "info",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e357effedf57432a968ac60379f74ae6",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_249739e0130e4668bb8c466169a964b2",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "96199300f5564024aa4b41d1a2f4d082": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_d4435612e8ab404eabd25ec9d3a8c8e4",
       "max": 1956.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_c2f193644d3b41f786b42b9e6753319c",
       "tabbable": null,
       "tooltip": null,
       "value": 1956.0
      }
     },
     "966f81f8852e4613a07cd97c23ca300c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "991fc05b0a154a18aa17b51758c08fb7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ca2b976cba934eefafb1eaa6fac1d739",
       "placeholder": "​",
       "style": "IPY_MODEL_e8e5b0132b09493f99ae5afebcb096ea",
       "tabbable": null,
       "tooltip": null,
       "value": "seq: 100%"
      }
     },
     "9ae9e8062b6042978508f13ccc5d03c0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "9b1ee1222d96427f9ced4cca80951f26": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "9b3bcbbd1e4649e28f0ab2f2941bbb1a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9becd828d2634537a4b85fc9d84ea918": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0a19f1a04beb4907b24c018c7cbc3492",
       "placeholder": "​",
       "style": "IPY_MODEL_10357086284744849a499836831cf401",
       "tabbable": null,
       "tooltip": null,
       "value": " 3234/3235 [03:12&lt;00:00, 16.47it/s]"
      }
     },
     "9d3b8edc44b449f8a35852fe32693cde": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "9d3da8ce061248b49f6bc703e2920fe9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9d9370e089aa435ea2405998b24a8c02": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "9da1df1ab70045a09c889a6deed27fbf": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9dd844b0d7dd4839820886fd3abd2496": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a027e4211cfe4e2b93f3e3921877edeb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7b33c0a950444757bad4887321a8a1ad",
       "placeholder": "​",
       "style": "IPY_MODEL_046ec7543cfb4e1da5146c45b460d335",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "a02cbefcdb9a4494bda41d150cceb7a6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_b87e8b1109be4348bb87f0308ed3c6a4",
       "max": 1956.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_dd95b14eff08442087661ee5f8e97ed2",
       "tabbable": null,
       "tooltip": null,
       "value": 1956.0
      }
     },
     "a4ed032f2c01401fa09240a91ca3bb9b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_09e29b4a056e4454a7edaa6f0cd3d8e8",
       "placeholder": "​",
       "style": "IPY_MODEL_f12032865c704bfe9367205c1836ed33",
       "tabbable": null,
       "tooltip": null,
       "value": " 1954/1956 [01:33&lt;00:00, 12.09it/s]"
      }
     },
     "a54e302fcf50424e82e7fbdd432c9002": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_754e2fd61e8d45f1ab38b3b457042b8b",
       "placeholder": "​",
       "style": "IPY_MODEL_34c780710071421784b8afa998ff5aa5",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "a690bddf257e422c8734019d9749b113": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9303273ed87040b79aad283ea0f6b99a",
       "placeholder": "​",
       "style": "IPY_MODEL_37b295052b074846b406ced32b4671ab",
       "tabbable": null,
       "tooltip": null,
       "value": " 1954/1956 [01:33&lt;00:00, 11.73it/s]"
      }
     },
     "a7ee1ce0463b40e688dda3f8af9c50a2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "a89b4ec311af4c61a5a7addadefe0f63": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_655be6d0e3de41e6b12cfd6f2d3ea8e6",
       "placeholder": "​",
       "style": "IPY_MODEL_1707438912954520a347971772f06332",
       "tabbable": null,
       "tooltip": null,
       "value": " 1955/1956 [01:33&lt;00:00, 12.84it/s]"
      }
     },
     "a8a68c82fff7485984d0512b588b69a9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_660e316a52414de58f59b88bf637cd17",
       "placeholder": "​",
       "style": "IPY_MODEL_c4a5367207994489bc7a0c52a8e33497",
       "tabbable": null,
       "tooltip": null,
       "value": ""
      }
     },
     "a8affa7b8b794e2283ced6391acecff8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "aa251c6ffad4428ebd6a5aae896b181b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_02c02d4fe9d145539214b684ed4ab246",
       "placeholder": "​",
       "style": "IPY_MODEL_fa5b948968bc4fe7b51eb92460acb41c",
       "tabbable": null,
       "tooltip": null,
       "value": " 1956/1956 [01:33&lt;00:00, 15.63it/s]"
      }
     },
     "aaf3c3d4e8744a0cbba76a4b255c6c64": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_bce20288164c46058008ce9c0943ebc4",
       "max": 1956.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_524526c01b8f4b11acbf18722f4946ce",
       "tabbable": null,
       "tooltip": null,
       "value": 1956.0
      }
     },
     "ac20b09109bd482f867e80feaa4b2ee2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ac29dc932c874f9cbf7b566d1252dab2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "ac7dfba473e9440280fb07603eaf9e32": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ad4aa9b786264d59af3f09bac5647638": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "afdcef5898db48109c82a766741cd9b7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_bcaca75a990a408887a3dbf8d3982e58",
       "placeholder": "​",
       "style": "IPY_MODEL_15cb84a1fb0a4a79b1c5625d51ea0078",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "b2916cf75a244752aa3756fd35f3d79f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5e23750efa1f4a3e94765339921aa857",
       "placeholder": "​",
       "style": "IPY_MODEL_cca1abfbefe14999b97d9d5af6f5338a",
       "tabbable": null,
       "tooltip": null,
       "value": " 1954/1956 [01:34&lt;00:00, 12.64it/s]"
      }
     },
     "b2a3e40a9e2f4290a039f4eb848e2851": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ac7dfba473e9440280fb07603eaf9e32",
       "max": 3235.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_945b739b260a4b42b22c221bca2ac7bc",
       "tabbable": null,
       "tooltip": null,
       "value": 3235.0
      }
     },
     "b2e203934f0b4164915f7e4d7437cef5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_8ab28decbf7d41ba94d82ee08c2aa5d4",
        "IPY_MODEL_36408d2d7f4147f4b831bafab4e86c93",
        "IPY_MODEL_130845c13c4f470aa06159d862e6152e"
       ],
       "layout": "IPY_MODEL_0ba5b83ecf644739b716ecc988e99af9",
       "tabbable": null,
       "tooltip": null
      }
     },
     "b361341edd9c49c1bb62f778f273b9f9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "b38d79c4eea84a49a7bfd1f6d64bee24": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b5c2a4f1fabc485ba749798b7261f8fe": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_3bde8f80382d441f87b06985eb53028b",
        "IPY_MODEL_eca3fa12155443b28f89cd28719e15f5",
        "IPY_MODEL_ca516fa88b4c49e79310b6bba96bf3da"
       ],
       "layout": "IPY_MODEL_c0872a0164ca4114be547c7cdfd4cba6",
       "tabbable": null,
       "tooltip": null
      }
     },
     "b76ad24d4d33466e9904bcbf0f25004e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_a027e4211cfe4e2b93f3e3921877edeb",
        "IPY_MODEL_5f66de631159459d8cd0bdad4ae85d4b",
        "IPY_MODEL_f26b5b5694404bc781907a4338211e92"
       ],
       "layout": "IPY_MODEL_0bfd93fba239481993c6b1a48f31a01c",
       "tabbable": null,
       "tooltip": null
      }
     },
     "b83c4990b89847e1bbeb3ce985f40ba3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_991fc05b0a154a18aa17b51758c08fb7",
        "IPY_MODEL_3f3ea4f15c1242bfb9791a46bed1f6b9",
        "IPY_MODEL_64aab672c4fd48abbff3d470c95edea1"
       ],
       "layout": "IPY_MODEL_be17c78db3174084a01016179afcda23",
       "tabbable": null,
       "tooltip": null
      }
     },
     "b8743134bbca4ada855d95a418905b44": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b87e8b1109be4348bb87f0308ed3c6a4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b9039fdc9b73444b8e262f0ca61cca69": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b9e1165763a1473d93263b1b158865dc": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "bb18484ab1824df7acbdbbc631911034": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_a54e302fcf50424e82e7fbdd432c9002",
        "IPY_MODEL_6c48cd98754e42b6bee799606582b1e1",
        "IPY_MODEL_fa8d16968e6c4bbb97dc6d987716ce1b"
       ],
       "layout": "IPY_MODEL_790001d0aae742eab7b78707d99c249e",
       "tabbable": null,
       "tooltip": null
      }
     },
     "bcaca75a990a408887a3dbf8d3982e58": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "bce20288164c46058008ce9c0943ebc4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "be17c78db3174084a01016179afcda23": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "bec75fb8ea864ec6beb02188b6390884": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c0872a0164ca4114be547c7cdfd4cba6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "c2907f37ae57440c93d16a77b6a0f36e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f90a18fdc6964e5da6a9a474159911b8",
       "max": 3235.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_4e09e791c6c24ef6887ebde0c53a0fcb",
       "tabbable": null,
       "tooltip": null,
       "value": 3235.0
      }
     },
     "c2b134ec4b3444ed9752e01b4f2e8ca4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_3e4e4e12dd674b849d5830007fe3626b",
        "IPY_MODEL_e56d348076a943b582e4400fd90ba692",
        "IPY_MODEL_aa251c6ffad4428ebd6a5aae896b181b"
       ],
       "layout": "IPY_MODEL_7716f0ff45644dfc8c93e7aa7a8b56c0",
       "tabbable": null,
       "tooltip": null
      }
     },
     "c2f193644d3b41f786b42b9e6753319c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "c4a5367207994489bc7a0c52a8e33497": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "c5003355a0c5408ba8a6d9124e7f58df": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_d47ab42f7608448eb5afe8b121ca90ac",
        "IPY_MODEL_944faa0e2a614e8fbf729fb503a1b83c",
        "IPY_MODEL_4b6756f32b384fe28b17612f9c97411b"
       ],
       "layout": "IPY_MODEL_3efde38c8fc5456798e56453c3263cb4",
       "tabbable": null,
       "tooltip": null
      }
     },
     "c89dbc1fdbb8408dbd5f724139df4f85": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c90d1ed153dd403baa362978873180b5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ca2b976cba934eefafb1eaa6fac1d739": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ca516fa88b4c49e79310b6bba96bf3da": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9dd844b0d7dd4839820886fd3abd2496",
       "placeholder": "​",
       "style": "IPY_MODEL_26be6c5fdd074bcd87c8ff2815dc353f",
       "tabbable": null,
       "tooltip": null,
       "value": " 3233/3235 [03:10&lt;00:00, 16.43it/s]"
      }
     },
     "caa12c4cec5c4cbfaddc00a6bd978d82": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "cca1abfbefe14999b97d9d5af6f5338a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "ccea5a9a578a43a8a80adb69ac846c45": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_07408493e1e54af29be4f433a75ecc9b",
        "IPY_MODEL_958801e44cdc4df4b2db985742daf7e1",
        "IPY_MODEL_6c5eaad9112f4fa28728a7d20e64e3f6"
       ],
       "layout": "IPY_MODEL_d82a225404e14ffcb4aec9df6710f404",
       "tabbable": null,
       "tooltip": null
      }
     },
     "cd84008de62f47389f085cc34ea1d6d9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_07f43d541169491bb3f01476c0a3ee73",
        "IPY_MODEL_a02cbefcdb9a4494bda41d150cceb7a6",
        "IPY_MODEL_70eb9c48bb154bac8df8b817b8aef0ba"
       ],
       "layout": "IPY_MODEL_9ae9e8062b6042978508f13ccc5d03c0",
       "tabbable": null,
       "tooltip": null
      }
     },
     "cd989db7697e4c21b3d65e901176a414": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "cf6d99ba823640c39f26fa5735c8996e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "d303163d6cb74bc48870cf28bb1c2cce": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d42bd52769794527b6f0b4c748baedc5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "d4435612e8ab404eabd25ec9d3a8c8e4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d471695eb05844a7a24684e36542408f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d47ab42f7608448eb5afe8b121ca90ac": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ac20b09109bd482f867e80feaa4b2ee2",
       "placeholder": "​",
       "style": "IPY_MODEL_402cca4459f54b86b9815eb2ebd78b33",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "d4ca4ba45334431e90249d83520322e4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "d53b934d4d6241188f1f5c6582bb190f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "d82a225404e14ffcb4aec9df6710f404": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "d923cb3fd96e45bfb00581891468c71a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f88dbf8642d9455fa8eac49e74c6f978",
       "placeholder": "​",
       "style": "IPY_MODEL_394138a4e55f4b02a9de002d29931726",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "d9edb6aa679c4676af838adbec3930cf": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0f5a2e4b3a5541e8aebb2613a671d76d",
       "placeholder": "​",
       "style": "IPY_MODEL_8499391c53e64cd1872eb943b39b418a",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "da815651d2114fc9b34414116feab195": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_afdcef5898db48109c82a766741cd9b7",
        "IPY_MODEL_1a7abeb40c4e4ab980e8ba8e20d1ad5f",
        "IPY_MODEL_a4ed032f2c01401fa09240a91ca3bb9b"
       ],
       "layout": "IPY_MODEL_45197abd33e146b0896021cde78da624",
       "tabbable": null,
       "tooltip": null
      }
     },
     "db0edfb55d6c45a5ab6d32ea5fd307b3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_2166a96f77a7453faf635e32e32d2286",
        "IPY_MODEL_aaf3c3d4e8744a0cbba76a4b255c6c64",
        "IPY_MODEL_17764bb243784133955e5fa29f7d2c35"
       ],
       "layout": "IPY_MODEL_f7ec2955e1a943799af63816cae41103",
       "tabbable": null,
       "tooltip": null
      }
     },
     "db27ce886ef04a128b1163a66e5e366e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_5d1959b38d42489bacb22f5dd2677322",
        "IPY_MODEL_96199300f5564024aa4b41d1a2f4d082",
        "IPY_MODEL_822389ac7fee47a0937ee1d9f86ac056"
       ],
       "layout": "IPY_MODEL_fe3af8fbbda344bfb370e36b80ce0372",
       "tabbable": null,
       "tooltip": null
      }
     },
     "dba5c8bfb1a14f439d3452616244a726": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "dd95b14eff08442087661ee5f8e97ed2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "de47aec498f5409aadfe37f60d750be2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_265152e3d3324f3faeecf3d13e7632ee",
       "placeholder": "​",
       "style": "IPY_MODEL_73b18001fb2148a48c8addf41e9685ed",
       "tabbable": null,
       "tooltip": null,
       "value": " 3233/3235 [03:09&lt;00:00, 16.43it/s]"
      }
     },
     "debdcc8377854f2c80cb6ad111061fa4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_b8743134bbca4ada855d95a418905b44",
       "placeholder": "​",
       "style": "IPY_MODEL_6d135fc3b4a34af8a9a2dbcb85f4edf3",
       "tabbable": null,
       "tooltip": null,
       "value": " 1955/1956 [01:33&lt;00:00, 13.51it/s]"
      }
     },
     "dec0fd5c7e0240f29e5bfa1af3b0f790": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "df18bb14315b4e228fa2555275c5f9ed": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "dfe472ed348c4ef2ad4cb46d996df648": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_65d805a19a7a450590b2838ebb7f3899",
       "placeholder": "​",
       "style": "IPY_MODEL_231d69768274491795a2d23524b1a64b",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "e00e3ead8ce54983b827b0c8d9f1cf50": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e0137c86b2cd42fca6e1e872119ca545": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e1f52d4df8624ad79703d01f675633c3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "e357effedf57432a968ac60379f74ae6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "e4e3dc997a9240c589f187e62b0c4b04": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "e515a5189c24441988fc4de43f4fdaa2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "e56d348076a943b582e4400fd90ba692": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_fced63ac042447088daa36c2f782f0d6",
       "max": 1956.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_35ba0b1b091543b0a61d63f3529d1905",
       "tabbable": null,
       "tooltip": null,
       "value": 1956.0
      }
     },
     "e5dce99b4c53431c892c646156e3b65d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_caa12c4cec5c4cbfaddc00a6bd978d82",
       "placeholder": "​",
       "style": "IPY_MODEL_f90e305c4f8842708e81a6654f36dc9e",
       "tabbable": null,
       "tooltip": null,
       "value": " 1956/1956 [01:34&lt;00:00, 15.95it/s]"
      }
     },
     "e742d51e1a7648f4b697f6bf57b34818": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e89938323e6c4d8aa0730132df254d4c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e8e5b0132b09493f99ae5afebcb096ea": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "e9e038f4adcc4855b80aed5918ea7fe4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "eb222b1704984f319f6f685d4f091ef3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_f097b3a0a46a4b9cb99f7ba3aa5d581e",
        "IPY_MODEL_c2907f37ae57440c93d16a77b6a0f36e",
        "IPY_MODEL_fdaafb5111a14c02bfaad6784dd02904"
       ],
       "layout": "IPY_MODEL_1c6bd788c1d743649370120208ccc566",
       "tabbable": null,
       "tooltip": null
      }
     },
     "ec72ade740614cebbe41b59174d7eaf4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "eca3fa12155443b28f89cd28719e15f5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7e6f0f9cdc724568a1b7bfc18d4cd022",
       "max": 3235.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_53d59c4cf77d4460bd01fd8452522d06",
       "tabbable": null,
       "tooltip": null,
       "value": 3235.0
      }
     },
     "ece34c52f09e4198b60e36ad3b494942": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "ee94a576873d4fbdb48e852b1201637f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "efd142f0345140d2bbf9e7f2afdf5f75": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_938af976af9b41d2afe6353b076ce694",
       "placeholder": "​",
       "style": "IPY_MODEL_1aafbce91dad4f06a59903b3d67b918c",
       "tabbable": null,
       "tooltip": null,
       "value": " 4/? [00:00&lt;00:00, 16.82it/s]"
      }
     },
     "f0197d7d74e44db5b93afff9569c361b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_f371b7f00ff7476a960e314b005ef077",
        "IPY_MODEL_53a100a5045144648a5f6202560989b0",
        "IPY_MODEL_de47aec498f5409aadfe37f60d750be2"
       ],
       "layout": "IPY_MODEL_e9e038f4adcc4855b80aed5918ea7fe4",
       "tabbable": null,
       "tooltip": null
      }
     },
     "f04bf8262fcb40b3891f62f4cff6f63f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f097b3a0a46a4b9cb99f7ba3aa5d581e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_183912b2eabf4c7fbf53fdf4e4005a73",
       "placeholder": "​",
       "style": "IPY_MODEL_ac29dc932c874f9cbf7b566d1252dab2",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "f12032865c704bfe9367205c1836ed33": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f26b5b5694404bc781907a4338211e92": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_b38d79c4eea84a49a7bfd1f6d64bee24",
       "placeholder": "​",
       "style": "IPY_MODEL_2127db93df55467c83495d94b55e71b4",
       "tabbable": null,
       "tooltip": null,
       "value": " 3234/3235 [03:13&lt;00:00, 16.22it/s]"
      }
     },
     "f371b7f00ff7476a960e314b005ef077": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_6f7fb6b991bc455ba194aab388ace00a",
       "placeholder": "​",
       "style": "IPY_MODEL_0707212a7e3d43d993f11521e2e23df4",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "f4d39ab299cf46c9be18fa474e905f0e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f73829147f4645e4b964e609ac6df128": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f7e8fe67cc534282971923d143d3bbda": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_d923cb3fd96e45bfb00581891468c71a",
        "IPY_MODEL_372b4ee3cc4d4e6fabeb07bc6d130f6e",
        "IPY_MODEL_815807236d164809afa4bbb415f700ad"
       ],
       "layout": "IPY_MODEL_47a66a8bb1a34f31be8bff66212670da",
       "tabbable": null,
       "tooltip": null
      }
     },
     "f7ec2955e1a943799af63816cae41103": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "f88dbf8642d9455fa8eac49e74c6f978": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f8e9bc45a6334b1f92093e116bbda326": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f90a18fdc6964e5da6a9a474159911b8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f90e305c4f8842708e81a6654f36dc9e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "fa5b948968bc4fe7b51eb92460acb41c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "fa8d16968e6c4bbb97dc6d987716ce1b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_419bccc6688e4fc9b70b15e79a60d930",
       "placeholder": "​",
       "style": "IPY_MODEL_e515a5189c24441988fc4de43f4fdaa2",
       "tabbable": null,
       "tooltip": null,
       "value": " 3233/3235 [03:12&lt;00:00, 16.34it/s]"
      }
     },
     "fabe30de996c491da306ba7a5c66ea3f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "fb20f7ad773841139c51bee4a5e31dff": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "fb7b23f98a03433380c2241a553aecbb": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "fba8bbcfe2774348a275635d2f248c5f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "fc0562c8759d49789b5f6cd90ecc53cf": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "fca951cdd67a41348dbf8dd5d4123415": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_25bad1ec0d0949a4baa2b1daa72f0b73",
        "IPY_MODEL_7372d7c5740f4bc8b37ce33a287146af",
        "IPY_MODEL_8a5b6ead4b93450697f5c07d9f1ecde3"
       ],
       "layout": "IPY_MODEL_d4ca4ba45334431e90249d83520322e4",
       "tabbable": null,
       "tooltip": null
      }
     },
     "fced63ac042447088daa36c2f782f0d6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "fdaafb5111a14c02bfaad6784dd02904": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_b9039fdc9b73444b8e262f0ca61cca69",
       "placeholder": "​",
       "style": "IPY_MODEL_cf6d99ba823640c39f26fa5735c8996e",
       "tabbable": null,
       "tooltip": null,
       "value": " 3235/3235 [03:17&lt;00:00, 16.41it/s]"
      }
     },
     "fdbded8ce32f41e6b802eaaa80ac08c9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "fe3af8fbbda344bfb370e36b80ce0372": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "fe5d4dcbd688486fa67db012357e39c4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "fe69d1991f6741338d970fd941098787": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
