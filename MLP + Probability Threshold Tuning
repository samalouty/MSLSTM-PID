{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "367d8e04",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-09T13:28:08.979498Z",
     "iopub.status.busy": "2025-05-09T13:28:08.979143Z",
     "iopub.status.idle": "2025-05-09T13:28:16.778018Z",
     "shell.execute_reply": "2025-05-09T13:28:16.776626Z"
    },
    "papermill": {
     "duration": 7.806334,
     "end_time": "2025-05-09T13:28:16.779936",
     "exception": false,
     "start_time": "2025-05-09T13:28:08.973602",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cloning into 'PIE'...\r\n",
      "remote: Enumerating objects: 178, done.\u001b[K\r\n",
      "remote: Counting objects: 100% (93/93), done.\u001b[K\r\n",
      "remote: Compressing objects: 100% (74/74), done.\u001b[K\r\n",
      "remote: Total 178 (delta 32), reused 75 (delta 17), pack-reused 85 (from 1)\u001b[K\r\n",
      "Receiving objects: 100% (178/178), 144.63 MiB | 30.89 MiB/s, done.\r\n",
      "Resolving deltas: 100% (73/73), done.\r\n",
      "Updating files: 100% (41/41), done.\r\n",
      "unzip:  cannot find or open /content/PIE/annotations/annotations.zip, /content/PIE/annotations/annotations.zip.zip or /content/PIE/annotations/annotations.zip.ZIP.\r\n",
      "unzip:  cannot find or open /content/PIE/annotations/annotations_vehicle.zip, /content/PIE/annotations/annotations_vehicle.zip.zip or /content/PIE/annotations/annotations_vehicle.zip.ZIP.\r\n"
     ]
    }
   ],
   "source": [
    "!git clone https://github.com/aras62/PIE.git\n",
    "!unzip /content/PIE/annotations/annotations.zip -d /content/PIE\n",
    "!unzip /content/PIE/annotations/annotations_vehicle.zip -d /content/PIE\n",
    "# !git clone https://github.com/hustvl/YOLOP.git\n",
    "!mkdir /kaggle/working/PIE/content"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c9e21114",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-09T13:28:16.792150Z",
     "iopub.status.busy": "2025-05-09T13:28:16.791795Z",
     "iopub.status.idle": "2025-05-09T13:28:23.058425Z",
     "shell.execute_reply": "2025-05-09T13:28:23.057473Z"
    },
    "papermill": {
     "duration": 6.274539,
     "end_time": "2025-05-09T13:28:23.060180",
     "exception": false,
     "start_time": "2025-05-09T13:28:16.785641",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.0/1.0 MB\u001b[0m \u001b[31m16.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h"
     ]
    }
   ],
   "source": [
    "!pip install -q ultralytics opencv-python-headless "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "84443308",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-09T13:28:23.072514Z",
     "iopub.status.busy": "2025-05-09T13:28:23.072144Z",
     "iopub.status.idle": "2025-05-09T13:28:29.564378Z",
     "shell.execute_reply": "2025-05-09T13:28:29.563687Z"
    },
    "papermill": {
     "duration": 6.500268,
     "end_time": "2025-05-09T13:28:29.566081",
     "exception": false,
     "start_time": "2025-05-09T13:28:23.065813",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Creating new Ultralytics Settings v0.0.6 file ✅ \n",
      "View Ultralytics Settings with 'yolo settings' or at '/root/.config/Ultralytics/settings.json'\n",
      "Update Settings with 'yolo settings key=value', i.e. 'yolo settings runs_dir=path/to/dir'. For help see https://docs.ultralytics.com/quickstart/#ultralytics-settings.\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "import xml.etree.ElementTree as ET\n",
    "import os\n",
    "import numpy as np\n",
    "from sklearn.metrics import accuracy_score, precision_recall_fscore_support, roc_auc_score, confusion_matrix, ConfusionMatrixDisplay\n",
    "from tqdm.notebook import tqdm\n",
    "import random\n",
    "import math\n",
    "import zipfile\n",
    "import cv2\n",
    "from ultralytics import YOLO\n",
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c18a88a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-09T13:28:29.577668Z",
     "iopub.status.busy": "2025-05-09T13:28:29.577219Z",
     "iopub.status.idle": "2025-05-09T13:28:31.276179Z",
     "shell.execute_reply": "2025-05-09T13:28:31.275104Z"
    },
    "papermill": {
     "duration": 1.706173,
     "end_time": "2025-05-09T13:28:31.277702",
     "exception": false,
     "start_time": "2025-05-09T13:28:29.571529",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unzipped successfully.\n"
     ]
    }
   ],
   "source": [
    "zip_path = \"/kaggle/working/PIE/annotations/annotations.zip\"\n",
    "extract_to = \"/kaggle/working/PIE/annotations/\"\n",
    "\n",
    "if os.path.exists(extract_to + 'annotations'):\n",
    "    print(\"Exists already. Not unzipping.\")\n",
    "else:\n",
    "    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n",
    "        zip_ref.extractall(extract_to)\n",
    "    print(\"Unzipped successfully.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ea824b17",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-09T13:28:31.289531Z",
     "iopub.status.busy": "2025-05-09T13:28:31.289184Z",
     "iopub.status.idle": "2025-05-09T13:28:32.116723Z",
     "shell.execute_reply": "2025-05-09T13:28:32.115528Z"
    },
    "papermill": {
     "duration": 0.834979,
     "end_time": "2025-05-09T13:28:32.118254",
     "exception": false,
     "start_time": "2025-05-09T13:28:31.283275",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unzipped successfully.\n"
     ]
    }
   ],
   "source": [
    "zip_path = \"/kaggle/working/PIE/annotations/annotations_vehicle.zip\"\n",
    "extract_to = \"/kaggle/working/PIE/annotations/\"\n",
    "\n",
    "if os.path.exists(extract_to + 'annotations_vehicle'):\n",
    "    print(\"Exists already. Not unzipping.\")\n",
    "else:\n",
    "    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n",
    "        zip_ref.extractall(extract_to)\n",
    "    print(\"Unzipped successfully.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "cbe94c6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-09T13:28:32.131450Z",
     "iopub.status.busy": "2025-05-09T13:28:32.131090Z",
     "iopub.status.idle": "2025-05-09T13:28:32.146418Z",
     "shell.execute_reply": "2025-05-09T13:28:32.145495Z"
    },
    "papermill": {
     "duration": 0.02328,
     "end_time": "2025-05-09T13:28:32.147837",
     "exception": false,
     "start_time": "2025-05-09T13:28:32.124557",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unzipped successfully.\n"
     ]
    }
   ],
   "source": [
    "zip_path = \"/kaggle/working/PIE/annotations/annotations_attributes.zip\"\n",
    "extract_to = \"/kaggle/working/PIE/annotations/\"\n",
    "\n",
    "if os.path.exists(extract_to + \"annotations_attributes\"):\n",
    "    print(\"Exists already. Not unzipping.\")\n",
    "else:\n",
    "    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n",
    "        zip_ref.extractall(extract_to)\n",
    "    print(\"Unzipped successfully.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "22b27aab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-09T13:28:32.161567Z",
     "iopub.status.busy": "2025-05-09T13:28:32.161244Z",
     "iopub.status.idle": "2025-05-09T15:35:22.319613Z",
     "shell.execute_reply": "2025-05-09T15:35:22.318521Z"
    },
    "papermill": {
     "duration": 7610.168289,
     "end_time": "2025-05-09T15:35:22.322005",
     "exception": false,
     "start_time": "2025-05-09T13:28:32.153716",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "All possible streams: ['bbox', 'pose', 'ego_speed', 'ego_acc', 'ego_gyro', 'ped_action', 'ped_look', 'ped_occlusion', 'traffic_light', 'static_context', 'yolop']\n",
      "--- Running Experiment With Active Streams: ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'yolop'] ---\n",
      "Using device: cuda\n",
      "--- Running Data Preparation ---\n",
      "Checking for PIE database cache at: /kaggle/input/pie-database/pie_database.pkl\n",
      "Loading PIE database from cache...\n",
      "PIE database loaded successfully.\n",
      "\n",
      "Calculating standardization parameters from training set...\n",
      "Standardization parameters calculated.\n",
      "\n",
      "Initializing full training dataset (for extraction/balancing)...\n",
      "\n",
      "Loading pose data for sets: ['set01', 'set02', 'set04'] from /kaggle/input/pose-data/extracted_poses2\n",
      "Finished loading pose data for 3 relevant sets.\n",
      "\n",
      "Loading YOLOP data for sets: ['set01', 'set02', 'set04'] from /kaggle/input/yolop-data/yolop features\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d4c80270a66f40cda999dd6361fe5961",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Loading YOLOP PKLs:   0%|          | 0/53 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Finished loading YOLOP data. Found 23 relevant files out of 23 expected for sets ['set01', 'set02', 'set04'].\n",
      "Data loaded for 3 sets.\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "38ebf1b919e74251b706e6e221623b17",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Generating Sequences for ['set01', 'set02', 'set04']:   0%|          | 0/3 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset initialized with 333454 sequences for sets ['set01', 'set02', 'set04'].\n",
      "\n",
      "Extracting ALL stream data from training set for oversampling/augmentation...\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e862e2c9f6e7469fbfa657a705dc8d77",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Extracting data for oversampling:   0%|          | 0/333454 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original training samples: 333454\n",
      "Original counts: Crossing (1): 54967, Not Crossing (0): 278487\n",
      "\n",
      "Performing Oversampling with Augmentation...\n",
      "Oversampling minority class (1) by adding 223520 augmented samples...\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e8dc3526e27549c0a3e6d50d51541e2e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Augmenting minority (1):   0%|          | 0/223520 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total balanced & augmented training samples: 556974\n",
      "Balanced counts: Crossing (1): 278487, Not Crossing (0): 278487\n",
      "\n",
      "Saving balanced training data to: /kaggle/working/aug_balanced_train_data_with_yolop.pkl\n",
      "Saving scalers to: /kaggle/working/scalers.pkl\n",
      "\n",
      "--- Data Preparation, Augmentation, and Balancing Completed ---\n",
      "\n",
      "======================================================================\n",
      "--- Running Model Training and Evaluation (Concatenation Fusion) ---\n",
      "Active Streams for this run: ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'yolop']\n",
      "----------------------------------------------------------------------\n",
      "\n",
      "Loading balanced training data from: /kaggle/working/aug_balanced_train_data_with_yolop.pkl\n",
      "Loading scalers from: /kaggle/working/scalers.pkl\n",
      " -> Pre-processed data loaded successfully.\n",
      "\n",
      "Loading PIE database cache for Validation...\n",
      " -> PIE database loaded successfully.\n",
      "\n",
      "Creating Datasets and DataLoaders...\n",
      "\n",
      "Loading pose data for sets: ['set05', 'set06'] from /kaggle/input/pose-data/extracted_poses2\n",
      "Finished loading pose data for 2 relevant sets.\n",
      "\n",
      "Loading YOLOP data for sets: ['set05', 'set06'] from /kaggle/input/yolop-data/yolop features\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f931e923a61a46f289075decc9e50fe0",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Loading YOLOP PKLs:   0%|          | 0/53 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Finished loading YOLOP data. Found 11 relevant files out of 11 expected for sets ['set05', 'set06'].\n",
      "Data loaded for 2 sets.\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d5d055f4e75644a0bb7968b2cea28dc3",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Generating Sequences for ['set05', 'set06']:   0%|          | 0/2 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset initialized with 77288 sequences for sets ['set05', 'set06'].\n",
      "DataLoaders created.\n",
      "\n",
      "Initializing model...\n",
      "Initializing Concatenation LSTM model with streams: ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'yolop']\n",
      "  - Adding stream 'bbox' with input size 4\n",
      "  - Adding stream 'ped_action' with input size 1\n",
      "  - Adding stream 'ped_look' with input size 1\n",
      "  - Adding stream 'ego_speed' with input size 1\n",
      "  - Adding stream 'ego_acc' with input size 2\n",
      "  - Adding stream 'yolop' with input size 20\n",
      "  Fused feature dimension (Concatenation): 3072\n",
      "\n",
      "--- Model Architecture (Concatenation Fusion) ---\n",
      "MultiStreamConcatenationLSTM(\n",
      "  (lstms): ModuleDict(\n",
      "    (bbox): LSTM(4, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "    (ped_action): LSTM(1, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "    (ped_look): LSTM(1, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "    (ego_speed): LSTM(1, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "    (ego_acc): LSTM(2, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "    (yolop): LSTM(20, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "  )\n",
      "  (attentions): ModuleDict(\n",
      "    (bbox): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "    (ped_action): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "    (ped_look): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "    (ego_speed): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "    (ego_acc): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "    (yolop): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "  )\n",
      "  (dropout): Dropout(p=0.3, inplace=False)\n",
      "  (fc1): Linear(in_features=3072, out_features=1536, bias=True)\n",
      "  (relu): ReLU()\n",
      "  (fc2): Linear(in_features=1536, out_features=2, bias=True)\n",
      ")\n",
      "Total Trainable Parameters: 17,809,416\n",
      "------------------------------\n",
      "\n",
      "Calculating Class Weights for Loss Function...\n",
      "Using Class Weights for Loss: 0=1.00, 1=1.00\n",
      "\n",
      "--- Starting Training ---\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d03094bea97142acbed8d68a338b08b2",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/17406 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "296b1ae66b7343dfa9fc34c49d1c17aa",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Epoch 1/5 (1241.19 sec) ---\n",
      "  Train Loss: 0.2056, Train Acc: 0.9158\n",
      "  Val Loss (argmax):   0.1953, Val Acc (argmax):  0.9205\n",
      "  Val Prec (argmax):   0.7294, Recall (argmax): 0.7634, F1 (argmax): 0.7460\n",
      "  Val AUC (threshold-invariant): 0.9640\n",
      "  >> Saved new best model (based on argmax F1) to best_model_concat_aug_bbox_ego_acc_ego_speed_ped_action_ped_look_yolop_ep1.pth (F1: 0.7460)\n",
      "------------------------------\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4ce2a3b0def74309afa384923d0863a2",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/17406 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "03fd68bf226c4339869b83d41f02aa6f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Epoch 2/5 (1239.70 sec) ---\n",
      "  Train Loss: 0.1038, Train Acc: 0.9616\n",
      "  Val Loss (argmax):   0.2680, Val Acc (argmax):  0.9219\n",
      "  Val Prec (argmax):   0.7426, Recall (argmax): 0.7485, F1 (argmax): 0.7455\n",
      "  Val AUC (threshold-invariant): 0.9622\n",
      "------------------------------\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "5425350408ea46de8f862e621bed578c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/17406 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "fa9b6d96da8a41a2878fb9076cd5cbc7",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Epoch 3/5 (1239.12 sec) ---\n",
      "  Train Loss: 0.0638, Train Acc: 0.9774\n",
      "  Val Loss (argmax):   0.3403, Val Acc (argmax):  0.9135\n",
      "  Val Prec (argmax):   0.7256, Recall (argmax): 0.6977, F1 (argmax): 0.7114\n",
      "  Val AUC (threshold-invariant): 0.9559\n",
      "------------------------------\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "6d2bc8f304954c10a24727cc310f3080",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/17406 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ab77ecc1a6db4bc58663bf6c86241712",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Epoch 4/5 (1242.46 sec) ---\n",
      "  Train Loss: 0.0456, Train Acc: 0.9840\n",
      "  Val Loss (argmax):   0.3701, Val Acc (argmax):  0.9198\n",
      "  Val Prec (argmax):   0.7576, Recall (argmax): 0.6984, F1 (argmax): 0.7268\n",
      "  Val AUC (threshold-invariant): 0.9583\n",
      "------------------------------\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7c411f78f6334f1ca544f614439bfb1f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/17406 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "91da3581ae284294931be01efb854de4",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Epoch 5/5 (1237.81 sec) ---\n",
      "  Train Loss: 0.0346, Train Acc: 0.9881\n",
      "  Val Loss (argmax):   0.3835, Val Acc (argmax):  0.9205\n",
      "  Val Prec (argmax):   0.7747, Recall (argmax): 0.6764, F1 (argmax): 0.7222\n",
      "  Val AUC (threshold-invariant): 0.9542\n",
      "------------------------------\n",
      "--- Training Finished ---\n",
      "\n",
      "--- Plotting Training History ---\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Final Evaluation on Validation Set using Best Model ---\n",
      "Loading best saved model 'best_model_concat_aug_bbox_ego_acc_ego_speed_ped_action_ped_look_yolop_ep1.pth'\n",
      "\n",
      "--- Performing Probability Threshold Tuning on Validation Set ---\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4b15d85f378345dbaa7856eda6b6fb96",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Getting Probs for Tuning:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "8d9d5e030b3f4bda94a959d6710ad003",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Tuning Threshold:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimal threshold search complete. Best threshold: 0.4136 (F1: 0.7485)\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4149edc517c14115b2f4bab684a90604",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Final Performance Metrics (Argmax-based on Best Model) ---\n",
      "  Streams:   bbox, ped_action, ped_look, ego_speed, ego_acc, yolop\n",
      "  Accuracy:  0.9205\n",
      "  Precision: 0.7294\n",
      "  Recall:    0.7634\n",
      "  F1 Score:  0.7460\n",
      "  AUC:       0.9640\n",
      "  Loss:      0.1953\n",
      "  (Best Validation F1 during training with argmax: 0.7460)\n",
      "\n",
      "--- Final Performance Metrics (After Threshold Tuning on Best Model) ---\n",
      "  Optimal Threshold: 0.4136\n",
      "  Tuned F1 Score:    0.7485\n",
      "  Tuned Precision:   0.7088\n",
      "  Tuned Recall:      0.7928\n",
      "  Tuned Accuracy:    0.9186\n",
      "\n",
      "--- Confusion Matrix (Using Optimal Threshold) ---\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Script Complete ---\n"
     ]
    }
   ],
   "source": [
    "# --- IMPORTS ---\n",
    "# ... (all imports remain the same) ...\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import Dataset, DataLoader, Subset # Import Subset\n",
    "import xml.etree.ElementTree as ET\n",
    "import os\n",
    "import numpy as np\n",
    "from sklearn.metrics import accuracy_score, precision_recall_fscore_support, roc_auc_score, confusion_matrix, ConfusionMatrixDisplay\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from tqdm.notebook import tqdm\n",
    "import random\n",
    "import math\n",
    "import zipfile\n",
    "import cv2\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import pickle\n",
    "import time\n",
    "import sys\n",
    "import gc\n",
    "\n",
    "# --- Add PIE utilities path if necessary (adjust path) ---\n",
    "pie_utilities_path = '/kaggle/working/PIE/utilities'\n",
    "if pie_utilities_path not in sys.path:\n",
    "    sys.path.insert(0, pie_utilities_path)\n",
    "try:\n",
    "    from pie_data import PIE\n",
    "except ImportError as e:\n",
    "    print(f\"Warning: Could not import PIE class from {pie_utilities_path}. Database must already exist. Error: {e}\")\n",
    "    PIE = None\n",
    "\n",
    "# --- Configuration ---\n",
    "PIE_ROOT_PATH = '/kaggle/working/PIE'\n",
    "VIDEO_INPUT_DIR = '/kaggle/input'\n",
    "POSE_DATA_DIR = '/kaggle/input/pose-data/extracted_poses2'\n",
    "PIE_DATABASE_CACHE_PATH = '/kaggle/input/pie-database/pie_database.pkl'\n",
    "YOLOP_FEATURE_DIR = '/kaggle/input/yolop-data/yolop features'\n",
    "\n",
    "# --- *** Define output file paths GLOBALLY *** ---\n",
    "BALANCED_DATA_PKL_PATH = \"/kaggle/working/aug_balanced_train_data_with_yolop.pkl\"\n",
    "SCALERS_PKL_PATH = \"/kaggle/working/scalers.pkl\"\n",
    "# --- *** END GLOBAL PATHS *** ---\n",
    "\n",
    "# --- Define ALL possible streams INCLUDING YOLOP ---\n",
    "ALL_POSSIBLE_STREAMS = [\n",
    "    'bbox', 'pose', 'ego_speed', 'ego_acc', 'ego_gyro',\n",
    "    'ped_action', 'ped_look', 'ped_occlusion', 'traffic_light', 'static_context',\n",
    "    'yolop'\n",
    "]\n",
    "print(f\"All possible streams: {ALL_POSSIBLE_STREAMS}\")\n",
    "\n",
    "# --- *** CHOOSE ACTIVE STREAMS FOR THIS EXPERIMENT RUN *** ---\n",
    "ACTIVE_STREAMS = [\n",
    "    'bbox',\n",
    "    'ped_action',\n",
    "    'ped_look',\n",
    "    'ego_speed',\n",
    "    'ego_acc',\n",
    "    'yolop'\n",
    "]\n",
    "print(f\"--- Running Experiment With Active Streams: {ACTIVE_STREAMS} ---\")\n",
    "# --- *** END ACTIVE STREAM SELECTION *** ---\n",
    "\n",
    "# --- Model Hyperparameters & Input Sizes ---\n",
    "SEQ_LEN = 30; PRED_LEN = 1\n",
    "INPUT_SIZE_BBOX = 4; INPUT_SIZE_POSE = 34; INPUT_SIZE_EGO_SPEED = 1\n",
    "INPUT_SIZE_EGO_ACC = 2; INPUT_SIZE_EGO_GYRO = 1; INPUT_SIZE_PED_ACTION = 1\n",
    "INPUT_SIZE_PED_LOOK = 1; INPUT_SIZE_PED_OCC = 1; INPUT_SIZE_TL_STATE = 4\n",
    "NUM_SIGNALIZED_CATS = 4; NUM_INTERSECTION_CATS = 5; NUM_AGE_CATS = 4; NUM_GENDER_CATS = 3\n",
    "NUM_TRAFFIC_DIR_CATS = 2; LANE_CATEGORIES = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 4, 7:4, 8:4}; NUM_LANE_CATS = len(set(LANE_CATEGORIES.values()))\n",
    "INPUT_SIZE_STATIC = NUM_SIGNALIZED_CATS + NUM_INTERSECTION_CATS + NUM_AGE_CATS + NUM_GENDER_CATS + NUM_TRAFFIC_DIR_CATS + NUM_LANE_CATS\n",
    "GRID_SIZE = 3; INPUT_SIZE_YOLOP = GRID_SIZE**2 * 2 + 2\n",
    "\n",
    "LSTM_HIDDEN_SIZE = 256; NUM_LSTM_LAYERS = 2; DROPOUT_RATE = 0.3\n",
    "NUM_CLASSES = 2; ATTENTION_DIM = 128\n",
    "\n",
    "# --- Training Hyperparameters ---\n",
    "LEARNING_RATE = 1e-4; BATCH_SIZE = 32; NUM_EPOCHS = 5 # Reduced for quicker testing, increase for full runs\n",
    "DEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "print(f\"Using device: {DEVICE}\")\n",
    "\n",
    "# --- Dataset Splits ---\n",
    "TRAIN_SETS_STR = ['set01', 'set02', 'set04']; VAL_SETS_STR = ['set05', 'set06']\n",
    "\n",
    "# --- Mappings ---\n",
    "TL_STATE_MAP = {'__undefined__': 0, 'red': 1, 'yellow': 2, 'green': 3}; NUM_TL_STATES = len(TL_STATE_MAP)\n",
    "SIGNALIZED_MAP = {'n/a': 0, 'C': 1, 'S': 2, 'CS': 3}\n",
    "INTERSECTION_MAP = {'midblock': 0, 'T': 1, 'T-left': 2, 'T-right': 3, 'four-way': 4}\n",
    "AGE_MAP = {'child': 0, 'young': 1, 'adult': 2, 'senior': 3}\n",
    "GENDER_MAP = {'n/a': 0, 'female': 1, 'male': 2}\n",
    "TRAFFIC_DIR_MAP = {'OW': 0, 'TW': 1}\n",
    "\n",
    "\n",
    "# --- Helper: One-Hot Encoding ---\n",
    "def to_one_hot(index, num_classes):\n",
    "    vec = np.zeros(num_classes, dtype=np.float32)\n",
    "    safe_index = int(np.clip(index, 0, num_classes - 1))\n",
    "    vec[safe_index] = 1.0\n",
    "    return vec\n",
    "\n",
    "# --- Balancing Function (Oversampling with Augmentation is done in data prep) ---\n",
    "# This function is kept if needed for other types of balancing, but not used in the current flow for oversampling\n",
    "def balance_samples_count(seq_data, label_type, random_seed=42):\n",
    "    # ... (Exact same function definition as before) ...\n",
    "    print('---------------------------------------------------------')\n",
    "    print(f\"Balancing samples based on '{label_type}' key\")\n",
    "    if label_type not in seq_data: raise KeyError(f\"Label type '{label_type}' not found.\")\n",
    "    try: gt_labels = [lbl[0] for lbl in seq_data[label_type]]\n",
    "    except (IndexError, TypeError): raise ValueError(f\"Labels under '{label_type}' not in expected format [[label_val]].\")\n",
    "    if not all(l in [0, 1] for l in gt_labels): print(f\"Warning: Labels for balancing contain values other than 0 or 1.\")\n",
    "    num_pos_samples = np.count_nonzero(np.array(gt_labels)); num_neg_samples = len(gt_labels) - num_pos_samples\n",
    "    new_seq_data = {}\n",
    "    if num_neg_samples == num_pos_samples: print('Samples already balanced.'); return seq_data.copy()\n",
    "    else:\n",
    "        print(f'Unbalanced: Positive (1): {num_pos_samples} | Negative (0): {num_neg_samples}')\n",
    "        majority_label = 0 if num_neg_samples > num_pos_samples else 1\n",
    "        minority_count = min(num_neg_samples, num_pos_samples); print(f\"Undersampling majority class ({majority_label}) to match count ({minority_count}).\")\n",
    "        majority_indices = np.where(np.array(gt_labels) == majority_label)[0]; minority_indices = np.where(np.array(gt_labels) != majority_label)[0]\n",
    "        np.random.seed(random_seed); keep_majority_indices = np.random.choice(majority_indices, size=minority_count, replace=False)\n",
    "        final_indices = np.concatenate((minority_indices, keep_majority_indices)); np.random.shuffle(final_indices)\n",
    "        for k, v_list in seq_data.items():\n",
    "            if isinstance(v_list, list) and len(v_list) == len(gt_labels):\n",
    "                 try:\n",
    "                     if v_list and isinstance(v_list[0], np.ndarray): v_array = np.array(v_list); new_seq_data[k] = list(v_array[final_indices])\n",
    "                     else: new_seq_data[k] = [v_list[i] for i in final_indices]\n",
    "                 except Exception as e: print(f\"Error processing key '{k}' during balancing: {e}. Skip.\"); new_seq_data[k] = []\n",
    "            else: print(f\"Warn: Skipping key '{k}' in balancing.\"); new_seq_data[k] = v_list\n",
    "        if label_type in new_seq_data: new_gt_labels = [lbl[0] for lbl in new_seq_data[label_type]]; final_pos = np.count_nonzero(np.array(new_gt_labels)); final_neg = len(new_gt_labels) - final_pos; print(f'Balanced:   Positive (1): {final_pos} | Negative (0): {final_neg}')\n",
    "        else: print(\"Error: Label key was lost during balancing.\")\n",
    "        print('---------------------------------------------------------')\n",
    "        return new_seq_data\n",
    "\n",
    "# --- Augmentation Parameters (Used in Data Preparation if AUGMENT_MINORITY_CLASS is True) ---\n",
    "AUGMENT_MINORITY_CLASS = True\n",
    "GAUSSIAN_NOISE_STD = 0.02\n",
    "STREAMS_TO_AUGMENT_WITH_NOISE = ['bbox', 'pose', 'ego_speed', 'ego_acc', 'ego_gyro', 'yolop']\n",
    "\n",
    "# --- Dataset Class ---\n",
    "class PIEDataset(Dataset):\n",
    "    def __init__(self, pie_database, set_names, pose_data_dir, yolop_data_dir, seq_len, pred_len, scalers=None, streams_to_generate=None):\n",
    "        self.pie_db = pie_database; self.set_names = set_names; self.pose_data_dir = pose_data_dir; self.yolop_data_dir = yolop_data_dir\n",
    "        self.seq_len = seq_len; self.pred_len = pred_len; self.scalers = scalers or {};\n",
    "        self.streams_to_generate = streams_to_generate or ALL_POSSIBLE_STREAMS\n",
    "        self.sequences = []; self.all_pose_data = {}; self.all_yolop_data = {}\n",
    "        self._input_sizes_for_error = self._get_input_sizes_dict()\n",
    "        if 'pose' in self.streams_to_generate: self._load_pose_data()\n",
    "        if 'yolop' in self.streams_to_generate: self._load_yolop_data()\n",
    "        self._generate_sequence_list()\n",
    "        if not self.sequences: raise ValueError(f\"Dataset init failed: No sequences for {self.set_names}\")\n",
    "    def _get_input_sizes_dict(self):\n",
    "        input_sizes = {}; special_cases = {'TRAFFIC_LIGHT': 'TL_STATE', 'STATIC_CONTEXT': 'STATIC', 'EGO_SPEED': 'EGO_SPEED', 'EGO_ACC': 'EGO_ACC', 'EGO_GYRO': 'EGO_GYRO', 'PED_ACTION': 'PED_ACTION', 'PED_LOOK': 'PED_LOOK', 'PED_OCCLUSION': 'PED_OCC', 'YOLOP':'YOLOP'}\n",
    "        for stream in ALL_POSSIBLE_STREAMS:\n",
    "            size_constant_name = f'INPUT_SIZE_{stream.upper()}'; stream_upper_key = stream.upper(); suffix = special_cases.get(stream_upper_key)\n",
    "            if suffix: size_constant_name = f'INPUT_SIZE_{suffix}'\n",
    "            elif stream == 'bbox': size_constant_name = 'INPUT_SIZE_BBOX'\n",
    "            elif stream == 'pose': size_constant_name = 'INPUT_SIZE_POSE'\n",
    "            if size_constant_name in globals(): input_sizes[stream] = globals()[size_constant_name]\n",
    "            else: input_sizes[stream] = 1 # Default to 1 if not found, though should be defined\n",
    "        return input_sizes\n",
    "    def _load_pose_data(self):\n",
    "        print(f\"\\nLoading pose data for sets: {self.set_names} from {self.pose_data_dir}\"); sets_loaded_count = 0\n",
    "        for set_id in self.set_names:\n",
    "            self.all_pose_data[set_id] = {}; pose_set_path = os.path.join(self.pose_data_dir, set_id)\n",
    "            if not os.path.isdir(pose_set_path): continue\n",
    "            pkl_files_in_set = [f for f in os.listdir(pose_set_path) if f.startswith(f\"{set_id}_\") and f.endswith(\"_poses.pkl\")];\n",
    "            if not pkl_files_in_set: continue\n",
    "            loaded_video_count = 0\n",
    "            for pkl_filename in pkl_files_in_set:\n",
    "                pkl_file_path = os.path.join(pose_set_path, pkl_filename);\n",
    "                try:\n",
    "                    with open(pkl_file_path, 'rb') as f: loaded_pkl_content = pickle.load(f)\n",
    "                    if len(loaded_pkl_content) != 1: continue\n",
    "                    unique_video_key, video_data = list(loaded_pkl_content.items())[0]; video_id = \"_\".join(unique_video_key.split('_')[1:])\n",
    "                    if video_id in self.pie_db.get(set_id, {}): self.all_pose_data[set_id][video_id] = video_data; loaded_video_count += 1\n",
    "                except FileNotFoundError: pass\n",
    "                except Exception as e: print(f\"Error loading pose PKL {pkl_file_path}: {e}\")\n",
    "            if loaded_video_count > 0: sets_loaded_count += 1\n",
    "        print(f\"Finished loading pose data for {sets_loaded_count} relevant sets.\")\n",
    "    def _load_yolop_data(self):\n",
    "        print(f\"\\nLoading YOLOP data for sets: {self.set_names} from {self.yolop_data_dir}\"); sets_loaded_count = 0\n",
    "        for set_id in self.set_names: self.all_yolop_data[set_id] = {}\n",
    "        if not os.path.isdir(self.yolop_data_dir): print(f\"Error: YOLOP feature directory not found: {self.yolop_data_dir}\"); return\n",
    "        try: all_pkl_files = [f for f in os.listdir(self.yolop_data_dir) if f.endswith(\"_yolop_features.pkl\")]\n",
    "        except Exception as e: print(f\"Error listing files in YOLOP directory {self.yolop_data_dir}: {e}\"); return\n",
    "        if not all_pkl_files: print(f\"Warning: No '*_yolop_features.pkl' files found directly in {self.yolop_data_dir}\")\n",
    "        loaded_file_count = 0; files_for_needed_sets = 0\n",
    "        for pkl_filename in tqdm(all_pkl_files, desc=\"Loading YOLOP PKLs\", leave=False):\n",
    "            try: parts = pkl_filename.replace(\"_yolop_features.pkl\", \"\").split('_'); set_id_from_file = parts[0]; video_id = \"_\".join(parts[1:])\n",
    "            except IndexError: print(f\"Warning: Could not parse set/video ID from filename: {pkl_filename}\"); continue\n",
    "            if set_id_from_file in self.set_names:\n",
    "                files_for_needed_sets += 1; pkl_file_path = os.path.join(self.yolop_data_dir, pkl_filename)\n",
    "                try:\n",
    "                    with open(pkl_file_path, 'rb') as f: loaded_pkl_content = pickle.load(f)\n",
    "                    if len(loaded_pkl_content) != 1: print(f\"Warn: PKL {pkl_filename} format issue. Skip.\"); continue\n",
    "                    unique_video_key, video_data = list(loaded_pkl_content.items())[0]\n",
    "                    self.all_yolop_data[set_id_from_file][video_id] = video_data; loaded_file_count += 1\n",
    "                except FileNotFoundError: print(f\"Warn: YOLOP feature file not found: {pkl_file_path}\")\n",
    "                except Exception as e: print(f\"Error loading YOLOP PKL {pkl_file_path}: {e}\")\n",
    "        print(f\"Finished loading YOLOP data. Found {loaded_file_count} relevant files out of {files_for_needed_sets} expected for sets {self.set_names}.\")\n",
    "        if loaded_file_count > 0: actual_sets_loaded = sum(1 for s in self.set_names if s in self.all_yolop_data and self.all_yolop_data[s]); print(f\"Data loaded for {actual_sets_loaded} sets.\")\n",
    "    def _generate_sequence_list(self):\n",
    "        sequence_count = 0; ped_count = 0\n",
    "        for set_id in tqdm(self.set_names, desc=f\"Generating Sequences for {self.set_names}\", leave=False):\n",
    "            if set_id not in self.pie_db: continue\n",
    "            for video_id, video_data in self.pie_db[set_id].items():\n",
    "                if 'ped_annotations' not in video_data: continue\n",
    "                for ped_id, ped_data in video_data['ped_annotations'].items():\n",
    "                    ped_count += 1;\n",
    "                    if 'frames' not in ped_data or len(ped_data['frames']) < self.seq_len + self.pred_len: continue\n",
    "                    sorted_frames = sorted(ped_data['frames']);\n",
    "                    for i in range(len(sorted_frames) - self.seq_len - self.pred_len + 1):\n",
    "                        start_frame = sorted_frames[i]; end_frame_observe = sorted_frames[i + self.seq_len - 1]\n",
    "                        if end_frame_observe - start_frame != self.seq_len - 1: continue\n",
    "                        target_frame_actual_idx = i + self.seq_len + self.pred_len - 1\n",
    "                        if target_frame_actual_idx >= len(sorted_frames): continue\n",
    "                        target_frame = sorted_frames[target_frame_actual_idx]\n",
    "                        if target_frame - end_frame_observe != self.pred_len: continue\n",
    "                        self.sequences.append((set_id, video_id, ped_id, start_frame)); sequence_count += 1\n",
    "        print(f\"Dataset initialized with {sequence_count} sequences for sets {self.set_names}.\")\n",
    "    def __len__(self): return len(self.sequences)\n",
    "    def __getitem__(self, idx):\n",
    "        # --- (Paste the full __getitem__ logic from the previous corrected script here) ---\n",
    "        set_id, video_id, ped_id, start_frame = self.sequences[idx]; frame_nums = list(range(start_frame, start_frame + self.seq_len)); target_frame_num = start_frame + self.seq_len + self.pred_len - 1\n",
    "        video_db = self.pie_db.get(set_id, {}).get(video_id, {}); ped_db = video_db.get('ped_annotations', {}).get(ped_id, {}); ego_db = video_db.get('vehicle_annotations', {}); traffic_db = video_db.get('traffic_annotations', {}); ped_attributes = ped_db.get('attributes', {})\n",
    "        feature_sequences = {stream: [] for stream in self.streams_to_generate}; label = 0 # Use streams_to_generate\n",
    "        if 'frames' in ped_db and 'behavior' in ped_db and 'cross' in ped_db['behavior']:\n",
    "             try:\n",
    "                 target_frame_db_idx = ped_db['frames'].index(target_frame_num)\n",
    "                 label = ped_db['behavior']['cross'][target_frame_db_idx];\n",
    "                 if label == -1: label = 0\n",
    "             except (ValueError, IndexError): pass\n",
    "        static_vec = None\n",
    "        if 'static_context' in self.streams_to_generate:\n",
    "            sig_idx = ped_attributes.get('signalized', 0); int_idx = ped_attributes.get('intersection', 0); age_idx = ped_attributes.get('age', 2); gen_idx = ped_attributes.get('gender', 0)\n",
    "            td_val = ped_attributes.get('traffic_direction', 0); td_idx = int(td_val); nl_val = ped_attributes.get('num_lanes', 2); nl_cat_idx = LANE_CATEGORIES.get(nl_val, LANE_CATEGORIES[max(LANE_CATEGORIES.keys())])\n",
    "            static_features_list = [ to_one_hot(sig_idx, NUM_SIGNALIZED_CATS), to_one_hot(int_idx, NUM_INTERSECTION_CATS), to_one_hot(age_idx, NUM_AGE_CATS), to_one_hot(gen_idx, NUM_GENDER_CATS), to_one_hot(td_idx, NUM_TRAFFIC_DIR_CATS), to_one_hot(nl_cat_idx, NUM_LANE_CATS) ]\n",
    "            static_vec = np.concatenate(static_features_list)\n",
    "            if static_vec.shape[0] != INPUT_SIZE_STATIC: static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "        for frame_num in frame_nums:\n",
    "            frame_db_idx = -1;\n",
    "            if 'frames' in ped_db:\n",
    "                 try: frame_db_idx = ped_db['frames'].index(frame_num)\n",
    "                 except ValueError: pass\n",
    "            ego_frame_data = ego_db.get(frame_num, {})\n",
    "            if 'bbox' in self.streams_to_generate:\n",
    "                bbox_norm = np.zeros(INPUT_SIZE_BBOX, dtype=np.float32);\n",
    "                if frame_db_idx != -1 and 'bbox' in ped_db and len(ped_db['bbox']) > frame_db_idx:\n",
    "                     try:\n",
    "                         x1, y1, x2, y2 = ped_db['bbox'][frame_db_idx];\n",
    "                         img_w = video_db.get('width', 1920);\n",
    "                         img_h = video_db.get('height', 1080)\n",
    "                         if img_w > 0 and img_h > 0:\n",
    "                             cx = ((x1 + x2) / 2) / img_w;\n",
    "                             cy = ((y1 + y2) / 2) / img_h;\n",
    "                             w = (x2 - x1) / img_w;\n",
    "                             h = (y2 - y1) / img_h;\n",
    "                         if w>0 and h>0 and 0<=cx<=1 and 0<=cy<=1:\n",
    "                             bbox_norm = np.array([cx, cy, w, h], dtype=np.float32)\n",
    "                     except Exception: pass\n",
    "                feature_sequences['bbox'].append(bbox_norm)\n",
    "            if 'pose' in self.streams_to_generate:\n",
    "                pose_vector = np.zeros(INPUT_SIZE_POSE, dtype=np.float32); vid_pose_data = self.all_pose_data.get(set_id, {}).get(video_id, {}); frame_pose_data = vid_pose_data.get(frame_num, {}); loaded_pose = frame_pose_data.get(ped_id)\n",
    "                if loaded_pose is not None and isinstance(loaded_pose, np.ndarray) and loaded_pose.shape == (INPUT_SIZE_POSE,): pose_vector = loaded_pose\n",
    "                feature_sequences['pose'].append(pose_vector)\n",
    "            if 'ego_speed' in self.streams_to_generate:\n",
    "                speed = ego_frame_data.get('OBD_speed', 0.0);\n",
    "                if speed == 0.0: speed = ego_frame_data.get('GPS_speed', 0.0)\n",
    "                speed_scaled = (speed - self.scalers.get('ego_speed_mean', 0.0)) / self.scalers.get('ego_speed_std', 1.0)\n",
    "                feature_sequences['ego_speed'].append([speed_scaled])\n",
    "            if 'ego_acc' in self.streams_to_generate:\n",
    "                accX = ego_frame_data.get('accX', 0.0); accY = ego_frame_data.get('accY', 0.0)\n",
    "                accX_scaled = (accX - self.scalers.get('accX_mean', 0.0)) / self.scalers.get('accX_std', 1.0)\n",
    "                accY_scaled = (accY - self.scalers.get('accY_mean', 0.0)) / self.scalers.get('accY_std', 1.0)\n",
    "                feature_sequences['ego_acc'].append([accX_scaled, accY_scaled])\n",
    "            if 'ego_gyro' in self.streams_to_generate:\n",
    "                gyroZ = ego_frame_data.get('gyroZ', 0.0)\n",
    "                gyroZ_scaled = (gyroZ - self.scalers.get('gyroZ_mean', 0.0)) / self.scalers.get('gyroZ_std', 1.0)\n",
    "                feature_sequences['ego_gyro'].append([gyroZ_scaled])\n",
    "            if 'ped_action' in self.streams_to_generate:\n",
    "                action = 0;\n",
    "                if frame_db_idx != -1 and 'behavior' in ped_db and 'action' in ped_db['behavior'] and len(ped_db['behavior']['action']) > frame_db_idx: action = ped_db['behavior']['action'][frame_db_idx]\n",
    "                feature_sequences['ped_action'].append([float(action)])\n",
    "            if 'ped_look' in self.streams_to_generate:\n",
    "                look = 0;\n",
    "                if frame_db_idx != -1 and 'behavior' in ped_db and 'look' in ped_db['behavior'] and len(ped_db['behavior']['look']) > frame_db_idx: look = ped_db['behavior']['look'][frame_db_idx]\n",
    "                feature_sequences['ped_look'].append([float(look)])\n",
    "            if 'ped_occlusion' in self.streams_to_generate:\n",
    "                occ = 0.0;\n",
    "                if frame_db_idx != -1 and 'occlusion' in ped_db and len(ped_db['occlusion']) > frame_db_idx: occ_val = ped_db['occlusion'][frame_db_idx]; occ = float(occ_val) / 2.0;\n",
    "                feature_sequences['ped_occlusion'].append([occ])\n",
    "            if 'traffic_light' in self.streams_to_generate:\n",
    "                state_int = 0;\n",
    "                for obj_id_tl, obj_data in traffic_db.items(): # Renamed obj_id\n",
    "                     if obj_data.get('obj_class') == 'traffic_light' and 'frames' in obj_data and 'state' in obj_data:\n",
    "                          try:\n",
    "                              tl_frame_idx = obj_data['frames'].index(frame_num);\n",
    "                              state_val = obj_data['state'][tl_frame_idx];\n",
    "                              if state_val != 0:\n",
    "                                  state_int = state_val;\n",
    "                                  break\n",
    "                          except (ValueError, IndexError): continue\n",
    "                feature_sequences['traffic_light'].append(to_one_hot(state_int, NUM_TL_STATES))\n",
    "            if 'static_context' in self.streams_to_generate:\n",
    "                feature_sequences['static_context'].append(static_vec if static_vec is not None else np.zeros(INPUT_SIZE_STATIC, dtype=np.float32))\n",
    "            if 'yolop' in self.streams_to_generate:\n",
    "                yolop_vector = np.zeros(INPUT_SIZE_YOLOP, dtype=np.float32)\n",
    "                if set_id in self.all_yolop_data and video_id in self.all_yolop_data[set_id]:\n",
    "                    frame_yolop_data = self.all_yolop_data[set_id][video_id].get(frame_num, {})\n",
    "                    loaded_yolop = frame_yolop_data.get(ped_id)\n",
    "                    if loaded_yolop is not None and isinstance(loaded_yolop, np.ndarray) and loaded_yolop.shape == (INPUT_SIZE_YOLOP,):\n",
    "                        yolop_vector = loaded_yolop\n",
    "                feature_sequences['yolop'].append(yolop_vector)\n",
    "        features = {};\n",
    "        try:\n",
    "            for stream_name in self.streams_to_generate:\n",
    "                 if stream_name in feature_sequences: features[stream_name] = torch.tensor(np.array(feature_sequences[stream_name], dtype=np.float32), dtype=torch.float32)\n",
    "        except Exception as e:\n",
    "             print(f\"Error converting features idx {idx}: {e}. Return dummy.\");\n",
    "             features = { name: torch.zeros((self.seq_len, self._input_sizes_for_error.get(name, 1)), dtype=torch.float32) for name in self.streams_to_generate }\n",
    "        return features, torch.tensor(label, dtype=torch.long)\n",
    "\n",
    "# --- Model Architecture (Attention) ---\n",
    "class Attention(nn.Module):\n",
    "    def __init__(self, hidden_dim, attention_dim):\n",
    "        super(Attention, self).__init__()\n",
    "        self.attention_net = nn.Sequential(\n",
    "            nn.Linear(hidden_dim, attention_dim),\n",
    "            nn.Tanh(),\n",
    "            nn.Linear(attention_dim, 1)\n",
    "        )\n",
    "    def forward(self, lstm_output):\n",
    "        att_scores = self.attention_net(lstm_output).squeeze(2)\n",
    "        att_weights = torch.softmax(att_scores, dim=1)\n",
    "        context_vector = torch.sum(lstm_output * att_weights.unsqueeze(2), dim=1)\n",
    "        return context_vector, att_weights\n",
    "\n",
    "# --- *** NEW: Model Architecture (Concatenation Fusion) *** ---\n",
    "class MultiStreamConcatenationLSTM(nn.Module):\n",
    "    def __init__(self, input_sizes, lstm_hidden_size, num_lstm_layers, num_classes,\n",
    "                 attention_dim, dropout_rate, stream_names=['bbox', 'pose']):\n",
    "        super(MultiStreamConcatenationLSTM, self).__init__()\n",
    "\n",
    "        if not stream_names:\n",
    "             raise ValueError(\"stream_names cannot be empty.\")\n",
    "\n",
    "        self.stream_names = stream_names\n",
    "        self.lstms = nn.ModuleDict()\n",
    "        self.attentions = nn.ModuleDict()\n",
    "        self.num_active_streams = len(self.stream_names)\n",
    "        self.lstm_output_dim = lstm_hidden_size * 2 # BiLSTM\n",
    "\n",
    "        print(f\"Initializing Concatenation LSTM model with streams: {self.stream_names}\")\n",
    "\n",
    "        for name in self.stream_names:\n",
    "            if name not in input_sizes:\n",
    "                 raise KeyError(f\"Input size for stream '{name}' not provided.\")\n",
    "            current_input_size = input_sizes[name]\n",
    "            print(f\"  - Adding stream '{name}' with input size {current_input_size}\")\n",
    "            self.lstms[name] = nn.LSTM(current_input_size, lstm_hidden_size, num_lstm_layers,\n",
    "                                       batch_first=True, dropout=dropout_rate if num_lstm_layers > 1 else 0,\n",
    "                                       bidirectional=True)\n",
    "            self.attentions[name] = Attention(self.lstm_output_dim , attention_dim)\n",
    "\n",
    "        # --- Classification Head ---\n",
    "        fused_feature_dim = self.lstm_output_dim * self.num_active_streams\n",
    "        print(f\"  Fused feature dimension (Concatenation): {fused_feature_dim}\")\n",
    "\n",
    "        self.dropout = nn.Dropout(dropout_rate)\n",
    "        # Ensure intermediate_dim is reasonable\n",
    "        intermediate_dim = max(num_classes * 4, fused_feature_dim // 2, 128) # e.g. min 128\n",
    "        self.fc1 = nn.Linear(fused_feature_dim, intermediate_dim)\n",
    "        self.relu = nn.ReLU()\n",
    "        self.fc2 = nn.Linear(intermediate_dim, num_classes)\n",
    "        # --- End Classification Head ---\n",
    "\n",
    "    def forward(self, x):\n",
    "        stream_context_vectors = []\n",
    "        for name in self.stream_names:\n",
    "            if name not in x: # Should not happen if input 'x' is prepared by train/eval loops\n",
    "                 zero_ctx = torch.zeros(x[list(x.keys())[0]].shape[0], self.lstm_output_dim, device=x[list(x.keys())[0]].device)\n",
    "                 stream_context_vectors.append(zero_ctx)\n",
    "                 # print(f\"Warning: Stream '{name}' missing in input batch, using zeros.\") # Can be noisy\n",
    "                 continue\n",
    "\n",
    "            lstm_out, _ = self.lstms[name](x[name])\n",
    "            context_vector, _ = self.attentions[name](lstm_out)\n",
    "            stream_context_vectors.append(context_vector)\n",
    "\n",
    "        if len(stream_context_vectors) != self.num_active_streams:\n",
    "             raise RuntimeError(f\"Number of context vectors ({len(stream_context_vectors)}) does not match number of active streams ({self.num_active_streams}).\")\n",
    "\n",
    "        # --- Concatenate features from all streams ---\n",
    "        try:\n",
    "            fused_features = torch.cat(stream_context_vectors, dim=1)\n",
    "        except RuntimeError as e: # Debugging info\n",
    "            print(\"Error during concatenation. Context vector shapes:\")\n",
    "            for i, vec in enumerate(stream_context_vectors):\n",
    "                stream_name_debug = self.stream_names[i] if i < len(self.stream_names) else \"Unknown (index out of bounds)\"\n",
    "                print(f\"Stream {stream_name_debug}: {vec.shape}\")\n",
    "            raise e\n",
    "        # --- End Concatenation ---\n",
    "\n",
    "        out = self.dropout(fused_features)\n",
    "        out = self.relu(self.fc1(out))\n",
    "        out = self.dropout(out)\n",
    "        logits = self.fc2(out)\n",
    "        return logits\n",
    "\n",
    "\n",
    "# --- Wrapper Dataset for Balanced Data ---\n",
    "class BalancedDataset(Dataset):\n",
    "    def __init__(self, data_dict, active_streams, label_key='label'):\n",
    "        self.active_streams = active_streams\n",
    "        self.label_key = label_key\n",
    "        if self.label_key not in data_dict or not data_dict[self.label_key]:\n",
    "             raise ValueError(f\"Label key '{self.label_key}' missing/empty.\")\n",
    "        self.num_samples = len(data_dict[self.label_key])\n",
    "        if self.num_samples == 0:\n",
    "            print(\"Warning: BalancedDataset initialized with zero samples.\")\n",
    "\n",
    "        self.features = {}\n",
    "        for stream in self.active_streams:\n",
    "             if stream in data_dict and data_dict[stream]:\n",
    "                 try:\n",
    "                     # Ensure data is already numpy array or list of numpy arrays before this step\n",
    "                     # If it's list of Tensors, convert to numpy first then to Tensor\n",
    "                     if isinstance(data_dict[stream][0], torch.Tensor):\n",
    "                         self.features[stream] = torch.stack(data_dict[stream]) # If list of tensors\n",
    "                     else:\n",
    "                         self.features[stream] = torch.tensor(np.array(data_dict[stream]), dtype=torch.float32)\n",
    "                 except Exception as e: # More general exception\n",
    "                      raise ValueError(f\"Error converting stream '{stream}' data: {e}. Data type: {type(data_dict[stream][0]) if data_dict[stream] else 'Empty'}\")\n",
    "             else:\n",
    "                  raise KeyError(f\"Active stream '{stream}' requested but missing/empty in balanced data dictionary.\")\n",
    "        try:\n",
    "            if isinstance(data_dict[self.label_key][0], torch.Tensor):\n",
    "                 self.labels = torch.tensor([lbl.item() for lbl in data_dict[self.label_key]], dtype=torch.long)\n",
    "            else:\n",
    "                 self.labels = torch.tensor([lbl[0] for lbl in data_dict[self.label_key]], dtype=torch.long)\n",
    "        except (IndexError, TypeError) as e:\n",
    "             raise ValueError(f\"Error converting labels: {e}\")\n",
    "\n",
    "        for stream in self.active_streams:\n",
    "             if stream in self.features and len(self.features[stream]) != self.num_samples:\n",
    "                 raise ValueError(f\"Len mismatch: Stream '{stream}' ({len(self.features[stream])}) vs Labels ({self.num_samples})\")\n",
    "\n",
    "    def __len__(self):\n",
    "        return self.num_samples\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        feature_dict = {stream: self.features[stream][idx] for stream in self.active_streams}\n",
    "        label = self.labels[idx]\n",
    "        return feature_dict, label\n",
    "\n",
    "# --- Training and Evaluation Functions ---\n",
    "def train_epoch(model, dataloader, optimizer, criterion, device):\n",
    "    model.train()\n",
    "    total_loss = 0.0\n",
    "    all_preds = []\n",
    "    all_labels = []\n",
    "    active_streams = model.stream_names\n",
    "    for features, labels in tqdm(dataloader, desc=\"Training\", leave=False):\n",
    "        input_features = {name: features[name].to(device) for name in active_streams if name in features}\n",
    "        labels = labels.to(device)\n",
    "\n",
    "        optimizer.zero_grad()\n",
    "        outputs = model(input_features)\n",
    "        loss = criterion(outputs, labels)\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "\n",
    "        total_loss += loss.item()\n",
    "        preds = torch.argmax(outputs, dim=1)\n",
    "        all_preds.extend(preds.cpu().numpy())\n",
    "        all_labels.extend(labels.cpu().numpy())\n",
    "\n",
    "    avg_loss = total_loss / max(1, len(dataloader))\n",
    "    accuracy = accuracy_score(all_labels, all_preds)\n",
    "    return avg_loss, accuracy\n",
    "\n",
    "def evaluate_epoch(model, dataloader, criterion, device):\n",
    "    model.eval()\n",
    "    total_loss = 0.0\n",
    "    all_labels_list = []\n",
    "    all_preds_list = []\n",
    "    all_probs_list = [] # For all classes\n",
    "    active_streams = model.stream_names\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for features, labels in tqdm(dataloader, desc=\"Evaluating\", leave=False):\n",
    "            input_features = {name: features[name].to(device) for name in active_streams if name in features}\n",
    "            labels_dev = labels.to(device)\n",
    "\n",
    "            outputs = model(input_features)\n",
    "            loss = criterion(outputs, labels_dev)\n",
    "            total_loss += loss.item()\n",
    "\n",
    "            probs = torch.softmax(outputs, dim=1)\n",
    "            preds = torch.argmax(probs, dim=1)\n",
    "\n",
    "            all_labels_list.extend(labels.cpu().numpy())\n",
    "            all_preds_list.extend(preds.cpu().numpy())\n",
    "            all_probs_list.extend(probs.cpu().numpy()) # Store full probabilities\n",
    "\n",
    "    avg_loss = total_loss / max(1, len(dataloader))\n",
    "    all_labels_arr = np.array(all_labels_list)\n",
    "    all_preds_arr = np.array(all_preds_list)\n",
    "    all_probs_arr = np.array(all_probs_list)\n",
    "\n",
    "    accuracy = accuracy_score(all_labels_arr, all_preds_arr)\n",
    "    precision, recall, f1, _ = precision_recall_fscore_support(all_labels_arr, all_preds_arr, average='binary', pos_label=1, zero_division=0)\n",
    "    auc = roc_auc_score(all_labels_arr, all_probs_arr[:, 1]) if len(np.unique(all_labels_arr)) > 1 and all_probs_arr.shape[1] > 1 else float('nan')\n",
    "\n",
    "    return {\n",
    "        'loss': avg_loss, 'accuracy': accuracy, 'precision': precision,\n",
    "        'recall': recall, 'f1': f1, 'auc': auc,\n",
    "        'true_labels': all_labels_arr, # Return for threshold tuning if needed directly here\n",
    "        'all_probs': all_probs_arr     # Return for threshold tuning\n",
    "    }\n",
    "\n",
    "# --- *** NEW: Function to get all outputs for threshold tuning *** ---\n",
    "def get_all_outputs_for_tuning(model, dataloader, device):\n",
    "    model.eval()\n",
    "    all_labels_list = []\n",
    "    all_probs_positive_class_list = [] # Store probabilities for the positive class (class 1)\n",
    "    active_streams = model.stream_names\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for features, labels in tqdm(dataloader, desc=\"Getting Probs for Tuning\", leave=False):\n",
    "            input_features = {name: features[name].to(device) for name in active_streams if name in features}\n",
    "            # labels_device = labels.to(device) # Not needed for loss calculation here\n",
    "\n",
    "            outputs = model(input_features)\n",
    "            probs = torch.softmax(outputs, dim=1) # [B, Num_Classes]\n",
    "\n",
    "            all_labels_list.extend(labels.cpu().numpy())\n",
    "            if probs.shape[1] > 1: # Ensure there are at least 2 classes for probs[:, 1]\n",
    "                all_probs_positive_class_list.extend(probs[:, 1].cpu().numpy()) # Assuming class 1 is 'Crossing'\n",
    "            else: # Handle case of single output node (e.g. binary sigmoid) - less likely with CrossEntropy\n",
    "                all_probs_positive_class_list.extend(probs.squeeze().cpu().numpy())\n",
    "\n",
    "\n",
    "    return np.array(all_labels_list), np.array(all_probs_positive_class_list)\n",
    "\n",
    "# --- *** NEW: Function to tune threshold and get metrics *** ---\n",
    "def tune_threshold_and_get_metrics(true_labels, probs_positive_class, pos_label=1):\n",
    "    best_f1 = -1.0\n",
    "    best_threshold = 0.5\n",
    "    best_precision = 0.0\n",
    "    best_recall = 0.0\n",
    "    \n",
    "    threshold_candidates = np.linspace(0.05, 0.95, num=100) # Check 100 thresholds\n",
    "    actual_predictions_at_best_threshold = np.zeros_like(true_labels)\n",
    "\n",
    "    if len(np.unique(true_labels)) < 2:\n",
    "        print(\"Warning: Only one class present in true_labels. Threshold tuning might not be meaningful.\")\n",
    "        # Return default or metrics for a common threshold like 0.5\n",
    "        candidate_preds_default = (probs_positive_class >= 0.5).astype(int)\n",
    "        precision_default, recall_default, f1_default, _ = precision_recall_fscore_support(\n",
    "            true_labels, candidate_preds_default, average='binary', pos_label=pos_label, zero_division=0\n",
    "        )\n",
    "        return {\n",
    "            'best_threshold': 0.5, 'f1': f1_default, 'precision': precision_default,\n",
    "            'recall': recall_default, 'predictions': candidate_preds_default\n",
    "        }\n",
    "\n",
    "    for threshold in tqdm(threshold_candidates, desc=\"Tuning Threshold\", leave=False):\n",
    "        candidate_preds = (probs_positive_class >= threshold).astype(int)\n",
    "        precision, recall, f1, _ = precision_recall_fscore_support(\n",
    "            true_labels, candidate_preds, average='binary', pos_label=pos_label, zero_division=0\n",
    "        )\n",
    "        if f1 > best_f1:\n",
    "            best_f1 = f1\n",
    "            best_threshold = threshold\n",
    "            best_precision = precision\n",
    "            best_recall = recall\n",
    "            actual_predictions_at_best_threshold = candidate_preds\n",
    "        elif f1 == best_f1: # Tie-breaking: prefer threshold closer to 0.5\n",
    "            if abs(threshold - 0.5) < abs(best_threshold - 0.5):\n",
    "                 best_threshold = threshold\n",
    "                 best_precision = precision\n",
    "                 best_recall = recall\n",
    "                 actual_predictions_at_best_threshold = candidate_preds\n",
    "\n",
    "    print(f\"Optimal threshold search complete. Best threshold: {best_threshold:.4f} (F1: {best_f1:.4f})\")\n",
    "    return {\n",
    "        'best_threshold': best_threshold, 'f1': best_f1, 'precision': best_precision,\n",
    "        'recall': best_recall, 'predictions': actual_predictions_at_best_threshold\n",
    "    }\n",
    "    \n",
    "# --- Main Data Prep Execution Block ---\n",
    "if __name__ == '__main__':\n",
    "\n",
    "    # --- Step 1: Data Preparation ---\n",
    "    run_data_prep = not (os.path.exists(BALANCED_DATA_PKL_PATH) and os.path.exists(SCALERS_PKL_PATH))\n",
    "\n",
    "    if run_data_prep:\n",
    "        print(\"--- Running Data Preparation ---\")\n",
    "        print(f\"Checking for PIE database cache at: {PIE_DATABASE_CACHE_PATH}\")\n",
    "        if not os.path.exists(PIE_DATABASE_CACHE_PATH):\n",
    "            if PIE is None: raise ImportError(\"PIE class not imported and cache not found.\")\n",
    "            print(\"PIE database cache not found. Generating...\")\n",
    "            pie_dataset_interface = PIE(data_path=PIE_ROOT_PATH, regen_database=True)\n",
    "            pie_database = pie_dataset_interface.generate_database()\n",
    "            if not pie_database: raise RuntimeError(\"Failed to generate PIE database.\")\n",
    "            print(\"PIE database generated successfully.\")\n",
    "        else:\n",
    "            print(\"Loading PIE database from cache...\")\n",
    "            try:\n",
    "                with open(PIE_DATABASE_CACHE_PATH, 'rb') as f: pie_database = pickle.load(f)\n",
    "                print(\"PIE database loaded successfully.\")\n",
    "            except Exception as e: raise RuntimeError(f\"Failed to load PIE database: {e}\")\n",
    "\n",
    "        print(\"\\nCalculating standardization parameters from training set...\")\n",
    "        all_train_ego_speeds, all_train_accX, all_train_accY, all_train_gyroZ = [], [], [], []\n",
    "        for set_id in TRAIN_SETS_STR:\n",
    "             if set_id in pie_database:\n",
    "                 for video_id, video_data in pie_database[set_id].items():\n",
    "                      if 'vehicle_annotations' in video_data:\n",
    "                           for frame_num, ego_frame_data in video_data['vehicle_annotations'].items():\n",
    "                               speed = ego_frame_data.get('OBD_speed', 0.0)\n",
    "                               if speed == 0.0: speed = ego_frame_data.get('GPS_speed', 0.0)\n",
    "                               all_train_ego_speeds.append(speed)\n",
    "                               all_train_accX.append(ego_frame_data.get('accX', 0.0))\n",
    "                               all_train_accY.append(ego_frame_data.get('accY', 0.0))\n",
    "                               all_train_gyroZ.append(ego_frame_data.get('gyroZ', 0.0))\n",
    "        scalers = {}\n",
    "        if all_train_ego_speeds:\n",
    "            scalers['ego_speed_mean'] = np.mean(all_train_ego_speeds); scalers['ego_speed_std'] = np.std(all_train_ego_speeds) if np.std(all_train_ego_speeds) > 1e-6 else 1.0\n",
    "        if all_train_accX:\n",
    "            scalers['accX_mean'] = np.mean(all_train_accX); scalers['accX_std'] = np.std(all_train_accX) if np.std(all_train_accX) > 1e-6 else 1.0\n",
    "            scalers['accY_mean'] = np.mean(all_train_accY); scalers['accY_std'] = np.std(all_train_accY) if np.std(all_train_accY) > 1e-6 else 1.0\n",
    "        if all_train_gyroZ:\n",
    "            scalers['gyroZ_mean'] = np.mean(all_train_gyroZ); scalers['gyroZ_std'] = np.std(all_train_gyroZ) if np.std(all_train_gyroZ) > 1e-6 else 1.0\n",
    "        print(\"Standardization parameters calculated.\")\n",
    "\n",
    "        print(\"\\nInitializing full training dataset (for extraction/balancing)...\")\n",
    "        full_train_dataset = PIEDataset(pie_database, TRAIN_SETS_STR, POSE_DATA_DIR, YOLOP_FEATURE_DIR, SEQ_LEN, PRED_LEN, scalers, ALL_POSSIBLE_STREAMS)\n",
    "        if len(full_train_dataset) == 0: raise ValueError(\"Full Train Dataset loading failed.\")\n",
    "\n",
    "        print(\"\\nExtracting ALL stream data from training set for oversampling/augmentation...\")\n",
    "        training_data_dict_for_oversampling = {stream: [] for stream in ALL_POSSIBLE_STREAMS}\n",
    "        training_data_dict_for_oversampling['label'] = []\n",
    "        original_indices_crossing, original_indices_not_crossing = [], []\n",
    "\n",
    "        for i in tqdm(range(len(full_train_dataset)), desc=\"Extracting data for oversampling\"):\n",
    "            features, label_tensor = full_train_dataset[i]; label_item = label_tensor.item()\n",
    "            training_data_dict_for_oversampling['label'].append([label_item])\n",
    "            for stream_name in ALL_POSSIBLE_STREAMS:\n",
    "                if stream_name in features:\n",
    "                    training_data_dict_for_oversampling[stream_name].append(features[stream_name].numpy()) # Store as numpy\n",
    "                else:\n",
    "                    size = full_train_dataset._input_sizes_for_error.get(stream_name, 1)\n",
    "                    training_data_dict_for_oversampling[stream_name].append(np.zeros((SEQ_LEN, size), dtype=np.float32))\n",
    "            if label_item == 1: original_indices_crossing.append(i)\n",
    "            else: original_indices_not_crossing.append(i)\n",
    "\n",
    "        print(f\"Original training samples: {len(training_data_dict_for_oversampling['label'])}\")\n",
    "        count_0_orig, count_1_orig = len(original_indices_not_crossing), len(original_indices_crossing)\n",
    "        print(f\"Original counts: Crossing (1): {count_1_orig}, Not Crossing (0): {count_0_orig}\")\n",
    "        del full_train_dataset; gc.collect()\n",
    "\n",
    "        print(\"\\nPerforming Oversampling with Augmentation...\")\n",
    "        final_training_data_dict = {\n",
    "            stream: [training_data_dict_for_oversampling[stream][i] for i in original_indices_not_crossing + original_indices_crossing]\n",
    "            for stream in ALL_POSSIBLE_STREAMS\n",
    "        }\n",
    "        final_training_data_dict['label'] = [training_data_dict_for_oversampling['label'][i] for i in original_indices_not_crossing + original_indices_crossing]\n",
    "\n",
    "        if original_indices_crossing and count_0_orig > count_1_orig:\n",
    "            num_to_add = count_0_orig - count_1_orig\n",
    "            print(f\"Oversampling minority class (1) by adding {num_to_add} augmented samples...\")\n",
    "            indices_to_augment = random.choices(original_indices_crossing, k=num_to_add)\n",
    "            for aug_idx in tqdm(indices_to_augment, desc=\"Augmenting minority (1)\"):\n",
    "                final_training_data_dict['label'].append(training_data_dict_for_oversampling['label'][aug_idx])\n",
    "                for stream_name in ALL_POSSIBLE_STREAMS:\n",
    "                    original_sequence = training_data_dict_for_oversampling[stream_name][aug_idx].copy()\n",
    "                    augmented_sequence = original_sequence\n",
    "                    if AUGMENT_MINORITY_CLASS and stream_name in STREAMS_TO_AUGMENT_WITH_NOISE:\n",
    "                        noise = np.random.normal(0, GAUSSIAN_NOISE_STD, original_sequence.shape).astype(np.float32)\n",
    "                        augmented_sequence = original_sequence + noise\n",
    "                        if stream_name == 'bbox':\n",
    "                            augmented_sequence[:, 0:2] = np.clip(augmented_sequence[:, 0:2], 0.01, 0.99)\n",
    "                            augmented_sequence[:, 2:4] = np.clip(augmented_sequence[:, 2:4], 0.01, 1.0)\n",
    "                        elif stream_name == 'pose': augmented_sequence = np.clip(augmented_sequence, 0.0, 1.0)\n",
    "                    final_training_data_dict[stream_name].append(augmented_sequence)\n",
    "        elif original_indices_not_crossing and count_1_orig > count_0_orig:\n",
    "            num_to_add = count_1_orig - count_0_orig\n",
    "            print(f\"Oversampling minority class (0) by adding {num_to_add} augmented samples...\")\n",
    "            indices_to_augment = random.choices(original_indices_not_crossing, k=num_to_add)\n",
    "            for aug_idx in tqdm(indices_to_augment, desc=\"Augmenting minority (0)\"):\n",
    "                final_training_data_dict['label'].append(training_data_dict_for_oversampling['label'][aug_idx])\n",
    "                for stream_name in ALL_POSSIBLE_STREAMS:\n",
    "                    original_sequence = training_data_dict_for_oversampling[stream_name][aug_idx].copy()\n",
    "                    augmented_sequence = original_sequence\n",
    "                    if AUGMENT_MINORITY_CLASS and stream_name in STREAMS_TO_AUGMENT_WITH_NOISE:\n",
    "                        noise = np.random.normal(0, GAUSSIAN_NOISE_STD, original_sequence.shape).astype(np.float32)\n",
    "                        augmented_sequence = original_sequence + noise\n",
    "                        if stream_name == 'bbox':\n",
    "                            augmented_sequence[:, 0:2] = np.clip(augmented_sequence[:, 0:2], 0.01, 0.99)\n",
    "                            augmented_sequence[:, 2:4] = np.clip(augmented_sequence[:, 2:4], 0.01, 1.0)\n",
    "                        elif stream_name == 'pose': augmented_sequence = np.clip(augmented_sequence, 0.0, 1.0)\n",
    "                    final_training_data_dict[stream_name].append(augmented_sequence)\n",
    "        else: print(\"Dataset already balanced or one class is empty. No oversampling applied.\")\n",
    "\n",
    "        num_final_samples = len(final_training_data_dict['label'])\n",
    "        shuffled_indices = list(range(num_final_samples)); random.shuffle(shuffled_indices)\n",
    "        balanced_train_data_dict = {stream: [final_training_data_dict[stream][i] for i in shuffled_indices] for stream in ALL_POSSIBLE_STREAMS}\n",
    "        balanced_train_data_dict['label'] = [final_training_data_dict['label'][i] for i in shuffled_indices]\n",
    "\n",
    "        print(f\"Total balanced & augmented training samples: {len(balanced_train_data_dict['label'])}\")\n",
    "        count_0_balanced = sum(1 for lbl_list in balanced_train_data_dict['label'] if lbl_list[0] == 0)\n",
    "        count_1_balanced = sum(1 for lbl_list in balanced_train_data_dict['label'] if lbl_list[0] == 1)\n",
    "        print(f\"Balanced counts: Crossing (1): {count_1_balanced}, Not Crossing (0): {count_0_balanced}\")\n",
    "        del training_data_dict_for_oversampling, final_training_data_dict; gc.collect()\n",
    "\n",
    "        print(f\"\\nSaving balanced training data to: {BALANCED_DATA_PKL_PATH}\")\n",
    "        with open(BALANCED_DATA_PKL_PATH, 'wb') as f: pickle.dump(balanced_train_data_dict, f, pickle.HIGHEST_PROTOCOL)\n",
    "        print(f\"Saving scalers to: {SCALERS_PKL_PATH}\")\n",
    "        with open(SCALERS_PKL_PATH, 'wb') as f: pickle.dump(scalers, f, pickle.HIGHEST_PROTOCOL)\n",
    "        del pie_database; gc.collect()\n",
    "        print(\"\\n--- Data Preparation, Augmentation, and Balancing Completed ---\")\n",
    "    else:\n",
    "        print(\"--- Skipping Data Preparation: Using existing balanced data and scalers. ---\")\n",
    "\n",
    "\n",
    "    print(\"\\n\" + \"=\"*70)\n",
    "    print(\"--- Running Model Training and Evaluation (Concatenation Fusion) ---\")\n",
    "    print(f\"Active Streams for this run: {ACTIVE_STREAMS}\")\n",
    "    print(\"-\" * 70)\n",
    "\n",
    "    print(f\"\\nLoading balanced training data from: {BALANCED_DATA_PKL_PATH}\")\n",
    "    print(f\"Loading scalers from: {SCALERS_PKL_PATH}\")\n",
    "    try:\n",
    "        with open(BALANCED_DATA_PKL_PATH, 'rb') as f: balanced_train_data_dict = pickle.load(f)\n",
    "        with open(SCALERS_PKL_PATH, 'rb') as f: scalers = pickle.load(f)\n",
    "        print(\" -> Pre-processed data loaded successfully.\")\n",
    "    except FileNotFoundError as e: print(f\"ERROR: Required file not found: {e}. Run Prep section first.\"); sys.exit()\n",
    "    except Exception as e: print(f\"Error loading pre-processed data: {e}\"); sys.exit()\n",
    "\n",
    "    print(\"\\nLoading PIE database cache for Validation...\")\n",
    "    if not os.path.exists(PIE_DATABASE_CACHE_PATH): raise FileNotFoundError(\"PIE database cache not found for validation.\")\n",
    "    try:\n",
    "        with open(PIE_DATABASE_CACHE_PATH, 'rb') as f: pie_database = pickle.load(f)\n",
    "        print(\" -> PIE database loaded successfully.\")\n",
    "    except Exception as e: raise RuntimeError(f\"Failed to load PIE database: {e}\")\n",
    "\n",
    "    print(\"\\nCreating Datasets and DataLoaders...\")\n",
    "    try:\n",
    "        train_dataset = BalancedDataset(balanced_train_data_dict, ACTIVE_STREAMS, label_key='label')\n",
    "        del balanced_train_data_dict; gc.collect()\n",
    "        val_dataset = PIEDataset(pie_database, VAL_SETS_STR, POSE_DATA_DIR, YOLOP_FEATURE_DIR, SEQ_LEN, PRED_LEN, scalers, ALL_POSSIBLE_STREAMS)\n",
    "    except Exception as e: print(f\"Error creating Datasets: {e}\"); raise\n",
    "    if len(train_dataset) == 0 or len(val_dataset) == 0: raise ValueError(\"Datasets empty!\")\n",
    "\n",
    "    train_loader = DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True, num_workers=2, pin_memory=True)\n",
    "    val_loader = DataLoader(val_dataset, batch_size=BATCH_SIZE, shuffle=False, num_workers=2, pin_memory=True)\n",
    "    print(\"DataLoaders created.\")\n",
    "    del pie_database; gc.collect()\n",
    "\n",
    "    print(\"\\nInitializing model...\")\n",
    "    current_input_sizes = {}\n",
    "    for stream in ACTIVE_STREAMS:\n",
    "        size_constant_name = f'INPUT_SIZE_{stream.upper()}'\n",
    "        special_cases = {'TRAFFIC_LIGHT': 'TL_STATE','STATIC_CONTEXT': 'STATIC','EGO_SPEED': 'EGO_SPEED','EGO_ACC': 'EGO_ACC','EGO_GYRO': 'EGO_GYRO','PED_ACTION': 'PED_ACTION','PED_LOOK': 'PED_LOOK','PED_OCCLUSION': 'PED_OCC', 'YOLOP':'YOLOP'}\n",
    "        stream_upper_key = stream.upper(); suffix = special_cases.get(stream_upper_key)\n",
    "        if suffix: size_constant_name = f'INPUT_SIZE_{suffix}'\n",
    "        elif stream == 'bbox': size_constant_name = 'INPUT_SIZE_BBOX'\n",
    "        elif stream == 'pose': size_constant_name = 'INPUT_SIZE_POSE'\n",
    "        if size_constant_name in globals(): current_input_sizes[stream] = globals()[size_constant_name]\n",
    "        else: raise ValueError(f\"Input size constant {size_constant_name} not found for stream {stream}\")\n",
    "\n",
    "    # --- *** Use the NEW Concatenation Model *** ---\n",
    "    model = MultiStreamConcatenationLSTM(\n",
    "        input_sizes=current_input_sizes,\n",
    "        lstm_hidden_size=LSTM_HIDDEN_SIZE,\n",
    "        num_lstm_layers=NUM_LSTM_LAYERS,\n",
    "        num_classes=NUM_CLASSES,\n",
    "        attention_dim=ATTENTION_DIM,\n",
    "        dropout_rate=DROPOUT_RATE,\n",
    "        stream_names=ACTIVE_STREAMS\n",
    "    ).to(DEVICE)\n",
    "    print(\"\\n--- Model Architecture (Concatenation Fusion) ---\"); print(model); num_params = sum(p.numel() for p in model.parameters() if p.requires_grad); print(f\"Total Trainable Parameters: {num_params:,}\"); print(\"-\" * 30)\n",
    "\n",
    "    print(\"\\nCalculating Class Weights for Loss Function...\")\n",
    "    balanced_train_labels_list = train_dataset.labels.tolist()\n",
    "    count_0, count_1 = balanced_train_labels_list.count(0), balanced_train_labels_list.count(1)\n",
    "    total = len(balanced_train_labels_list)\n",
    "    if total == 0 or count_0 == 0 or count_1 == 0: weight_0, weight_1 = 1.0, 1.0 # Default if imbalance or empty\n",
    "    else: weight_0 = total / (2.0 * count_0); weight_1 = total / (2.0 * count_1)\n",
    "    class_weights = torch.tensor([weight_0, weight_1], dtype=torch.float32).to(DEVICE)\n",
    "    print(f\"Using Class Weights for Loss: 0={weight_0:.2f}, 1={weight_1:.2f}\")\n",
    "    criterion = nn.CrossEntropyLoss(weight=class_weights)\n",
    "    optimizer = optim.Adam(model.parameters(), lr=LEARNING_RATE)\n",
    "    best_val_f1 = -1.0; train_losses, val_losses = [], []; train_accs, val_accs = [], []; val_f1s = []\n",
    "    best_epoch_path = \"\"\n",
    "\n",
    "    print(\"\\n--- Starting Training ---\")\n",
    "    for epoch in range(NUM_EPOCHS):\n",
    "        epoch_start_time = time.time()\n",
    "        train_loss, train_acc = train_epoch(model, train_loader, optimizer, criterion, DEVICE)\n",
    "        val_metrics_epoch = evaluate_epoch(model, val_loader, criterion, DEVICE) # This uses argmax\n",
    "        epoch_duration = time.time() - epoch_start_time\n",
    "        train_losses.append(train_loss); val_losses.append(val_metrics_epoch['loss'])\n",
    "        train_accs.append(train_acc); val_accs.append(val_metrics_epoch['accuracy'])\n",
    "        val_f1s.append(val_metrics_epoch['f1'])\n",
    "        print(f\"--- Epoch {epoch+1}/{NUM_EPOCHS} ({epoch_duration:.2f} sec) ---\")\n",
    "        print(f\"  Train Loss: {train_loss:.4f}, Train Acc: {train_acc:.4f}\")\n",
    "        print(f\"  Val Loss (argmax):   {val_metrics_epoch['loss']:.4f}, Val Acc (argmax):  {val_metrics_epoch['accuracy']:.4f}\")\n",
    "        print(f\"  Val Prec (argmax):   {val_metrics_epoch['precision']:.4f}, Recall (argmax): {val_metrics_epoch['recall']:.4f}, F1 (argmax): {val_metrics_epoch['f1']:.4f}\")\n",
    "        print(f\"  Val AUC (threshold-invariant): {val_metrics_epoch['auc']:.4f}\")\n",
    "\n",
    "        if val_metrics_epoch['f1'] > best_val_f1:\n",
    "            best_val_f1 = val_metrics_epoch['f1']\n",
    "            active_streams_str = \"_\".join(sorted(ACTIVE_STREAMS))\n",
    "            # Updated model name to reflect concatenation\n",
    "            current_best_epoch_path = f'best_model_concat_aug_{active_streams_str}_ep{epoch+1}.pth'\n",
    "            torch.save(model.state_dict(), current_best_epoch_path)\n",
    "            best_epoch_path = current_best_epoch_path\n",
    "            print(f\"  >> Saved new best model (based on argmax F1) to {best_epoch_path} (F1: {best_val_f1:.4f})\")\n",
    "        print(\"-\" * 30)\n",
    "    print(\"--- Training Finished ---\")\n",
    "\n",
    "    print(\"\\n--- Plotting Training History ---\")\n",
    "    fig, axes = plt.subplots(1, 2, figsize=(12, 5))\n",
    "    axes[0].plot(range(1, NUM_EPOCHS + 1), train_losses, label='Train Loss')\n",
    "    axes[0].plot(range(1, NUM_EPOCHS + 1), val_losses, label='Val Loss')\n",
    "    axes[0].set_xlabel('Epoch'); axes[0].set_ylabel('Loss'); axes[0].set_title('Loss Curve'); axes[0].legend(); axes[0].grid(True)\n",
    "    axes[1].plot(range(1, NUM_EPOCHS + 1), train_accs, label='Train Accuracy')\n",
    "    axes[1].plot(range(1, NUM_EPOCHS + 1), val_accs, label='Val Accuracy (argmax)')\n",
    "    axes[1].plot(range(1, NUM_EPOCHS + 1), val_f1s, label='Val F1-Score (argmax)', linestyle='--')\n",
    "    axes[1].set_xlabel('Epoch'); axes[1].set_ylabel('Metric'); axes[1].set_title('Accuracy & F1-Score Curve'); axes[1].legend(); axes[1].grid(True)\n",
    "    plt.tight_layout(); plt.show()\n",
    "\n",
    "    print(\"\\n--- Final Evaluation on Validation Set using Best Model ---\")\n",
    "    if best_epoch_path and os.path.exists(best_epoch_path):\n",
    "        print(f\"Loading best saved model '{best_epoch_path}'\")\n",
    "        try: model.load_state_dict(torch.load(best_epoch_path, map_location=DEVICE))\n",
    "        except Exception as e: print(f\"Warn: Error loading {best_epoch_path}: {e}. Eval final model.\")\n",
    "    else: print(f\"Warning: No best model saved/found at '{best_epoch_path}'. Eval final model.\")\n",
    "\n",
    "    # --- *** Perform Probability Threshold Tuning *** ---\n",
    "    print(\"\\n--- Performing Probability Threshold Tuning on Validation Set ---\")\n",
    "    true_labels_val, probs_positive_class_val = get_all_outputs_for_tuning(model, val_loader, DEVICE)\n",
    "    \n",
    "    if probs_positive_class_val.size == 0:\n",
    "        print(\"Error: No probabilities obtained for threshold tuning. Skipping.\")\n",
    "        tuned_results = {'best_threshold': 0.5, 'f1': 0, 'precision': 0, 'recall': 0, 'predictions': np.array([])}\n",
    "    elif len(np.unique(true_labels_val)) < 2:\n",
    "        print(\"Warning: Only one class in validation set for threshold tuning. Using default 0.5 threshold.\")\n",
    "        tuned_results = tune_threshold_and_get_metrics(true_labels_val, probs_positive_class_val) # Will handle single class\n",
    "    else:\n",
    "        tuned_results = tune_threshold_and_get_metrics(true_labels_val, probs_positive_class_val)\n",
    "\n",
    "    # Get argmax based metrics for comparison using the loaded best model\n",
    "    final_argmax_metrics = evaluate_epoch(model, val_loader, criterion, DEVICE) # This uses argmax\n",
    "\n",
    "    print(\"\\n--- Final Performance Metrics (Argmax-based on Best Model) ---\")\n",
    "    print(f\"  Streams:   {', '.join(ACTIVE_STREAMS)}\")\n",
    "    print(f\"  Accuracy:  {final_argmax_metrics['accuracy']:.4f}\")\n",
    "    print(f\"  Precision: {final_argmax_metrics['precision']:.4f}\")\n",
    "    print(f\"  Recall:    {final_argmax_metrics['recall']:.4f}\")\n",
    "    print(f\"  F1 Score:  {final_argmax_metrics['f1']:.4f}\")\n",
    "    print(f\"  AUC:       {final_argmax_metrics['auc']:.4f}\") # AUC is threshold-independent\n",
    "    print(f\"  Loss:      {final_argmax_metrics['loss']:.4f}\")\n",
    "    print(f\"  (Best Validation F1 during training with argmax: {best_val_f1:.4f})\")\n",
    "\n",
    "    print(\"\\n--- Final Performance Metrics (After Threshold Tuning on Best Model) ---\")\n",
    "    print(f\"  Optimal Threshold: {tuned_results['best_threshold']:.4f}\")\n",
    "    print(f\"  Tuned F1 Score:    {tuned_results['f1']:.4f}\")\n",
    "    print(f\"  Tuned Precision:   {tuned_results['precision']:.4f}\")\n",
    "    print(f\"  Tuned Recall:      {tuned_results['recall']:.4f}\")\n",
    "    if tuned_results['predictions'].size > 0 :\n",
    "        tuned_accuracy = accuracy_score(true_labels_val, tuned_results['predictions'])\n",
    "        print(f\"  Tuned Accuracy:    {tuned_accuracy:.4f}\")\n",
    "        cm_tuned = confusion_matrix(true_labels_val, tuned_results['predictions'], labels=[0, 1])\n",
    "        labels_display = ['Not Crossing', 'Crossing']\n",
    "        print(\"\\n--- Confusion Matrix (Using Optimal Threshold) ---\")\n",
    "        disp_tuned = ConfusionMatrixDisplay(confusion_matrix=cm_tuned, display_labels=labels_display)\n",
    "        disp_tuned.plot(cmap=plt.cm.Blues)\n",
    "        plt.title(f'CM Tuned Thr. ({\", \".join(ACTIVE_STREAMS)}) Th={tuned_results[\"best_threshold\"]:.2f}')\n",
    "        plt.show()\n",
    "    else:\n",
    "        print(\"  Skipping Tuned Accuracy and CM due to no predictions from tuning.\")\n",
    "\n",
    "    # No fusion weights to print for concatenation model\n",
    "    print(\"\\n--- Script Complete ---\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6da31fae",
   "metadata": {
    "papermill": {
     "duration": 0.011999,
     "end_time": "2025-05-09T15:35:22.346543",
     "exception": false,
     "start_time": "2025-05-09T15:35:22.334544",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 6993690,
     "sourceId": 11201333,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6993708,
     "sourceId": 11201362,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6993722,
     "sourceId": 11201388,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6993740,
     "sourceId": 11201422,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6993794,
     "sourceId": 11201506,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6993809,
     "sourceId": 11201543,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7034191,
     "sourceId": 11255589,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7127490,
     "sourceId": 11382982,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7142036,
     "sourceId": 11402679,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7333398,
     "sourceId": 11684148,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7357780,
     "sourceId": 11720877,
     "sourceType": "datasetVersion"
    },
    {
     "modelId": 279383,
     "modelInstanceId": 258142,
     "sourceId": 302300,
     "sourceType": "modelInstanceVersion"
    },
    {
     "modelId": 283333,
     "modelInstanceId": 262207,
     "sourceId": 307831,
     "sourceType": "modelInstanceVersion"
    },
    {
     "modelId": 288527,
     "modelInstanceId": 267476,
     "sourceId": 316944,
     "sourceType": "modelInstanceVersion"
    },
    {
     "modelId": 297682,
     "modelInstanceId": 276781,
     "sourceId": 329886,
     "sourceType": "modelInstanceVersion"
    },
    {
     "modelId": 297702,
     "modelInstanceId": 276800,
     "sourceId": 329908,
     "sourceType": "modelInstanceVersion"
    },
    {
     "isSourceIdPinned": true,
     "modelId": 314775,
     "modelInstanceId": 294156,
     "sourceId": 352620,
     "sourceType": "modelInstanceVersion"
    }
   ],
   "dockerImageVersionId": 30918,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 7641.05967,
   "end_time": "2025-05-09T15:35:27.103112",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-09T13:28:06.043442",
   "version": "2.6.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "01f934809d174fa7995ccb0bf4ebd31e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e53d58caf0274b429360c193b9bab1df",
       "placeholder": "​",
       "style": "IPY_MODEL_a6da6ad3c2db44588aedb8d8c77054e0",
       "tabbable": null,
       "tooltip": null,
       "value": " 223520/223520 [00:37&lt;00:00, 6002.71it/s]"
      }
     },
     "03758fb9720e44fc8fc373206a8b2cc9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_300f1478bda94b25a2c7e987053f091c",
       "placeholder": "​",
       "style": "IPY_MODEL_dd6eff56423349c88cae665b8508b9d0",
       "tabbable": null,
       "tooltip": null,
       "value": " 47/53 [00:01&lt;00:00, 47.36it/s]"
      }
     },
     "03fd68bf226c4339869b83d41f02aa6f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_fd55531c9e824e82b3bbcc5df838fdaf",
        "IPY_MODEL_8e23222ff3924b0cb16b275f60cec7a2",
        "IPY_MODEL_e11554f292ff48cfae38126ddb5a0b82"
       ],
       "layout": "IPY_MODEL_a255139d970746ebb5c6aed5851746ca",
       "tabbable": null,
       "tooltip": null
      }
     },
     "05629bc6e56f4bea88a8f473999d3b38": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_2d422a0aed9d4631bd4615c0dfef8c50",
       "placeholder": "​",
       "style": "IPY_MODEL_5805d2afa3334396bd84f248d2334741",
       "tabbable": null,
       "tooltip": null,
       "value": " 2416/2416 [02:24&lt;00:00, 12.07it/s]"
      }
     },
     "068ec96ae1d14133a796e9ced6a45a33": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "06b4d4b7dbee4b4abf68416126a31912": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "095fd13403e34979b233d4d34d17d4df": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0b89bed6d3084b15a8f59609ba55afa8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4c3bffef50b64d95935456fdf7eac6af",
       "placeholder": "​",
       "style": "IPY_MODEL_6c3049b42f204fbfa83b2e3bd9941267",
       "tabbable": null,
       "tooltip": null,
       "value": " 17405/17406 [18:14&lt;00:00, 15.18it/s]"
      }
     },
     "0c64e84ef2e7412bb29e1932d5c0eef4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5de0a977914f4e628bfddfda74f33fb7",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_c1beb74dd153493488dcad5ec053b59a",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "0eca3a9df8fe4b7aac038f859e2326da": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_16847d17f79e40aa85e7dd7cdc44a7b6",
       "placeholder": "​",
       "style": "IPY_MODEL_c17f55b5610a4227a3b8e0b99c3a7d77",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "0ffad0f9985f4b3fa93b9bcb039bef30": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "11adfdf178414c7ead006c8c103e062d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "139e90dd3340458f80908e2d1b90971e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "161a05d099294a65bff3133d38b1d63b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "16847d17f79e40aa85e7dd7cdc44a7b6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "16b83a67c8df47f8894f2176bf2096d5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3f2ec87a66a547838de2b127008c4e0e",
       "placeholder": "​",
       "style": "IPY_MODEL_c4e7df45b00247d8a641f07907097989",
       "tabbable": null,
       "tooltip": null,
       "value": "Generating Sequences for [&#x27;set01&#x27;, &#x27;set02&#x27;, &#x27;set04&#x27;]: 100%"
      }
     },
     "1aa54f17998c473a9f5f8adc5e721eee": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_776fc833a35b4f46b74723dbfb0e93e8",
       "placeholder": "​",
       "style": "IPY_MODEL_fdaf31f5d900479c847695902a59f7ed",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "1b5900e11b4d49588c857ee0ad545ac6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1cd93dd5471c44c5b4545038f1f3c4a6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_69b2793f9fac437a969b1bd720e23308",
       "placeholder": "​",
       "style": "IPY_MODEL_67aa0ed113a749558723f42e119699ed",
       "tabbable": null,
       "tooltip": null,
       "value": " 17405/17406 [18:13&lt;00:00, 15.14it/s]"
      }
     },
     "1fe509ca65e84993a2399f25d3334007": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2139b82248274d67be8337d6d8a4491a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_2f2a1cc70f2e4619a5dd27af7c5f7c23",
       "placeholder": "​",
       "style": "IPY_MODEL_2e01eeefd0bc4ccfbd192ea83f3c7c61",
       "tabbable": null,
       "tooltip": null,
       "value": " 17406/17406 [18:13&lt;00:00, 15.86it/s]"
      }
     },
     "2266376e847647a5a4c9f65825e8623c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "238f3c03edb74afb9dd95057837d4b8e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "2470c56ff6a847319642e53091cc8307": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "27222e03398d474892552ca44f8e65d5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "290536fc068e495085ad157cb4141793": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "296b1ae66b7343dfa9fc34c49d1c17aa": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_447e081606ae41f79c16a9f1894139bb",
        "IPY_MODEL_69367f07be5b4a15879d88f56288182b",
        "IPY_MODEL_7e6ef213baa54257b81f6770bad236e3"
       ],
       "layout": "IPY_MODEL_da1a1fd5025e40beb810b58e48ba7622",
       "tabbable": null,
       "tooltip": null
      }
     },
     "2baf89e622a14ae7b95b45f392a495d5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_1fe509ca65e84993a2399f25d3334007",
       "placeholder": "​",
       "style": "IPY_MODEL_7f9d7c9a3699425e84a2cdb996c7a20b",
       "tabbable": null,
       "tooltip": null,
       "value": "Extracting data for oversampling: 100%"
      }
     },
     "2c5a279c5f3b4dc1a3467f22cc40623e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "2d422a0aed9d4631bd4615c0dfef8c50": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2dac0409043c41ff905562ceba3beb9a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "2e01eeefd0bc4ccfbd192ea83f3c7c61": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "2ea3f5570d8242cea1d9e599469cd999": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_de15401c7697435ca5897d2553945040",
       "placeholder": "​",
       "style": "IPY_MODEL_a0c55fb211e64a8987aed047ccf50972",
       "tabbable": null,
       "tooltip": null,
       "value": "Loading YOLOP PKLs:  89%"
      }
     },
     "2ee4901ff0a84a7db25d510fad7f0a17": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2f2a1cc70f2e4619a5dd27af7c5f7c23": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "300f1478bda94b25a2c7e987053f091c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3046c5657f0f4cca908f87b744ff99c2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "30ad0fa3bcff42958082a81fc33a6509": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_dcfb92e867274158aa9d5af72fdf70c6",
       "placeholder": "​",
       "style": "IPY_MODEL_ce79efb22e2846e3aae1bc0119b42692",
       "tabbable": null,
       "tooltip": null,
       "value": "Loading YOLOP PKLs:  57%"
      }
     },
     "3120ec95aac04299b8f241c039384492": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "3132426b5b2e435e922fce2ab083c1aa": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_8cc3898abd8a4f2c8e955b47b111df5d",
       "max": 3.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_acad0c20ee074469a47606cab25ec39d",
       "tabbable": null,
       "tooltip": null,
       "value": 3.0
      }
     },
     "315e313f82cc478797466487a6a1be18": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9ed060b5ebb040faba58b8a6b25a6300",
       "placeholder": "​",
       "style": "IPY_MODEL_95ec05328ef8489c898905d264377df0",
       "tabbable": null,
       "tooltip": null,
       "value": "Augmenting minority (1): 100%"
      }
     },
     "31a461e1fbbf4a02affc5931f1ff777d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_139e90dd3340458f80908e2d1b90971e",
       "placeholder": "​",
       "style": "IPY_MODEL_bab7bc81013e45b78f666f128c6c5bac",
       "tabbable": null,
       "tooltip": null,
       "value": " 99/100 [00:03&lt;00:00, 26.22it/s]"
      }
     },
     "33b90f5b71bb45d98d25d8824397fbd4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "37e9ffb870674d51844261563122a85a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c47dcc777ab948fda2b43b7eddc00641",
       "placeholder": "​",
       "style": "IPY_MODEL_8f55643bf5e34599a85afe2f57d478d9",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "38ebf1b919e74251b706e6e221623b17": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_16b83a67c8df47f8894f2176bf2096d5",
        "IPY_MODEL_3132426b5b2e435e922fce2ab083c1aa",
        "IPY_MODEL_e3ece5d252af41be81b194444bc797b3"
       ],
       "layout": "IPY_MODEL_f3ab41a8d5de4a63a3c63b775a036d84",
       "tabbable": null,
       "tooltip": null
      }
     },
     "38fc6abb3fb14f4c9860590d0007531a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "3a01739a53b54ee4bc069891f277fff7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c75ce5d52523446a880bd428a3ed5e5d",
       "placeholder": "​",
       "style": "IPY_MODEL_5ea311ebe94a423ab6c7fcc3d504129c",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "3a3735b9c7a04de9964641499892c617": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3f2ec87a66a547838de2b127008c4e0e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "41217206f735496e9b8c8cbd66eac4ea": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4139931fa328474facd9d9f089d979e9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4149edc517c14115b2f4bab684a90604": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_9c09f725f9c64640965cc15e8d640213",
        "IPY_MODEL_a5e92b416577422291b211cdc1daa9e6",
        "IPY_MODEL_f9293865ecb143b380269f166ea1b383"
       ],
       "layout": "IPY_MODEL_b3d7f50db86249249855d1568e39f79a",
       "tabbable": null,
       "tooltip": null
      }
     },
     "4338f6b6d9fb4e86a8070e023661aadc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7a5c6ff8a1dd4a808c408bb6f7acbf12",
       "placeholder": "​",
       "style": "IPY_MODEL_ce4e7353d75042afb12e4a8e930ae466",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "44145b5a7b0948f395abb03f8a366746": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_41217206f735496e9b8c8cbd66eac4ea",
       "max": 17406.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_b9f3c80cb89741aa8f95aeccb47f9213",
       "tabbable": null,
       "tooltip": null,
       "value": 17406.0
      }
     },
     "447e081606ae41f79c16a9f1894139bb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_48968da823ab4f9b9e2f9732028be314",
       "placeholder": "​",
       "style": "IPY_MODEL_2470c56ff6a847319642e53091cc8307",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "4498c3714bdd44d2a5e331a4831c16d4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_87e59e1bf79a4278a07571a48f5131c4",
       "placeholder": "​",
       "style": "IPY_MODEL_f1de8a70c6a94f7c970c51af62dedb3e",
       "tabbable": null,
       "tooltip": null,
       "value": " 2415/2416 [02:22&lt;00:00, 11.80it/s]"
      }
     },
     "46e78f48b5a54eda8e6be741bc9f2d47": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "46f4da24c136462ebe83f21d53621e00": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "48569ce518b34068900d88c74a61bc22": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "48878459f2b644578e82e04409974b88": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "48968da823ab4f9b9e2f9732028be314": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4a2e591742d342f19ffc232032f90ecc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_11adfdf178414c7ead006c8c103e062d",
       "placeholder": "​",
       "style": "IPY_MODEL_cf277c3b2a2744fca66c21fa40b10c06",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "4ab396da6459417eb9be7c9c4a2064fb": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "4b15d85f378345dbaa7856eda6b6fb96": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_8ab4dba1ca65433397d32352564a85b6",
        "IPY_MODEL_bcb8e2a81c734201a039bf1cacaef588",
        "IPY_MODEL_ac55d724465840f3b8fbeaf2b8a811f5"
       ],
       "layout": "IPY_MODEL_290536fc068e495085ad157cb4141793",
       "tabbable": null,
       "tooltip": null
      }
     },
     "4c3bffef50b64d95935456fdf7eac6af": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4ce2a3b0def74309afa384923d0863a2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_5e85d9730fc14ac38d4e2c6131e07f00",
        "IPY_MODEL_905824fec95740b4a823916aecea8efe",
        "IPY_MODEL_0b89bed6d3084b15a8f59609ba55afa8"
       ],
       "layout": "IPY_MODEL_e9d370750f2a4b6aa3b2e1e64de84b2f",
       "tabbable": null,
       "tooltip": null
      }
     },
     "4d1c0bd929bc4031a4c99a541b4d282d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5126f7aa70d145fa9c1f1d72dd4d4901": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "537302819c7b4bd9b114066ddf63ab6f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "5425350408ea46de8f862e621bed578c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_a1fcf4fa9c0541b59c3c5aa058bde415",
        "IPY_MODEL_44145b5a7b0948f395abb03f8a366746",
        "IPY_MODEL_1cd93dd5471c44c5b4545038f1f3c4a6"
       ],
       "layout": "IPY_MODEL_48569ce518b34068900d88c74a61bc22",
       "tabbable": null,
       "tooltip": null
      }
     },
     "54bacc153d7e4d0b8278fb181a482741": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5756dc70de654bda92d62e3eaf36e004": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5805d2afa3334396bd84f248d2334741": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "5de0a977914f4e628bfddfda74f33fb7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5e85d9730fc14ac38d4e2c6131e07f00": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0ffad0f9985f4b3fa93b9bcb039bef30",
       "placeholder": "​",
       "style": "IPY_MODEL_b71413480f664f92bf2ff780324ff1d4",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "5ea311ebe94a423ab6c7fcc3d504129c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "5f95d440f7084b8496dc0c0eb7fccf80": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "62b143c08e1e4c2daa5fc74a186ec526": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "637dcd9bf15e4fa486750e1ad6e10a3a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "6426a31d80e24953aea44e28a86d9038": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "66dc3c8a55f14a5f919fa09b5c30c16d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "67aa0ed113a749558723f42e119699ed": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "69367f07be5b4a15879d88f56288182b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_af869a5698824b2f80746bfa4ed5b153",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_adaa2a0e4eb54887bd19640fbad06b04",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "69b2793f9fac437a969b1bd720e23308": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6c3049b42f204fbfa83b2e3bd9941267": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "6cc54da06d024329b3dbe885d08c3941": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6cd1b1a49b714c0b81548eca96269975": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_54bacc153d7e4d0b8278fb181a482741",
       "placeholder": "​",
       "style": "IPY_MODEL_9e3d96eade374d45a862dfdb4e19e5fa",
       "tabbable": null,
       "tooltip": null,
       "value": " 17405/17406 [18:15&lt;00:00, 13.99it/s]"
      }
     },
     "6d2bc8f304954c10a24727cc310f3080": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_4a2e591742d342f19ffc232032f90ecc",
        "IPY_MODEL_ac8c8189e4184c148274f316de36c1f0",
        "IPY_MODEL_6cd1b1a49b714c0b81548eca96269975"
       ],
       "layout": "IPY_MODEL_c3a35ad4d6664ba1959dfdeb26c7f891",
       "tabbable": null,
       "tooltip": null
      }
     },
     "70eb7ea7d4d443d4b8ccf4e7499cb779": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "73942145b340432cac287bcd60df81c6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "73c2a7d04dcc4a8ebad4f060acc2fcec": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "761e87bbf6ac4adcbd6a5fdf4fcf487a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9753cf4979fc47aeb5789ad1b8c4b19e",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_33b90f5b71bb45d98d25d8824397fbd4",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "776fc833a35b4f46b74723dbfb0e93e8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "77a7063a615b43509c41c509ca2a98dc": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7a5c6ff8a1dd4a808c408bb6f7acbf12": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7aa2e9b8c96642ddabe0b707a30a86c5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "7be7d6258bff4338b17c9939124b14e7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5756dc70de654bda92d62e3eaf36e004",
       "placeholder": "​",
       "style": "IPY_MODEL_66dc3c8a55f14a5f919fa09b5c30c16d",
       "tabbable": null,
       "tooltip": null,
       "value": " 2415/2416 [02:25&lt;00:00, 11.53it/s]"
      }
     },
     "7c411f78f6334f1ca544f614439bfb1f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_3a01739a53b54ee4bc069891f277fff7",
        "IPY_MODEL_db95e22f5e5c42af80dd537c680cfc5e",
        "IPY_MODEL_2139b82248274d67be8337d6d8a4491a"
       ],
       "layout": "IPY_MODEL_537302819c7b4bd9b114066ddf63ab6f",
       "tabbable": null,
       "tooltip": null
      }
     },
     "7c71948abad54f2abfda7e847f0ba582": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "7e6ef213baa54257b81f6770bad236e3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e48b75d90e7a4175917a515b8309c42b",
       "placeholder": "​",
       "style": "IPY_MODEL_a690f589f2b44397a088ed9cd54f59fb",
       "tabbable": null,
       "tooltip": null,
       "value": " 2416/2416 [02:24&lt;00:00, 13.66it/s]"
      }
     },
     "7f9d7c9a3699425e84a2cdb996c7a20b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "87b5fe6a422747969e168481f36e7882": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "87e59e1bf79a4278a07571a48f5131c4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8a20a60741e14ab3b183a8490b70a5a3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "8ab4dba1ca65433397d32352564a85b6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_2266376e847647a5a4c9f65825e8623c",
       "placeholder": "​",
       "style": "IPY_MODEL_a7e7e04a9c14433484f629a9a4c851e7",
       "tabbable": null,
       "tooltip": null,
       "value": "Getting Probs for Tuning: 100%"
      }
     },
     "8b47dd42181d4fdca7c3ab84f3d1eec2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e2942dc4ef0f464aad7163427a3156cb",
       "max": 53.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_8da2d6252eb4492196614dddc26e8071",
       "tabbable": null,
       "tooltip": null,
       "value": 53.0
      }
     },
     "8bc26d260f034f5a9d3515bfb5bcfa86": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3a3735b9c7a04de9964641499892c617",
       "max": 100.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_06b4d4b7dbee4b4abf68416126a31912",
       "tabbable": null,
       "tooltip": null,
       "value": 100.0
      }
     },
     "8cc3898abd8a4f2c8e955b47b111df5d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8d6f1c5f450540f0b1ca974ccf27c681": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8d9d5e030b3f4bda94a959d6710ad003": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_cd0b7fa7ecd24d0888379b66e64317b5",
        "IPY_MODEL_8bc26d260f034f5a9d3515bfb5bcfa86",
        "IPY_MODEL_31a461e1fbbf4a02affc5931f1ff777d"
       ],
       "layout": "IPY_MODEL_e88139abd385452c8a58d53f680d83de",
       "tabbable": null,
       "tooltip": null
      }
     },
     "8da2d6252eb4492196614dddc26e8071": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "8e23222ff3924b0cb16b275f60cec7a2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_baf3fe4d4cd8439fbb948c719a13fc3e",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_909834e8c65d4e5eac924a76668614b2",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "8f55643bf5e34599a85afe2f57d478d9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "905824fec95740b4a823916aecea8efe": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4d1c0bd929bc4031a4c99a541b4d282d",
       "max": 17406.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_38fc6abb3fb14f4c9860590d0007531a",
       "tabbable": null,
       "tooltip": null,
       "value": 17406.0
      }
     },
     "909834e8c65d4e5eac924a76668614b2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "91da3581ae284294931be01efb854de4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_4338f6b6d9fb4e86a8070e023661aadc",
        "IPY_MODEL_0c64e84ef2e7412bb29e1932d5c0eef4",
        "IPY_MODEL_4498c3714bdd44d2a5e331a4831c16d4"
       ],
       "layout": "IPY_MODEL_48878459f2b644578e82e04409974b88",
       "tabbable": null,
       "tooltip": null
      }
     },
     "95ec05328ef8489c898905d264377df0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "9753cf4979fc47aeb5789ad1b8c4b19e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "98932851f7484094846675b55533fe72": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9baa630b006c41e9afb67185b0fd35e3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9c09f725f9c64640965cc15e8d640213": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_87b5fe6a422747969e168481f36e7882",
       "placeholder": "​",
       "style": "IPY_MODEL_46e78f48b5a54eda8e6be741bc9f2d47",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "9e3d96eade374d45a862dfdb4e19e5fa": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "9ed060b5ebb040faba58b8a6b25a6300": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9fefce238257428fbc818210d7886df6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "a0c55fb211e64a8987aed047ccf50972": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "a1fcf4fa9c0541b59c3c5aa058bde415": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_b2503e5a2a7343609ac829767dd2d80e",
       "placeholder": "​",
       "style": "IPY_MODEL_b7363cfdbc60467083d44909d2806e87",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "a255139d970746ebb5c6aed5851746ca": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "a4f3c61b876d46d98524c19480455b19": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "a5e92b416577422291b211cdc1daa9e6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3046c5657f0f4cca908f87b744ff99c2",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_238f3c03edb74afb9dd95057837d4b8e",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "a690f589f2b44397a088ed9cd54f59fb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "a6da6ad3c2db44588aedb8d8c77054e0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "a7e7e04a9c14433484f629a9a4c851e7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "aae47bd2d6bb4d77a05f16a361568ce6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_eefb771f11b5499ca2d1e97f058c817a",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_3120ec95aac04299b8f241c039384492",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "aaf4fa124ca14a57876f66987111dfc9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "ab77ecc1a6db4bc58663bf6c86241712": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_37e9ffb870674d51844261563122a85a",
        "IPY_MODEL_761e87bbf6ac4adcbd6a5fdf4fcf487a",
        "IPY_MODEL_7be7d6258bff4338b17c9939124b14e7"
       ],
       "layout": "IPY_MODEL_d66bc708fffa4339b31c354ef6bf8a86",
       "tabbable": null,
       "tooltip": null
      }
     },
     "ab79b149ed354a0cbeba0ef22f4f10df": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "abea491d6a2d483aa1415d17bc29ee00": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "ac55d724465840f3b8fbeaf2b8a811f5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9baa630b006c41e9afb67185b0fd35e3",
       "placeholder": "​",
       "style": "IPY_MODEL_27222e03398d474892552ca44f8e65d5",
       "tabbable": null,
       "tooltip": null,
       "value": " 2415/2416 [02:23&lt;00:00, 11.32it/s]"
      }
     },
     "ac8c8189e4184c148274f316de36c1f0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_8d6f1c5f450540f0b1ca974ccf27c681",
       "max": 17406.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_62b143c08e1e4c2daa5fc74a186ec526",
       "tabbable": null,
       "tooltip": null,
       "value": 17406.0
      }
     },
     "acad0c20ee074469a47606cab25ec39d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "adaa2a0e4eb54887bd19640fbad06b04": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "ae30daff0e114f83bd736cfb2b9b20b0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4139931fa328474facd9d9f089d979e9",
       "max": 2.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_8a20a60741e14ab3b183a8490b70a5a3",
       "tabbable": null,
       "tooltip": null,
       "value": 2.0
      }
     },
     "af869a5698824b2f80746bfa4ed5b153": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b2503e5a2a7343609ac829767dd2d80e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b3d7f50db86249249855d1568e39f79a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "b49fb5d5093a415a815c4b1d2c200cab": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "b6d16a4a6c7a4989a9aeb2d2ae971f07": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "b71413480f664f92bf2ff780324ff1d4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "b7363cfdbc60467083d44909d2806e87": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "b9dfd708e0604ee3a589942ee8ee8be8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_77a7063a615b43509c41c509ca2a98dc",
       "placeholder": "​",
       "style": "IPY_MODEL_70eb7ea7d4d443d4b8ccf4e7499cb779",
       "tabbable": null,
       "tooltip": null,
       "value": " 17405/17406 [18:14&lt;00:00, 14.96it/s]"
      }
     },
     "b9f3c80cb89741aa8f95aeccb47f9213": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "bab7bc81013e45b78f666f128c6c5bac": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "baf3fe4d4cd8439fbb948c719a13fc3e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "bcb8e2a81c734201a039bf1cacaef588": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ab79b149ed354a0cbeba0ef22f4f10df",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_2dac0409043c41ff905562ceba3beb9a",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "c17f55b5610a4227a3b8e0b99c3a7d77": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "c1beb74dd153493488dcad5ec053b59a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "c3a35ad4d6664ba1959dfdeb26c7f891": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "c47dcc777ab948fda2b43b7eddc00641": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c4e7df45b00247d8a641f07907097989": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "c515a5a0afe1461da249f991ae03783f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c71562308ff34d799ec51e08d2b294b5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c75ce5d52523446a880bd428a3ed5e5d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c907280e58ae4f40bd0b82ba126d9b4a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c94c2fbe6fd84406a92d577979e7a327": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c71562308ff34d799ec51e08d2b294b5",
       "max": 53.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_d24e22cc87b94e1db9673bc6995fd337",
       "tabbable": null,
       "tooltip": null,
       "value": 53.0
      }
     },
     "cd0b7fa7ecd24d0888379b66e64317b5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_fe1d55a3d7a94101bd1e9f56c249a3e0",
       "placeholder": "​",
       "style": "IPY_MODEL_b49fb5d5093a415a815c4b1d2c200cab",
       "tabbable": null,
       "tooltip": null,
       "value": "Tuning Threshold:  99%"
      }
     },
     "ce4e7353d75042afb12e4a8e930ae466": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "ce79efb22e2846e3aae1bc0119b42692": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "cf277c3b2a2744fca66c21fa40b10c06": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "cf6a575a162448ef835cef0a75e72c4e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_068ec96ae1d14133a796e9ced6a45a33",
       "placeholder": "​",
       "style": "IPY_MODEL_abea491d6a2d483aa1415d17bc29ee00",
       "tabbable": null,
       "tooltip": null,
       "value": " 0/2 [00:00&lt;?, ?it/s]"
      }
     },
     "d03094bea97142acbed8d68a338b08b2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_1aa54f17998c473a9f5f8adc5e721eee",
        "IPY_MODEL_e328bd7e8e5e4b98a2ae9fcf7bc20f3b",
        "IPY_MODEL_b9dfd708e0604ee3a589942ee8ee8be8"
       ],
       "layout": "IPY_MODEL_161a05d099294a65bff3133d38b1d63b",
       "tabbable": null,
       "tooltip": null
      }
     },
     "d24e22cc87b94e1db9673bc6995fd337": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "d4c80270a66f40cda999dd6361fe5961": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_2ea3f5570d8242cea1d9e599469cd999",
        "IPY_MODEL_8b47dd42181d4fdca7c3ab84f3d1eec2",
        "IPY_MODEL_03758fb9720e44fc8fc373206a8b2cc9"
       ],
       "layout": "IPY_MODEL_b6d16a4a6c7a4989a9aeb2d2ae971f07",
       "tabbable": null,
       "tooltip": null
      }
     },
     "d5d055f4e75644a0bb7968b2cea28dc3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_ed43996cf4264996a2fbcd77cfcc158b",
        "IPY_MODEL_ae30daff0e114f83bd736cfb2b9b20b0",
        "IPY_MODEL_cf6a575a162448ef835cef0a75e72c4e"
       ],
       "layout": "IPY_MODEL_2c5a279c5f3b4dc1a3467f22cc40623e",
       "tabbable": null,
       "tooltip": null
      }
     },
     "d66bc708fffa4339b31c354ef6bf8a86": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "da1a1fd5025e40beb810b58e48ba7622": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "da97c1c954e74956962020d7fc4f2d46": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_095fd13403e34979b233d4d34d17d4df",
       "placeholder": "​",
       "style": "IPY_MODEL_637dcd9bf15e4fa486750e1ad6e10a3a",
       "tabbable": null,
       "tooltip": null,
       "value": " 333454/333454 [15:22&lt;00:00, 264.49it/s]"
      }
     },
     "db95e22f5e5c42af80dd537c680cfc5e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_6426a31d80e24953aea44e28a86d9038",
       "max": 17406.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_a4f3c61b876d46d98524c19480455b19",
       "tabbable": null,
       "tooltip": null,
       "value": 17406.0
      }
     },
     "dcfb92e867274158aa9d5af72fdf70c6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "dd6eff56423349c88cae665b8508b9d0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "de15401c7697435ca5897d2553945040": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "df0d58653d7644f8b97d78b593d9d2ab": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "e0f4a0eac63d4b03b13efe88d2f731f4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e11554f292ff48cfae38126ddb5a0b82": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e0f4a0eac63d4b03b13efe88d2f731f4",
       "placeholder": "​",
       "style": "IPY_MODEL_df0d58653d7644f8b97d78b593d9d2ab",
       "tabbable": null,
       "tooltip": null,
       "value": " 2413/2416 [02:23&lt;00:00,  9.35it/s]"
      }
     },
     "e2942dc4ef0f464aad7163427a3156cb": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e328bd7e8e5e4b98a2ae9fcf7bc20f3b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_46f4da24c136462ebe83f21d53621e00",
       "max": 17406.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_5126f7aa70d145fa9c1f1d72dd4d4901",
       "tabbable": null,
       "tooltip": null,
       "value": 17406.0
      }
     },
     "e338cf499bfa48b48c29f8b9e814c753": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_98932851f7484094846675b55533fe72",
       "placeholder": "​",
       "style": "IPY_MODEL_9fefce238257428fbc818210d7886df6",
       "tabbable": null,
       "tooltip": null,
       "value": " 30/53 [00:00&lt;00:00, 271.07it/s]"
      }
     },
     "e3ece5d252af41be81b194444bc797b3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f7d893ea3d6f42f686cee3e95c588220",
       "placeholder": "​",
       "style": "IPY_MODEL_5f95d440f7084b8496dc0c0eb7fccf80",
       "tabbable": null,
       "tooltip": null,
       "value": " 3/3 [00:00&lt;00:00, 10.77it/s]"
      }
     },
     "e48b75d90e7a4175917a515b8309c42b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e53d58caf0274b429360c193b9bab1df": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e7ce78c29e1b447aafa1e5d6ad561677": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f6ea3fae6d5d42149e1c62512713f2ed",
       "max": 223520.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_7c71948abad54f2abfda7e847f0ba582",
       "tabbable": null,
       "tooltip": null,
       "value": 223520.0
      }
     },
     "e862e2c9f6e7469fbfa657a705dc8d77": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_2baf89e622a14ae7b95b45f392a495d5",
        "IPY_MODEL_ebbdac37db2a477a921f5c6faa01e1ba",
        "IPY_MODEL_da97c1c954e74956962020d7fc4f2d46"
       ],
       "layout": "IPY_MODEL_6cc54da06d024329b3dbe885d08c3941",
       "tabbable": null,
       "tooltip": null
      }
     },
     "e88139abd385452c8a58d53f680d83de": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "e8dc3526e27549c0a3e6d50d51541e2e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_315e313f82cc478797466487a6a1be18",
        "IPY_MODEL_e7ce78c29e1b447aafa1e5d6ad561677",
        "IPY_MODEL_01f934809d174fa7995ccb0bf4ebd31e"
       ],
       "layout": "IPY_MODEL_2ee4901ff0a84a7db25d510fad7f0a17",
       "tabbable": null,
       "tooltip": null
      }
     },
     "e9d370750f2a4b6aa3b2e1e64de84b2f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "ebbdac37db2a477a921f5c6faa01e1ba": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c907280e58ae4f40bd0b82ba126d9b4a",
       "max": 333454.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_7aa2e9b8c96642ddabe0b707a30a86c5",
       "tabbable": null,
       "tooltip": null,
       "value": 333454.0
      }
     },
     "ed43996cf4264996a2fbcd77cfcc158b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_1b5900e11b4d49588c857ee0ad545ac6",
       "placeholder": "​",
       "style": "IPY_MODEL_aaf4fa124ca14a57876f66987111dfc9",
       "tabbable": null,
       "tooltip": null,
       "value": "Generating Sequences for [&#x27;set05&#x27;, &#x27;set06&#x27;]:   0%"
      }
     },
     "eefb771f11b5499ca2d1e97f058c817a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f1de8a70c6a94f7c970c51af62dedb3e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f3ab41a8d5de4a63a3c63b775a036d84": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "f457702ee1ad4e7f9b5f0b2af945a0ff": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f6ea3fae6d5d42149e1c62512713f2ed": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f717a72b183240d1b733e0881526f3ca": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f7d893ea3d6f42f686cee3e95c588220": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f9293865ecb143b380269f166ea1b383": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c515a5a0afe1461da249f991ae03783f",
       "placeholder": "​",
       "style": "IPY_MODEL_f457702ee1ad4e7f9b5f0b2af945a0ff",
       "tabbable": null,
       "tooltip": null,
       "value": " 2416/2416 [02:23&lt;00:00, 12.71it/s]"
      }
     },
     "f931e923a61a46f289075decc9e50fe0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_30ad0fa3bcff42958082a81fc33a6509",
        "IPY_MODEL_c94c2fbe6fd84406a92d577979e7a327",
        "IPY_MODEL_e338cf499bfa48b48c29f8b9e814c753"
       ],
       "layout": "IPY_MODEL_4ab396da6459417eb9be7c9c4a2064fb",
       "tabbable": null,
       "tooltip": null
      }
     },
     "fa9b6d96da8a41a2878fb9076cd5cbc7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_0eca3a9df8fe4b7aac038f859e2326da",
        "IPY_MODEL_aae47bd2d6bb4d77a05f16a361568ce6",
        "IPY_MODEL_05629bc6e56f4bea88a8f473999d3b38"
       ],
       "layout": "IPY_MODEL_73942145b340432cac287bcd60df81c6",
       "tabbable": null,
       "tooltip": null
      }
     },
     "fd55531c9e824e82b3bbcc5df838fdaf": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_73c2a7d04dcc4a8ebad4f060acc2fcec",
       "placeholder": "​",
       "style": "IPY_MODEL_f717a72b183240d1b733e0881526f3ca",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "fdaf31f5d900479c847695902a59f7ed": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "fe1d55a3d7a94101bd1e9f56c249a3e0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
