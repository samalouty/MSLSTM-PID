{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "99f2f26f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T17:30:50.162097Z",
     "iopub.status.busy": "2025-05-11T17:30:50.161792Z",
     "iopub.status.idle": "2025-05-11T17:30:56.989638Z",
     "shell.execute_reply": "2025-05-11T17:30:56.988559Z"
    },
    "papermill": {
     "duration": 6.835216,
     "end_time": "2025-05-11T17:30:56.991406",
     "exception": false,
     "start_time": "2025-05-11T17:30:50.156190",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cloning into 'PIE'...\r\n",
      "remote: Enumerating objects: 178, done.\u001b[K\r\n",
      "remote: Counting objects: 100% (93/93), done.\u001b[K\r\n",
      "remote: Compressing objects: 100% (74/74), done.\u001b[K\r\n",
      "remote: Total 178 (delta 32), reused 75 (delta 17), pack-reused 85 (from 1)\u001b[K\r\n",
      "Receiving objects: 100% (178/178), 144.63 MiB | 36.75 MiB/s, done.\r\n",
      "Resolving deltas: 100% (73/73), done.\r\n",
      "Updating files: 100% (41/41), done.\r\n",
      "unzip:  cannot find or open /content/PIE/annotations/annotations.zip, /content/PIE/annotations/annotations.zip.zip or /content/PIE/annotations/annotations.zip.ZIP.\r\n",
      "unzip:  cannot find or open /content/PIE/annotations/annotations_vehicle.zip, /content/PIE/annotations/annotations_vehicle.zip.zip or /content/PIE/annotations/annotations_vehicle.zip.ZIP.\r\n"
     ]
    }
   ],
   "source": [
    "!git clone https://github.com/aras62/PIE.git\n",
    "!unzip /content/PIE/annotations/annotations.zip -d /content/PIE\n",
    "!unzip /content/PIE/annotations/annotations_vehicle.zip -d /content/PIE\n",
    "# !git clone https://github.com/hustvl/YOLOP.git\n",
    "!mkdir /kaggle/working/PIE/content"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3c762d01",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T17:30:57.003284Z",
     "iopub.status.busy": "2025-05-11T17:30:57.003021Z",
     "iopub.status.idle": "2025-05-11T17:31:02.252198Z",
     "shell.execute_reply": "2025-05-11T17:31:02.251316Z"
    },
    "papermill": {
     "duration": 5.256636,
     "end_time": "2025-05-11T17:31:02.253853",
     "exception": false,
     "start_time": "2025-05-11T17:30:56.997217",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.0/1.0 MB\u001b[0m \u001b[31m26.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h"
     ]
    }
   ],
   "source": [
    "!pip install -q ultralytics opencv-python-headless "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ef9b378b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T17:31:02.265128Z",
     "iopub.status.busy": "2025-05-11T17:31:02.264885Z",
     "iopub.status.idle": "2025-05-11T17:31:08.317125Z",
     "shell.execute_reply": "2025-05-11T17:31:08.316156Z"
    },
    "papermill": {
     "duration": 6.059662,
     "end_time": "2025-05-11T17:31:08.318907",
     "exception": false,
     "start_time": "2025-05-11T17:31:02.259245",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Creating new Ultralytics Settings v0.0.6 file ✅ \n",
      "View Ultralytics Settings with 'yolo settings' or at '/root/.config/Ultralytics/settings.json'\n",
      "Update Settings with 'yolo settings key=value', i.e. 'yolo settings runs_dir=path/to/dir'. For help see https://docs.ultralytics.com/quickstart/#ultralytics-settings.\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "import xml.etree.ElementTree as ET\n",
    "import os\n",
    "import numpy as np\n",
    "from sklearn.metrics import accuracy_score, precision_recall_fscore_support, roc_auc_score, confusion_matrix, ConfusionMatrixDisplay\n",
    "from tqdm.notebook import tqdm\n",
    "import random\n",
    "import math\n",
    "import zipfile\n",
    "import cv2\n",
    "from ultralytics import YOLO\n",
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d5ec7bb3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T17:31:08.330252Z",
     "iopub.status.busy": "2025-05-11T17:31:08.329876Z",
     "iopub.status.idle": "2025-05-11T17:31:09.845764Z",
     "shell.execute_reply": "2025-05-11T17:31:09.844714Z"
    },
    "papermill": {
     "duration": 1.52294,
     "end_time": "2025-05-11T17:31:09.847192",
     "exception": false,
     "start_time": "2025-05-11T17:31:08.324252",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unzipped successfully.\n"
     ]
    }
   ],
   "source": [
    "zip_path = \"/kaggle/working/PIE/annotations/annotations.zip\"\n",
    "extract_to = \"/kaggle/working/PIE/annotations/\"\n",
    "\n",
    "if os.path.exists(extract_to + 'annotations'):\n",
    "    print(\"Exists already. Not unzipping.\")\n",
    "else:\n",
    "    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n",
    "        zip_ref.extractall(extract_to)\n",
    "    print(\"Unzipped successfully.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "58a7d6a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T17:31:09.858580Z",
     "iopub.status.busy": "2025-05-11T17:31:09.858287Z",
     "iopub.status.idle": "2025-05-11T17:31:10.603101Z",
     "shell.execute_reply": "2025-05-11T17:31:10.602117Z"
    },
    "papermill": {
     "duration": 0.751989,
     "end_time": "2025-05-11T17:31:10.604647",
     "exception": false,
     "start_time": "2025-05-11T17:31:09.852658",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unzipped successfully.\n"
     ]
    }
   ],
   "source": [
    "zip_path = \"/kaggle/working/PIE/annotations/annotations_vehicle.zip\"\n",
    "extract_to = \"/kaggle/working/PIE/annotations/\"\n",
    "\n",
    "if os.path.exists(extract_to + 'annotations_vehicle'):\n",
    "    print(\"Exists already. Not unzipping.\")\n",
    "else:\n",
    "    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n",
    "        zip_ref.extractall(extract_to)\n",
    "    print(\"Unzipped successfully.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c1e8e4d9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T17:31:10.615841Z",
     "iopub.status.busy": "2025-05-11T17:31:10.615607Z",
     "iopub.status.idle": "2025-05-11T17:31:10.627648Z",
     "shell.execute_reply": "2025-05-11T17:31:10.626941Z"
    },
    "papermill": {
     "duration": 0.018786,
     "end_time": "2025-05-11T17:31:10.628793",
     "exception": false,
     "start_time": "2025-05-11T17:31:10.610007",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unzipped successfully.\n"
     ]
    }
   ],
   "source": [
    "zip_path = \"/kaggle/working/PIE/annotations/annotations_attributes.zip\"\n",
    "extract_to = \"/kaggle/working/PIE/annotations/\"\n",
    "\n",
    "if os.path.exists(extract_to + \"annotations_attributes\"):\n",
    "    print(\"Exists already. Not unzipping.\")\n",
    "else:\n",
    "    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n",
    "        zip_ref.extractall(extract_to)\n",
    "    print(\"Unzipped successfully.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d030c8ba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T17:31:10.640223Z",
     "iopub.status.busy": "2025-05-11T17:31:10.639995Z",
     "iopub.status.idle": "2025-05-11T17:56:44.511732Z",
     "shell.execute_reply": "2025-05-11T17:56:44.510813Z"
    },
    "papermill": {
     "duration": 1533.884063,
     "end_time": "2025-05-11T17:56:44.517959",
     "exception": false,
     "start_time": "2025-05-11T17:31:10.633896",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- CELL 1: DATA PREPARATION ---\n",
      "Loading PIE database cache …\n",
      "✓ PIE DB loaded.\n",
      "\n",
      "Computing scalers …\n",
      "Scalers: {'ego_speed_mean': 12.444003258047086, 'ego_speed_std': 17.11090921195693, 'accX_mean': -0.024536243450501406, 'accX_std': 0.0714076930470877, 'accY_mean': -0.7650480863319338, 'accY_std': 0.677567193411197, 'gyroZ_mean': -0.06960703702418544, 'gyroZ_std': 4.034628995538882}\n",
      "\n",
      "Extracting training sequences (all streams) …\n",
      "Loading pose PKLs …\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "001bf9360abd4e58bac57a9687e8dd2e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b1c9434bb4f84edcabd988d8e1491d4c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f0028a781d4f443bac742041b0cb5715",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a1ffacc7d6904a3dab996c3dc5adf73a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enumerating sequences …\n",
      "Total sequences: 604532\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "863294a8e4d34e41ab4bb18853cab04f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "seq:   0%|          | 0/604532 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Raw training samples: 604532\n",
      "Balanced: 1s=104932 | 0s=104932\n",
      "\n",
      "Saving balanced data …\n",
      "✓ /kaggle/working/balanced_train_data.pkl\n",
      "Saving scalers …\n",
      "✓ /kaggle/working/scalers.pkl\n",
      "\n",
      "--- CELL 1: DATA PREPARATION COMPLETE ---\n"
     ]
    }
   ],
   "source": [
    "# -----------------------------------------------------------------------------\n",
    "# CELL 1: DATA PREPARATION & BALANCING  (run once before training)\n",
    "# -----------------------------------------------------------------------------\n",
    "#  This cell:\n",
    "#    1. Loads (or regenerates) the PIE database\n",
    "#    2. Computes per-signal standardisation scalers\n",
    "#    3. Extracts ALL training sequences for every stream\n",
    "#    4. Balances the dataset 50 / 50 on the crossing label\n",
    "#    5. Writes two pickles:\n",
    "#         - /kaggle/working/balanced_train_data.pkl\n",
    "#         - /kaggle/working/scalers.pkl\n",
    "# -----------------------------------------------------------------------------\n",
    "\n",
    "import os\n",
    "import sys\n",
    "import time\n",
    "import pickle\n",
    "import gc\n",
    "from pathlib import Path\n",
    "\n",
    "import cv2                               # used internally by PIE utilities\n",
    "import numpy as np\n",
    "import torch\n",
    "from torch.utils.data import Dataset\n",
    "from tqdm.notebook import tqdm\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                                PIE utilities                                 #\n",
    "# -----------------------------------------------------------------------------#\n",
    "pie_utilities_path = \"/kaggle/working/PIE/utilities\"\n",
    "if pie_utilities_path not in sys.path:\n",
    "    sys.path.insert(0, pie_utilities_path)\n",
    "\n",
    "try:\n",
    "    from pie_data import PIE\n",
    "except ImportError as e:\n",
    "    print(\n",
    "        f\"[WARN] Could not import PIE from {pie_utilities_path}. \"\n",
    "        f\"If the DB cache already exists this is fine.\\n→ {e}\"\n",
    "    )\n",
    "    PIE = None\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                              configuration                                   #\n",
    "# -----------------------------------------------------------------------------#\n",
    "PIE_ROOT_PATH           = \"/kaggle/working/PIE\"\n",
    "POSE_DATA_DIR           = \"/kaggle/input/pose-data/extracted_poses2\"\n",
    "PIE_DATABASE_CACHE_PATH = \"/kaggle/input/pie-database/pie_database.pkl\"\n",
    "\n",
    "TRAIN_SETS_STR = [\"set01\", \"set02\", \"set04\", \"set03\"]\n",
    "\n",
    "BALANCED_DATA_PKL_PATH  = \"/kaggle/working/balanced_train_data.pkl\"\n",
    "SCALERS_PKL_PATH        = \"/kaggle/working/scalers.pkl\"\n",
    "\n",
    "# Streams used throughout the project ----------------------------------------\n",
    "ALL_POSSIBLE_STREAMS = [\n",
    "    \"bbox\",\n",
    "    \"pose\",\n",
    "    \"ego_speed\",\n",
    "    \"ego_acc\",\n",
    "    \"ego_gyro\",\n",
    "    \"ped_action\",\n",
    "    \"ped_look\",\n",
    "    \"ped_occlusion\",\n",
    "    \"traffic_light\",\n",
    "    \"static_context\",\n",
    "]\n",
    "\n",
    "# Feature sizes & categorical constants --------------------------------------\n",
    "SEQ_LEN, PRED_LEN = 30, 1\n",
    "\n",
    "INPUT_SIZE_BBOX       = 4\n",
    "INPUT_SIZE_POSE       = 34\n",
    "INPUT_SIZE_EGO_SPEED  = 1\n",
    "INPUT_SIZE_EGO_ACC    = 2\n",
    "INPUT_SIZE_EGO_GYRO   = 1\n",
    "INPUT_SIZE_PED_ACTION = 1\n",
    "INPUT_SIZE_PED_LOOK   = 1\n",
    "INPUT_SIZE_PED_OCC    = 1\n",
    "INPUT_SIZE_TL_STATE   = 4\n",
    "\n",
    "NUM_SIGNALIZED_CATS   = 4\n",
    "NUM_INTERSECTION_CATS = 5\n",
    "NUM_AGE_CATS          = 4\n",
    "NUM_GENDER_CATS       = 3\n",
    "NUM_TRAFFIC_DIR_CATS  = 2\n",
    "\n",
    "LANE_CATEGORIES = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 4, 7: 4, 8: 4}\n",
    "NUM_LANE_CATS   = len(set(LANE_CATEGORIES.values()))\n",
    "\n",
    "INPUT_SIZE_STATIC = (\n",
    "    NUM_SIGNALIZED_CATS\n",
    "    + NUM_INTERSECTION_CATS\n",
    "    + NUM_AGE_CATS\n",
    "    + NUM_GENDER_CATS\n",
    "    + NUM_TRAFFIC_DIR_CATS\n",
    "    + NUM_LANE_CATS\n",
    ")  # → 23\n",
    "\n",
    "TL_STATE_MAP = {\"__undefined__\": 0, \"red\": 1, \"yellow\": 2, \"green\": 3}\n",
    "NUM_TL_STATES = len(TL_STATE_MAP)\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                               helper utils                                   #\n",
    "# -----------------------------------------------------------------------------#\n",
    "\n",
    "\n",
    "def to_one_hot(index: int, num_classes: int) -> np.ndarray:\n",
    "    vec = np.zeros(num_classes, dtype=np.float32)\n",
    "    vec[int(np.clip(index, 0, num_classes - 1))] = 1.0\n",
    "    return vec\n",
    "\n",
    "\n",
    "def balance_samples_count(seq_data: dict, label_key: str, seed: int = 42) -> dict:\n",
    "    \"\"\"Undersample majority class so positive and negative labels are equal.\"\"\"\n",
    "    labels = [lbl[0] for lbl in seq_data[label_key]]\n",
    "    n_pos  = int(np.sum(labels))\n",
    "    n_neg  = len(labels) - n_pos\n",
    "\n",
    "    if n_pos == n_neg:\n",
    "        print(\"Dataset already balanced.\")\n",
    "        return seq_data.copy()\n",
    "\n",
    "    majority_label    = 0 if n_neg > n_pos else 1\n",
    "    minority_count    = min(n_pos, n_neg)\n",
    "    majority_indices  = np.where(np.array(labels) == majority_label)[0]\n",
    "    minority_indices  = np.where(np.array(labels) != majority_label)[0]\n",
    "\n",
    "    rng = np.random.default_rng(seed)\n",
    "    keep_majority = rng.choice(majority_indices, size=minority_count, replace=False)\n",
    "    final_indices = np.concatenate([minority_indices, keep_majority])\n",
    "    rng.shuffle(final_indices)\n",
    "\n",
    "    balanced = {}\n",
    "    for k, v in seq_data.items():\n",
    "        balanced[k] = [v[i] for i in final_indices]\n",
    "\n",
    "    print(f\"Balanced: 1s={minority_count} | 0s={minority_count}\")\n",
    "    return balanced\n",
    "\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                                PIEDataset                                    #\n",
    "# -----------------------------------------------------------------------------#\n",
    "class PIEDataset(Dataset):\n",
    "    \"\"\"\n",
    "    Lightweight dataset that can generate any subset of the PIE feature streams.\n",
    "    \"\"\"\n",
    "\n",
    "    def __init__(\n",
    "        self,\n",
    "        pie_db: dict,\n",
    "        set_names: list[str],\n",
    "        pose_dir: str,\n",
    "        seq_len: int,\n",
    "        pred_len: int,\n",
    "        scalers: dict,\n",
    "        streams_to_generate: list[str],\n",
    "    ):\n",
    "        self.pie_db            = pie_db\n",
    "        self.set_names         = set_names\n",
    "        self.pose_dir          = pose_dir\n",
    "        self.seq_len           = seq_len\n",
    "        self.pred_len          = pred_len\n",
    "        self.scalers           = scalers\n",
    "        self.streams           = streams_to_generate\n",
    "        self._input_sizes      = self._build_input_size_map()\n",
    "        self.all_pose_data     = {}\n",
    "        self.sequences         = []\n",
    "\n",
    "        if \"pose\" in self.streams:\n",
    "            self._load_pose_pkls()\n",
    "        self._enumerate_sequences()\n",
    "\n",
    "    # ------------------------ internal helpers -------------------------------\n",
    "    def _build_input_size_map(self) -> dict:\n",
    "        special = {\n",
    "            \"TRAFFIC_LIGHT\": \"TL_STATE\",\n",
    "            \"STATIC_CONTEXT\": \"STATIC\",\n",
    "            \"EGO_SPEED\": \"EGO_SPEED\",\n",
    "            \"EGO_ACC\": \"EGO_ACC\",\n",
    "            \"EGO_GYRO\": \"EGO_GYRO\",\n",
    "            \"PED_ACTION\": \"PED_ACTION\",\n",
    "            \"PED_LOOK\": \"PED_LOOK\",\n",
    "            \"PED_OCCLUSION\": \"PED_OCC\",\n",
    "        }\n",
    "        sizes = {}\n",
    "        for s in ALL_POSSIBLE_STREAMS:\n",
    "            const = f\"INPUT_SIZE_{special.get(s.upper(), s.upper())}\"\n",
    "            if s == \"bbox\":\n",
    "                const = \"INPUT_SIZE_BBOX\"\n",
    "            elif s == \"pose\":\n",
    "                const = \"INPUT_SIZE_POSE\"\n",
    "            sizes[s] = globals().get(const, 1)\n",
    "        return sizes\n",
    "\n",
    "    def _load_pose_pkls(self):\n",
    "        print(\"Loading pose PKLs …\")\n",
    "        for set_id in self.set_names:\n",
    "            set_dir = Path(self.pose_dir) / set_id\n",
    "            if not set_dir.is_dir():\n",
    "                continue\n",
    "            self.all_pose_data[set_id] = {}\n",
    "            for pkl_path in tqdm(set_dir.glob(f\"{set_id}_*_poses.pkl\"), leave=False):\n",
    "                try:\n",
    "                    with open(pkl_path, \"rb\") as fp:\n",
    "                        loaded = pickle.load(fp)\n",
    "                except Exception as e:\n",
    "                    print(f\"[pose load] {pkl_path}: {e}\")\n",
    "                    continue\n",
    "\n",
    "                if len(loaded) != 1:\n",
    "                    continue\n",
    "                (key, data), *_ = loaded.items()\n",
    "                vid = \"_\".join(key.split(\"_\")[1:])\n",
    "                if vid in self.pie_db.get(set_id, {}):\n",
    "                    self.all_pose_data[set_id][vid] = data\n",
    "\n",
    "    def _enumerate_sequences(self):\n",
    "        print(\"Enumerating sequences …\")\n",
    "        for set_id in self.set_names:\n",
    "            for vid, vdb in self.pie_db.get(set_id, {}).items():\n",
    "                for pid, pdb in vdb.get(\"ped_annotations\", {}).items():\n",
    "                    frames = pdb.get(\"frames\", [])\n",
    "                    if len(frames) < self.seq_len + self.pred_len:\n",
    "                        continue\n",
    "                    frames = sorted(frames)\n",
    "                    for i in range(len(frames) - self.seq_len - self.pred_len + 1):\n",
    "                        start = frames[i]\n",
    "                        obs_end = frames[i + self.seq_len - 1]\n",
    "                        if obs_end - start != self.seq_len - 1:\n",
    "                            continue\n",
    "                        target = frames[i + self.seq_len + self.pred_len - 1]\n",
    "                        if target - obs_end != self.pred_len:\n",
    "                            continue\n",
    "                        self.sequences.append((set_id, vid, pid, start))\n",
    "        print(f\"Total sequences: {len(self.sequences)}\")\n",
    "\n",
    "    # ------------------ Dataset API ------------------------------------------\n",
    "    def __len__(self):\n",
    "        return len(self.sequences)\n",
    "\n",
    "    def __getitem__(self, idx: int):\n",
    "        set_id, vid, pid, start = self.sequences[idx]\n",
    "        vdb  = self.pie_db[set_id][vid]\n",
    "        pdb  = vdb[\"ped_annotations\"][pid]\n",
    "        ego  = vdb.get(\"vehicle_annotations\", {})\n",
    "        tldb = vdb.get(\"traffic_annotations\", {})\n",
    "\n",
    "        frame_nums = list(range(start, start + self.seq_len))\n",
    "        target_f   = start + self.seq_len + self.pred_len - 1\n",
    "\n",
    "        # label ---------------------------------------------------------------\n",
    "        label = 0\n",
    "        if (\n",
    "            \"frames\" in pdb\n",
    "            and \"behavior\" in pdb\n",
    "            and \"cross\" in pdb[\"behavior\"]\n",
    "            and target_f in pdb[\"frames\"]\n",
    "        ):\n",
    "            try:\n",
    "                j = pdb[\"frames\"].index(target_f)\n",
    "                label = pdb[\"behavior\"][\"cross\"][j]\n",
    "                if label == -1:\n",
    "                    label = 0\n",
    "            except (ValueError, IndexError):\n",
    "                pass\n",
    "\n",
    "        # static context ------------------------------------------------------\n",
    "        static_vec = np.zeros(INPUT_SIZE_STATIC, np.float32)\n",
    "        if \"static_context\" in self.streams:\n",
    "            attr  = pdb.get(\"attributes\", {})\n",
    "            sig   = attr.get(\"signalized\", 0)\n",
    "            intr  = attr.get(\"intersection\", 0)\n",
    "            age   = attr.get(\"age\", 2)\n",
    "            gen   = attr.get(\"gender\", 0)\n",
    "            tdir  = int(attr.get(\"traffic_direction\", 0))\n",
    "            ln    = attr.get(\"num_lanes\", 2)\n",
    "            lncat = LANE_CATEGORIES.get(ln, LANE_CATEGORIES[max(LANE_CATEGORIES)])\n",
    "            static_vec = np.concatenate(\n",
    "                [\n",
    "                    to_one_hot(sig,  NUM_SIGNALIZED_CATS),\n",
    "                    to_one_hot(intr, NUM_INTERSECTION_CATS),\n",
    "                    to_one_hot(age,  NUM_AGE_CATS),\n",
    "                    to_one_hot(gen,  NUM_GENDER_CATS),\n",
    "                    to_one_hot(tdir, NUM_TRAFFIC_DIR_CATS),\n",
    "                    to_one_hot(lncat, NUM_LANE_CATS),\n",
    "                ]\n",
    "            ).astype(np.float32)\n",
    "\n",
    "        # per-frame feature assembly -----------------------------------------\n",
    "        feats = {s: [] for s in self.streams}\n",
    "\n",
    "        for fn in frame_nums:\n",
    "            fidx = -1\n",
    "            if \"frames\" in pdb:\n",
    "                try:\n",
    "                    fidx = pdb[\"frames\"].index(fn)\n",
    "                except ValueError:\n",
    "                    pass\n",
    "\n",
    "            ego_f = ego.get(fn, {})\n",
    "\n",
    "            # bbox ----------------------------------------------------------\n",
    "            if \"bbox\" in self.streams:\n",
    "                bb = np.zeros(INPUT_SIZE_BBOX, np.float32)\n",
    "                if (\n",
    "                    fidx != -1\n",
    "                    and \"bbox\" in pdb\n",
    "                    and len(pdb[\"bbox\"]) > fidx\n",
    "                ):\n",
    "                    try:\n",
    "                        x1, y1, x2, y2 = pdb[\"bbox\"][fidx]\n",
    "                        w_img = vdb.get(\"width\", 1920)\n",
    "                        h_img = vdb.get(\"height\", 1080)\n",
    "                        if w_img > 0 and h_img > 0:\n",
    "                            cx = ((x1 + x2) / 2) / w_img\n",
    "                            cy = ((y1 + y2) / 2) / h_img\n",
    "                            w  = (x2 - x1) / w_img\n",
    "                            h  = (y2 - y1) / h_img\n",
    "                            if 0 < w and 0 < h and 0 <= cx <= 1 and 0 <= cy <= 1:\n",
    "                                bb = np.array([cx, cy, w, h], np.float32)\n",
    "                    except Exception:\n",
    "                        pass\n",
    "                feats[\"bbox\"].append(bb)\n",
    "\n",
    "            # pose ----------------------------------------------------------\n",
    "            if \"pose\" in self.streams:\n",
    "                pvec = np.zeros(INPUT_SIZE_POSE, np.float32)\n",
    "                pose_set = self.all_pose_data.get(set_id, {}).get(vid, {})\n",
    "                p_loaded = pose_set.get(fn, {}).get(pid)\n",
    "                if (\n",
    "                    isinstance(p_loaded, np.ndarray)\n",
    "                    and p_loaded.shape == (INPUT_SIZE_POSE,)\n",
    "                ):\n",
    "                    pvec = p_loaded\n",
    "                feats[\"pose\"].append(pvec)\n",
    "\n",
    "            # ego signals ---------------------------------------------------\n",
    "            if \"ego_speed\" in self.streams:\n",
    "                s = ego_f.get(\"OBD_speed\", 0.0) or ego_f.get(\"GPS_speed\", 0.0)\n",
    "                s = (s - self.scalers.get(\"ego_speed_mean\", 0.0)) / self.scalers.get(\n",
    "                    \"ego_speed_std\", 1.0\n",
    "                )\n",
    "                feats[\"ego_speed\"].append([s])\n",
    "\n",
    "            if \"ego_acc\" in self.streams:\n",
    "                ax = ego_f.get(\"accX\", 0.0)\n",
    "                ay = ego_f.get(\"accY\", 0.0)\n",
    "                ax = (ax - self.scalers.get(\"accX_mean\", 0.0)) / self.scalers.get(\n",
    "                    \"accX_std\", 1.0\n",
    "                )\n",
    "                ay = (ay - self.scalers.get(\"accY_mean\", 0.0)) / self.scalers.get(\n",
    "                    \"accY_std\", 1.0\n",
    "                )\n",
    "                feats[\"ego_acc\"].append([ax, ay])\n",
    "\n",
    "            if \"ego_gyro\" in self.streams:\n",
    "                gz = ego_f.get(\"gyroZ\", 0.0)\n",
    "                gz = (gz - self.scalers.get(\"gyroZ_mean\", 0.0)) / self.scalers.get(\n",
    "                    \"gyroZ_std\", 1.0\n",
    "                )\n",
    "                feats[\"ego_gyro\"].append([gz])\n",
    "\n",
    "            # pedestrian behaviour -----------------------------------------\n",
    "            if \"ped_action\" in self.streams:\n",
    "                action = (\n",
    "                    pdb[\"behavior\"][\"action\"][fidx]\n",
    "                    if fidx != -1\n",
    "                    and \"behavior\" in pdb\n",
    "                    and \"action\" in pdb[\"behavior\"]\n",
    "                    and len(pdb[\"behavior\"][\"action\"]) > fidx\n",
    "                    else 0\n",
    "                )\n",
    "                feats[\"ped_action\"].append([float(action)])\n",
    "\n",
    "            if \"ped_look\" in self.streams:\n",
    "                look = (\n",
    "                    pdb[\"behavior\"][\"look\"][fidx]\n",
    "                    if fidx != -1\n",
    "                    and \"behavior\" in pdb\n",
    "                    and \"look\" in pdb[\"behavior\"]\n",
    "                    and len(pdb[\"behavior\"][\"look\"]) > fidx\n",
    "                    else 0\n",
    "                )\n",
    "                feats[\"ped_look\"].append([float(look)])\n",
    "\n",
    "            if \"ped_occlusion\" in self.streams:\n",
    "                occ = (\n",
    "                    float(pdb[\"occlusion\"][fidx]) / 2.0\n",
    "                    if fidx != -1\n",
    "                    and \"occlusion\" in pdb\n",
    "                    and len(pdb[\"occlusion\"]) > fidx\n",
    "                    else 0.0\n",
    "                )\n",
    "                feats[\"ped_occlusion\"].append([occ])\n",
    "\n",
    "            # traffic light -------------------------------------------------\n",
    "            if \"traffic_light\" in self.streams:\n",
    "                tl_state = 0\n",
    "                for obj in tldb.values():\n",
    "                    if obj.get(\"obj_class\") != \"traffic_light\":\n",
    "                        continue\n",
    "                    if \"frames\" not in obj or \"state\" not in obj:\n",
    "                        continue\n",
    "                    try:\n",
    "                        j = obj[\"frames\"].index(fn)\n",
    "                        if obj[\"state\"][j] != 0:\n",
    "                            tl_state = obj[\"state\"][j]\n",
    "                            break\n",
    "                    except (ValueError, IndexError):\n",
    "                        continue\n",
    "                feats[\"traffic_light\"].append(to_one_hot(tl_state, NUM_TL_STATES))\n",
    "\n",
    "            # static context -----------------------------------------------\n",
    "            if \"static_context\" in self.streams:\n",
    "                feats[\"static_context\"].append(static_vec)\n",
    "\n",
    "        # numpy → torch ------------------------------------------------------\n",
    "        out = {\n",
    "            s: torch.tensor(np.asarray(feats[s], np.float32), dtype=torch.float32)\n",
    "            for s in self.streams\n",
    "        }\n",
    "        return out, torch.tensor(label, dtype=torch.long)\n",
    "\n",
    "\n",
    "# =============================================================================\n",
    "#                       MAIN: build balanced training set\n",
    "# =============================================================================\n",
    "if __name__ == \"__main__\" and '__file__' not in globals(): # Avoid running this if imported\n",
    "    print(\"\\n--- CELL 1: DATA PREPARATION ---\")\n",
    "\n",
    "    # 1) load / regenerate PIE DB -------------------------------------------\n",
    "    cache = Path(PIE_DATABASE_CACHE_PATH)\n",
    "    if cache.is_file():\n",
    "        print(\"Loading PIE database cache …\")\n",
    "        with cache.open(\"rb\") as fp:\n",
    "            pie_db = pickle.load(fp)\n",
    "        print(\"✓ PIE DB loaded.\")\n",
    "    else:\n",
    "        if PIE is None:\n",
    "            raise RuntimeError(\"PIE class unavailable: cannot rebuild database.\")\n",
    "        print(\"Cache not found – regenerating PIE DB …\")\n",
    "        pie_db = PIE(data_path=PIE_ROOT_PATH, regen_database=True).generate_database()\n",
    "        if not pie_db:\n",
    "            raise RuntimeError(\"PIE DB generation failed.\")\n",
    "        print(\"✓ PIE DB generated.\")\n",
    "\n",
    "    # 2) compute scalers -----------------------------------------------------\n",
    "    print(\"\\nComputing scalers …\")\n",
    "    spd, accx, accy, gyz = [], [], [], []\n",
    "    for sid in TRAIN_SETS_STR:\n",
    "        for vid, vdb in pie_db.get(sid, {}).items():\n",
    "            for frame, e in vdb.get(\"vehicle_annotations\", {}).items():\n",
    "                s  = e.get(\"OBD_speed\", 0.0) or e.get(\"GPS_speed\", 0.0)\n",
    "                spd.append(s)\n",
    "                accx.append(e.get(\"accX\", 0.0))\n",
    "                accy.append(e.get(\"accY\", 0.0))\n",
    "                gyz.append(e.get(\"gyroZ\", 0.0))\n",
    "\n",
    "    scalers = {}\n",
    "    if spd:\n",
    "        scalers[\"ego_speed_mean\"] = float(np.mean(spd))\n",
    "        scalers[\"ego_speed_std\"]  = float(max(np.std(spd), 1e-6))\n",
    "    if accx:\n",
    "        scalers[\"accX_mean\"] = float(np.mean(accx))\n",
    "        scalers[\"accX_std\"]  = float(max(np.std(accx), 1e-6))\n",
    "        scalers[\"accY_mean\"] = float(np.mean(accy))\n",
    "        scalers[\"accY_std\"]  = float(max(np.std(accy), 1e-6))\n",
    "    if gyz:\n",
    "        scalers[\"gyroZ_mean\"] = float(np.mean(gyz))\n",
    "        scalers[\"gyroZ_std\"]  = float(max(np.std(gyz), 1e-6))\n",
    "\n",
    "    print(\"Scalers:\", scalers)\n",
    "\n",
    "    # 3) extract full training dataset --------------------------------------\n",
    "    print(\"\\nExtracting training sequences (all streams) …\")\n",
    "    full_ds = PIEDataset(\n",
    "        pie_db,\n",
    "        TRAIN_SETS_STR,\n",
    "        POSE_DATA_DIR,\n",
    "        SEQ_LEN,\n",
    "        PRED_LEN,\n",
    "        scalers,\n",
    "        ALL_POSSIBLE_STREAMS,\n",
    "    )\n",
    "\n",
    "    train_dict = {s: [] for s in ALL_POSSIBLE_STREAMS}\n",
    "    train_dict[\"label\"] = []\n",
    "\n",
    "    for i in tqdm(range(len(full_ds)), desc=\"seq\"):\n",
    "        feat, lbl = full_ds[i]\n",
    "        for s in ALL_POSSIBLE_STREAMS:\n",
    "            train_dict[s].append(feat[s].numpy())\n",
    "        train_dict[\"label\"].append([lbl.item()])\n",
    "\n",
    "    print(f\"Raw training samples: {len(train_dict['label'])}\")\n",
    "\n",
    "    # 4) balance -------------------------------------------------------------\n",
    "    balanced = balance_samples_count(train_dict, \"label\")\n",
    "    del train_dict, full_ds\n",
    "    gc.collect()\n",
    "\n",
    "    # 5) write pickles -------------------------------------------------------\n",
    "    print(\"\\nSaving balanced data …\")\n",
    "    with open(BALANCED_DATA_PKL_PATH, \"wb\") as fp:\n",
    "        pickle.dump(balanced, fp, pickle.HIGHEST_PROTOCOL)\n",
    "    print(f\"✓ {BALANCED_DATA_PKL_PATH}\")\n",
    "\n",
    "    print(\"Saving scalers …\")\n",
    "    with open(SCALERS_PKL_PATH, \"wb\") as fp:\n",
    "        pickle.dump(scalers, fp, pickle.HIGHEST_PROTOCOL)\n",
    "    print(f\"✓ {SCALERS_PKL_PATH}\")\n",
    "\n",
    "    del pie_db\n",
    "    gc.collect()\n",
    "\n",
    "    print(\"\\n--- CELL 1: DATA PREPARATION COMPLETE ---\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "03ddbd1a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T17:56:44.533771Z",
     "iopub.status.busy": "2025-05-11T17:56:44.533476Z",
     "iopub.status.idle": "2025-05-11T18:40:24.964250Z",
     "shell.execute_reply": "2025-05-11T18:40:24.963461Z"
    },
    "papermill": {
     "duration": 2620.441469,
     "end_time": "2025-05-11T18:40:24.965543",
     "exception": false,
     "start_time": "2025-05-11T17:56:44.524074",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Running Weighted Average Fusion With Active Streams: ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'static_context'] ---\n",
      "Using device: cuda\n",
      "--- CELL 2: Running Model Training/Evaluation with Weighted Fusion ---\n",
      "Active Streams: ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'static_context']\n",
      "\n",
      "Loading balanced training data …\n",
      "   ✓ pre-processed data loaded.\n",
      "\n",
      "Loading PIE database cache for validation …\n",
      "   ✓ PIE database loaded.\n",
      "\n",
      "Creating Datasets and DataLoaders …\n",
      "PIEDataset_Cell2 initialized with 77288 sequences for sets ['set05', 'set06'].\n",
      "   ✓ DataLoaders ready.\n",
      "\n",
      "Initialising model …\n",
      "Initializing Weighted-Avg model with streams: ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'static_context']\n",
      "  – Adding stream 'bbox' (input 4)\n",
      "  – Adding stream 'ped_action' (input 1)\n",
      "  – Adding stream 'ped_look' (input 1)\n",
      "  – Adding stream 'ego_speed' (input 1)\n",
      "  – Adding stream 'ego_acc' (input 2)\n",
      "  – Adding stream 'static_context' (input 23)\n",
      "\n",
      "--- Model architecture ---\n",
      "MultiStreamWeightedAvgLSTM(\n",
      "  (lstms): ModuleDict(\n",
      "    (bbox): LSTM(4, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "    (ped_action): LSTM(1, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "    (ped_look): LSTM(1, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "    (ego_speed): LSTM(1, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "    (ego_acc): LSTM(2, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "    (static_context): LSTM(23, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "  )\n",
      "  (attentions): ModuleDict(\n",
      "    (bbox): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "    (ped_action): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "    (ped_look): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "    (ego_speed): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "    (ego_acc): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "    (static_context): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "  )\n",
      "  (dropout): Dropout(p=0.3, inplace=False)\n",
      "  (fc1): Linear(in_features=512, out_features=256, bias=True)\n",
      "  (relu): ReLU()\n",
      "  (fc2): Linear(in_features=256, out_features=2, bias=True)\n",
      ")\n",
      "Trainable parameters: 13,224,206\n",
      "------------------------------\n",
      "\n",
      "Calculating class weights …\n",
      "Loss weights → 0: 1.00, 1: 1.00\n",
      "\n",
      "--- Starting training ---\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f21d28aa1eb542cca34de71665b2f623",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/6559 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "5a7e679d9a294ba986ea729f48d6c131",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 01/5 – 505.2s\n",
      "  train loss 0.2554 | acc 0.8862\n",
      "  val   loss 0.1726 | acc 0.9193 (at 0.5 thresh)\n",
      "           prec 0.6691 | rec 0.9334 | f1 0.7795 | auc 0.9795 (at 0.5 thresh / auc indep.)\n",
      "  ✓ new best model saved → best_model_weighted_bbox_ego_acc_ego_speed_ped_action_ped_look_static_context_ep1.pth (F1@0.5 0.7795)\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "cfca76106c944333b6fec35dfbc3a45f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/6559 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0b409318cae54f6fba7f7f3a9c8ff495",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 02/5 – 490.4s\n",
      "  train loss 0.2052 | acc 0.9120\n",
      "  val   loss 0.1997 | acc 0.9064 (at 0.5 thresh)\n",
      "           prec 0.6398 | rec 0.8868 | f1 0.7433 | auc 0.9693 (at 0.5 thresh / auc indep.)\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c3e989a3e55749cba2b89383d5e2aeee",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/6559 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1484cbf7847e49a7b5bd457d0f378931",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 03/5 – 489.6s\n",
      "  train loss 0.1772 | acc 0.9262\n",
      "  val   loss 0.2263 | acc 0.9037 (at 0.5 thresh)\n",
      "           prec 0.6221 | rec 0.9429 | f1 0.7496 | auc 0.9724 (at 0.5 thresh / auc indep.)\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b74a82aaa6534f02ad3180ccd310db87",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/6559 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1b629d9a5e53455b854fdd22f2ca2edb",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 04/5 – 491.9s\n",
      "  train loss 0.1588 | acc 0.9361\n",
      "  val   loss 0.2086 | acc 0.9113 (at 0.5 thresh)\n",
      "           prec 0.6562 | rec 0.8812 | f1 0.7522 | auc 0.9694 (at 0.5 thresh / auc indep.)\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "12efcffef8cc48f79cb72e7ab691be16",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/6559 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f3e45495f0de4417aaf7617b8aa2d9ee",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 05/5 – 494.0s\n",
      "  train loss 0.1454 | acc 0.9433\n",
      "  val   loss 0.2343 | acc 0.8895 (at 0.5 thresh)\n",
      "           prec 0.5989 | rec 0.8374 | f1 0.6984 | auc 0.9603 (at 0.5 thresh / auc indep.)\n",
      "\n",
      "--- Training finished ---\n",
      "\n",
      "Plotting training curves …\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABKUAAAHqCAYAAADVi/1VAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOzdd1yVdf/H8dc5h70EZbo3OFBL08xZbhtqmmbDUWnLltVd3pWjZTZtaj/LpqVWtm7NhVquzJF77wUoLhAEDpzr98elKIKKClyM9/PxuB5yrnOd7/l8QeXizXfYDMMwEBERERERERERKUR2qwsQEREREREREZHSR6GUiIiIiIiIiIgUOoVSIiIiIiIiIiJS6BRKiYiIiIiIiIhIoVMoJSIiIiIiIiIihU6hlIiIiIiIiIiIFDqFUiIiIiIiIiIiUugUSomIiIiIiIiISKFTKCUiIiIiIiIiIoVOoZSIiIiIiIgUCJfLRf369XnttdesLqXIqFq1KrfccovVZWTJaz0zZ87Ez8+Pw4cPF0JVUloolBKRQvfll19is9lYsWKF1aWIiIiIBT755BNsNhvNmjWzupRiaenSpbRp04aAgABCQ0Pp0qULixcvzvPrd+/ejc1my/W4/vrrs67bsmULTz31FDfccANeXl7YbDZ27959WbV+//337Nu3jyFDhlzW6wA2btzIyJEjL+s9jx8/zuDBgwkJCcHX15cbb7yRVatW5em1AwYMyPVzEhUVdUWvO/8YMGBAnvtRFHXu3JmaNWsyevRoq0uREsTN6gJERERERKR0mTRpElWrVuWff/5h+/bt1KxZ0+qSio29e/fSqVMnypUrx6hRo3C5XMyZM4eYmBhatGhxWW317duXrl27ZjsXEhKS9fHSpUv54IMPqFu3LnXq1GH16tWXXe9bb73FnXfeSZkyZS77tRs3bmTUqFG0bduWqlWrXvJ6l8vFzTffzJo1a3j22WcJDg7mk08+oW3btqxcuZJatWpdsg1PT08+++yzbOcuVfuDDz5I+/btsx7v2rWL4cOHM3jwYFq1apV1vkaNGpd8/6LuwQcf5JlnnmHUqFH4+/tbXY6UAAqlREQs4nK5SE9Px8vLy+pSRERECs2uXbtYsmQJ06ZN48EHH2TSpEmMGDHC6rJylZycjK+vr9VlZDN9+nSSkpKIiYnhuuuuA+Dpp58mLS3tstu69tprueeeey74/G233cbx48fx9/fn7bffvuxQ6t9//2XNmjW88847l13blfjxxx9ZsmQJP/zwA7169QKgd+/e1K5dmxEjRvDdd99dsg03N7eLfk5y07x5c5o3b571eMWKFQwfPpzmzZtfdluXYvXfyZ49e/LYY4/xww8/cN9991lWh5Qcmr4nIkXWv//+S5cuXQgICMDPz4927drx999/Z7vG6XQyatQoatWqhZeXF+XKlaNly5bMmTMn65q4uDgGDhxIxYoV8fT0JCIigm7duuVpKPjmzZvp3bs3ISEheHt7ExkZyQsvvJD1/IABA3L9zd3IkSOx2WzZztlsNoYMGcKkSZOoV68enp6e/P7775QtW5aBAwfmaCMxMREvLy+eeeaZrHNpaWmMGDGCmjVr4unpSaVKlfjPf/5zRTeiIiIiVpg0aRJBQUHcfPPN9OrVi0mTJuV63fHjx3nqqaeoWrUqnp6eVKxYkX79+pGQkJB1TWpqKiNHjqR27dp4eXkRERHB7bffzo4dOwBYsGABNpuNBQsWZGv7zPS1L7/8MuvcgAED8PPzY8eOHXTt2hV/f3/uvvtuABYuXMgdd9xB5cqVs77/PvXUU5w6dSpH3Re7d5g/fz42m42ff/45x+u+++47bDYbS5cuvejnz243f4QzDCPbeU9Pz4u+7kqULVv2qkbD/PLLL3h4eNC6dets5/fs2cMjjzxCZGQk3t7elCtXjjvuuCPbvdmXX37JHXfcAcCNN96YNQXu/K/luX788UfCwsK4/fbbs86FhITQu3dvfv311zzfL2VmZpKYmJj3jl6hRYsW0bRpU7y8vKhevTpff/11tufPLHnx559/8sgjjxAaGkrFihWznv/jjz9o1aoVvr6++Pv7c/PNN7Nhw4ZsbVzOffCl6gEIDQ2lQYMG/Prrr/nzSZBSTyOlRKRI2rBhA61atSIgIID//Oc/uLu78+mnn9K2bVv+/PPPrDUoRo4cyejRo3nggQdo2rQpiYmJrFixglWrVtGhQwfA/I3Ohg0beOyxx6hatSqHDh1izpw57N2796JDwdeuXUurVq1wd3dn8ODBVK1alR07dvD7779f8WKd8+bNY+rUqQwZMoTg4GBq1apFjx49mDZtGp9++ikeHh5Z1/7yyy+kpaVx5513AubIqttuu41FixYxePBg6tSpw7p163jvvffYunUrv/zyyxXVJCIiUpgmTZrE7bffjoeHB3379mXcuHEsX748a9QPwMmTJ2nVqhWbNm3ivvvu49prryUhIYHffvuN/fv3ExwcTGZmJrfccgsxMTHceeedPPHEEyQlJTFnzhzWr19/RVOlMjIy6NSpEy1btuTtt9/Gx8cHgB9++IGUlBQefvhhypUrxz///MOHH37I/v37+eGHH7Jef6l7h7Zt21KpUiUmTZpEjx49cnxeatSokW3ETW5uv/12nnvuOZ599lnmzJmT7d7hcqWkpGQL+cCcqubu7n7FbZ5ryZIl1K9fP0d7y5cvZ8mSJdx5551UrFiR3bt3M27cONq2bcvGjRvx8fGhdevWPP7443zwwQf897//pU6dOgBZf+bm33//5dprr80K7s5o2rQp//d//8fWrVuJjo6+aM0pKSkEBASQkpJCUFAQffv2ZcyYMfj5+V3hZyF327dvp1evXtx///3079+fiRMnMmDAABo3bky9evWyXfvII48QEhLC8OHDSU5OBuCbb76hf//+dOrUiTFjxpCSksK4ceNo2bIl//77b9Y9bl7vgy+nnsaNG+u+U/KPISJSyL744gsDMJYvX37Ba7p37254eHgYO3bsyDp38OBBw9/f32jdunXWuYYNGxo333zzBds5duyYARhvvfXWZdfZunVrw9/f39izZ0+28y6XK+vj/v37G1WqVMnx2hEjRhjn/xcLGHa73diwYUO287NmzTIA4/fff892vmvXrkb16tWzHn/zzTeG3W43Fi5cmO268ePHG4CxePHiy+qfiIhIYVuxYoUBGHPmzDEMw/yeWrFiReOJJ57Idt3w4cMNwJg2bVqONs58H544caIBGO++++4Fr5k/f74BGPPnz8/2/K5duwzA+OKLL7LO9e/f3wCM559/Pkd7KSkpOc6NHj3asNls2e4T8nLvMGzYMMPT09M4fvx41rlDhw4Zbm5uxogRI3K8z/mWLFliBAUFGR4eHsYdd9xhZGRkXPI15zvT/9yO8z9XZ7z11lsGYOzatSvP71OxYkWjZ8+eOc7n9vlcunSpARhff/111rkffvjhojWdz9fX17jvvvtynJ8+fboBGDNnzrzo659//nnjueeeM6ZMmWJ8//33WX8nWrRoYTidzjzVYBiGsXz58hx/v85VpUoVAzD++uuvrHOHDh0yPD09jaeffjrr3Jl75pYtW2b7OiclJRmBgYHGoEGDsrUbFxdnlClTJut8Xu+D81rPGa+//roBGPHx8RdtVyQvNH1PRIqczMxMZs+eTffu3alevXrW+YiICO666y4WLVqUNaQ6MDCQDRs2sG3btlzb8vb2xsPDgwULFnDs2LE813D48GH++usv7rvvPipXrpztufOn5V2ONm3aULdu3WznbrrpJoKDg5kyZUrWuWPHjjFnzhz69OmTde6HH36gTp06REVFkZCQkHXcdNNNgDklQEREpCibNGkSYWFh3HjjjYD5PbVPnz5MnjyZzMzMrOt++uknGjZsmGM00ZnXnLkmODiYxx577ILXXImHH344xzlvb++sj5OTk0lISOCGG27AMAz+/fdfIO/3Dv369SMtLY0ff/wx69yUKVPIyMi45PpDe/bsoWvXrtx///388ssv/PzzzwwaNCjbVL4HH3yQSpUq5amvgwcPZs6cOdmOhg0b5um1eXHkyBGCgoJynD/38+l0Ojly5Ag1a9YkMDAwzzvl5ebUqVO5TmM8s35nbtMtzzV69GjeeOMNevfuzZ133smXX37Ja6+9xuLFi7N9vfJD3bp1sy2CHhISQmRkJDt37sxx7aBBg3A4HFmP58yZw/Hjx+nbt2+2e0KHw0GzZs2y7gkv5z74cuo58zU9f5SdyJVQKCUiRc7hw4dJSUkhMjIyx3N16tTB5XKxb98+AF5++WWOHz9O7dq1iY6O5tlnn2Xt2rVZ13t6ejJmzBj++OMPwsLCaN26NW+++SZxcXEXreHMN+D69evnY8+gWrVqOc65ubnRs2fPbGsdTJs2DafTmS2U2rZtGxs2bCAkJCTbUbt2bQAOHTqUr7WKiIjkp8zMTCZPnsyNN97Irl272L59O9u3b6dZs2bEx8cTExOTde2OHTsu+T14x44dREZG4uaWfyuSuLm5ZVuz54y9e/cyYMAAypYti5+fHyEhIbRp0waAEydOAHm/d4iKiuK6667LtpbWpEmTuP766y+5C+Ho0aOx2+28+uqrdOnShYkTJ/Lll1/y5JNPZl2zfv36rGUOLqVWrVq0b98+25FbiHQ1jPPWvgIzHBo+fDiVKlXC09OT4OBgQkJCOH78eNbn80p4e3vnum5Uampq1vOX66mnnsJutzN37twrris35weXYIY9uYVH598/nvll7E033ZTjvnD27NlZ94SXcx98OfWc+ZpeTfgrcobWlBKRYq1169bs2LGDX3/9ldmzZ/PZZ5/x3nvvMX78eB544AEAnnzySW699VZ++eUXZs2axUsvvcTo0aOZN28e11xzzVW9/4W+GZ/7295zXehm6M477+TTTz/ljz/+oHv37kydOpWoqKhsv610uVxER0fz7rvv5tpGXn8rKiIiYoV58+YRGxvL5MmTmTx5co7nJ02aRMeOHfP1PS/3+7Snp2eO9YgyMzPp0KEDR48e5bnnniMqKgpfX18OHDjAgAEDcLlcl11Xv379eOKJJ9i/fz9paWn8/ffffPTRR5d83ZIlS2jUqFHWaKB7772X+Ph4nn32Wfz9/bnzzjtZunQpP/3002XXVBDKlSuXa6jx2GOP8cUXX/Dkk0/SvHlzypQpg81m484777yiz+cZERERxMbG5jh/5lz58uUvu80zC7EfPXr0iuvKzbkjn86VW4h3/v3jmc/RN998Q3h4eI7rzw1q83offDn1nPmaBgcH5/oakcuhUEpEipyQkBB8fHzYsmVLjuc2b96M3W7PFsCc2b1u4MCBnDx5ktatWzNy5MisUAqgRo0aPP300zz99NNs27aNRo0a8c477/Dtt9/mWsOZaYPr16+/aK1BQUEcP348x/k9e/bkpatZWrduTUREBFOmTKFly5bMmzcv2y5/Z/qwZs0a2rVrp99MiYhIsTNp0iRCQ0P5+OOPczw3bdo0fv75Z8aPH4+3tzc1atS45PfgGjVqsGzZMpxO5wUX5j4z6uf879WX83163bp1bN26la+++op+/fplnT93p1/I+70DmL+MGjp0KN9//z2nTp3C3d092+joC7HZbFmjxc945plniI+P57XXXmPSpElcc801dOvWLS9dK3BRUVHs2rUrx/kff/yR/v37884772SdS01NzfF1utz7nUaNGrFw4UJcLle2cHHZsmX4+PhkjS6/HElJSSQkJBASEnLZry0oZxbxDw0NpX379nm6/nLugy9l165dWaPbRK6Wpu+JSJHjcDjo2LEjv/76a7btauPj4/nuu+9o2bIlAQEBgLlWwbn8/PyoWbNm1tDtlJSUrCHbZ9SoUQN/f/+LbgscEhJC69atmThxInv37s323Lm/MapRowYnTpzINmUwNjY2162eL8Zut9OrVy9+//13vvnmGzIyMnLcnPbu3ZsDBw4wYcKEHK8/depU1m4sIiIiRc2pU6eYNm0at9xyC7169cpxDBkyhKSkJH777TfA3DFszZo1uX4/PfN9uGfPniQkJOQ6wujMNVWqVMHhcPDXX39le/6TTz7Jc+1nRpCc+/3fMAzef//9bNfl9d4BzBEmXbp04dtvv2XSpEl07tw5T6NO2rdvz7Zt2/jmm2+ynX/jjTeoW7cuu3fv5rbbbssx2ssqzZs3Z/369TnuuRwOR47PyYcffphjBJuvry+QM1S8kF69ehEfH8+0adOyziUkJPDDDz9w6623ZltvaseOHezYsSPrcWpqKklJSTnafOWVVzAMg86dO+ephsLQqVMnAgICeP3113E6nTmeP3z4MHDl98GXsnLlykvuEimSVxopJSKWmThxIjNnzsxx/oknnuDVV19lzpw5tGzZkkceeQQ3Nzc+/fRT0tLSePPNN7OurVu3Lm3btqVx48aULVuWFStW8OOPPzJkyBAAtm7dSrt27ejduzd169bFzc2Nn3/+mfj4eO68886L1vfBBx/QsmVLrr32WgYPHky1atXYvXs306dPZ/Xq1YD5m87nnnuOHj168Pjjj2dtx1u7du3LXqizT58+fPjhh4wYMYLo6OgcWx7fe++9TJ06lYceeoj58+fTokULMjMz2bx5M1OnTmXWrFk0adLkst5TRESkMPz2228kJSVx22235fr89ddfT0hICJMmTaJPnz48++yz/Pjjj9xxxx3cd999NG7cmKNHj/Lbb78xfvx4GjZsSL9+/fj6668ZOnQo//zzD61atSI5OZm5c+fyyCOP0K1bN8qUKcMdd9zBhx9+iM1mo0aNGvzvf/+7rHUYo6KiqFGjBs888wwHDhwgICCAn376KddpaXm5dzijX79+9OrVCzCDj7wYNmwYv/zyC/3792fOnDnccMMNnDx5ku+//55du3Zx3XXX8eqrr9K8efN8mQp54sQJPvzwQwAWL14MwEcffURgYCCBgYFZ91sX0q1bN1555RX+/PPPbPXccsstfPPNN5QpU4a6deuydOlS5s6dS7ly5bK9vlGjRjgcDsaMGcOJEyfw9PTkpptuIjQ0NNf369WrF9dffz0DBw5k48aNBAcH88knn5CZmcmoUaOyXduuXTuArF+AxsXFcc0119C3b1+ioqIAmDVrFjNmzKBz585FZvQZQEBAAOPGjePee+/l2muv5c477yQkJIS9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b948SpUqhZ2dHV5eXgwcODDB47du3aJdu3Y4OjpSpEgRVq5cmbpJi4iIiLwAjZ9ExBJUlBKRLGfUqFG0b9+eQ4cO0bVrVzp37syJEycACAsLo2nTpri5ubFv3z6WLl3Khg0bEgyavv32WwYMGMDrr7/OkSNHWLlyJYULF07wHGPHjqVjx44cPnyYFi1a0LVrV+7cuZOmeYqIiIikFI2fRCRVmEREMpGePXuarKysTNmyZUvwNWHCBJPJZDIBpjfffDPBMVWrVjX179/fZDKZTN99953Jzc3NFBoaan581apVJqPRaAoKCjKZTCaTt7e3acSIEUnGAJhGjhxp3g4NDTUBpr/++ivF8hQRERFJKRo/iYilaE0pEcl06tevz7fffptgX44cOcw/V69ePcFj1atXJyAgAIATJ05Qrlw5smXLZn68Zs2axMXFcerUKQwGA9euXaNhw4ZPjKFs2bLmn7Nly4aLiws3btx43pREREREUpXGTyJiCSpKiUimky1btsemg6cUBweHZLWzsbFJsG0wGIiLi0uNkERERERemMZPImIJWlNKRLKc3bt3P7ZdokQJAEqUKMGhQ4cICwszP75jxw6MRiPFihXD2dmZ/Pnzs3HjxjSNWURERMSSNH4SkdSgmVIikulERkYSFBSUYJ+1tTW5cuUCYOnSpVSqVIlatWrx888/s3fvXubOnQtA165dGTNmDD179uSjjz7i5s2bvP3223Tv3h0PDw8APvroI958803c3d1p3rw5Dx48YMeOHbz99ttpm6iIiIhICtH4SUQsQUUpEcl01qxZg5eXV4J9xYoV4+TJk0D8nV0WLVrEW2+9hZeXFwsXLqRkyZIAODo6snbtWt555x0qV66Mo6Mj7du3Z8qUKea+evbsSUREBF9++SXvvfceuXLl4pVXXkm7BEVERERSmMZPImIJBpPJZLJ0ECIiacVgMPDbb7/Rtm1bS4ciIiIikiFo/CQiqUVrSomIiIiIiIiISJpTUUpERERERERERNKcLt8TEREREREREZE0p5lSIiIiIiIiIiKS5lSUEhERERERERGRNKeilIiIiIiIiIiIpDkVpUREREREREREJM2pKCX/144dCwAAAAAM8reexa7CCAAAAGAnpQAAAADYSSkAAAAAdlIKAAAAgJ2UAgAAAGAXOIIwFbjukaUAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 1200x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Final Evaluation on Validation set with Threshold Tuning ---\n",
      "Loaded best model: best_model_weighted_bbox_ego_acc_ego_speed_ped_action_ped_look_static_context_ep1.pth\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3279a675443f43a0aaf66178e1d031aa",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Getting Probs & Labels for Threshold Tuning:   0%|          | 0/2416 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ed052cd971fc4d29893b870143b1ddbc",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Tuning Threshold (F1):   0%|          | 0/101 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimal threshold found: 0.6800 (max F1: 0.8113)\n",
      "\n",
      "--- Final metrics (Weighted Avg Fusion) with Tuned Threshold ---\n",
      "Optimal Threshold   : 0.6800\n",
      "Accuracy            : 0.9382\n",
      "Precision           : 0.7604\n",
      "Recall              : 0.8694\n",
      "F1-score            : 0.8113 (Max F1 at optimal threshold)\n",
      "AUC                 : 0.9795\n",
      "(Best F1@0.5 during training: 0.7795)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Learned fusion weights (from best model) ---\n",
      "bbox           : 0.1692\n",
      "ped_action     : 0.1686\n",
      "ped_look       : 0.1622\n",
      "ego_speed      : 0.1670\n",
      "ego_acc        : 0.1645\n",
      "static_context : 0.1686\n",
      "------------------------------\n",
      "\n",
      "--- CELL 2: Script complete ---\n"
     ]
    }
   ],
   "source": [
    "# --- CELL 2: ABLATION STUDY – MODEL TRAINING AND EVALUATION (with Weighted Average Fusion) ---\n",
    "\n",
    "import os\n",
    "import sys\n",
    "import gc\n",
    "import time\n",
    "import math\n",
    "import random\n",
    "import pickle\n",
    "import torch\n",
    "import numpy as np\n",
    "import pandas as pd                      # results-summary table\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from tqdm.notebook import tqdm\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "from sklearn.metrics import (\n",
    "    accuracy_score,\n",
    "    precision_recall_fscore_support,\n",
    "    roc_auc_score,\n",
    "    confusion_matrix,\n",
    "    ConfusionMatrixDisplay,\n",
    "    # f1_score # Explicitly import if used directly, or use from precision_recall_fscore_support\n",
    ")\n",
    "\n",
    "# --- Add PIE utilities path if necessary (adjust path) ------------------------\n",
    "pie_utilities_path = \"/kaggle/working/PIE/utilities\"\n",
    "if pie_utilities_path not in sys.path:\n",
    "    sys.path.insert(0, pie_utilities_path)\n",
    "\n",
    "try:\n",
    "    from pie_data import PIE\n",
    "except ImportError as e:\n",
    "    print(f\"Warn: Could not import PIE class: {e}\")\n",
    "    PIE = None\n",
    "\n",
    "# --- Configuration ------------------------------------------------------------\n",
    "PIE_ROOT_PATH = \"/kaggle/working/PIE\"\n",
    "POSE_DATA_DIR = \"/kaggle/input/pose-data/extracted_poses2\"\n",
    "PIE_DATABASE_CACHE_PATH = \"/kaggle/input/pie-database/pie_database.pkl\"\n",
    "\n",
    "# --- Define ALL possible streams (used by Dataset class) ----------------------\n",
    "ALL_POSSIBLE_STREAMS_CELL2 = [ # Renamed to avoid conflict if cell1 not run\n",
    "    \"bbox\",\n",
    "    \"pose\",\n",
    "    \"ego_speed\",\n",
    "    \"ego_acc\",\n",
    "    \"ego_gyro\",\n",
    "    \"ped_action\",\n",
    "    \"ped_look\",\n",
    "    \"ped_occlusion\",\n",
    "    \"traffic_light\",\n",
    "    \"static_context\",\n",
    "]\n",
    "\n",
    "# --- *** CHOOSE ACTIVE STREAMS FOR THIS EXPERIMENT *** ------------------------\n",
    "ACTIVE_STREAMS = [\n",
    "    \"bbox\",\n",
    "    \"ped_action\",\n",
    "    \"ped_look\",\n",
    "    \"ego_speed\",\n",
    "    \"ego_acc\",\n",
    "    \"static_context\",\n",
    "]\n",
    "# ------------------------------------------------------------------------------\n",
    "\n",
    "print(f\"--- Running Weighted Average Fusion With Active Streams: {ACTIVE_STREAMS} ---\")\n",
    "\n",
    "# --- Model Hyper-parameters ---------------------------------------------------\n",
    "SEQ_LEN, PRED_LEN = 30, 1\n",
    "INPUT_SIZE_BBOX = 4\n",
    "INPUT_SIZE_POSE = 34\n",
    "INPUT_SIZE_EGO_SPEED = 1\n",
    "INPUT_SIZE_EGO_ACC = 2\n",
    "INPUT_SIZE_EGO_GYRO = 1\n",
    "INPUT_SIZE_PED_ACTION = 1\n",
    "INPUT_SIZE_PED_LOOK = 1\n",
    "INPUT_SIZE_PED_OCC = 1\n",
    "INPUT_SIZE_TL_STATE = 4\n",
    "NUM_SIGNALIZED_CATS = 4\n",
    "NUM_INTERSECTION_CATS = 5\n",
    "NUM_AGE_CATS = 4\n",
    "NUM_GENDER_CATS = 3\n",
    "NUM_TRAFFIC_DIR_CATS = 2\n",
    "LANE_CATEGORIES = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 4, 7: 4, 8: 4}\n",
    "NUM_LANE_CATS = len(set(LANE_CATEGORIES.values()))\n",
    "INPUT_SIZE_STATIC = (\n",
    "    NUM_SIGNALIZED_CATS\n",
    "    + NUM_INTERSECTION_CATS\n",
    "    + NUM_AGE_CATS\n",
    "    + NUM_GENDER_CATS\n",
    "    + NUM_TRAFFIC_DIR_CATS\n",
    "    + NUM_LANE_CATS\n",
    ")\n",
    "\n",
    "LSTM_HIDDEN_SIZE = 256\n",
    "NUM_LSTM_LAYERS = 2\n",
    "DROPOUT_RATE = 0.3\n",
    "NUM_CLASSES = 2\n",
    "ATTENTION_DIM = 128\n",
    "\n",
    "# --- Training Hyper-parameters ------------------------------------------------\n",
    "LEARNING_RATE = 1e-4\n",
    "BATCH_SIZE = 32\n",
    "NUM_EPOCHS = 5\n",
    "DEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "print(f\"Using device: {DEVICE}\")\n",
    "\n",
    "# --- Dataset splits -----------------------------------------------------------\n",
    "VAL_SETS_STR = [\"set05\", \"set06\"]\n",
    "\n",
    "# --- Paths for pre-processed data --------------------------------------------\n",
    "BALANCED_DATA_PKL_PATH = \"/kaggle/working/balanced_train_data.pkl\"\n",
    "SCALERS_PKL_PATH = \"/kaggle/working/scalers.pkl\"\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                               Helper classes (Dataset)                       #\n",
    "# -----------------------------------------------------------------------------\n",
    "\n",
    "# Using to_one_hot from Cell 1. If Cell 1 is not run, define it here:\n",
    "if 'to_one_hot' not in globals():\n",
    "    def to_one_hot(index, num_classes):\n",
    "        vec = np.zeros(num_classes, dtype=np.float32)\n",
    "        safe_index = int(np.clip(index, 0, num_classes - 1))\n",
    "        vec[safe_index] = 1.0\n",
    "        return vec\n",
    "\n",
    "class PIEDataset_Cell2(Dataset): # Renamed to avoid conflict if Cell 1 is run in same notebook\n",
    "    \"\"\"\n",
    "    Dataset that can dynamically enable/disable streams. (Copied from original cell 2)\n",
    "    \"\"\"\n",
    "    def __init__(\n",
    "        self,\n",
    "        pie_database,\n",
    "        set_names,\n",
    "        pose_data_dir,\n",
    "        seq_len,\n",
    "        pred_len,\n",
    "        scalers=None,\n",
    "        active_streams=None, # This should be ALL_POSSIBLE_STREAMS_CELL2 for val\n",
    "    ):\n",
    "        self.pie_db = pie_database\n",
    "        self.set_names = set_names\n",
    "        self.pose_data_dir = pose_data_dir\n",
    "        self.seq_len = seq_len\n",
    "        self.pred_len = pred_len\n",
    "        self.scalers = scalers or {}\n",
    "        # This dataset needs to be able to generate ALL streams,\n",
    "        # then the loader or model will select the ACTIVE_STREAMS.\n",
    "        # However, for efficiency, it's better if it only processes active_streams.\n",
    "        # The original code passed ALL_POSSIBLE_STREAMS to PIEDataset for validation.\n",
    "        # Let's assume it should prepare data for any of ALL_POSSIBLE_STREAMS_CELL2\n",
    "        # but only return those specified by a different active_streams parameter later.\n",
    "        # For now, let's assume active_streams passed here are the ones to process.\n",
    "        self.streams_to_extract = active_streams or ALL_POSSIBLE_STREAMS_CELL2\n",
    "        self.sequences = []\n",
    "        self.all_pose_data = {}\n",
    "\n",
    "        self._input_sizes_for_error = self._get_input_sizes_dict()\n",
    "\n",
    "        if \"pose\" in self.streams_to_extract:\n",
    "            self._load_pose_data()\n",
    "\n",
    "        self._generate_sequence_list()\n",
    "        if not self.sequences:\n",
    "            # Make this a warning or handle it, as val set might be empty based on set_names\n",
    "            print(f\"Warning: PIEDataset_Cell2 init: No sequences for {self.set_names}\")\n",
    "\n",
    "\n",
    "    def _get_input_sizes_dict(self):\n",
    "        input_sizes = {}\n",
    "        special_cases = {\n",
    "            \"TRAFFIC_LIGHT\": \"TL_STATE\", \"STATIC_CONTEXT\": \"STATIC\",\n",
    "            \"EGO_SPEED\": \"EGO_SPEED\", \"EGO_ACC\": \"EGO_ACC\", \"EGO_GYRO\": \"EGO_GYRO\",\n",
    "            \"PED_ACTION\": \"PED_ACTION\", \"PED_LOOK\": \"PED_LOOK\", \"PED_OCCLUSION\": \"PED_OCC\",\n",
    "        }\n",
    "        for stream in ALL_POSSIBLE_STREAMS_CELL2: # Check against all possible for safety\n",
    "            size_constant_name = f\"INPUT_SIZE_{stream.upper()}\"\n",
    "            suffix = special_cases.get(stream.upper())\n",
    "            if suffix: size_constant_name = f\"INPUT_SIZE_{suffix}\"\n",
    "            elif stream == \"bbox\": size_constant_name = \"INPUT_SIZE_BBOX\"\n",
    "            elif stream == \"pose\": size_constant_name = \"INPUT_SIZE_POSE\"\n",
    "            input_sizes[stream] = globals().get(size_constant_name, 1)\n",
    "        return input_sizes\n",
    "\n",
    "    def _load_pose_data(self):\n",
    "        sets_loaded_count = 0\n",
    "        for set_id in self.set_names:\n",
    "            self.all_pose_data[set_id] = {}\n",
    "            pose_set_path = os.path.join(self.pose_data_dir, set_id)\n",
    "            if not os.path.isdir(pose_set_path): continue\n",
    "            pkl_files_in_set = [f for f in os.listdir(pose_set_path) if f.startswith(f\"{set_id}_\") and f.endswith(\"_poses.pkl\")]\n",
    "            if not pkl_files_in_set: continue\n",
    "            loaded_video_count = 0\n",
    "            for pkl_filename in pkl_files_in_set:\n",
    "                pkl_file_path = os.path.join(pose_set_path, pkl_filename)\n",
    "                try:\n",
    "                    with open(pkl_file_path, \"rb\") as f: loaded_pkl_content = pickle.load(f)\n",
    "                except FileNotFoundError: continue\n",
    "                except Exception as e: print(f\"Error loading pose PKL {pkl_file_path}: {e}\"); continue\n",
    "                if len(loaded_pkl_content) != 1: continue\n",
    "                unique_video_key, video_data = list(loaded_pkl_content.items())[0]\n",
    "                video_id = \"_\".join(unique_video_key.split(\"_\")[1:])\n",
    "                if video_id in self.pie_db.get(set_id, {}):\n",
    "                    self.all_pose_data[set_id][video_id] = video_data\n",
    "                    loaded_video_count += 1\n",
    "            if loaded_video_count > 0: sets_loaded_count += 1\n",
    "\n",
    "    def _generate_sequence_list(self):\n",
    "        sequence_count = 0\n",
    "        for set_id in self.set_names:\n",
    "            if set_id not in self.pie_db: continue\n",
    "            for video_id, video_data in self.pie_db[set_id].items():\n",
    "                if \"ped_annotations\" not in video_data: continue\n",
    "                for ped_id, ped_data in video_data[\"ped_annotations\"].items():\n",
    "                    frames = ped_data.get(\"frames\", [])\n",
    "                    if len(frames) < self.seq_len + self.pred_len: continue\n",
    "                    frames_sorted = sorted(frames)\n",
    "                    for i in range(len(frames_sorted) - self.seq_len - self.pred_len + 1):\n",
    "                        start_f, obs_end_f = frames_sorted[i], frames_sorted[i + self.seq_len - 1]\n",
    "                        if obs_end_f - start_f != self.seq_len - 1: continue\n",
    "                        target_idx = i + self.seq_len + self.pred_len - 1\n",
    "                        if target_idx >= len(frames_sorted): continue\n",
    "                        target_f = frames_sorted[target_idx]\n",
    "                        if target_f - obs_end_f != self.pred_len: continue\n",
    "                        self.sequences.append((set_id, video_id, ped_id, start_f))\n",
    "                        sequence_count += 1\n",
    "        print(f\"PIEDataset_Cell2 initialized with {sequence_count} sequences for sets {self.set_names}.\")\n",
    "\n",
    "    def __len__(self): return len(self.sequences)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        set_id, video_id, ped_id, start_frame = self.sequences[idx]\n",
    "        frame_nums = list(range(start_frame, start_frame + self.seq_len))\n",
    "        target_frame_num = start_frame + self.seq_len + self.pred_len - 1\n",
    "        video_db, ped_db = self.pie_db.get(set_id, {}).get(video_id, {}), {}\n",
    "        if video_db: ped_db = video_db.get(\"ped_annotations\", {}).get(ped_id, {})\n",
    "        ego_db = video_db.get(\"vehicle_annotations\", {}) if video_db else {}\n",
    "        traffic_db = video_db.get(\"traffic_annotations\", {}) if video_db else {}\n",
    "        ped_attributes = ped_db.get(\"attributes\", {}) if ped_db else {}\n",
    "\n",
    "        feature_sequences = {s: [] for s in self.streams_to_extract}\n",
    "        label = 0\n",
    "        if ped_db and \"frames\" in ped_db and \"behavior\" in ped_db and \"cross\" in ped_db[\"behavior\"]:\n",
    "            try:\n",
    "                target_idx = ped_db[\"frames\"].index(target_frame_num)\n",
    "                label = ped_db[\"behavior\"][\"cross\"][target_idx]\n",
    "                if label == -1: label = 0\n",
    "            except (ValueError, IndexError): pass\n",
    "\n",
    "        static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "        if \"static_context\" in self.streams_to_extract:\n",
    "            sig_idx, int_idx = ped_attributes.get(\"signalized\", 0), ped_attributes.get(\"intersection\", 0)\n",
    "            age_idx, gen_idx = ped_attributes.get(\"age\", 2), ped_attributes.get(\"gender\", 0)\n",
    "            td_idx = int(ped_attributes.get(\"traffic_direction\", 0))\n",
    "            nl_val = ped_attributes.get(\"num_lanes\", 2)\n",
    "            nl_cat_idx = LANE_CATEGORIES.get(nl_val, LANE_CATEGORIES[max(LANE_CATEGORIES.keys())])\n",
    "            static_vec = np.concatenate([\n",
    "                to_one_hot(sig_idx, NUM_SIGNALIZED_CATS), to_one_hot(int_idx, NUM_INTERSECTION_CATS),\n",
    "                to_one_hot(age_idx, NUM_AGE_CATS), to_one_hot(gen_idx, NUM_GENDER_CATS),\n",
    "                to_one_hot(td_idx, NUM_TRAFFIC_DIR_CATS), to_one_hot(nl_cat_idx, NUM_LANE_CATS),\n",
    "            ])\n",
    "            if static_vec.shape[0] != INPUT_SIZE_STATIC: static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "\n",
    "        for frame_num in frame_nums:\n",
    "            frame_db_idx = -1\n",
    "            if ped_db and \"frames\" in ped_db:\n",
    "                try: frame_db_idx = ped_db[\"frames\"].index(frame_num)\n",
    "                except ValueError: pass\n",
    "            ego_frame_data = ego_db.get(frame_num, {})\n",
    "\n",
    "            if \"bbox\" in self.streams_to_extract:\n",
    "                bbox_norm = np.zeros(INPUT_SIZE_BBOX, dtype=np.float32)\n",
    "                if ped_db and frame_db_idx!=-1 and \"bbox\" in ped_db and len(ped_db[\"bbox\"]) > frame_db_idx:\n",
    "                    try:\n",
    "                        x1,y1,x2,y2 = ped_db[\"bbox\"][frame_db_idx]\n",
    "                        img_w, img_h = (video_db.get(\"width\",1920) if video_db else 1920), (video_db.get(\"height\",1080) if video_db else 1080)\n",
    "                        if img_w > 0 and img_h > 0:\n",
    "                            cx,cy,w,h = ((x1+x2)/2)/img_w, ((y1+y2)/2)/img_h, (x2-x1)/img_w, (y2-y1)/img_h\n",
    "                            if 0<w and 0<h and 0<=cx<=1 and 0<=cy<=1: bbox_norm=np.array([cx,cy,w,h],dtype=np.float32)\n",
    "                    except Exception: pass\n",
    "                feature_sequences[\"bbox\"].append(bbox_norm)\n",
    "            if \"pose\" in self.streams_to_extract:\n",
    "                pose_vector = np.zeros(INPUT_SIZE_POSE, dtype=np.float32)\n",
    "                vid_pose = self.all_pose_data.get(set_id,{}).get(video_id,{})\n",
    "                loaded_pose = vid_pose.get(frame_num,{}).get(ped_id)\n",
    "                if isinstance(loaded_pose,np.ndarray) and loaded_pose.shape==(INPUT_SIZE_POSE,): pose_vector=loaded_pose\n",
    "                feature_sequences[\"pose\"].append(pose_vector)\n",
    "            if \"ego_speed\" in self.streams_to_extract:\n",
    "                speed = ego_frame_data.get(\"OBD_speed\",0.0) or ego_frame_data.get(\"GPS_speed\",0.0)\n",
    "                speed_scaled = (speed - self.scalers.get(\"ego_speed_mean\",0.0)) / self.scalers.get(\"ego_speed_std\",1.0)\n",
    "                feature_sequences[\"ego_speed\"].append([speed_scaled])\n",
    "            if \"ego_acc\" in self.streams_to_extract:\n",
    "                ax,ay = ego_frame_data.get(\"accX\",0.0), ego_frame_data.get(\"accY\",0.0)\n",
    "                ax_s = (ax - self.scalers.get(\"accX_mean\",0.0))/self.scalers.get(\"accX_std\",1.0)\n",
    "                ay_s = (ay - self.scalers.get(\"accY_mean\",0.0))/self.scalers.get(\"accY_std\",1.0)\n",
    "                feature_sequences[\"ego_acc\"].append([ax_s, ay_s])\n",
    "            if \"ego_gyro\" in self.streams_to_extract:\n",
    "                gz = ego_frame_data.get(\"gyroZ\",0.0)\n",
    "                gz_s = (gz - self.scalers.get(\"gyroZ_mean\",0.0))/self.scalers.get(\"gyroZ_std\",1.0)\n",
    "                feature_sequences[\"ego_gyro\"].append([gz_s])\n",
    "            if \"ped_action\" in self.streams_to_extract:\n",
    "                action=0\n",
    "                if ped_db and frame_db_idx!=-1 and \"behavior\" in ped_db and \"action\" in ped_db[\"behavior\"] and len(ped_db[\"behavior\"][\"action\"])>frame_db_idx:\n",
    "                    action = ped_db[\"behavior\"][\"action\"][frame_db_idx]\n",
    "                feature_sequences[\"ped_action\"].append([float(action)])\n",
    "            if \"ped_look\" in self.streams_to_extract:\n",
    "                look=0\n",
    "                if ped_db and frame_db_idx!=-1 and \"behavior\" in ped_db and \"look\" in ped_db[\"behavior\"] and len(ped_db[\"behavior\"][\"look\"])>frame_db_idx:\n",
    "                    look = ped_db[\"behavior\"][\"look\"][frame_db_idx]\n",
    "                feature_sequences[\"ped_look\"].append([float(look)])\n",
    "            if \"ped_occlusion\" in self.streams_to_extract:\n",
    "                occ=0.0\n",
    "                if ped_db and frame_db_idx!=-1 and \"occlusion\" in ped_db and len(ped_db[\"occlusion\"])>frame_db_idx:\n",
    "                    occ = float(ped_db[\"occlusion\"][frame_db_idx])/2.0\n",
    "                feature_sequences[\"ped_occlusion\"].append([occ])\n",
    "            if \"traffic_light\" in self.streams_to_extract:\n",
    "                state_int=0\n",
    "                for _,obj_data in traffic_db.items():\n",
    "                    if obj_data.get(\"obj_class\")==\"traffic_light\" and \"frames\" in obj_data and \"state\" in obj_data:\n",
    "                        try:\n",
    "                            tl_idx = obj_data[\"frames\"].index(frame_num)\n",
    "                            if obj_data[\"state\"][tl_idx]!=0: state_int=obj_data[\"state\"][tl_idx]; break\n",
    "                        except (ValueError,IndexError): continue\n",
    "                feature_sequences[\"traffic_light\"].append(to_one_hot(state_int,INPUT_SIZE_TL_STATE))\n",
    "            if \"static_context\" in self.streams_to_extract:\n",
    "                feature_sequences[\"static_context\"].append(static_vec)\n",
    "        features = {}\n",
    "        try:\n",
    "            for name in self.streams_to_extract:\n",
    "                features[name] = torch.tensor(np.asarray(feature_sequences[name],dtype=np.float32),dtype=torch.float32)\n",
    "        except Exception as e:\n",
    "            print(f\"Error converting features idx {idx} ({set_id},{video_id},{ped_id},{start_frame}): {e}. Ret zeros.\")\n",
    "            features = {name:torch.zeros((self.seq_len,self._input_sizes_for_error.get(name,1)),dtype=torch.float32) for name in self.streams_to_extract}\n",
    "        return features, torch.tensor(label,dtype=torch.long)\n",
    "\n",
    "\n",
    "class BalancedDataset(Dataset):\n",
    "    def __init__(self, data_dict, active_streams, label_key=\"label\"):\n",
    "        self.active_streams = active_streams\n",
    "        self.label_key = label_key\n",
    "        if self.label_key not in data_dict or not data_dict[self.label_key]:\n",
    "            raise ValueError(f\"Label key '{self.label_key}' missing/empty.\")\n",
    "        self.num_samples = len(data_dict[self.label_key])\n",
    "        if self.num_samples == 0: print(\"Warning: BalancedDataset initialized with zero samples.\")\n",
    "        self.features = {}\n",
    "        for stream in self.active_streams:\n",
    "            if stream in data_dict and data_dict[stream]:\n",
    "                try: self.features[stream] = torch.tensor(np.asarray(data_dict[stream]),dtype=torch.float32)\n",
    "                except ValueError as e: raise ValueError(f\"Error converting stream '{stream}': {e}\")\n",
    "            else: raise KeyError(f\"Stream '{stream}' missing or empty in data.\")\n",
    "        try: self.labels = torch.tensor([lbl[0] for lbl in data_dict[self.label_key]],dtype=torch.long)\n",
    "        except (IndexError, TypeError) as e: raise ValueError(f\"Error converting labels: {e}\")\n",
    "        for stream in self.active_streams:\n",
    "            if len(self.features[stream]) != self.num_samples:\n",
    "                raise ValueError(f\"Len mismatch: '{stream}' ({len(self.features[stream])}) vs labels ({self.num_samples})\")\n",
    "    def __len__(self): return self.num_samples\n",
    "    def __getitem__(self, idx):\n",
    "        feature_dict = {s: self.features[s][idx] for s in self.active_streams}\n",
    "        label = self.labels[idx]\n",
    "        return feature_dict, label\n",
    "\n",
    "\n",
    "class Attention(nn.Module):\n",
    "    def __init__(self, hidden_dim, attention_dim):\n",
    "        super().__init__()\n",
    "        self.attention_net = nn.Sequential(\n",
    "            nn.Linear(hidden_dim, attention_dim), nn.Tanh(), nn.Linear(attention_dim, 1),\n",
    "        )\n",
    "    def forward(self, lstm_output):\n",
    "        att_scores = self.attention_net(lstm_output).squeeze(2)\n",
    "        att_weights = torch.softmax(att_scores, dim=1)\n",
    "        context_vector = torch.sum(lstm_output * att_weights.unsqueeze(2), dim=1)\n",
    "        return context_vector, att_weights\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                  ***  MODEL WITH WEIGHTED AVERAGE FUSION  ***                #\n",
    "# -----------------------------------------------------------------------------\n",
    "class MultiStreamWeightedAvgLSTM(nn.Module):\n",
    "    def __init__(\n",
    "        self, input_sizes, lstm_hidden_size, num_lstm_layers,\n",
    "        num_classes, attention_dim, dropout_rate, stream_names=None,\n",
    "    ):\n",
    "        super().__init__()\n",
    "        if not stream_names: raise ValueError(\"stream_names cannot be empty.\")\n",
    "        self.stream_names = stream_names\n",
    "        self.num_active_streams = len(stream_names)\n",
    "        self.lstm_output_dim = lstm_hidden_size * 2\n",
    "        self.lstms, self.attentions = nn.ModuleDict(), nn.ModuleDict()\n",
    "        print(f\"Initializing Weighted-Avg model with streams: {self.stream_names}\")\n",
    "        for name in self.stream_names:\n",
    "            if name not in input_sizes: raise KeyError(f\"Input size for stream '{name}' not provided.\")\n",
    "            in_size = input_sizes[name]\n",
    "            print(f\"  – Adding stream '{name}' (input {in_size})\")\n",
    "            self.lstms[name] = nn.LSTM(\n",
    "                in_size, lstm_hidden_size, num_lstm_layers, batch_first=True,\n",
    "                dropout=dropout_rate if num_lstm_layers > 1 else 0, bidirectional=True,\n",
    "            )\n",
    "            self.attentions[name] = Attention(self.lstm_output_dim, attention_dim)\n",
    "        self.fusion_weights = nn.Parameter(torch.ones(self.num_active_streams))\n",
    "        fused_dim = self.lstm_output_dim\n",
    "        self.dropout = nn.Dropout(dropout_rate)\n",
    "        inter_dim = max(num_classes * 4, fused_dim // 2)\n",
    "        self.fc1 = nn.Linear(fused_dim, inter_dim)\n",
    "        self.relu = nn.ReLU()\n",
    "        self.fc2 = nn.Linear(inter_dim, num_classes)\n",
    "\n",
    "    def forward(self, x):\n",
    "        ctx_vecs = []\n",
    "        for name in self.stream_names:\n",
    "            if name not in x:\n",
    "                zero_ctx = torch.zeros(x[next(iter(x))].shape[0], self.lstm_output_dim, device=x[next(iter(x))].device)\n",
    "                ctx_vecs.append(zero_ctx)\n",
    "                continue\n",
    "            lstm_out, _ = self.lstms[name](x[name])\n",
    "            context_vector, _ = self.attentions[name](lstm_out)\n",
    "            ctx_vecs.append(context_vector)\n",
    "        if len(ctx_vecs) != self.num_active_streams:\n",
    "            raise RuntimeError(f\"context_vectors({len(ctx_vecs)}) != num_streams({self.num_active_streams})\")\n",
    "        stacked = torch.stack(ctx_vecs, dim=1)\n",
    "        weights = torch.softmax(self.fusion_weights, dim=0).view(1, -1, 1)\n",
    "        fused = torch.sum(stacked * weights, dim=1)\n",
    "        out = self.dropout(fused)\n",
    "        out = self.relu(self.fc1(out))\n",
    "        out = self.dropout(out)\n",
    "        logits = self.fc2(out)\n",
    "        return logits\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#         Training / evaluation / Threshold Tuning helpers                     #\n",
    "# -----------------------------------------------------------------------------\n",
    "\n",
    "def get_all_probabilities_and_labels(model, dataloader, device):\n",
    "    \"\"\"Gets true labels and predicted probabilities for the positive class.\"\"\"\n",
    "    model.eval()\n",
    "    labels_all, probs_all_positive_class = [], []\n",
    "    active_streams = model.stream_names\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for feats, labels in tqdm(dataloader, desc=\"Getting Probs & Labels for Threshold Tuning\", leave=False):\n",
    "            inputs = {name: feats[name].to(device) for name in active_streams if name in feats}\n",
    "            outputs = model(inputs)  # Logits\n",
    "            probs = torch.softmax(outputs, dim=1)  # Probabilities\n",
    "\n",
    "            labels_all.extend(labels.cpu().numpy())\n",
    "            probs_all_positive_class.extend(probs[:, 1].cpu().numpy()) # Prob for class 1\n",
    "\n",
    "    return np.asarray(labels_all), np.asarray(probs_all_positive_class)\n",
    "\n",
    "\n",
    "def find_optimal_threshold(y_true, y_probs_positive_class, metric='f1', steps=100):\n",
    "    \"\"\"Finds the optimal probability threshold for a binary classifier to maximize a metric.\"\"\"\n",
    "    best_threshold = 0.5\n",
    "    best_metric_val = -1.0\n",
    "\n",
    "    if metric == 'f1':\n",
    "        # precision_recall_fscore_support returns (precision, recall, f1, support)\n",
    "        metric_func = lambda yt, yp: precision_recall_fscore_support(yt, yp, average='binary', pos_label=1, zero_division=0)[2]\n",
    "    else:\n",
    "        raise ValueError(f\"Unsupported metric for threshold tuning: {metric}\")\n",
    "\n",
    "    thresholds = np.linspace(0.0, 1.0, steps + 1) # e.g., 0.0, 0.01, ..., 1.0\n",
    "\n",
    "    for threshold in tqdm(thresholds, desc=f\"Tuning Threshold ({metric.upper()})\", leave=False):\n",
    "        y_pred_tuned = (y_probs_positive_class >= threshold).astype(int)\n",
    "        current_metric_val = metric_func(y_true, y_pred_tuned)\n",
    "\n",
    "        if current_metric_val > best_metric_val:\n",
    "            best_metric_val = current_metric_val\n",
    "            best_threshold = threshold\n",
    "        elif current_metric_val == best_metric_val: # Tie-breaking\n",
    "            if abs(threshold - 0.5) < abs(best_threshold - 0.5):\n",
    "                best_threshold = threshold\n",
    "    \n",
    "    print(f\"Optimal threshold found: {best_threshold:.4f} (max {metric.upper()}: {best_metric_val:.4f})\")\n",
    "    return best_threshold, best_metric_val\n",
    "\n",
    "\n",
    "def train_epoch(model, dataloader, optimizer, criterion, device):\n",
    "    model.train()\n",
    "    total_loss = 0.0\n",
    "    all_preds, all_labels = [], []\n",
    "    active = model.stream_names\n",
    "    for feats, labels in tqdm(dataloader, desc=\"Training\", leave=False):\n",
    "        inputs = {n: feats[n].to(device) for n in active if n in feats}\n",
    "        labels = labels.to(device)\n",
    "        optimizer.zero_grad()\n",
    "        outputs = model(inputs)\n",
    "        loss = criterion(outputs, labels)\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "        total_loss += loss.item()\n",
    "        all_preds.extend(torch.argmax(outputs, 1).cpu().numpy())\n",
    "        all_labels.extend(labels.cpu().numpy())\n",
    "    return total_loss / max(1, len(dataloader)), accuracy_score(all_labels, all_preds)\n",
    "\n",
    "\n",
    "def evaluate_epoch(model, dataloader, criterion, device):\n",
    "    \"\"\"Evaluates model for one epoch, returns metrics at 0.5 threshold and raw probabilities.\"\"\"\n",
    "    model.eval()\n",
    "    total_loss = 0.0\n",
    "    all_labels_list, all_preds_list, all_probs_list = [], [], [] # Changed to list for easier appending\n",
    "    active = model.stream_names\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for feats, labels in tqdm(dataloader, desc=\"Evaluating\", leave=False):\n",
    "            inputs = {n: feats[n].to(device) for n in active if n in feats}\n",
    "            labels_gpu = labels.to(device) # Ensure labels are on device for loss\n",
    "            outputs = model(inputs)\n",
    "            loss = criterion(outputs, labels_gpu) # Use labels_gpu for loss\n",
    "            total_loss += loss.item()\n",
    "            probs = torch.softmax(outputs, 1)\n",
    "            preds = torch.argmax(probs, 1)\n",
    "            all_labels_list.extend(labels.cpu().numpy()) # Use original labels for metrics\n",
    "            all_preds_list.extend(preds.cpu().numpy())\n",
    "            all_probs_list.extend(probs.cpu().numpy()) # Store all class probabilities\n",
    "\n",
    "    avg_loss = total_loss / max(1, len(dataloader))\n",
    "    all_labels = np.asarray(all_labels_list)\n",
    "    all_preds = np.asarray(all_preds_list)\n",
    "    all_probs_np = np.asarray(all_probs_list) # Probabilities for all classes\n",
    "\n",
    "    acc = accuracy_score(all_labels, all_preds)\n",
    "    prec, rec, f1, _ = precision_recall_fscore_support(all_labels, all_preds, average=\"binary\", pos_label=1, zero_division=0)\n",
    "    auc = roc_auc_score(all_labels, all_probs_np[:, 1]) if len(np.unique(all_labels)) > 1 else float(\"nan\")\n",
    "    \n",
    "    return {\n",
    "        \"loss\": avg_loss, \"accuracy\": acc, \"precision\": prec, \"recall\": rec, \"f1\": f1, \"auc\": auc,\n",
    "        \"labels\": all_labels, \"probs_positive_class\": all_probs_np[:, 1] # Return these for potential later use\n",
    "    }\n",
    "\n",
    "# get_predictions_and_labels is used for CM after training. We can update it to use tuned threshold\n",
    "# or create a new one. For now, the main block will handle predictions with tuned threshold.\n",
    "# The original get_predictions_and_labels can be kept if needed for 0.5 threshold CM elsewhere.\n",
    "\n",
    "def get_predictions_at_threshold(y_probs_positive_class, threshold):\n",
    "    return (y_probs_positive_class >= threshold).astype(int)\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                            Main execution block                              #\n",
    "# -----------------------------------------------------------------------------\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    print(\"--- CELL 2: Running Model Training/Evaluation with Weighted Fusion ---\")\n",
    "    print(f\"Active Streams: {ACTIVE_STREAMS}\")\n",
    "\n",
    "    print(\"\\nLoading balanced training data …\")\n",
    "    try:\n",
    "        with open(BALANCED_DATA_PKL_PATH, \"rb\") as f: balanced_train_data_dict = pickle.load(f)\n",
    "        with open(SCALERS_PKL_PATH, \"rb\") as f: scalers = pickle.load(f)\n",
    "        print(\"   ✓ pre-processed data loaded.\")\n",
    "    except FileNotFoundError as e: print(f\"ERROR: {e}. Run cell 1 first.\"); sys.exit(1)\n",
    "    except Exception as e: print(f\"Error loading pre-processed data: {e}\"); sys.exit(1)\n",
    "\n",
    "    print(\"\\nLoading PIE database cache for validation …\")\n",
    "    if not os.path.exists(PIE_DATABASE_CACHE_PATH): raise FileNotFoundError(\"PIE db cache not found.\")\n",
    "    try:\n",
    "        with open(PIE_DATABASE_CACHE_PATH, \"rb\") as f: pie_database = pickle.load(f)\n",
    "    except Exception as e: raise RuntimeError(f\"Failed to load PIE database: {e}\")\n",
    "    print(\"   ✓ PIE database loaded.\")\n",
    "\n",
    "    print(\"\\nCreating Datasets and DataLoaders …\")\n",
    "    try:\n",
    "        train_dataset = BalancedDataset(balanced_train_data_dict, ACTIVE_STREAMS, label_key=\"label\")\n",
    "        del balanced_train_data_dict\n",
    "        # For validation, PIEDataset_Cell2 should be configured to extract ALL_POSSIBLE_STREAMS_CELL2\n",
    "        # if the model might use any of them, or just ACTIVE_STREAMS if validation uses same streams.\n",
    "        # Original code used ALL_POSSIBLE_STREAMS for val_dataset's PIEDataset.\n",
    "        # Assuming val_dataset also processes only ACTIVE_STREAMS for consistency with model input.\n",
    "        val_dataset = PIEDataset_Cell2(\n",
    "            pie_database, VAL_SETS_STR, POSE_DATA_DIR, SEQ_LEN, PRED_LEN,\n",
    "            scalers, active_streams=ALL_POSSIBLE_STREAMS_CELL2, # Val dataset prepares all, model selects\n",
    "        )\n",
    "    except Exception as e: print(f\"Error creating datasets: {e}\"); raise\n",
    "    if len(train_dataset) == 0 : raise ValueError(\"Train dataset is empty!\")\n",
    "    if len(val_dataset) == 0 : print(\"Warning: Validation dataset is empty! Check VAL_SETS_STR.\")\n",
    "\n",
    "\n",
    "    train_loader = DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True, num_workers=2, pin_memory=True)\n",
    "    val_loader = DataLoader(val_dataset, batch_size=BATCH_SIZE, shuffle=False, num_workers=2, pin_memory=True)\n",
    "    print(\"   ✓ DataLoaders ready.\")\n",
    "    del pie_database; gc.collect()\n",
    "\n",
    "    print(\"\\nInitialising model …\")\n",
    "    current_input_sizes = {}\n",
    "    SPECIAL_CELL2 = { # Renamed for safety\n",
    "        \"TRAFFIC_LIGHT\": \"TL_STATE\", \"STATIC_CONTEXT\": \"STATIC\", \"EGO_SPEED\": \"EGO_SPEED\",\n",
    "        \"EGO_ACC\": \"EGO_ACC\", \"EGO_GYRO\": \"EGO_GYRO\", \"PED_ACTION\": \"PED_ACTION\",\n",
    "        \"PED_LOOK\": \"PED_LOOK\", \"PED_OCCLUSION\": \"PED_OCC\",\n",
    "    }\n",
    "    for s in ACTIVE_STREAMS: # Model is built only for ACTIVE_STREAMS\n",
    "        name = f\"INPUT_SIZE_{SPECIAL_CELL2.get(s.upper(), s.upper())}\"\n",
    "        if s == \"bbox\": name = \"INPUT_SIZE_BBOX\"\n",
    "        elif s == \"pose\": name = \"INPUT_SIZE_POSE\"\n",
    "        if name not in globals(): raise ValueError(f\"Input-size const {name} not found.\")\n",
    "        current_input_sizes[s] = globals()[name]\n",
    "\n",
    "    model = MultiStreamWeightedAvgLSTM(\n",
    "        current_input_sizes, LSTM_HIDDEN_SIZE, NUM_LSTM_LAYERS, NUM_CLASSES,\n",
    "        ATTENTION_DIM, DROPOUT_RATE, stream_names=ACTIVE_STREAMS,\n",
    "    ).to(DEVICE)\n",
    "    print(\"\\n--- Model architecture ---\"); print(model)\n",
    "    total_params = sum(p.numel() for p in model.parameters() if p.requires_grad)\n",
    "    print(f\"Trainable parameters: {total_params:,}\\n{'-'*30}\")\n",
    "\n",
    "    print(\"\\nCalculating class weights …\")\n",
    "    train_labels = train_dataset.labels.tolist()\n",
    "    n0, n1 = train_labels.count(0), train_labels.count(1)\n",
    "    total = len(train_labels)\n",
    "    w0, w1 = (1.0,1.0) if total==0 else ( (total/(2.*n0), total/(2.*n1)) if n0>0 and n1>0 else ((0.,1.) if n0==0 else (1.,0.)) )\n",
    "    class_weights = torch.tensor([w0, w1], dtype=torch.float32).to(DEVICE)\n",
    "    print(f\"Loss weights → 0: {w0:.2f}, 1: {w1:.2f}\")\n",
    "    criterion = nn.CrossEntropyLoss(weight=class_weights)\n",
    "    optimizer = optim.Adam(model.parameters(), lr=LEARNING_RATE)\n",
    "\n",
    "    best_val_f1_at_0_5_thresh = -1.0 # F1 at 0.5 threshold for saving model\n",
    "    history = {\"train_loss\": [], \"val_loss\": [], \"train_acc\": [], \"val_acc\": [], \"val_f1_0.5\": []}\n",
    "    best_model_path = \"\"\n",
    "\n",
    "    print(\"\\n--- Starting training ---\")\n",
    "    for epoch in range(NUM_EPOCHS):\n",
    "        t0 = time.time()\n",
    "        train_loss, train_acc = train_epoch(model, train_loader, optimizer, criterion, DEVICE)\n",
    "        # evaluate_epoch returns metrics at 0.5 threshold\n",
    "        epoch_eval_metrics = evaluate_epoch(model, val_loader, criterion, DEVICE)\n",
    "\n",
    "        history[\"train_loss\"].append(train_loss)\n",
    "        history[\"val_loss\"].append(epoch_eval_metrics[\"loss\"])\n",
    "        history[\"train_acc\"].append(train_acc)\n",
    "        history[\"val_acc\"].append(epoch_eval_metrics[\"accuracy\"])\n",
    "        history[\"val_f1_0.5\"].append(epoch_eval_metrics[\"f1\"]) # F1 at 0.5\n",
    "\n",
    "        print(f\"\\nEpoch {epoch + 1:02d}/{NUM_EPOCHS} – {time.time() - t0:.1f}s\")\n",
    "        print(f\"  train loss {train_loss:.4f} | acc {train_acc:.4f}\")\n",
    "        print(f\"  val   loss {epoch_eval_metrics['loss']:.4f} | acc {epoch_eval_metrics['accuracy']:.4f} (at 0.5 thresh)\")\n",
    "        print(f\"           prec {epoch_eval_metrics['precision']:.4f} | rec {epoch_eval_metrics['recall']:.4f} | f1 {epoch_eval_metrics['f1']:.4f} | auc {epoch_eval_metrics['auc']:.4f} (at 0.5 thresh / auc indep.)\")\n",
    "\n",
    "        if epoch_eval_metrics[\"f1\"] > best_val_f1_at_0_5_thresh:\n",
    "            best_val_f1_at_0_5_thresh = epoch_eval_metrics[\"f1\"]\n",
    "            best_model_path = f\"best_model_weighted_{'_'.join(sorted(ACTIVE_STREAMS))}_ep{epoch + 1}.pth\"\n",
    "            torch.save(model.state_dict(), best_model_path)\n",
    "            print(f\"  ✓ new best model saved → {best_model_path} (F1@0.5 {best_val_f1_at_0_5_thresh:.4f})\")\n",
    "    print(\"\\n--- Training finished ---\")\n",
    "\n",
    "    print(\"\\nPlotting training curves …\")\n",
    "    fig, ax = plt.subplots(1, 2, figsize=(12, 5))\n",
    "    ax[0].plot(range(1, NUM_EPOCHS + 1), history[\"train_loss\"], label=\"Train Loss\")\n",
    "    ax[0].plot(range(1, NUM_EPOCHS + 1), history[\"val_loss\"], label=\"Val Loss\")\n",
    "    ax[0].set_xlabel(\"Epoch\"); ax[0].set_ylabel(\"Loss\"); ax[0].set_title(\"Loss curve\"); ax[0].legend(); ax[0].grid(True)\n",
    "    ax[1].plot(range(1, NUM_EPOCHS + 1), history[\"train_acc\"], label=\"Train Acc\")\n",
    "    ax[1].plot(range(1, NUM_EPOCHS + 1), history[\"val_acc\"], label=\"Val Acc (at 0.5)\")\n",
    "    ax[1].plot(range(1, NUM_EPOCHS + 1), history[\"val_f1_0.5\"], \"--\", label=\"Val F1 (at 0.5)\")\n",
    "    ax[1].set_xlabel(\"Epoch\"); ax[1].set_ylabel(\"Metric\"); ax[1].set_title(\"Accuracy & F1 (at 0.5 Thresh)\"); ax[1].legend(); ax[1].grid(True)\n",
    "    plt.tight_layout(); plt.show()\n",
    "\n",
    "    # ------------------- final evaluation (best model) & Threshold Tuning -----------------------\n",
    "    print(\"\\n--- Final Evaluation on Validation set with Threshold Tuning ---\")\n",
    "    if best_model_path and os.path.exists(best_model_path):\n",
    "        try:\n",
    "            model.load_state_dict(torch.load(best_model_path, map_location=DEVICE))\n",
    "            print(f\"Loaded best model: {best_model_path}\")\n",
    "        except Exception as e: print(f\"Warning: could not load best model ({e}). Using last epoch params.\")\n",
    "    else: print(\"Warning: best model not found or path empty, using last epoch parameters.\")\n",
    "\n",
    "    # 1. Get probabilities and true labels from the validation set using the loaded best model\n",
    "    y_true_val, y_probs_val_positive = get_all_probabilities_and_labels(model, val_loader, DEVICE)\n",
    "\n",
    "    if len(y_true_val) == 0:\n",
    "        print(\"Validation set is empty. Cannot perform threshold tuning or final evaluation.\")\n",
    "    else:\n",
    "        # 2. Find the optimal threshold using F1-score\n",
    "        optimal_threshold, best_f1_at_optimal_thresh = find_optimal_threshold(y_true_val, y_probs_val_positive, metric='f1', steps=100)\n",
    "        \n",
    "        # 3. Apply the optimal threshold to get new predictions\n",
    "        y_pred_val_tuned = get_predictions_at_threshold(y_probs_val_positive, optimal_threshold)\n",
    "\n",
    "        # 4. Calculate metrics using the tuned predictions\n",
    "        final_accuracy_tuned = accuracy_score(y_true_val, y_pred_val_tuned)\n",
    "        final_precision_tuned, final_recall_tuned, final_f1_tuned, _ = \\\n",
    "            precision_recall_fscore_support(y_true_val, y_pred_val_tuned, average='binary', pos_label=1, zero_division=0)\n",
    "        \n",
    "        final_auc_val = roc_auc_score(y_true_val, y_probs_val_positive) if len(np.unique(y_true_val)) > 1 else float('nan')\n",
    "\n",
    "        cm_tuned = confusion_matrix(y_true_val, y_pred_val_tuned, labels=[0, 1])\n",
    "\n",
    "        print(\"\\n--- Final metrics (Weighted Avg Fusion) with Tuned Threshold ---\")\n",
    "        print(f\"{'Optimal Threshold':<20}: {optimal_threshold:.4f}\")\n",
    "        print(f\"{'Accuracy':<20}: {final_accuracy_tuned:.4f}\")\n",
    "        print(f\"{'Precision':<20}: {final_precision_tuned:.4f}\")\n",
    "        print(f\"{'Recall':<20}: {final_recall_tuned:.4f}\")\n",
    "        print(f\"{'F1-score':<20}: {final_f1_tuned:.4f} (Max F1 at optimal threshold)\")\n",
    "        print(f\"{'AUC':<20}: {final_auc_val:.4f}\")\n",
    "        print(f\"(Best F1@0.5 during training: {best_val_f1_at_0_5_thresh:.4f})\")\n",
    "\n",
    "        ConfusionMatrixDisplay(cm_tuned, display_labels=[\"Not Crossing\", \"Crossing\"]).plot(cmap=plt.cm.Blues)\n",
    "        plt.title(f\"Confusion Matrix (Optimal Threshold: {optimal_threshold:.2f})\")\n",
    "        plt.show()\n",
    "\n",
    "    if hasattr(model, \"fusion_weights\"):\n",
    "        w = torch.softmax(model.fusion_weights, 0).detach().cpu().numpy()\n",
    "        print(\"\\n--- Learned fusion weights (from best model) ---\")\n",
    "        for stream, weight in zip(model.stream_names, w): print(f\"{stream:<15}: {weight:.4f}\")\n",
    "        print(\"-\" * 30)\n",
    "\n",
    "    print(\"\\n--- CELL 2: Script complete ---\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7f6584da",
   "metadata": {
    "papermill": {
     "duration": 0.009651,
     "end_time": "2025-05-11T18:40:24.985645",
     "exception": false,
     "start_time": "2025-05-11T18:40:24.975994",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 6993690,
     "sourceId": 11201333,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6993708,
     "sourceId": 11201362,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6993722,
     "sourceId": 11201388,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6993740,
     "sourceId": 11201422,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6993794,
     "sourceId": 11201506,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6993809,
     "sourceId": 11201543,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7034191,
     "sourceId": 11255589,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7127490,
     "sourceId": 11382982,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7142036,
     "sourceId": 11402679,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7333398,
     "sourceId": 11684148,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7357780,
     "sourceId": 11720877,
     "sourceType": "datasetVersion"
    },
    {
     "modelId": 279383,
     "modelInstanceId": 258142,
     "sourceId": 302300,
     "sourceType": "modelInstanceVersion"
    },
    {
     "modelId": 283333,
     "modelInstanceId": 262207,
     "sourceId": 307831,
     "sourceType": "modelInstanceVersion"
    },
    {
     "modelId": 288527,
     "modelInstanceId": 267476,
     "sourceId": 316944,
     "sourceType": "modelInstanceVersion"
    },
    {
     "modelId": 297682,
     "modelInstanceId": 276781,
     "sourceId": 329886,
     "sourceType": "modelInstanceVersion"
    },
    {
     "modelId": 297702,
     "modelInstanceId": 276800,
     "sourceId": 329908,
     "sourceType": "modelInstanceVersion"
    },
    {
     "isSourceIdPinned": true,
     "modelId": 314775,
     "modelInstanceId": 294156,
     "sourceId": 352620,
     "sourceType": "modelInstanceVersion"
    }
   ],
   "dockerImageVersionId": 30918,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4181.550326,
   "end_time": "2025-05-11T18:40:29.028601",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-11T17:30:47.478275",
   "version": "2.6.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "001bf9360abd4e58bac57a9687e8dd2e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_b1585c71d9cd45edb8c50275b491eae7",
        "IPY_MODEL_c1fd4f87e5a44d4ea17f596e483626f9",
        "IPY_MODEL_5bf27098caec4091a523cfa399d5b428"
       ],
       "layout": "IPY_MODEL_8c26139ea9e544d3ab6ef9acb5e7d721",
       "tabbable": null,
       "tooltip": null
      }
     },
     "00d8b5e472e446fdb2600ceeacf9c460": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_532d281f406645a7bff9d2cd329d0c15",
       "placeholder": "​",
       "style": "IPY_MODEL_748e34abc3444d0fadb01df814317193",
       "tabbable": null,
       "tooltip": null,
       "value": "Tuning Threshold (F1): 100%"
      }
     },
     "011c113a5e8e45b18ad76b012869c8af": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "011ed2ed71fc458ba91d1c27d64afbda": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0627be3c9f82448c9c25d88761570f34",
       "placeholder": "​",
       "style": "IPY_MODEL_bae10799a46946ef9f4bd19405fbdb8d",
       "tabbable": null,
       "tooltip": null,
       "value": " 6557/6559 [06:14&lt;00:00, 16.67it/s]"
      }
     },
     "0230e679d7cf402789d982e90cae0f15": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "0627be3c9f82448c9c25d88761570f34": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0b409318cae54f6fba7f7f3a9c8ff495": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_3c27af727c934720b1690d9e63cce771",
        "IPY_MODEL_f4aee3f2096241f1a2349eef62a417bb",
        "IPY_MODEL_8a24e78b23b646148897136f158766e0"
       ],
       "layout": "IPY_MODEL_802cef5f9dcd45719729b876420b7b11",
       "tabbable": null,
       "tooltip": null
      }
     },
     "0ca2196810b24dce8ba89d41c19e4bf8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "0d998e59ec0847ae949e2ebcf1c34ce3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_77826d94e9c24674887a786818a9be74",
       "placeholder": "​",
       "style": "IPY_MODEL_a534858c8e554f488525d76d4b02ee0a",
       "tabbable": null,
       "tooltip": null,
       "value": " 604532/604532 [24:49&lt;00:00, 689.81it/s]"
      }
     },
     "0ee969d643bc4049944279f22636f0aa": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "0f3eee60b350447998b22b5f375f14f3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "0f9c3c62c4e145509f7a7ac3edc39f19": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "12efcffef8cc48f79cb72e7ab691be16": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_f60e3949f3764392bc986dad25a93473",
        "IPY_MODEL_2754000bd0ff47da87a39dd505556ade",
        "IPY_MODEL_011ed2ed71fc458ba91d1c27d64afbda"
       ],
       "layout": "IPY_MODEL_b3d34d4a9e7b414686597e5a83e4e88b",
       "tabbable": null,
       "tooltip": null
      }
     },
     "142cb36fdc1044908d0513573b64ccae": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "1436d6e306d74ea2ba67c6e8d01b2a8a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5c419dacb51f4386b654209614af1968",
       "placeholder": "​",
       "style": "IPY_MODEL_e7376c57c239433895bb6cd6939eed4d",
       "tabbable": null,
       "tooltip": null,
       "value": "seq: 100%"
      }
     },
     "14378f2332f84a119c54642db3947d07": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1484cbf7847e49a7b5bd457d0f378931": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_dd5d6d3aca714a4bb44167ae7d1593af",
        "IPY_MODEL_4ffbebcfc897440da71d607998c0d547",
        "IPY_MODEL_52acf145eda94adf9489ec67a9d27709"
       ],
       "layout": "IPY_MODEL_61ee37e4a6e94ab79ae1979cd92b6eb3",
       "tabbable": null,
       "tooltip": null
      }
     },
     "14903014cb3c40d59a0c3c790e76ab2f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "15493385dd8646a69fb37d7e83fc1241": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "176790c80f6a412aaa7dbb50ed2e9550": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "182b313af3b84976b9dfe5cd2ea16c4b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "1b629d9a5e53455b854fdd22f2ca2edb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_72e584b54aac4e51aa740cfc251c2335",
        "IPY_MODEL_483009cf9c5b4422bf687bf91c4be1c6",
        "IPY_MODEL_f1c72c82972f4b84860dadcd01a31ec1"
       ],
       "layout": "IPY_MODEL_0ca2196810b24dce8ba89d41c19e4bf8",
       "tabbable": null,
       "tooltip": null
      }
     },
     "1d0478c00bf540e19ef34f068e4416d7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_cfc26223a1f2441c9b2e283fb0fcd3a4",
       "placeholder": "​",
       "style": "IPY_MODEL_cbffa60ecd5b4aa981a2354d94fe242a",
       "tabbable": null,
       "tooltip": null,
       "value": " 3/? [00:00&lt;00:00, 13.04it/s]"
      }
     },
     "2300c9c5f93d4b0a9c49f0034635cebf": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5f09cf4ee148456eb1aacd27e8f881c7",
       "placeholder": "​",
       "style": "IPY_MODEL_ae24fabf792a4e5a908bdf1e21f87b9a",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "235e11d6284b43d394e234b56e2630fd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_475a24b31abf4a75835e2108dd08c1f6",
       "placeholder": "​",
       "style": "IPY_MODEL_a600c5d6384b4d038a8191527431c569",
       "tabbable": null,
       "tooltip": null,
       "value": " 16/? [00:01&lt;00:00, 10.23it/s]"
      }
     },
     "2467b3846ccf4562afeb79680ebca258": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "25fab2bb822f49869663d26a30ebd3a8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_14378f2332f84a119c54642db3947d07",
       "placeholder": "​",
       "style": "IPY_MODEL_53c8993a453448e49070034159b95631",
       "tabbable": null,
       "tooltip": null,
       "value": " 6558/6559 [06:11&lt;00:00, 16.98it/s]"
      }
     },
     "26129d8759cb4b889bb8e3da162e4c54": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "2652ab37fcaf4640b49a94a78ffc4924": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_a95de4efa84a41a89e2514adb0ad73b1",
       "placeholder": "​",
       "style": "IPY_MODEL_0230e679d7cf402789d982e90cae0f15",
       "tabbable": null,
       "tooltip": null,
       "value": " 6557/6559 [06:11&lt;00:00, 16.75it/s]"
      }
     },
     "26b988d444ba4d2da47796657b39c997": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "2754000bd0ff47da87a39dd505556ade": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_8903bbe51b8e4d5db62120e05acc458e",
       "max": 6559.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_011c113a5e8e45b18ad76b012869c8af",
       "tabbable": null,
       "tooltip": null,
       "value": 6559.0
      }
     },
     "27fdbd749b764535b15e7a117cbe4178": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "29ec17894b0a40f5ad1dbd41a5ac0b3e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "2b8cf83985a6485daed1bf556129549b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2bcc1585a448465382dbb2ebb3e38e8f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "2c443223910d49ed9a0cb5901d0dde92": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "2d4d4f341445448db28e437a6c7f2279": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5ea0b34f77c54e63bfc0bcc58a2a39d2",
       "placeholder": "​",
       "style": "IPY_MODEL_0f9c3c62c4e145509f7a7ac3edc39f19",
       "tabbable": null,
       "tooltip": null,
       "value": " 19/? [00:01&lt;00:00, 11.96it/s]"
      }
     },
     "2d510ed5ed0d439c82bb3417b9422ad7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "2fe9436f6d73479f887bf3929163de21": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "312a9f909c764776a9a74c458ef9816f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ad171e3a32294ffbb95bc2c1c94f2ae4",
       "max": 6559.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_8529ce6973884c00acd24ea259a733a7",
       "tabbable": null,
       "tooltip": null,
       "value": 6559.0
      }
     },
     "3279a675443f43a0aaf66178e1d031aa": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_cbf8dc9a1d034a2fa98268d66e6a4a67",
        "IPY_MODEL_868828fc3efd456eb8f7a7d641e672c3",
        "IPY_MODEL_929f531c68e54d859100ab7297b36cf6"
       ],
       "layout": "IPY_MODEL_29ec17894b0a40f5ad1dbd41a5ac0b3e",
       "tabbable": null,
       "tooltip": null
      }
     },
     "330eb7485cd24f4fad8a89b075015134": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "39955446c5e943eab7565c764388d994": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "3ac154295ce2467a9a70048b462082d2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "3c1070a21c2347b9a3cb2e0dc97eaeb3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "3c27af727c934720b1690d9e63cce771": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ab8011f1930b4bf49f971b5e289edc60",
       "placeholder": "​",
       "style": "IPY_MODEL_f44b1f78562d416d89eabf23e4415f65",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "423c98b8d92f42489bf0df94fa263b28": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "45bd5b06ce724354a35353d8fbcef213": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "46da69939c4148188cf67b0f9ae167c1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "46e7cb86d25f4b1bbadeb60455e40f6a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "info",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_70fe3be6343149ee8d4ca9c54e0b45f9",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_61815860a47a4e72b2ed50bdc27b49ae",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "475a24b31abf4a75835e2108dd08c1f6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "483009cf9c5b4422bf687bf91c4be1c6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_829132fcd30440b7a9ed22a06a173cd6",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_6c1347588eda443eab5a6a946fe93172",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "48621e6ecba44b75ac3c1e4d0692cbd7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "4aa7063526fd42be97faa1fe89f01080": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "4add3e2a50cb414eaf3703a06ca30751": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f6a9eec72a87463fae9fe7de85e65783",
       "max": 604532.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_2c443223910d49ed9a0cb5901d0dde92",
       "tabbable": null,
       "tooltip": null,
       "value": 604532.0
      }
     },
     "4b508c40f6b84e8aa27909918f982112": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4df38b04f1ac4de8a25109baa68e32bf": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "4ffbebcfc897440da71d607998c0d547": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_6285baf0e3e544baa040470b9e50a432",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_c268ada44a774a8ea65d5fc76785b89c",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "51d29c9e4e2a4291802f1f6bc0c64921": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "52acf145eda94adf9489ec67a9d27709": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4b508c40f6b84e8aa27909918f982112",
       "placeholder": "​",
       "style": "IPY_MODEL_14903014cb3c40d59a0c3c790e76ab2f",
       "tabbable": null,
       "tooltip": null,
       "value": " 2414/2416 [01:57&lt;00:00, 13.01it/s]"
      }
     },
     "5323a369e31542f6bbf91451f7bc2088": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "532d281f406645a7bff9d2cd329d0c15": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "53c8993a453448e49070034159b95631": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "55a5227eba744ce2a6a934e8da6975b7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "57021af432bb4771ade8dd9bdfd3066c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "572373a55ae749c2b864dba3af600a8f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "58ee55f694a94baab4a1606eb138b584": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "5a7e679d9a294ba986ea729f48d6c131": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_8e76c6a8255c4111bdf6277db236ba62",
        "IPY_MODEL_cbbd8d8443f54ebeaa517a901fbe2ba4",
        "IPY_MODEL_8ef00eeb788d4df8a3e284992cd208e9"
       ],
       "layout": "IPY_MODEL_a71fc27fed1e48b9ba818e501985b57f",
       "tabbable": null,
       "tooltip": null
      }
     },
     "5bac832242574c8cb2ce34ca21f2587a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "5bf27098caec4091a523cfa399d5b428": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_46da69939c4148188cf67b0f9ae167c1",
       "placeholder": "​",
       "style": "IPY_MODEL_182b313af3b84976b9dfe5cd2ea16c4b",
       "tabbable": null,
       "tooltip": null,
       "value": " 3/? [00:00&lt;00:00,  8.44it/s]"
      }
     },
     "5c09b3e13ad64015b3f4926b7f25543b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "5c419dacb51f4386b654209614af1968": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5e05246c71e74dc6a6836629007855c1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5ea0b34f77c54e63bfc0bcc58a2a39d2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5f09cf4ee148456eb1aacd27e8f881c7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5f90d8cf5c3748729c6a74fbba8551ab": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "61815860a47a4e72b2ed50bdc27b49ae": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "61ee37e4a6e94ab79ae1979cd92b6eb3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "6285baf0e3e544baa040470b9e50a432": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "62bff5571db14638ac2e7e562a14ead9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "641cdd3c69794fa89eba87d22455f36e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_62bff5571db14638ac2e7e562a14ead9",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_2d510ed5ed0d439c82bb3417b9422ad7",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "6620355a3b734fc6aefb1c607bd076a6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "6983b2a934df4d19a97241ef2a61b88e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "6c1347588eda443eab5a6a946fe93172": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "706a947a78ae485dad9cf68222ce514c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "70fe3be6343149ee8d4ca9c54e0b45f9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "7143b0582a00459f8b30bf9eb748104e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_be791a9d4db14dd8a8630d6d5fb62958",
       "max": 6559.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_e3a55c691d6d4d4685a75c10534a2111",
       "tabbable": null,
       "tooltip": null,
       "value": 6559.0
      }
     },
     "72e584b54aac4e51aa740cfc251c2335": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c164cacc52824627a797537bb0f8cdd1",
       "placeholder": "​",
       "style": "IPY_MODEL_8fa6945b50244c5ead0a0c9daa649042",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "748e34abc3444d0fadb01df814317193": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "757ce734932d4f9ca0355bc1bb1285b8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9deeebe5a2be4f379e78a68f539e3315",
       "placeholder": "​",
       "style": "IPY_MODEL_ba51ebaba42c44848090793d92b246a7",
       "tabbable": null,
       "tooltip": null,
       "value": " 6558/6559 [06:26&lt;00:00, 17.02it/s]"
      }
     },
     "774f19339fdc4f44921efcd6fd8954ce": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f957b9cf7b0e4d33b3b37f227bc0c187",
       "placeholder": "​",
       "style": "IPY_MODEL_2fe9436f6d73479f887bf3929163de21",
       "tabbable": null,
       "tooltip": null,
       "value": " 2416/2416 [01:57&lt;00:00, 13.05it/s]"
      }
     },
     "77826d94e9c24674887a786818a9be74": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "796c85bcc8734e5c864d33537844b31d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "79bbc189f2274350829783e72045b11b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7b78ac76e37340038969b897d521efbb": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "7c8ac47da65d4f78bba432b366194dc4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "7ee7cba613e5432eb395db060c1354d1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_aa8c008c1ce543fcb726589142a9f567",
       "placeholder": "​",
       "style": "IPY_MODEL_3c1070a21c2347b9a3cb2e0dc97eaeb3",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "7f5942f6f66f44da9c2d494d11be71c6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_2b8cf83985a6485daed1bf556129549b",
       "max": 101.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_b8816169d4ce4cb3bc36b49ad4e08083",
       "tabbable": null,
       "tooltip": null,
       "value": 101.0
      }
     },
     "802cef5f9dcd45719729b876420b7b11": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "80ac779b3fcd4aee9223d6890977755e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "80d54bb83571472b86b04d5610411e8a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "829132fcd30440b7a9ed22a06a173cd6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8376aeaf25464a9298283027b6a25e11": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "83d532a8d57f4d7f83f36cf2247d18a5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8529ce6973884c00acd24ea259a733a7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "863294a8e4d34e41ab4bb18853cab04f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_1436d6e306d74ea2ba67c6e8d01b2a8a",
        "IPY_MODEL_4add3e2a50cb414eaf3703a06ca30751",
        "IPY_MODEL_0d998e59ec0847ae949e2ebcf1c34ce3"
       ],
       "layout": "IPY_MODEL_f889ff3728e14e0eb0299b3a871f74f0",
       "tabbable": null,
       "tooltip": null
      }
     },
     "868828fc3efd456eb8f7a7d641e672c3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_27fdbd749b764535b15e7a117cbe4178",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_f678f0b4124d42e48f332cf80f714964",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "8753f4af497c460e9f93cc9664975d55": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_51d29c9e4e2a4291802f1f6bc0c64921",
       "placeholder": "​",
       "style": "IPY_MODEL_887bce5f91354f4585c1a3568c22e152",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "887bce5f91354f4585c1a3568c22e152": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "889730f38e4b42d8a0613110dc3e2945": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "8903bbe51b8e4d5db62120e05acc458e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8a24e78b23b646148897136f158766e0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5f90d8cf5c3748729c6a74fbba8551ab",
       "placeholder": "​",
       "style": "IPY_MODEL_f2cd26e7f3814222aeee72dfd7771b2f",
       "tabbable": null,
       "tooltip": null,
       "value": " 2416/2416 [01:57&lt;00:00, 14.60it/s]"
      }
     },
     "8c26139ea9e544d3ab6ef9acb5e7d721": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "8c60103722cb4ce1aa7729f941768a45": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5e05246c71e74dc6a6836629007855c1",
       "placeholder": "​",
       "style": "IPY_MODEL_80ac779b3fcd4aee9223d6890977755e",
       "tabbable": null,
       "tooltip": null,
       "value": ""
      }
     },
     "8e76c6a8255c4111bdf6277db236ba62": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ec29a7b88aae4d9dbe2760d13a66fdd2",
       "placeholder": "​",
       "style": "IPY_MODEL_6620355a3b734fc6aefb1c607bd076a6",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "8ef00eeb788d4df8a3e284992cd208e9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ca4516d80907479a9f952c22f8b283a1",
       "placeholder": "​",
       "style": "IPY_MODEL_7c8ac47da65d4f78bba432b366194dc4",
       "tabbable": null,
       "tooltip": null,
       "value": " 2416/2416 [01:57&lt;00:00, 15.89it/s]"
      }
     },
     "8fa6945b50244c5ead0a0c9daa649042": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "906db0a6356549758a6647af81ecd326": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "92951b590ad943bfb2054febe62cb5c0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "929f531c68e54d859100ab7297b36cf6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_796c85bcc8734e5c864d33537844b31d",
       "placeholder": "​",
       "style": "IPY_MODEL_0ee969d643bc4049944279f22636f0aa",
       "tabbable": null,
       "tooltip": null,
       "value": " 2414/2416 [01:56&lt;00:00, 11.67it/s]"
      }
     },
     "95ef8051315f4ba08f23b3fcc13894f9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_be6071322d1145b2bbe53e2444ccfef4",
       "placeholder": "​",
       "style": "IPY_MODEL_3ac154295ce2467a9a70048b462082d2",
       "tabbable": null,
       "tooltip": null,
       "value": ""
      }
     },
     "96a6b85933c8467c994f6d0164e9946f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "98923e73d46b4a04b780fa59f67306b4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "9deeebe5a2be4f379e78a68f539e3315": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a05560c413a34bce9b98c9bbec00f25b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "info",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_80d54bb83571472b86b04d5610411e8a",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_5323a369e31542f6bbf91451f7bc2088",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "a1ffacc7d6904a3dab996c3dc5adf73a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_accdcdbf85194d6aa3e3fd136fc08cd6",
        "IPY_MODEL_46e7cb86d25f4b1bbadeb60455e40f6a",
        "IPY_MODEL_2d4d4f341445448db28e437a6c7f2279"
       ],
       "layout": "IPY_MODEL_bb365d3c5d6742c7bac7cb9a1f83d4e8",
       "tabbable": null,
       "tooltip": null
      }
     },
     "a534858c8e554f488525d76d4b02ee0a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "a58a8433f66e4050b1fcd7a999549263": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a600c5d6384b4d038a8191527431c569": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "a71fc27fed1e48b9ba818e501985b57f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "a95de4efa84a41a89e2514adb0ad73b1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "aa8c008c1ce543fcb726589142a9f567": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ab8011f1930b4bf49f971b5e289edc60": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ab899edf703b411d835370fd90347fe1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_8376aeaf25464a9298283027b6a25e11",
       "placeholder": "​",
       "style": "IPY_MODEL_0f3eee60b350447998b22b5f375f14f3",
       "tabbable": null,
       "tooltip": null,
       "value": " 6557/6559 [06:11&lt;00:00, 17.21it/s]"
      }
     },
     "accdcdbf85194d6aa3e3fd136fc08cd6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_92951b590ad943bfb2054febe62cb5c0",
       "placeholder": "​",
       "style": "IPY_MODEL_889730f38e4b42d8a0613110dc3e2945",
       "tabbable": null,
       "tooltip": null,
       "value": ""
      }
     },
     "ad171e3a32294ffbb95bc2c1c94f2ae4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ae24fabf792a4e5a908bdf1e21f87b9a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "b1585c71d9cd45edb8c50275b491eae7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_a58a8433f66e4050b1fcd7a999549263",
       "placeholder": "​",
       "style": "IPY_MODEL_142cb36fdc1044908d0513573b64ccae",
       "tabbable": null,
       "tooltip": null,
       "value": ""
      }
     },
     "b1c9434bb4f84edcabd988d8e1491d4c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_95ef8051315f4ba08f23b3fcc13894f9",
        "IPY_MODEL_a05560c413a34bce9b98c9bbec00f25b",
        "IPY_MODEL_1d0478c00bf540e19ef34f068e4416d7"
       ],
       "layout": "IPY_MODEL_6983b2a934df4d19a97241ef2a61b88e",
       "tabbable": null,
       "tooltip": null
      }
     },
     "b3d34d4a9e7b414686597e5a83e4e88b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "b74a82aaa6534f02ad3180ccd310db87": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_7ee7cba613e5432eb395db060c1354d1",
        "IPY_MODEL_d8d2d22933b04d86b518303e599652a9",
        "IPY_MODEL_2652ab37fcaf4640b49a94a78ffc4924"
       ],
       "layout": "IPY_MODEL_ce29fb92bcad47fb987660eb980ba3ca",
       "tabbable": null,
       "tooltip": null
      }
     },
     "b8816169d4ce4cb3bc36b49ad4e08083": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "ba51ebaba42c44848090793d92b246a7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "bae10799a46946ef9f4bd19405fbdb8d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "bb365d3c5d6742c7bac7cb9a1f83d4e8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "be6071322d1145b2bbe53e2444ccfef4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "be791a9d4db14dd8a8630d6d5fb62958": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c164cacc52824627a797537bb0f8cdd1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c1fd4f87e5a44d4ea17f596e483626f9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "info",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_706a947a78ae485dad9cf68222ce514c",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_2bcc1585a448465382dbb2ebb3e38e8f",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "c268ada44a774a8ea65d5fc76785b89c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "c2bcffd7c3d9441f9e3036f2ebad3a8f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "c3e989a3e55749cba2b89383d5e2aeee": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_cc484e15c45746149c4f70622802f786",
        "IPY_MODEL_312a9f909c764776a9a74c458ef9816f",
        "IPY_MODEL_25fab2bb822f49869663d26a30ebd3a8"
       ],
       "layout": "IPY_MODEL_98923e73d46b4a04b780fa59f67306b4",
       "tabbable": null,
       "tooltip": null
      }
     },
     "c67542179e9f415580140e8575b118d4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c8ab486ea2514d23aa068c82d30223ec": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ca4516d80907479a9f952c22f8b283a1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "cbbd8d8443f54ebeaa517a901fbe2ba4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_906db0a6356549758a6647af81ecd326",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_2467b3846ccf4562afeb79680ebca258",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "cbf8dc9a1d034a2fa98268d66e6a4a67": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_79bbc189f2274350829783e72045b11b",
       "placeholder": "​",
       "style": "IPY_MODEL_5c09b3e13ad64015b3f4926b7f25543b",
       "tabbable": null,
       "tooltip": null,
       "value": "Getting Probs &amp; Labels for Threshold Tuning: 100%"
      }
     },
     "cbffa60ecd5b4aa981a2354d94fe242a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "cc484e15c45746149c4f70622802f786": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_83d532a8d57f4d7f83f36cf2247d18a5",
       "placeholder": "​",
       "style": "IPY_MODEL_423c98b8d92f42489bf0df94fa263b28",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "ce29fb92bcad47fb987660eb980ba3ca": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "cfc26223a1f2441c9b2e283fb0fcd3a4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "cfca76106c944333b6fec35dfbc3a45f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_2300c9c5f93d4b0a9c49f0034635cebf",
        "IPY_MODEL_fee54f8dd0ea4c94bca0db19bbe4e9b0",
        "IPY_MODEL_ab899edf703b411d835370fd90347fe1"
       ],
       "layout": "IPY_MODEL_d98e47ead0f8443d91c2027f1e58ef0d",
       "tabbable": null,
       "tooltip": null
      }
     },
     "d04ebb25e76e4a16b2f56e17117393db": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "d8d2d22933b04d86b518303e599652a9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_15493385dd8646a69fb37d7e83fc1241",
       "max": 6559.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_55a5227eba744ce2a6a934e8da6975b7",
       "tabbable": null,
       "tooltip": null,
       "value": 6559.0
      }
     },
     "d98e47ead0f8443d91c2027f1e58ef0d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "da8b9ab169da453a933ba8a0610ab800": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "dd5d6d3aca714a4bb44167ae7d1593af": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c8ab486ea2514d23aa068c82d30223ec",
       "placeholder": "​",
       "style": "IPY_MODEL_96a6b85933c8467c994f6d0164e9946f",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "e3a55c691d6d4d4685a75c10534a2111": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "e7376c57c239433895bb6cd6939eed4d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "ec29a7b88aae4d9dbe2760d13a66fdd2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ed052cd971fc4d29893b870143b1ddbc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_00d8b5e472e446fdb2600ceeacf9c460",
        "IPY_MODEL_7f5942f6f66f44da9c2d494d11be71c6",
        "IPY_MODEL_ed59c06d238c4301acd28e6b471d7f63"
       ],
       "layout": "IPY_MODEL_7b78ac76e37340038969b897d521efbb",
       "tabbable": null,
       "tooltip": null
      }
     },
     "ed59c06d238c4301acd28e6b471d7f63": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_45bd5b06ce724354a35353d8fbcef213",
       "placeholder": "​",
       "style": "IPY_MODEL_26b988d444ba4d2da47796657b39c997",
       "tabbable": null,
       "tooltip": null,
       "value": " 101/101 [00:03&lt;00:00, 31.25it/s]"
      }
     },
     "ee40fcba6624401980c23d5b1b244950": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "info",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_48621e6ecba44b75ac3c1e4d0692cbd7",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_58ee55f694a94baab4a1606eb138b584",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "f0028a781d4f443bac742041b0cb5715": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_8c60103722cb4ce1aa7729f941768a45",
        "IPY_MODEL_ee40fcba6624401980c23d5b1b244950",
        "IPY_MODEL_235e11d6284b43d394e234b56e2630fd"
       ],
       "layout": "IPY_MODEL_5bac832242574c8cb2ce34ca21f2587a",
       "tabbable": null,
       "tooltip": null
      }
     },
     "f1c72c82972f4b84860dadcd01a31ec1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_330eb7485cd24f4fad8a89b075015134",
       "placeholder": "​",
       "style": "IPY_MODEL_26129d8759cb4b889bb8e3da162e4c54",
       "tabbable": null,
       "tooltip": null,
       "value": " 2415/2416 [01:58&lt;00:00, 12.32it/s]"
      }
     },
     "f21d28aa1eb542cca34de71665b2f623": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_8753f4af497c460e9f93cc9664975d55",
        "IPY_MODEL_7143b0582a00459f8b30bf9eb748104e",
        "IPY_MODEL_757ce734932d4f9ca0355bc1bb1285b8"
       ],
       "layout": "IPY_MODEL_57021af432bb4771ade8dd9bdfd3066c",
       "tabbable": null,
       "tooltip": null
      }
     },
     "f2cd26e7f3814222aeee72dfd7771b2f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f3e45495f0de4417aaf7617b8aa2d9ee": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_f79a924a044d4d34b8f791fdad756b0a",
        "IPY_MODEL_641cdd3c69794fa89eba87d22455f36e",
        "IPY_MODEL_774f19339fdc4f44921efcd6fd8954ce"
       ],
       "layout": "IPY_MODEL_4aa7063526fd42be97faa1fe89f01080",
       "tabbable": null,
       "tooltip": null
      }
     },
     "f44b1f78562d416d89eabf23e4415f65": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f4aee3f2096241f1a2349eef62a417bb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_572373a55ae749c2b864dba3af600a8f",
       "max": 2416.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_d04ebb25e76e4a16b2f56e17117393db",
       "tabbable": null,
       "tooltip": null,
       "value": 2416.0
      }
     },
     "f60e3949f3764392bc986dad25a93473": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_176790c80f6a412aaa7dbb50ed2e9550",
       "placeholder": "​",
       "style": "IPY_MODEL_4df38b04f1ac4de8a25109baa68e32bf",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "f678f0b4124d42e48f332cf80f714964": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "f6a9eec72a87463fae9fe7de85e65783": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f79a924a044d4d34b8f791fdad756b0a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_da8b9ab169da453a933ba8a0610ab800",
       "placeholder": "​",
       "style": "IPY_MODEL_39955446c5e943eab7565c764388d994",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "f889ff3728e14e0eb0299b3a871f74f0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f957b9cf7b0e4d33b3b37f227bc0c187": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "fee54f8dd0ea4c94bca0db19bbe4e9b0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c67542179e9f415580140e8575b118d4",
       "max": 6559.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_c2bcffd7c3d9441f9e3036f2ebad3a8f",
       "tabbable": null,
       "tooltip": null,
       "value": 6559.0
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
