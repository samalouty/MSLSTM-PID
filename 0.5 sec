{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3c68a51a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T15:19:16.749252Z",
     "iopub.status.busy": "2025-05-01T15:19:16.748965Z",
     "iopub.status.idle": "2025-05-01T15:19:26.963166Z",
     "shell.execute_reply": "2025-05-01T15:19:26.961996Z"
    },
    "papermill": {
     "duration": 10.226579,
     "end_time": "2025-05-01T15:19:26.965035",
     "exception": false,
     "start_time": "2025-05-01T15:19:16.738456",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cloning into 'PIE'...\r\n",
      "remote: Enumerating objects: 178, done.\u001b[K\r\n",
      "remote: Counting objects: 100% (93/93), done.\u001b[K\r\n",
      "remote: Compressing objects: 100% (74/74), done.\u001b[K\r\n",
      "remote: Total 178 (delta 32), reused 75 (delta 17), pack-reused 85 (from 1)\u001b[K\r\n",
      "Receiving objects: 100% (178/178), 144.63 MiB | 21.65 MiB/s, done.\r\n",
      "Resolving deltas: 100% (73/73), done.\r\n",
      "Updating files: 100% (41/41), done.\r\n",
      "unzip:  cannot find or open /content/PIE/annotations/annotations.zip, /content/PIE/annotations/annotations.zip.zip or /content/PIE/annotations/annotations.zip.ZIP.\r\n",
      "unzip:  cannot find or open /content/PIE/annotations/annotations_vehicle.zip, /content/PIE/annotations/annotations_vehicle.zip.zip or /content/PIE/annotations/annotations_vehicle.zip.ZIP.\r\n"
     ]
    }
   ],
   "source": [
    "!git clone https://github.com/aras62/PIE.git\n",
    "!unzip /content/PIE/annotations/annotations.zip -d /content/PIE\n",
    "!unzip /content/PIE/annotations/annotations_vehicle.zip -d /content/PIE\n",
    "# !git clone https://github.com/hustvl/YOLOP.git\n",
    "!mkdir /kaggle/working/PIE/content"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "cfcf9c7f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T15:19:26.990401Z",
     "iopub.status.busy": "2025-05-01T15:19:26.990133Z",
     "iopub.status.idle": "2025-05-01T15:19:32.527722Z",
     "shell.execute_reply": "2025-05-01T15:19:32.526726Z"
    },
    "papermill": {
     "duration": 5.549072,
     "end_time": "2025-05-01T15:19:32.529317",
     "exception": false,
     "start_time": "2025-05-01T15:19:26.980245",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.0/1.0 MB\u001b[0m \u001b[31m17.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h"
     ]
    }
   ],
   "source": [
    "!pip install -q ultralytics opencv-python-headless "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8a2fc5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T15:19:32.549580Z",
     "iopub.status.busy": "2025-05-01T15:19:32.549309Z",
     "iopub.status.idle": "2025-05-01T15:19:32.555129Z",
     "shell.execute_reply": "2025-05-01T15:19:32.554439Z"
    },
    "papermill": {
     "duration": 0.017559,
     "end_time": "2025-05-01T15:19:32.556373",
     "exception": false,
     "start_time": "2025-05-01T15:19:32.538814",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import os\n",
    "# import pickle\n",
    "# import sys\n",
    "# import numpy as np\n",
    "# from tqdm.notebook import tqdm\n",
    "# import random\n",
    "\n",
    "# print(\"--- PIE Database Cache Verification Script ---\")\n",
    "\n",
    "# # --- Configuration ---\n",
    "# # <<< --- SET THIS TO THE LOCATION OF YOUR GENERATED CACHE --- >>>\n",
    "# PKL_FILE_PATH = \"/kaggle/working/PIE/data_cache/pie_database.pkl\"\n",
    "# # <<< --- END CONFIGURATION --- >>>\n",
    "\n",
    "# # Define expected top-level keys (these are the set IDs)\n",
    "# EXPECTED_SETS = {'set01', 'set02', 'set03', 'set04', 'set05', 'set06'}\n",
    "\n",
    "# # Define expected keys within each video dictionary\n",
    "# EXPECTED_VIDEO_KEYS = {'num_frames', 'width', 'height',\n",
    "#                        'ped_annotations', 'traffic_annotations', 'vehicle_annotations'}\n",
    "\n",
    "# # Define expected keys within each pedestrian annotation dictionary\n",
    "# EXPECTED_PED_KEYS = {'frames', 'bbox', 'occlusion', 'behavior', 'attributes'}\n",
    "# EXPECTED_PED_BEHAVIOR_KEYS = {'gesture', 'look', 'action', 'cross'}\n",
    "# # Attributes can vary, so we won't check all exhaustively here, but check presence\n",
    "\n",
    "# # Define expected keys within vehicle (ego) frame dictionary (sample)\n",
    "# EXPECTED_EGO_FRAME_KEYS = {'OBD_speed', 'GPS_speed', 'accX', 'accY', 'accZ',\n",
    "#                            'gyroX', 'gyroY', 'gyroZ', 'heading_angle', 'latitude',\n",
    "#                            'longitude', 'pitch', 'roll', 'yaw'}\n",
    "\n",
    "\n",
    "# # --- Verification Parameters ---\n",
    "# MAX_FRAMES_TO_CHECK_PER_VIDEO = 50 # Limit checks per video for speed\n",
    "# MAX_PEDS_TO_CHECK_PER_VIDEO = 20  # Limit checks per video for speed\n",
    "# MAX_TRAFFIC_OBJS_TO_CHECK_PER_VIDEO = 20 # Limit checks\n",
    "# PRINT_SAMPLE_COUNT = 3 # How many sample data lines to print\n",
    "\n",
    "# # --- Counters and Flags ---\n",
    "# errors_found = 0\n",
    "# warnings_found = 0\n",
    "# checked_sets = 0\n",
    "# checked_videos = 0\n",
    "# checked_peds = 0\n",
    "# checked_ped_frames = 0\n",
    "# checked_ego_frames = 0\n",
    "\n",
    "# # --- Helper Function for Reporting ---\n",
    "# def report_error(message):\n",
    "#     global errors_found\n",
    "#     print(f\"  ERROR: {message}\")\n",
    "#     errors_found += 1\n",
    "\n",
    "# def report_warning(message):\n",
    "#     global warnings_found\n",
    "#     print(f\"  Warning: {message}\")\n",
    "#     warnings_found += 1\n",
    "\n",
    "# # --- 1. Load the PKL File ---\n",
    "# print(f\"\\n[1] Loading PKL file: {PKL_FILE_PATH}\")\n",
    "# if not os.path.exists(PKL_FILE_PATH):\n",
    "#     print(f\"  ERROR: PKL file not found at the specified path.\")\n",
    "#     exit()\n",
    "\n",
    "# try:\n",
    "#     with open(PKL_FILE_PATH, 'rb') as f:\n",
    "#         pie_database = pickle.load(f)\n",
    "#     print(\"  -> PKL file loaded successfully.\")\n",
    "# except Exception as e:\n",
    "#     print(f\"  ERROR: Failed to load PKL file: {e}\")\n",
    "#     exit()\n",
    "\n",
    "# # --- 2. Basic Structure Checks ---\n",
    "# print(f\"\\n[2] Checking Top-Level Structure...\")\n",
    "# if not isinstance(pie_database, dict):\n",
    "#     report_error(f\"Loaded data is not a dictionary (Type: {type(pie_database)}).\")\n",
    "#     exit()\n",
    "# print(f\"  -> Top level is a dictionary: OK\")\n",
    "\n",
    "# found_sets = set(pie_database.keys())\n",
    "# if found_sets != EXPECTED_SETS:\n",
    "#     report_warning(f\"Set keys mismatch. Found: {found_sets}, Expected: {EXPECTED_SETS}\")\n",
    "# else:\n",
    "#     print(f\"  -> Found expected set keys: OK\")\n",
    "# checked_sets = len(found_sets)\n",
    "\n",
    "# # --- 3. Detailed Content Checks ---\n",
    "# print(f\"\\n[3] Checking Set/Video/Annotation Structures...\")\n",
    "\n",
    "# sample_data_to_print = []\n",
    "\n",
    "# for set_id in tqdm(found_sets, desc=\"Checking Sets\"):\n",
    "#     if not isinstance(pie_database[set_id], dict):\n",
    "#         report_error(f\"Data for set '{set_id}' is not a dictionary.\")\n",
    "#         continue\n",
    "\n",
    "#     video_ids = list(pie_database[set_id].keys())\n",
    "#     checked_videos += len(video_ids)\n",
    "\n",
    "#     for video_id in tqdm(video_ids, desc=f\"Videos in {set_id}\", leave=False):\n",
    "#         video_data = pie_database[set_id][video_id]\n",
    "#         if not isinstance(video_data, dict):\n",
    "#             report_error(f\"Data for video '{set_id}/{video_id}' is not a dictionary.\")\n",
    "#             continue\n",
    "\n",
    "#         # Check video-level keys\n",
    "#         missing_vid_keys = EXPECTED_VIDEO_KEYS - set(video_data.keys())\n",
    "#         if missing_vid_keys:\n",
    "#             report_warning(f\"Video '{set_id}/{video_id}' missing keys: {missing_vid_keys}\")\n",
    "\n",
    "#         # Basic type checks for video keys\n",
    "#         img_width = video_data.get('width', -1)\n",
    "#         img_height = video_data.get('height', -1)\n",
    "#         if not isinstance(video_data.get('num_frames'), int): report_warning(f\"num_frames type mismatch in {set_id}/{video_id}\")\n",
    "#         if not isinstance(img_width, int): report_warning(f\"width type mismatch in {set_id}/{video_id}\")\n",
    "#         if not isinstance(img_height, int): report_warning(f\"height type mismatch in {set_id}/{video_id}\")\n",
    "#         if not isinstance(video_data.get('ped_annotations'), dict): report_error(f\"ped_annotations not a dict in {set_id}/{video_id}\"); continue # Stop checking peds for this video if structure wrong\n",
    "#         if not isinstance(video_data.get('traffic_annotations'), dict): report_warning(f\"traffic_annotations not a dict in {set_id}/{video_id}\")\n",
    "#         if not isinstance(video_data.get('vehicle_annotations'), dict): report_warning(f\"vehicle_annotations not a dict in {set_id}/{video_id}\")\n",
    "\n",
    "\n",
    "#         # --- Check Pedestrian Annotations ---\n",
    "#         ped_annotations = video_data.get('ped_annotations', {})\n",
    "#         ped_ids_to_check = list(ped_annotations.keys())\n",
    "#         random.shuffle(ped_ids_to_check) # Check a random subset\n",
    "\n",
    "#         for i, ped_id in enumerate(ped_ids_to_check):\n",
    "#             if i >= MAX_PEDS_TO_CHECK_PER_VIDEO: break # Limit checks\n",
    "#             checked_peds += 1\n",
    "#             ped_data = ped_annotations[ped_id]\n",
    "#             if not isinstance(ped_data, dict): report_error(f\"Data for ped '{ped_id}' in {set_id}/{video_id} is not a dict.\"); continue\n",
    "\n",
    "#             missing_ped_keys = EXPECTED_PED_KEYS - set(ped_data.keys())\n",
    "#             if missing_ped_keys: report_warning(f\"Ped '{ped_id}' in {set_id}/{video_id} missing keys: {missing_ped_keys}\")\n",
    "\n",
    "#             # Check structure of essential lists/dicts\n",
    "#             frames = ped_data.get('frames', [])\n",
    "#             bboxes = ped_data.get('bbox', [])\n",
    "#             occlusions = ped_data.get('occlusion', [])\n",
    "#             behavior = ped_data.get('behavior', {})\n",
    "#             attributes = ped_data.get('attributes', {})\n",
    "\n",
    "#             if not isinstance(frames, list): report_error(f\"Ped '{ped_id}' frames not a list.\"); continue\n",
    "#             if not isinstance(bboxes, list): report_error(f\"Ped '{ped_id}' bbox not a list.\"); continue\n",
    "#             if not isinstance(occlusions, list): report_error(f\"Ped '{ped_id}' occlusion not a list.\"); continue\n",
    "#             if not isinstance(behavior, dict): report_error(f\"Ped '{ped_id}' behavior not a dict.\"); continue\n",
    "#             if not isinstance(attributes, dict): report_warning(f\"Ped '{ped_id}' attributes not a dict.\"); continue # Attributes might be empty\n",
    "\n",
    "#             # Check list lengths consistency\n",
    "#             n_frames = len(frames)\n",
    "#             if n_frames == 0 and (len(bboxes) > 0 or len(occlusions) > 0): report_warning(f\"Ped '{ped_id}' has bboxes/occlusions but 0 frames listed.\")\n",
    "#             if len(bboxes) != n_frames: report_error(f\"Ped '{ped_id}' bbox length ({len(bboxes)}) != frames length ({n_frames}).\")\n",
    "#             if len(occlusions) != n_frames: report_error(f\"Ped '{ped_id}' occlusion length ({len(occlusions)}) != frames length ({n_frames}).\")\n",
    "\n",
    "#             missing_beh_keys = EXPECTED_PED_BEHAVIOR_KEYS - set(behavior.keys())\n",
    "#             if missing_beh_keys: report_warning(f\"Ped '{ped_id}' behavior missing keys: {missing_beh_keys}\")\n",
    "\n",
    "#             for beh_key, beh_list in behavior.items():\n",
    "#                 if not isinstance(beh_list, list): report_error(f\"Ped '{ped_id}' behavior '{beh_key}' not a list.\"); continue\n",
    "#                 if len(beh_list) != n_frames: report_error(f\"Ped '{ped_id}' behavior '{beh_key}' length ({len(beh_list)}) != frames length ({n_frames}).\")\n",
    "\n",
    "#             # Check sample frame content\n",
    "#             frames_to_check_in_ped = list(range(n_frames))\n",
    "#             random.shuffle(frames_to_check_in_ped)\n",
    "#             for k, frame_idx in enumerate(frames_to_check_in_ped):\n",
    "#                  if k >= MAX_FRAMES_TO_CHECK_PER_VIDEO: break\n",
    "#                  checked_ped_frames +=1\n",
    "#                  # Check frame number type\n",
    "#                  if not isinstance(frames[frame_idx], int): report_warning(f\"Ped '{ped_id}' frame value at index {frame_idx} not int.\")\n",
    "#                  # Check bbox format and range\n",
    "#                  if len(bboxes) > frame_idx:\n",
    "#                       bbox = bboxes[frame_idx]\n",
    "#                       if not isinstance(bbox, list) or len(bbox) != 4: report_error(f\"Ped '{ped_id}' frame {frames[frame_idx]} bbox invalid format: {bbox}\"); continue\n",
    "#                       try:\n",
    "#                            x1,y1,x2,y2 = map(float, bbox)\n",
    "#                            if img_width>0 and img_height>0 and not (0 <= x1 < x2 <= img_width and 0 <= y1 < y2 <= img_height): report_warning(f\"Ped '{ped_id}' frame {frames[frame_idx]} bbox out of bounds: {[int(x) for x in bbox]} vs {img_width}x{img_height}\")\n",
    "#                       except (ValueError, TypeError): report_error(f\"Ped '{ped_id}' frame {frames[frame_idx]} bbox contains non-numeric values: {bbox}\")\n",
    "#                  # Check occlusion value\n",
    "#                  if len(occlusions) > frame_idx:\n",
    "#                       occ = occlusions[frame_idx]\n",
    "#                       if not isinstance(occ, int) or occ not in [0, 1, 2]: report_warning(f\"Ped '{ped_id}' frame {frames[frame_idx]} invalid occlusion value: {occ}\")\n",
    "\n",
    "#                  # Add sample for printing later\n",
    "#                  if len(sample_data_to_print) < PRINT_SAMPLE_COUNT:\n",
    "#                       sample_data_to_print.append(f\" Sample Ped Data: Set={set_id}, Vid={video_id}, Ped={ped_id}, Frame={frames[frame_idx]}, BBox={bboxes[frame_idx] if len(bboxes) > frame_idx else 'N/A'}, Occ={occlusions[frame_idx] if len(occlusions) > frame_idx else 'N/A'}\")\n",
    "\n",
    "#         # --- Check Vehicle Annotations (Ego Data) ---\n",
    "#         vehicle_annotations = video_data.get('vehicle_annotations', {})\n",
    "#         ego_frames_to_check = list(vehicle_annotations.keys())\n",
    "#         random.shuffle(ego_frames_to_check)\n",
    "\n",
    "#         for k, frame_num in enumerate(ego_frames_to_check):\n",
    "#             if k >= MAX_FRAMES_TO_CHECK_PER_VIDEO: break # Limit checks\n",
    "#             checked_ego_frames += 1\n",
    "#             if not isinstance(frame_num, int): report_warning(f\"Ego data frame key '{frame_num}' in {set_id}/{video_id} is not int.\") ; continue\n",
    "#             ego_frame_data = vehicle_annotations[frame_num]\n",
    "#             if not isinstance(ego_frame_data, dict): report_error(f\"Ego data for frame {frame_num} in {set_id}/{video_id} is not dict.\"); continue\n",
    "\n",
    "#             missing_ego_keys = EXPECTED_EGO_FRAME_KEYS - set(ego_frame_data.keys())\n",
    "#             # Don't warn about every missing key, just check a few critical ones\n",
    "#             if 'OBD_speed' not in ego_frame_data and 'GPS_speed' not in ego_frame_data: report_warning(f\"Ego frame {frame_num} in {set_id}/{video_id} missing speed data.\")\n",
    "#             for key in EXPECTED_EGO_FRAME_KEYS:\n",
    "#                 if key in ego_frame_data and not isinstance(ego_frame_data[key], (float, int)): report_warning(f\"Ego frame {frame_num} key '{key}' value is not float/int (type: {type(ego_frame_data[key])})\")\n",
    "\n",
    "#             # Add sample for printing later\n",
    "#             if len(sample_data_to_print) < PRINT_SAMPLE_COUNT * 2 and k < 5: # Print a few ego samples too\n",
    "#                   sample_data_to_print.append(f\" Sample Ego Data: Set={set_id}, Vid={video_id}, Frame={frame_num}, Speed={ego_frame_data.get('OBD_speed', 'N/A'):.2f}, AccX={ego_frame_data.get('accX', 'N/A'):.2f}\")\n",
    "\n",
    "# # --- 4. Print Summary ---\n",
    "# print(f\"\\n[4] Verification Summary ---\")\n",
    "# print(f\"  - Checked {checked_sets} sets.\")\n",
    "# print(f\"  - Checked {checked_videos} videos.\")\n",
    "# print(f\"  - Checked {checked_peds} pedestrian tracks (sampled max {MAX_PEDS_TO_CHECK_PER_VIDEO} per video).\")\n",
    "# print(f\"  - Checked {checked_ped_frames} pedestrian frame entries (sampled max {MAX_FRAMES_TO_CHECK_PER_VIDEO} per ped).\")\n",
    "# print(f\"  - Checked {checked_ego_frames} ego data frame entries (sampled max {MAX_FRAMES_TO_CHECK_PER_VIDEO} per video).\")\n",
    "# print(f\"  - Total Errors Found: {errors_found}\")\n",
    "# print(f\"  - Total Warnings Found: {warnings_found}\")\n",
    "\n",
    "# if errors_found == 0:\n",
    "#     print(\"\\n  >>> Structure and basic content checks PASSED (with potential warnings). <<<\")\n",
    "# else:\n",
    "#     print(\"\\n  >>> ERRORS FOUND during structural/content checks. Review messages above. <<<\")\n",
    "\n",
    "# # --- 5. Print Sample Data ---\n",
    "# if sample_data_to_print:\n",
    "#     print(\"\\n[5] Sample Data Points ---\")\n",
    "#     for line in sample_data_to_print:\n",
    "#         print(line)\n",
    "\n",
    "# print(\"\\n--- Verification Script Finished ---\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b7762be5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T15:19:32.574676Z",
     "iopub.status.busy": "2025-05-01T15:19:32.574433Z",
     "iopub.status.idle": "2025-05-01T15:19:40.867921Z",
     "shell.execute_reply": "2025-05-01T15:19:40.867222Z"
    },
    "papermill": {
     "duration": 8.304225,
     "end_time": "2025-05-01T15:19:40.869431",
     "exception": false,
     "start_time": "2025-05-01T15:19:32.565206",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Creating new Ultralytics Settings v0.0.6 file ✅ \n",
      "View Ultralytics Settings with 'yolo settings' or at '/root/.config/Ultralytics/settings.json'\n",
      "Update Settings with 'yolo settings key=value', i.e. 'yolo settings runs_dir=path/to/dir'. For help see https://docs.ultralytics.com/quickstart/#ultralytics-settings.\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "import xml.etree.ElementTree as ET\n",
    "import os\n",
    "import numpy as np\n",
    "from sklearn.metrics import accuracy_score, precision_recall_fscore_support, roc_auc_score, confusion_matrix, ConfusionMatrixDisplay\n",
    "from tqdm.notebook import tqdm\n",
    "import random\n",
    "import math\n",
    "import zipfile\n",
    "import cv2\n",
    "from ultralytics import YOLO\n",
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d195020f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T15:19:40.888587Z",
     "iopub.status.busy": "2025-05-01T15:19:40.888247Z",
     "iopub.status.idle": "2025-05-01T15:19:42.398201Z",
     "shell.execute_reply": "2025-05-01T15:19:42.397110Z"
    },
    "papermill": {
     "duration": 1.521181,
     "end_time": "2025-05-01T15:19:42.400066",
     "exception": false,
     "start_time": "2025-05-01T15:19:40.878885",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unzipped successfully.\n"
     ]
    }
   ],
   "source": [
    "zip_path = \"/kaggle/working/PIE/annotations/annotations.zip\"\n",
    "extract_to = \"/kaggle/working/PIE/annotations/\"\n",
    "\n",
    "if os.path.exists(extract_to + 'annotations'):\n",
    "    print(\"Exists already. Not unzipping.\")\n",
    "else:\n",
    "    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n",
    "        zip_ref.extractall(extract_to)\n",
    "    print(\"Unzipped successfully.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "564d22c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T15:19:42.424367Z",
     "iopub.status.busy": "2025-05-01T15:19:42.424078Z",
     "iopub.status.idle": "2025-05-01T15:19:43.139506Z",
     "shell.execute_reply": "2025-05-01T15:19:43.138513Z"
    },
    "papermill": {
     "duration": 0.728289,
     "end_time": "2025-05-01T15:19:43.141031",
     "exception": false,
     "start_time": "2025-05-01T15:19:42.412742",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unzipped successfully.\n"
     ]
    }
   ],
   "source": [
    "zip_path = \"/kaggle/working/PIE/annotations/annotations_vehicle.zip\"\n",
    "extract_to = \"/kaggle/working/PIE/annotations/\"\n",
    "\n",
    "if os.path.exists(extract_to + 'annotations_vehicle'):\n",
    "    print(\"Exists already. Not unzipping.\")\n",
    "else:\n",
    "    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n",
    "        zip_ref.extractall(extract_to)\n",
    "    print(\"Unzipped successfully.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7fc921e5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T15:19:43.160422Z",
     "iopub.status.busy": "2025-05-01T15:19:43.160172Z",
     "iopub.status.idle": "2025-05-01T15:19:43.172168Z",
     "shell.execute_reply": "2025-05-01T15:19:43.171448Z"
    },
    "papermill": {
     "duration": 0.022913,
     "end_time": "2025-05-01T15:19:43.173363",
     "exception": false,
     "start_time": "2025-05-01T15:19:43.150450",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unzipped successfully.\n"
     ]
    }
   ],
   "source": [
    "zip_path = \"/kaggle/working/PIE/annotations/annotations_attributes.zip\"\n",
    "extract_to = \"/kaggle/working/PIE/annotations/\"\n",
    "\n",
    "if os.path.exists(extract_to + \"annotations_attributes\"):\n",
    "    print(\"Exists already. Not unzipping.\")\n",
    "else:\n",
    "    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n",
    "        zip_ref.extractall(extract_to)\n",
    "    print(\"Unzipped successfully.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "eb8a5319",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T15:19:43.193252Z",
     "iopub.status.busy": "2025-05-01T15:19:43.192998Z",
     "iopub.status.idle": "2025-05-01T15:19:43.204322Z",
     "shell.execute_reply": "2025-05-01T15:19:43.203542Z"
    },
    "papermill": {
     "duration": 0.023045,
     "end_time": "2025-05-01T15:19:43.205656",
     "exception": false,
     "start_time": "2025-05-01T15:19:43.182611",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # --- IMPORTS ---\n",
    "# import torch\n",
    "# import torch.nn as nn\n",
    "# import torch.optim as optim\n",
    "# from torch.utils.data import Dataset, DataLoader\n",
    "# import xml.etree.ElementTree as ET\n",
    "# import os\n",
    "# import numpy as np\n",
    "# from sklearn.metrics import accuracy_score, precision_recall_fscore_support, roc_auc_score, confusion_matrix, ConfusionMatrixDisplay\n",
    "# from sklearn.preprocessing import StandardScaler # For standardizing ego features\n",
    "# from tqdm.notebook import tqdm\n",
    "# import random\n",
    "# import math\n",
    "# import zipfile\n",
    "# import cv2\n",
    "# import pandas as pd\n",
    "# import matplotlib.pyplot as plt\n",
    "# import seaborn as sns\n",
    "# import pickle\n",
    "# import time\n",
    "# import sys # For path manipulation if needed\n",
    "\n",
    "# # --- Add PIE utilities path if necessary (adjust path) ---\n",
    "# pie_utilities_path = '/kaggle/working/PIE/utilities'\n",
    "# if pie_utilities_path not in sys.path:\n",
    "#     sys.path.insert(0, pie_utilities_path)\n",
    "# try:\n",
    "#     # We only need PIE class to generate the database if needed\n",
    "#     from pie_data import PIE\n",
    "# except ImportError as e:\n",
    "#     print(f\"Warning: Could not import PIE class from {pie_utilities_path}. Database must already exist. Error: {e}\")\n",
    "#     PIE = None # Define PIE as None if import fails\n",
    "\n",
    "# # --- Configuration ---\n",
    "# PIE_ROOT_PATH = '/kaggle/working/PIE' # Path where PIE repo was cloned/unzipped\n",
    "# VIDEO_INPUT_DIR = '/kaggle/input' # Where pie-setXX video dataset folders are\n",
    "# POSE_DATA_DIR = '/kaggle/input/pose-data/extracted_poses2' # Where setXX subdirs with PKLs are\n",
    "# PIE_DATABASE_CACHE_PATH = '/kaggle/input/pie-database/pie_database.pkl'\n",
    "\n",
    "# # --- Stream Control ---\n",
    "# ACTIVE_STREAMS = [\n",
    "#     'bbox',\n",
    "#     # 'pose',\n",
    "#     # 'ego_speed',\n",
    "#     # 'ego_acc',\n",
    "#     # 'ego_gyro',\n",
    "#     # 'ped_action',\n",
    "#     # 'ped_look',\n",
    "#     # 'ped_occlusion',\n",
    "#     # 'traffic_light',\n",
    "#     # 'static_context'\n",
    "# ]\n",
    "# print(f\"Active Streams: {ACTIVE_STREAMS}\")\n",
    "\n",
    "# # Model Hyperparameters\n",
    "# SEQ_LEN = 30\n",
    "# PRED_LEN = 1\n",
    "# # Input Sizes (Define for ALL potential streams)\n",
    "# INPUT_SIZE_BBOX = 4\n",
    "# INPUT_SIZE_POSE = 34\n",
    "# INPUT_SIZE_EGO_SPEED = 1\n",
    "# INPUT_SIZE_EGO_ACC = 2 # X, Y components\n",
    "# INPUT_SIZE_EGO_GYRO = 1 # Z component (Yaw rate)\n",
    "# INPUT_SIZE_PED_ACTION = 1 # 0:standing, 1:walking\n",
    "# INPUT_SIZE_PED_LOOK = 1 # 0:not-looking, 1:looking\n",
    "# INPUT_SIZE_PED_OCC = 1 # 0:none, 0.5:part, 1:full (normalized)\n",
    "# INPUT_SIZE_TL_STATE = 4 # 0:Undef, 1:Red, 2:Yellow, 3:Green (One-Hot)\n",
    "# # Static Feature Sizes (Matches pie_data.py mappings)\n",
    "# NUM_SIGNALIZED_CATS = 4\n",
    "# NUM_INTERSECTION_CATS = 5\n",
    "# NUM_AGE_CATS = 4\n",
    "# NUM_GENDER_CATS = 3\n",
    "# INPUT_SIZE_STATIC = NUM_SIGNALIZED_CATS + NUM_INTERSECTION_CATS + NUM_AGE_CATS + NUM_GENDER_CATS # = 16\n",
    "\n",
    "# LSTM_HIDDEN_SIZE = 256\n",
    "# NUM_LSTM_LAYERS = 2\n",
    "# DROPOUT_RATE = 0.3\n",
    "# NUM_CLASSES = 2\n",
    "# ATTENTION_DIM = 128\n",
    "\n",
    "# # Training Hyperparameters\n",
    "# LEARNING_RATE = 1e-4 # Possibly lower LR needed after balancing/more features\n",
    "# BATCH_SIZE = 32\n",
    "# NUM_EPOCHS = 10 # Increase epochs slightly for balanced data\n",
    "# DEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# print(f\"Using device: {DEVICE}\")\n",
    "\n",
    "# # Dataset Splits (Using PIE default)\n",
    "# TRAIN_SETS_STR = ['set01', 'set02', 'set04']\n",
    "# VAL_SETS_STR = ['set05', 'set06']\n",
    "# TEST_SETS_STR = ['set03'] # Although not used in training loop\n",
    "\n",
    "# # Mappings (Matches pie_data.py)\n",
    "# TL_STATE_MAP = {'__undefined__': 0, 'red': 1, 'yellow': 2, 'green': 3}\n",
    "# NUM_TL_STATES = len(TL_STATE_MAP)\n",
    "# SIGNALIZED_MAP = {'n/a': 0, 'C': 1, 'S': 2, 'CS': 3}\n",
    "# INTERSECTION_MAP = {'midblock': 0, 'T': 1, 'T-left': 2, 'T-right': 3, 'four-way': 4}\n",
    "# AGE_MAP = {'child': 0, 'young': 1, 'adult': 2, 'senior': 3}\n",
    "# GENDER_MAP = {'n/a': 0, 'female': 1, 'male': 2}\n",
    "\n",
    "# # --- Helper: One-Hot Encoding ---\n",
    "# def to_one_hot(index, num_classes):\n",
    "#     vec = np.zeros(num_classes, dtype=np.float32)\n",
    "#     if 0 <= index < num_classes:\n",
    "#         vec[index] = 1.0\n",
    "#     else: # Handle unexpected index\n",
    "#         vec[0] = 1.0 # Default to first class\n",
    "#     return vec\n",
    "\n",
    "# # --- Balancing Function ---\n",
    "# def balance_samples_count(seq_data, label_type, random_seed=42):\n",
    "#     print('---------------------------------------------------------')\n",
    "#     print(f\"Balancing samples based on '{label_type}' key\")\n",
    "#     if label_type not in seq_data:\n",
    "#         raise KeyError(f\"Label type '{label_type}' not found.\")\n",
    "#     try:\n",
    "#         gt_labels = [lbl[0] for lbl in seq_data[label_type]]\n",
    "#     except (IndexError, TypeError):\n",
    "#         raise ValueError(f\"Labels under '{label_type}' not in expected format [[label_val]].\")\n",
    "\n",
    "#     if not all(l in [0, 1] for l in gt_labels):\n",
    "#         print(f\"Warning: Labels for balancing contain values other than 0 or 1.\")\n",
    "\n",
    "#     num_pos_samples = np.count_nonzero(np.array(gt_labels))\n",
    "#     num_neg_samples = len(gt_labels) - num_pos_samples\n",
    "#     new_seq_data = {}\n",
    "\n",
    "#     if num_neg_samples == num_pos_samples:\n",
    "#         print('Samples already balanced.')\n",
    "#         return seq_data.copy()\n",
    "#     else:\n",
    "#         print(f'Unbalanced: Positive (1): {num_pos_samples} | Negative (0): {num_neg_samples}')\n",
    "#         majority_label = 0 if num_neg_samples > num_pos_samples else 1\n",
    "#         minority_count = min(num_neg_samples, num_pos_samples)\n",
    "#         print(f\"Undersampling majority class ({majority_label}) to match count ({minority_count}).\")\n",
    "\n",
    "#         majority_indices = np.where(np.array(gt_labels) == majority_label)[0]\n",
    "#         minority_indices = np.where(np.array(gt_labels) != majority_label)[0]\n",
    "#         np.random.seed(random_seed)\n",
    "#         keep_majority_indices = np.random.choice(majority_indices, size=minority_count, replace=False)\n",
    "#         final_indices = np.concatenate((minority_indices, keep_majority_indices))\n",
    "#         np.random.shuffle(final_indices)\n",
    "\n",
    "#         for k, v_list in seq_data.items():\n",
    "#             if isinstance(v_list, list) and len(v_list) == len(gt_labels):\n",
    "#                  try:\n",
    "#                      # Check if the list contains numpy arrays before converting the whole list\n",
    "#                      if v_list and isinstance(v_list[0], np.ndarray):\n",
    "#                          v_array = np.array(v_list)\n",
    "#                          new_seq_data[k] = list(v_array[final_indices])\n",
    "#                      else: # Assume list of lists or list of scalars\n",
    "#                           new_seq_data[k] = [v_list[i] for i in final_indices]\n",
    "#                  except Exception as e:\n",
    "#                       print(f\"Error processing key '{k}' during balancing: {e}. Skip.\")\n",
    "#                       new_seq_data[k] = []\n",
    "#             else:\n",
    "#                  print(f\"Warn: Skipping key '{k}' in balancing (not list or len mismatch).\")\n",
    "#                  new_seq_data[k] = v_list\n",
    "\n",
    "#         # Check if label key still exists after potential errors\n",
    "#         if label_type in new_seq_data:\n",
    "#              new_gt_labels = [lbl[0] for lbl in new_seq_data[label_type]]\n",
    "#              final_pos = np.count_nonzero(np.array(new_gt_labels))\n",
    "#              final_neg = len(new_gt_labels) - final_pos\n",
    "#              print(f'Balanced:   Positive (1): {final_pos} | Negative (0): {final_neg}')\n",
    "#         else:\n",
    "#              print(\"Error: Label key was lost during balancing process.\")\n",
    "\n",
    "#         print('---------------------------------------------------------')\n",
    "#         return new_seq_data\n",
    "\n",
    "\n",
    "# # --- Dataset Class ---\n",
    "# class PIEDataset(Dataset):\n",
    "#     def __init__(self, pie_database, set_names, pose_data_dir, seq_len, pred_len, scalers=None, active_streams=None):\n",
    "#         self.pie_db = pie_database\n",
    "#         self.set_names = set_names\n",
    "#         self.pose_data_dir = pose_data_dir\n",
    "#         self.seq_len = seq_len\n",
    "#         self.pred_len = pred_len\n",
    "#         self.scalers = scalers or {}\n",
    "#         self.active_streams = active_streams or []\n",
    "#         self.sequences = []\n",
    "#         self.all_pose_data = {}\n",
    "#         # Store input sizes needed for error handling in __getitem__\n",
    "#         self._input_sizes_for_error = self._get_input_sizes_dict()\n",
    "#         self._load_pose_data()\n",
    "#         self._generate_sequence_list()\n",
    "#         if not self.sequences:\n",
    "#             raise ValueError(f\"Dataset init failed: No sequences for {self.set_names}\")\n",
    "\n",
    "#     def _get_input_sizes_dict(self):\n",
    "#         # Helper to create input sizes dict, needed for error fallback in __getitem__\n",
    "#         input_sizes = {}\n",
    "#         for stream in self.active_streams:\n",
    "#             size_constant_name = f'INPUT_SIZE_{stream.upper()}'\n",
    "#             special_cases = {'TRAFFIC_LIGHT': 'TL_STATE', 'STATIC_CONTEXT': 'STATIC', 'EGO_SPEED': 'EGO_SPEED', 'EGO_ACC': 'EGO_ACC', 'EGO_GYRO': 'EGO_GYRO', 'PED_ACTION': 'PED_ACTION', 'PED_LOOK': 'PED_LOOK', 'PED_OCCLUSION': 'PED_OCC'}\n",
    "#             stream_upper_key = stream.upper()\n",
    "#             suffix = special_cases.get(stream_upper_key)\n",
    "#             if suffix:\n",
    "#                  size_constant_name = f'INPUT_SIZE_{suffix}'\n",
    "#             elif stream == 'bbox': size_constant_name = 'INPUT_SIZE_BBOX'\n",
    "#             elif stream == 'pose': size_constant_name = 'INPUT_SIZE_POSE'\n",
    "#             if size_constant_name in globals(): input_sizes[stream] = globals()[size_constant_name]\n",
    "#             else: input_sizes[stream] = 1 # Default size 1 if not found (should not happen ideally)\n",
    "#         return input_sizes\n",
    "\n",
    "#     def _load_pose_data(self):\n",
    "#         print(f\"\\nLoading pose data for sets: {self.set_names} from {self.pose_data_dir}\")\n",
    "#         sets_loaded_count = 0\n",
    "#         for set_id in tqdm(self.set_names, desc=\"Loading Pose Sets\"):\n",
    "#             self.all_pose_data[set_id] = {}\n",
    "#             pose_set_path = os.path.join(self.pose_data_dir, set_id)\n",
    "#             if not os.path.isdir(pose_set_path):\n",
    "#                 print(f\"Warn: Pose dir missing for {set_id} at {pose_set_path}\")\n",
    "#                 continue\n",
    "#             pkl_files_in_set = [f for f in os.listdir(pose_set_path) if f.startswith(f\"{set_id}_\") and f.endswith(\"_poses.pkl\")]\n",
    "#             if not pkl_files_in_set:\n",
    "#                 continue\n",
    "#             loaded_video_count = 0\n",
    "#             for pkl_filename in tqdm(pkl_files_in_set, desc=f\"Loading PKLs for {set_id}\", leave=False):\n",
    "#                 pkl_file_path = os.path.join(pose_set_path, pkl_filename)\n",
    "#                 try:\n",
    "#                     with open(pkl_file_path, 'rb') as f:\n",
    "#                         loaded_pkl_content = pickle.load(f)\n",
    "#                     if len(loaded_pkl_content) != 1:\n",
    "#                         continue\n",
    "#                     unique_video_key, video_data = list(loaded_pkl_content.items())[0]\n",
    "#                     video_id = \"_\".join(unique_video_key.split('_')[1:])\n",
    "#                     self.all_pose_data[set_id][video_id] = video_data\n",
    "#                     loaded_video_count += 1\n",
    "#                 except FileNotFoundError:\n",
    "#                     pass # Expected if some videos failed extraction\n",
    "#                 except Exception as e:\n",
    "#                     print(f\"Error loading pose PKL {pkl_file_path}: {e}\")\n",
    "#             if loaded_video_count > 0:\n",
    "#                 sets_loaded_count += 1\n",
    "#         print(f\"Finished loading pose data for {sets_loaded_count} sets.\")\n",
    "\n",
    "#     def _generate_sequence_list(self):\n",
    "#         print(f\"Generating sequence list from PIE database for sets: {self.set_names}\")\n",
    "#         sequence_count = 0\n",
    "#         ped_count = 0\n",
    "#         for set_id in tqdm(self.set_names, desc=\"Generating Sequences\"):\n",
    "#             if set_id not in self.pie_db:\n",
    "#                 continue\n",
    "#             for video_id, video_data in self.pie_db[set_id].items():\n",
    "#                 if 'ped_annotations' not in video_data:\n",
    "#                     continue\n",
    "#                 for ped_id, ped_data in video_data['ped_annotations'].items():\n",
    "#                     ped_count += 1\n",
    "#                     if 'frames' not in ped_data or len(ped_data['frames']) < self.seq_len + self.pred_len:\n",
    "#                         continue\n",
    "#                     sorted_frames = sorted(ped_data['frames'])\n",
    "#                     for i in range(len(sorted_frames) - self.seq_len - self.pred_len + 1):\n",
    "#                         start_frame = sorted_frames[i]\n",
    "#                         end_frame_observe = sorted_frames[i + self.seq_len - 1]\n",
    "#                         if end_frame_observe - start_frame != self.seq_len - 1:\n",
    "#                             continue\n",
    "#                         target_frame_actual_idx = i + self.seq_len + self.pred_len - 1\n",
    "#                         if target_frame_actual_idx >= len(sorted_frames):\n",
    "#                              continue # Avoid index out of bounds\n",
    "#                         target_frame = sorted_frames[target_frame_actual_idx]\n",
    "#                         if target_frame - end_frame_observe != self.pred_len:\n",
    "#                              continue\n",
    "#                         self.sequences.append((set_id, video_id, ped_id, start_frame))\n",
    "#                         sequence_count += 1\n",
    "#         print(f\"Found {sequence_count} valid sequences from {ped_count} pedestrian tracks.\")\n",
    "\n",
    "#     def __len__(self):\n",
    "#         return len(self.sequences)\n",
    "\n",
    "#     def __getitem__(self, idx):\n",
    "#         set_id, video_id, ped_id, start_frame = self.sequences[idx]\n",
    "#         frame_nums = list(range(start_frame, start_frame + self.seq_len))\n",
    "#         target_frame_num = start_frame + self.seq_len + self.pred_len - 1\n",
    "\n",
    "#         # Get data from the loaded PIE database\n",
    "#         video_db = self.pie_db.get(set_id, {}).get(video_id, {})\n",
    "#         ped_db = video_db.get('ped_annotations', {}).get(ped_id, {})\n",
    "#         ego_db = video_db.get('vehicle_annotations', {}) # Frame -> {sensor: value}\n",
    "#         traffic_db = video_db.get('traffic_annotations', {}) # ObjID -> {frames:[], state:[], ...}\n",
    "#         ped_attributes = ped_db.get('attributes', {})\n",
    "\n",
    "#         # Initialize feature sequences\n",
    "#         feature_sequences = {stream: [] for stream in self.active_streams}\n",
    "\n",
    "#         # Static Features (calculated once)\n",
    "#         static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32) # Default static\n",
    "#         if 'static_context' in self.active_streams:\n",
    "#             sig_idx = ped_attributes.get('signalized', 0)\n",
    "#             int_idx = ped_attributes.get('intersection', 0)\n",
    "#             age_idx = ped_attributes.get('age', 2) # Default to 'adult'\n",
    "#             gen_idx = ped_attributes.get('gender', 0)\n",
    "#             static_vec = np.concatenate([\n",
    "#                 to_one_hot(sig_idx, NUM_SIGNALIZED_CATS),\n",
    "#                 to_one_hot(int_idx, NUM_INTERSECTION_CATS),\n",
    "#                 to_one_hot(age_idx, NUM_AGE_CATS),\n",
    "#                 to_one_hot(gen_idx, NUM_GENDER_CATS)\n",
    "#             ])\n",
    "#             if static_vec.shape[0] != INPUT_SIZE_STATIC: # Sanity check\n",
    "#                  static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "\n",
    "#         # Get Target Label\n",
    "#         label = 0 # Default to not-crossing\n",
    "#         if 'frames' in ped_db and 'behavior' in ped_db and 'cross' in ped_db['behavior']:\n",
    "#              try:\n",
    "#                  target_frame_db_idx = ped_db['frames'].index(target_frame_num)\n",
    "#                  label = ped_db['behavior']['cross'][target_frame_db_idx]\n",
    "#                  if label == -1: label = 0 # Map irrelevant to not-crossing\n",
    "#              except (ValueError, IndexError):\n",
    "#                  pass # Keep default label\n",
    "\n",
    "#         # Iterate through sequence frames\n",
    "#         for frame_num in frame_nums:\n",
    "#             frame_db_idx = -1\n",
    "#             if 'frames' in ped_db:\n",
    "#                  try:\n",
    "#                      frame_db_idx = ped_db['frames'].index(frame_num)\n",
    "#                  except ValueError:\n",
    "#                      pass # Frame not found for this pedestrian in this sequence part\n",
    "#             ego_frame_data = ego_db.get(frame_num, {})\n",
    "\n",
    "#             # --- Extract for ACTIVE streams ---\n",
    "#             if 'bbox' in self.active_streams:\n",
    "#                 bbox_norm = np.zeros(INPUT_SIZE_BBOX, dtype=np.float32) # Default\n",
    "#                 if frame_db_idx != -1 and 'bbox' in ped_db and len(ped_db['bbox']) > frame_db_idx:\n",
    "#                     # --- Start Corrected Try/Except ---\n",
    "#                      try:\n",
    "#                           x1, y1, x2, y2 = ped_db['bbox'][frame_db_idx]\n",
    "#                           img_w = video_db.get('width', 1920) # Use default if missing\n",
    "#                           img_h = video_db.get('height', 1080)\n",
    "#                           if img_w > 0 and img_h > 0: # Check for valid image dimensions\n",
    "#                                cx = ((x1 + x2) / 2) / img_w\n",
    "#                                cy = ((y1 + y2) / 2) / img_h\n",
    "#                                w = (x2 - x1) / img_w\n",
    "#                                h = (y2 - y1) / img_h\n",
    "#                                # Check for valid normalized bbox dimensions\n",
    "#                                if w > 0 and h > 0 and 0 <= cx <= 1 and 0 <= cy <= 1:\n",
    "#                                     bbox_norm = np.array([cx, cy, w, h], dtype=np.float32)\n",
    "#                      except Exception as e:\n",
    "#                           # Keep default zero vector if any error occurs during processing\n",
    "#                           # print(f\"Warning: Error processing bbox F:{frame_num} P:{ped_id} V:{video_id} - {e}\") # Optional warning\n",
    "#                           pass\n",
    "#                     # --- End Corrected Try/Except ---\n",
    "#                 feature_sequences['bbox'].append(bbox_norm)\n",
    "\n",
    "#             # --- (Rest of stream extractions - unchanged logic but ensure proper indentation) ---\n",
    "#             if 'pose' in self.active_streams:\n",
    "#                 pose_vector = np.zeros(INPUT_SIZE_POSE, dtype=np.float32)\n",
    "#                 vid_pose_data = self.all_pose_data.get(set_id, {}).get(video_id, {})\n",
    "#                 frame_pose_data = vid_pose_data.get(frame_num, {})\n",
    "#                 loaded_pose = frame_pose_data.get(ped_id)\n",
    "#                 if loaded_pose is not None and isinstance(loaded_pose, np.ndarray) and loaded_pose.shape == (INPUT_SIZE_POSE,):\n",
    "#                     pose_vector = loaded_pose\n",
    "#                 feature_sequences['pose'].append(pose_vector)\n",
    "\n",
    "#             if 'ego_speed' in self.active_streams:\n",
    "#                 speed = ego_frame_data.get('OBD_speed', 0.0)\n",
    "#                 if speed == 0.0: speed = ego_frame_data.get('GPS_speed', 0.0)\n",
    "#                 speed_scaled = (speed - self.scalers.get('ego_speed_mean', 0.0)) / self.scalers.get('ego_speed_std', 1.0)\n",
    "#                 feature_sequences['ego_speed'].append([speed_scaled])\n",
    "\n",
    "#             if 'ego_acc' in self.active_streams:\n",
    "#                 accX = ego_frame_data.get('accX', 0.0)\n",
    "#                 accY = ego_frame_data.get('accY', 0.0)\n",
    "#                 accX_scaled = (accX - self.scalers.get('accX_mean', 0.0)) / self.scalers.get('accX_std', 1.0)\n",
    "#                 accY_scaled = (accY - self.scalers.get('accY_mean', 0.0)) / self.scalers.get('accY_std', 1.0)\n",
    "#                 feature_sequences['ego_acc'].append([accX_scaled, accY_scaled])\n",
    "\n",
    "#             if 'ego_gyro' in self.active_streams:\n",
    "#                 gyroZ = ego_frame_data.get('gyroZ', 0.0)\n",
    "#                 gyroZ_scaled = (gyroZ - self.scalers.get('gyroZ_mean', 0.0)) / self.scalers.get('gyroZ_std', 1.0)\n",
    "#                 feature_sequences['ego_gyro'].append([gyroZ_scaled])\n",
    "\n",
    "#             if 'ped_action' in self.active_streams:\n",
    "#                 action = 0 # Default standing\n",
    "#                 if frame_db_idx != -1 and 'behavior' in ped_db and 'action' in ped_db['behavior'] and len(ped_db['behavior']['action']) > frame_db_idx:\n",
    "#                      action = ped_db['behavior']['action'][frame_db_idx]\n",
    "#                 feature_sequences['ped_action'].append([float(action)])\n",
    "\n",
    "#             if 'ped_look' in self.active_streams:\n",
    "#                 look = 0 # Default not-looking\n",
    "#                 if frame_db_idx != -1 and 'behavior' in ped_db and 'look' in ped_db['behavior'] and len(ped_db['behavior']['look']) > frame_db_idx:\n",
    "#                      look = ped_db['behavior']['look'][frame_db_idx]\n",
    "#                 feature_sequences['ped_look'].append([float(look)])\n",
    "\n",
    "#             if 'ped_occlusion' in self.active_streams:\n",
    "#                 occ = 0.0 # Default none\n",
    "#                 if frame_db_idx != -1 and 'occlusion' in ped_db and len(ped_db['occlusion']) > frame_db_idx:\n",
    "#                      occ_val = ped_db['occlusion'][frame_db_idx]\n",
    "#                      occ = float(occ_val) / 2.0 # Normalize\n",
    "#                 feature_sequences['ped_occlusion'].append([occ])\n",
    "\n",
    "#             if 'traffic_light' in self.active_streams:\n",
    "#                 state_int = 0\n",
    "#                 for obj_id, obj_data in traffic_db.items():\n",
    "#                      if obj_data.get('obj_class') == 'traffic_light' and 'frames' in obj_data and 'state' in obj_data:\n",
    "#                           try:\n",
    "#                               tl_frame_idx = obj_data['frames'].index(frame_num)\n",
    "#                               state_val = obj_data['state'][tl_frame_idx]\n",
    "#                               if state_val != 0:\n",
    "#                                   state_int = state_val\n",
    "#                                   break # Found first non-undefined state\n",
    "#                           except (ValueError, IndexError):\n",
    "#                               continue\n",
    "#                 feature_sequences['traffic_light'].append(to_one_hot(state_int, NUM_TL_STATES))\n",
    "\n",
    "#             if 'static_context' in self.active_streams:\n",
    "#                 feature_sequences['static_context'].append(static_vec)\n",
    "\n",
    "#         # --- Convert lists to Tensors ---\n",
    "#         features = {}\n",
    "#         try:\n",
    "#             for stream_name in self.active_streams:\n",
    "#                  features[stream_name] = torch.tensor(np.array(feature_sequences[stream_name], dtype=np.float32), dtype=torch.float32)\n",
    "\n",
    "#         except Exception as e:\n",
    "#              print(f\"Error converting features idx {idx}: {e}. Return dummy.\")\n",
    "#              # Use the pre-calculated sizes dictionary for fallback\n",
    "#              features = {\n",
    "#                  name: torch.zeros((self.seq_len, self._input_sizes_for_error.get(name, 1)), dtype=torch.float32)\n",
    "#                  for name in self.active_streams\n",
    "#              }\n",
    "\n",
    "#         return features, torch.tensor(label, dtype=torch.long)\n",
    "\n",
    "# # --- Wrapper Dataset for Balanced Data ---\n",
    "# class BalancedDataset(Dataset):\n",
    "#     def __init__(self, data_dict, active_streams, label_key='label'):\n",
    "#         self.active_streams = active_streams\n",
    "#         self.label_key = label_key\n",
    "#         if self.label_key not in data_dict or not data_dict[self.label_key]:\n",
    "#              raise ValueError(f\"Label key '{self.label_key}' missing/empty.\")\n",
    "#         self.num_samples = len(data_dict[self.label_key])\n",
    "#         if self.num_samples == 0:\n",
    "#             print(\"Warning: BalancedDataset initialized with zero samples.\")\n",
    "\n",
    "#         self.features = {}\n",
    "#         for stream in self.active_streams:\n",
    "#              if stream in data_dict and data_dict[stream]:\n",
    "#                  try:\n",
    "#                      self.features[stream] = torch.tensor(np.array(data_dict[stream]), dtype=torch.float32)\n",
    "#                  except ValueError as e:\n",
    "#                       raise ValueError(f\"Error converting stream '{stream}' data: {e}\")\n",
    "#              else:\n",
    "#                   raise KeyError(f\"Stream '{stream}' missing/empty in balanced data.\")\n",
    "#         try:\n",
    "#             self.labels = torch.tensor([lbl[0] for lbl in data_dict[self.label_key]], dtype=torch.long)\n",
    "#         except (IndexError, TypeError) as e:\n",
    "#              raise ValueError(f\"Error converting labels: {e}\")\n",
    "\n",
    "#         for stream in self.active_streams:\n",
    "#              if len(self.features[stream]) != self.num_samples:\n",
    "#                  raise ValueError(f\"Len mismatch: Stream '{stream}' ({len(self.features[stream])}) vs Labels ({self.num_samples})\")\n",
    "#     def __len__(self):\n",
    "#         return self.num_samples\n",
    "#     def __getitem__(self, idx):\n",
    "#         feature_dict = {stream: self.features[stream][idx] for stream in self.active_streams}\n",
    "#         label = self.labels[idx]\n",
    "#         return feature_dict, label\n",
    "\n",
    "# # --- Model Architecture ---\n",
    "# class Attention(nn.Module):\n",
    "#     def __init__(self, hidden_dim, attention_dim):\n",
    "#         super(Attention, self).__init__()\n",
    "#         self.attention_net = nn.Sequential(\n",
    "#             nn.Linear(hidden_dim, attention_dim),\n",
    "#             nn.Tanh(),\n",
    "#             nn.Linear(attention_dim, 1)\n",
    "#         )\n",
    "#     def forward(self, lstm_output):\n",
    "#         att_scores = self.attention_net(lstm_output).squeeze(2)\n",
    "#         att_weights = torch.softmax(att_scores, dim=1)\n",
    "#         context_vector = torch.sum(lstm_output * att_weights.unsqueeze(2), dim=1)\n",
    "#         return context_vector, att_weights\n",
    "# class MultiStreamAdaptiveLSTM(nn.Module):\n",
    "#     def __init__(self, input_sizes, lstm_hidden_size, num_lstm_layers, num_classes, attention_dim, dropout_rate, stream_names=['bbox', 'pose']):\n",
    "#         super(MultiStreamAdaptiveLSTM, self).__init__()\n",
    "#         if not stream_names: raise ValueError(\"stream_names cannot be empty.\")\n",
    "#         self.stream_names = stream_names\n",
    "#         self.lstms = nn.ModuleDict()\n",
    "#         self.attentions = nn.ModuleDict()\n",
    "#         print(f\"Initializing model with streams: {self.stream_names}\")\n",
    "#         for name in self.stream_names:\n",
    "#             if name not in input_sizes: raise KeyError(f\"Input size for stream '{name}' not provided.\")\n",
    "#             current_input_size = input_sizes[name]\n",
    "#             print(f\"  - Adding stream '{name}' with input size {current_input_size}\")\n",
    "#             self.lstms[name] = nn.LSTM(current_input_size, lstm_hidden_size, num_lstm_layers,\n",
    "#                                        batch_first=True, dropout=dropout_rate if num_lstm_layers > 1 else 0,\n",
    "#                                        bidirectional=True)\n",
    "#             self.attentions[name] = Attention(lstm_hidden_size * 2 , attention_dim)\n",
    "#         num_active_streams = len(self.stream_names)\n",
    "#         combined_feature_dim = lstm_hidden_size * 2 * num_active_streams\n",
    "#         print(f\"  Combined feature dimension: {combined_feature_dim}\")\n",
    "#         self.dropout = nn.Dropout(dropout_rate)\n",
    "#         intermediate_dim = max(num_classes * 4, combined_feature_dim // 2)\n",
    "#         self.fc1 = nn.Linear(combined_feature_dim, intermediate_dim)\n",
    "#         self.relu = nn.ReLU()\n",
    "#         self.fc2 = nn.Linear(intermediate_dim, num_classes)\n",
    "#     def forward(self, x):\n",
    "#         stream_context_vectors = []\n",
    "#         stream_att_weights = {}\n",
    "#         for name in self.stream_names:\n",
    "#             if name not in x: print(f\"Warning: Stream '{name}' expected but not in input data.\"); continue\n",
    "#             lstm_out, _ = self.lstms[name](x[name])\n",
    "#             context_vector, attention_weights = self.attentions[name](lstm_out)\n",
    "#             stream_context_vectors.append(context_vector)\n",
    "#             stream_att_weights[name] = attention_weights\n",
    "#         if not stream_context_vectors: raise RuntimeError(\"No stream outputs generated.\")\n",
    "#         fused_features = torch.cat(stream_context_vectors, dim=1)\n",
    "#         out = self.dropout(fused_features)\n",
    "#         out = self.relu(self.fc1(out))\n",
    "#         out = self.dropout(out)\n",
    "#         logits = self.fc2(out)\n",
    "#         return logits\n",
    "\n",
    "# # --- Training and Evaluation Functions ---\n",
    "# def train_epoch(model, dataloader, optimizer, criterion, device):\n",
    "#     model.train()\n",
    "#     total_loss = 0.0\n",
    "#     all_preds = []\n",
    "#     all_labels = []\n",
    "#     active_streams = model.stream_names\n",
    "#     for features, labels in tqdm(dataloader, desc=\"Training\", leave=False):\n",
    "#         input_features = {name: features[name].to(device) for name in active_streams if name in features}\n",
    "#         labels = labels.to(device)\n",
    "#         optimizer.zero_grad()\n",
    "#         outputs = model(input_features)\n",
    "#         loss = criterion(outputs, labels)\n",
    "#         loss.backward()\n",
    "#         optimizer.step()\n",
    "#         total_loss += loss.item()\n",
    "#         preds = torch.argmax(outputs, dim=1)\n",
    "#         all_preds.extend(preds.cpu().numpy())\n",
    "#         all_labels.extend(labels.cpu().numpy())\n",
    "#     avg_loss = total_loss / len(dataloader)\n",
    "#     accuracy = accuracy_score(all_labels, all_preds)\n",
    "#     return avg_loss, accuracy\n",
    "\n",
    "# def evaluate_epoch(model, dataloader, criterion, device):\n",
    "#     model.eval()\n",
    "#     total_loss = 0.0\n",
    "#     all_labels = []\n",
    "#     all_preds = []\n",
    "#     all_probs = []\n",
    "#     active_streams = model.stream_names\n",
    "#     with torch.no_grad():\n",
    "#         for features, labels in tqdm(dataloader, desc=\"Evaluating\", leave=False):\n",
    "#             input_features = {name: features[name].to(device) for name in active_streams if name in features}\n",
    "#             labels = labels.to(device)\n",
    "#             outputs = model(input_features)\n",
    "#             loss = criterion(outputs, labels)\n",
    "#             total_loss += loss.item()\n",
    "#             probs = torch.softmax(outputs, dim=1)\n",
    "#             preds = torch.argmax(probs, dim=1)\n",
    "#             all_labels.extend(labels.cpu().numpy())\n",
    "#             all_preds.extend(preds.cpu().numpy())\n",
    "#             all_probs.extend(probs.cpu().numpy())\n",
    "#     avg_loss = total_loss / len(dataloader)\n",
    "#     all_probs = np.array(all_probs); all_labels = np.array(all_labels); all_preds = np.array(all_preds)\n",
    "#     accuracy = accuracy_score(all_labels, all_preds)\n",
    "#     precision, recall, f1, _ = precision_recall_fscore_support(all_labels, all_preds, average='binary', pos_label=1, zero_division=0)\n",
    "#     auc = roc_auc_score(all_labels, all_probs[:, 1]) if len(np.unique(all_labels)) > 1 else float('nan')\n",
    "#     return {'loss': avg_loss, 'accuracy': accuracy, 'precision': precision, 'recall': recall, 'f1': f1, 'auc': auc}\n",
    "\n",
    "# def get_predictions_and_labels(model, dataloader, device):\n",
    "#     model.eval(); all_labels = []; all_preds = []\n",
    "#     active_streams = model.stream_names\n",
    "#     with torch.no_grad():\n",
    "#         for features, labels in tqdm(dataloader, desc=\"Generating CM Data\", leave=False):\n",
    "#              input_features = {name: features[name].to(device) for name in active_streams if name in features}\n",
    "#              labels = labels.to(device); outputs = model(input_features); preds = torch.argmax(outputs, dim=1)\n",
    "#              all_labels.extend(labels.cpu().numpy()); all_preds.extend(preds.cpu().numpy())\n",
    "#     return np.array(all_labels), np.array(all_preds)\n",
    "\n",
    "# # --- Main Execution ---\n",
    "# if __name__ == '__main__':\n",
    "\n",
    "#     # --- Generate/Load PIE Database ---\n",
    "#     print(f\"Checking for PIE database cache at: {PIE_DATABASE_CACHE_PATH}\")\n",
    "#     if not os.path.exists(PIE_DATABASE_CACHE_PATH):\n",
    "#         if PIE is None: raise ImportError(\"PIE class not imported, cannot generate database.\")\n",
    "#         print(\"PIE database cache not found. Generating...\");\n",
    "#         pie_dataset_interface = PIE(data_path=PIE_ROOT_PATH, regen_database=True)\n",
    "#         pie_database = pie_dataset_interface.generate_database()\n",
    "#         if not pie_database: raise RuntimeError(\"Failed to generate PIE database.\")\n",
    "#         print(\"PIE database generated successfully.\")\n",
    "#     else:\n",
    "#         print(\"Loading PIE database from cache...\")\n",
    "#         try:\n",
    "#             with open(PIE_DATABASE_CACHE_PATH, 'rb') as f: pie_database = pickle.load(f)\n",
    "#             print(\"PIE database loaded successfully.\")\n",
    "#         except Exception as e: raise RuntimeError(f\"Failed to load PIE database: {e}\")\n",
    "\n",
    "#     # --- Calculate Standardization Parameters ---\n",
    "#     print(\"\\nCalculating standardization parameters from training set...\")\n",
    "#     all_train_ego_speeds = []; all_train_accX = []; all_train_accY = []; all_train_gyroZ = []\n",
    "#     for set_id in TRAIN_SETS_STR:\n",
    "#          if set_id in pie_database:\n",
    "#              for video_id, video_data in pie_database[set_id].items():\n",
    "#                   if 'vehicle_annotations' in video_data:\n",
    "#                        for frame_num, ego_frame_data in video_data['vehicle_annotations'].items():\n",
    "#                            speed = ego_frame_data.get('OBD_speed', 0.0);\n",
    "#                            if speed == 0.0: speed = ego_frame_data.get('GPS_speed', 0.0)\n",
    "#                            all_train_ego_speeds.append(speed); all_train_accX.append(ego_frame_data.get('accX', 0.0));\n",
    "#                            all_train_accY.append(ego_frame_data.get('accY', 0.0)); all_train_gyroZ.append(ego_frame_data.get('gyroZ', 0.0))\n",
    "#     scalers = {}\n",
    "#     if all_train_ego_speeds: scalers['ego_speed_mean'] = np.mean(all_train_ego_speeds); scalers['ego_speed_std'] = np.std(all_train_ego_speeds) if np.std(all_train_ego_speeds) > 1e-6 else 1.0; print(f\"  Ego Speed: Mean={scalers['ego_speed_mean']:.2f}, Std={scalers['ego_speed_std']:.2f}\")\n",
    "#     if all_train_accX: scalers['accX_mean'] = np.mean(all_train_accX); scalers['accX_std'] = np.std(all_train_accX) if np.std(all_train_accX) > 1e-6 else 1.0; scalers['accY_mean'] = np.mean(all_train_accY); scalers['accY_std'] = np.std(all_train_accY) if np.std(all_train_accY) > 1e-6 else 1.0; print(f\"  Ego AccX: Mean={scalers['accX_mean']:.2f}, Std={scalers['accX_std']:.2f}\"); print(f\"  Ego AccY: Mean={scalers['accY_mean']:.2f}, Std={scalers['accY_std']:.2f}\")\n",
    "#     if all_train_gyroZ: scalers['gyroZ_mean'] = np.mean(all_train_gyroZ); scalers['gyroZ_std'] = np.std(all_train_gyroZ) if np.std(all_train_gyroZ) > 1e-6 else 1.0; print(f\"  Ego GyroZ: Mean={scalers['gyroZ_mean']:.2f}, Std={scalers['gyroZ_std']:.2f}\")\n",
    "#     print(\"Standardization parameters calculated.\")\n",
    "\n",
    "#     # --- Initialize FULL Datasets ---\n",
    "#     print(\"\\nInitializing full datasets...\")\n",
    "#     full_train_dataset = PIEDataset(pie_database, TRAIN_SETS_STR, POSE_DATA_DIR, SEQ_LEN, PRED_LEN, scalers, ACTIVE_STREAMS)\n",
    "#     val_dataset = PIEDataset(pie_database, VAL_SETS_STR, POSE_DATA_DIR, SEQ_LEN, PRED_LEN, scalers, ACTIVE_STREAMS)\n",
    "#     if len(full_train_dataset) == 0 or len(val_dataset) == 0: raise ValueError(\"Dataset loading failed.\")\n",
    "\n",
    "#     # --- Prepare and Balance Training Data ---\n",
    "#     print(\"\\nExtracting training data for balancing...\")\n",
    "#     training_data_dict = {stream: [] for stream in ACTIVE_STREAMS}; training_data_dict['label'] = []\n",
    "#     for i in tqdm(range(len(full_train_dataset)), desc=\"Extracting data\"):\n",
    "#          features, label = full_train_dataset[i]\n",
    "#          for stream_name in ACTIVE_STREAMS: training_data_dict[stream_name].append(features[stream_name].numpy())\n",
    "#          training_data_dict['label'].append([label.item()]) # Store label as list containing the item\n",
    "#     print(f\"Original training samples: {len(training_data_dict['label'])}\")\n",
    "#     del full_train_dataset # Free memory\n",
    "\n",
    "#     label_key_for_balancing = 'label' # Key used in training_data_dict\n",
    "#     balanced_train_data_dict = balance_samples_count(training_data_dict, label_type=label_key_for_balancing)\n",
    "#     del training_data_dict # Free up memory\n",
    "\n",
    "#     # --- Create Balanced Training Dataset and DataLoaders ---\n",
    "#     print(\"\\nCreating DataLoaders...\")\n",
    "#     try: balanced_train_dataset = BalancedDataset(balanced_train_data_dict, ACTIVE_STREAMS, label_key=label_key_for_balancing); del balanced_train_data_dict\n",
    "#     except Exception as e: print(f\"Error creating BalancedDataset: {e}\"); raise\n",
    "#     if len(balanced_train_dataset) == 0: raise ValueError(\"Balanced training dataset is empty!\")\n",
    "\n",
    "#     train_loader = DataLoader(balanced_train_dataset, batch_size=BATCH_SIZE, shuffle=True, num_workers=2, pin_memory=True)\n",
    "#     val_loader = DataLoader(val_dataset, batch_size=BATCH_SIZE, shuffle=False, num_workers=2, pin_memory=True)\n",
    "#     print(\"DataLoaders created.\")\n",
    "\n",
    "#     # --- Initialize Model ---\n",
    "#     input_sizes = {}\n",
    "#     for stream in ACTIVE_STREAMS:\n",
    "#         size_constant_name = f'INPUT_SIZE_{stream.upper()}'\n",
    "#         special_cases = {'TRAFFIC_LIGHT': 'TL_STATE', 'STATIC_CONTEXT': 'STATIC', 'EGO_SPEED': 'EGO_SPEED', 'EGO_ACC': 'EGO_ACC', 'EGO_GYRO': 'EGO_GYRO', 'PED_ACTION': 'PED_ACTION', 'PED_LOOK': 'PED_LOOK', 'PED_OCCLUSION': 'PED_OCC'}\n",
    "#         stream_upper_key = stream.upper()\n",
    "#         suffix = special_cases.get(stream_upper_key)\n",
    "#         if suffix: size_constant_name = f'INPUT_SIZE_{suffix}'\n",
    "#         elif stream == 'bbox': size_constant_name = 'INPUT_SIZE_BBOX'\n",
    "#         elif stream == 'pose': size_constant_name = 'INPUT_SIZE_POSE'\n",
    "#         if size_constant_name in globals(): input_sizes[stream] = globals()[size_constant_name]\n",
    "#         else: raise ValueError(f\"Input size constant {size_constant_name} not found for stream {stream}\")\n",
    "\n",
    "#     model = MultiStreamAdaptiveLSTM(\n",
    "#         input_sizes=input_sizes, lstm_hidden_size=LSTM_HIDDEN_SIZE,\n",
    "#         num_lstm_layers=NUM_LSTM_LAYERS, num_classes=NUM_CLASSES, attention_dim=ATTENTION_DIM,\n",
    "#         dropout_rate=DROPOUT_RATE, stream_names=ACTIVE_STREAMS ).to(DEVICE)\n",
    "\n",
    "#     print(\"\\n--- Model Architecture ---\"); print(model); num_params = sum(p.numel() for p in model.parameters() if p.requires_grad); print(f\"Total Trainable Parameters: {num_params:,}\"); print(\"-\" * 30)\n",
    "\n",
    "#     # --- Class Weighting & Optimizer ---\n",
    "#     print(\"\\nCalculating Class Weights for Loss Function...\")\n",
    "#     balanced_train_labels_list = balanced_train_dataset.labels.tolist() # Use balanced list\n",
    "#     count_0 = balanced_train_labels_list.count(0); count_1 = balanced_train_labels_list.count(1)\n",
    "#     total = len(balanced_train_labels_list)\n",
    "#     if total == 0: print(\"Warning: Balanced dataset empty. Use equal weights.\"); weight_0 = 1.0; weight_1 = 1.0\n",
    "#     elif count_0 == 0: print(\"Warning: Class 0 missing. Adjust weights.\"); weight_0 = 0.0; weight_1 = 1.0\n",
    "#     elif count_1 == 0: print(\"Warning: Class 1 missing. Adjust weights.\"); weight_0 = 1.0; weight_1 = 0.0\n",
    "#     else: weight_0 = total / (2.0 * count_0); weight_1 = total / (2.0 * count_1) # Inverse frequency\n",
    "#     class_weights = torch.tensor([weight_0, weight_1], dtype=torch.float32).to(DEVICE)\n",
    "#     print(f\"Using Class Weights for Loss: 0={weight_0:.2f}, 1={weight_1:.2f}\")\n",
    "#     criterion = nn.CrossEntropyLoss(weight=class_weights)\n",
    "#     # criterion = nn.CrossEntropyLoss() # Uncomment to disable class weighting\n",
    "#     optimizer = optim.Adam(model.parameters(), lr=LEARNING_RATE)\n",
    "#     best_val_f1 = -1.0; train_losses, val_losses = [], []; train_accs, val_accs = [], []; val_f1s = []\n",
    "\n",
    "#     # --- Training Loop ---\n",
    "#     print(\"\\n--- Starting Training on Balanced Data---\")\n",
    "#     for epoch in range(NUM_EPOCHS):\n",
    "#         epoch_start_time = time.time()\n",
    "#         train_loss, train_acc = train_epoch(model, train_loader, optimizer, criterion, DEVICE)\n",
    "#         val_metrics = evaluate_epoch(model, val_loader, criterion, DEVICE)\n",
    "#         epoch_duration = time.time() - epoch_start_time\n",
    "#         train_losses.append(train_loss); val_losses.append(val_metrics['loss'])\n",
    "#         train_accs.append(train_acc); val_accs.append(val_metrics['accuracy'])\n",
    "#         val_f1s.append(val_metrics['f1'])\n",
    "#         print(f\"--- Epoch {epoch+1}/{NUM_EPOCHS} ({epoch_duration:.2f} sec) ---\")\n",
    "#         print(f\"  Train Loss: {train_loss:.4f}, Train Acc: {train_acc:.4f}\")\n",
    "#         print(f\"  Val Loss:   {val_metrics['loss']:.4f}, Val Acc:  {val_metrics['accuracy']:.4f}\")\n",
    "#         print(f\"  Val Prec:   {val_metrics['precision']:.4f}, Recall: {val_metrics['recall']:.4f}, F1: {val_metrics['f1']:.4f}\")\n",
    "#         print(f\"  Val AUC:    {val_metrics['auc']:.4f}\")\n",
    "#         if val_metrics['f1'] > best_val_f1:\n",
    "#             best_val_f1 = val_metrics['f1']\n",
    "#             torch.save(model.state_dict(), 'best_model_balanced.pth')\n",
    "#             print(f\"  >> Saved new best model with F1: {best_val_f1:.4f}\")\n",
    "#         print(\"-\" * 30)\n",
    "#     print(\"--- Training Finished ---\")\n",
    "\n",
    "#     # --- Plotting ---\n",
    "#     print(\"\\n--- Plotting Training History ---\")\n",
    "#     fig, axes = plt.subplots(1, 2, figsize=(12, 5))\n",
    "#     axes[0].plot(range(1, NUM_EPOCHS + 1), train_losses, label='Train Loss')\n",
    "#     axes[0].plot(range(1, NUM_EPOCHS + 1), val_losses, label='Val Loss')\n",
    "#     axes[0].set_xlabel('Epoch'); axes[0].set_ylabel('Loss'); axes[0].set_title('Loss Curve'); axes[0].legend(); axes[0].grid(True)\n",
    "#     axes[1].plot(range(1, NUM_EPOCHS + 1), train_accs, label='Train Accuracy')\n",
    "#     axes[1].plot(range(1, NUM_EPOCHS + 1), val_accs, label='Val Accuracy')\n",
    "#     axes[1].plot(range(1, NUM_EPOCHS + 1), val_f1s, label='Val F1-Score', linestyle='--')\n",
    "#     axes[1].set_xlabel('Epoch'); axes[1].set_ylabel('Metric'); axes[1].set_title('Accuracy & F1-Score Curve'); axes[1].legend(); axes[1].grid(True)\n",
    "#     plt.tight_layout(); plt.show()\n",
    "\n",
    "#     # --- Final Evaluation ---\n",
    "#     print(\"\\n--- Final Evaluation on Validation Set using Best Model ---\")\n",
    "#     best_model_path = 'best_model_balanced.pth'\n",
    "#     if os.path.exists(best_model_path):\n",
    "#         print(f\"Loading best saved model '{best_model_path}'\")\n",
    "#         model.load_state_dict(torch.load(best_model_path, map_location=DEVICE))\n",
    "#     else: print(\"Warning: No saved best model found. Evaluating final model.\")\n",
    "#     final_metrics = evaluate_epoch(model, val_loader, criterion, DEVICE)\n",
    "#     true_labels, pred_labels = get_predictions_and_labels(model, val_loader, DEVICE)\n",
    "#     cm = confusion_matrix(true_labels, pred_labels, labels=[0, 1])\n",
    "#     labels_display = ['Not Crossing', 'Crossing']\n",
    "#     print(\"\\n--- Final Performance Metrics ---\")\n",
    "#     print(f\"  Accuracy:  {final_metrics['accuracy']:.4f}\"); print(f\"  Precision: {final_metrics['precision']:.4f}\"); print(f\"  Recall:    {final_metrics['recall']:.4f}\"); print(f\"  F1 Score:  {final_metrics['f1']:.4f}\"); print(f\"  AUC:       {final_metrics['auc']:.4f}\"); print(f\"  Loss:      {final_metrics['loss']:.4f}\")\n",
    "#     print(\"\\n--- Confusion Matrix ---\")\n",
    "#     disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=labels_display); disp.plot(cmap=plt.cm.Blues); plt.title('Confusion Matrix (Validation Set)'); plt.show()\n",
    "\n",
    "#     print(\"\\n--- Script Complete ---\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "1b89bb7c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T15:19:43.225212Z",
     "iopub.status.busy": "2025-05-01T15:19:43.224968Z",
     "iopub.status.idle": "2025-05-01T15:19:43.233613Z",
     "shell.execute_reply": "2025-05-01T15:19:43.232824Z"
    },
    "papermill": {
     "duration": 0.020075,
     "end_time": "2025-05-01T15:19:43.234801",
     "exception": false,
     "start_time": "2025-05-01T15:19:43.214726",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # --- CELL 1: DATA PREPARATION AND BALANCING (RUN ONCE) ---\n",
    "\n",
    "# import torch\n",
    "# import torch.nn as nn\n",
    "# import torch.optim as optim\n",
    "# from torch.utils.data import Dataset, DataLoader\n",
    "# import xml.etree.ElementTree as ET\n",
    "# import os\n",
    "# import numpy as np\n",
    "# from sklearn.metrics import accuracy_score, precision_recall_fscore_support, roc_auc_score, confusion_matrix, ConfusionMatrixDisplay\n",
    "# from sklearn.preprocessing import StandardScaler  # For standardizing ego features\n",
    "# from tqdm.notebook import tqdm\n",
    "# import random\n",
    "# import math\n",
    "# import zipfile\n",
    "# import cv2\n",
    "# import pandas as pd\n",
    "# import matplotlib.pyplot as plt\n",
    "# import seaborn as sns\n",
    "# import pickle\n",
    "# import time\n",
    "# import sys\n",
    "\n",
    "# # --- Add PIE utilities path if necessary (adjust path) ---\n",
    "# pie_utilities_path = '/kaggle/working/PIE/utilities'\n",
    "# if pie_utilities_path not in sys.path:\n",
    "#     sys.path.insert(0, pie_utilities_path)\n",
    "# try:\n",
    "#     from pie_data import PIE\n",
    "# except ImportError as e:\n",
    "#     print(f\"Warning: Could not import PIE class from {pie_utilities_path}. Database must already exist. Error: {e}\")\n",
    "#     PIE = None\n",
    "\n",
    "# # --- Configuration (Copy relevant parts here) ---\n",
    "# PIE_ROOT_PATH = '/kaggle/working/PIE'\n",
    "# VIDEO_INPUT_DIR = '/kaggle/input'\n",
    "# POSE_DATA_DIR = '/kaggle/input/pose-data/extracted_poses2'\n",
    "# PIE_DATABASE_CACHE_PATH = '/kaggle/input/pie-database/pie_database.pkl'\n",
    "\n",
    "# # --- Define ALL possible streams you might want to experiment with ---\n",
    "# # --- The data extraction will prepare ALL of these ---\n",
    "# ALL_POSSIBLE_STREAMS = [\n",
    "#     'bbox', 'pose', 'ego_speed', 'ego_acc', 'ego_gyro',\n",
    "#     'ped_action', 'ped_look', 'ped_occlusion', 'traffic_light', 'static_context'\n",
    "# ]\n",
    "# print(f\"Data will be prepared for streams: {ALL_POSSIBLE_STREAMS}\")\n",
    "\n",
    "# # --- Model Hyperparameters (Needed for Dataset) ---\n",
    "# SEQ_LEN = 30\n",
    "# PRED_LEN = 1\n",
    "\n",
    "# # --- Input Sizes (Needed for Dataset Error Handling & Definitions) ---\n",
    "# INPUT_SIZE_BBOX = 4\n",
    "# INPUT_SIZE_POSE = 34\n",
    "# INPUT_SIZE_EGO_SPEED = 1\n",
    "# INPUT_SIZE_EGO_ACC = 2\n",
    "# INPUT_SIZE_EGO_GYRO = 1\n",
    "# INPUT_SIZE_PED_ACTION = 1\n",
    "# INPUT_SIZE_PED_LOOK = 1\n",
    "# INPUT_SIZE_PED_OCC = 1\n",
    "# INPUT_SIZE_TL_STATE = 4\n",
    "# NUM_SIGNALIZED_CATS = 4\n",
    "# NUM_INTERSECTION_CATS = 5\n",
    "# NUM_AGE_CATS = 4\n",
    "# NUM_GENDER_CATS = 3\n",
    "# INPUT_SIZE_STATIC = NUM_SIGNALIZED_CATS + NUM_INTERSECTION_CATS + NUM_AGE_CATS + NUM_GENDER_CATS  # = 16\n",
    "\n",
    "# # --- Dataset Splits ---\n",
    "# TRAIN_SETS_STR = ['set01', 'set02', 'set04']\n",
    "# VAL_SETS_STR = ['set05', 'set06']\n",
    "\n",
    "# # --- Mappings ---\n",
    "# TL_STATE_MAP = {'__undefined__': 0, 'red': 1, 'yellow': 2, 'green': 3}\n",
    "# NUM_TL_STATES = len(TL_STATE_MAP)\n",
    "# SIGNALIZED_MAP = {'n/a': 0, 'C': 1, 'S': 2, 'CS': 3}\n",
    "# INTERSECTION_MAP = {'midblock': 0, 'T': 1, 'T-left': 2, 'T-right': 3, 'four-way': 4}\n",
    "# AGE_MAP = {'child': 0, 'young': 1, 'adult': 2, 'senior': 3}\n",
    "# GENDER_MAP = {'n/a': 0, 'female': 1, 'male': 2}\n",
    "\n",
    "# # --- Output Files from this Cell ---\n",
    "# BALANCED_DATA_PKL_PATH = \"/kaggle/working/balanced_train_data.pkl\"\n",
    "# SCALERS_PKL_PATH = \"/kaggle/working/scalers.pkl\"\n",
    "# VAL_SEQUENCES_PKL_PATH = \"/kaggle/working/val_sequences.pkl\"  # Save sequence info for val set\n",
    "\n",
    "# # --- Helper: One-Hot Encoding ---\n",
    "# def to_one_hot(index, num_classes):\n",
    "#     vec = np.zeros(num_classes, dtype=np.float32)\n",
    "#     if 0 <= index < num_classes:\n",
    "#         vec[index] = 1.0\n",
    "#     else:\n",
    "#         vec[0] = 1.0  # Default\n",
    "#     return vec\n",
    "\n",
    "# # --- Balancing Function ---\n",
    "# def balance_samples_count(seq_data, label_type, random_seed=42):\n",
    "#     print('---------------------------------------------------------')\n",
    "#     print(f\"Balancing samples based on '{label_type}' key\")\n",
    "#     if label_type not in seq_data:\n",
    "#         raise KeyError(f\"Label type '{label_type}' not found.\")\n",
    "#     try:\n",
    "#         gt_labels = [lbl[0] for lbl in seq_data[label_type]]\n",
    "#     except (IndexError, TypeError):\n",
    "#         raise ValueError(f\"Labels under '{label_type}' not in expected format [[label_val]].\")\n",
    "#     if not all(l in [0, 1] for l in gt_labels):\n",
    "#         print(f\"Warning: Labels for balancing contain values other than 0 or 1.\")\n",
    "#     num_pos_samples = np.count_nonzero(np.array(gt_labels))\n",
    "#     num_neg_samples = len(gt_labels) - num_pos_samples\n",
    "#     new_seq_data = {}\n",
    "#     if num_neg_samples == num_pos_samples:\n",
    "#         print('Samples already balanced.')\n",
    "#         return seq_data.copy()\n",
    "#     else:\n",
    "#         print(f'Unbalanced: Positive (1): {num_pos_samples} | Negative (0): {num_neg_samples}')\n",
    "#         majority_label = 0 if num_neg_samples > num_pos_samples else 1\n",
    "#         minority_count = min(num_neg_samples, num_pos_samples)\n",
    "#         print(f\"Undersampling majority class ({majority_label}) to match count ({minority_count}).\")\n",
    "#         majority_indices = np.where(np.array(gt_labels) == majority_label)[0]\n",
    "#         minority_indices = np.where(np.array(gt_labels) != majority_label)[0]\n",
    "#         np.random.seed(random_seed)\n",
    "#         keep_majority_indices = np.random.choice(majority_indices, size=minority_count, replace=False)\n",
    "#         final_indices = np.concatenate((minority_indices, keep_majority_indices))\n",
    "#         np.random.shuffle(final_indices)\n",
    "#         for k, v_list in seq_data.items():\n",
    "#             if isinstance(v_list, list) and len(v_list) == len(gt_labels):\n",
    "#                 try:\n",
    "#                     if v_list and isinstance(v_list[0], np.ndarray):\n",
    "#                         v_array = np.array(v_list)\n",
    "#                         new_seq_data[k] = list(v_array[final_indices])\n",
    "#                     else:\n",
    "#                         new_seq_data[k] = [v_list[i] for i in final_indices]\n",
    "#                 except Exception as e:\n",
    "#                     print(f\"Error processing key '{k}' during balancing: {e}. Skip.\")\n",
    "#                     new_seq_data[k] = []\n",
    "#             else:\n",
    "#                 print(f\"Warn: Skipping key '{k}' in balancing.\")\n",
    "#                 new_seq_data[k] = v_list\n",
    "#         if label_type in new_seq_data:\n",
    "#             new_gt_labels = [lbl[0] for lbl in new_seq_data[label_type]]\n",
    "#             final_pos = np.count_nonzero(np.array(new_gt_labels))\n",
    "#             final_neg = len(new_gt_labels) - final_pos\n",
    "#             print(f'Balanced:   Positive (1): {final_pos} | Negative (0): {final_neg}')\n",
    "#         else:\n",
    "#             print(\"Error: Label key lost during balancing.\")\n",
    "#         print('---------------------------------------------------------')\n",
    "#         return new_seq_data\n",
    "\n",
    "# # --- Dataset Class (Needed for initial loading) ---\n",
    "# class PIEDataset(Dataset):\n",
    "#     # --- (Dataset class definition - identical to the previous working version) ---\n",
    "#     # --- (Includes __init__, _load_pose_data, _generate_sequence_list, __len__, __getitem__) ---\n",
    "#     def __init__(self, pie_database, set_names, pose_data_dir, seq_len, pred_len, scalers=None, active_streams=None):\n",
    "#         self.pie_db = pie_database\n",
    "#         self.set_names = set_names\n",
    "#         self.pose_data_dir = pose_data_dir\n",
    "#         self.seq_len = seq_len\n",
    "#         self.pred_len = pred_len\n",
    "#         self.scalers = scalers or {}\n",
    "#         # Store ALL possible streams; __getitem__ will generate data for all streams.\n",
    "#         self.active_streams = ALL_POSSIBLE_STREAMS  # Generate all streams for potential use\n",
    "#         self.sequences = []\n",
    "#         self.all_pose_data = {}\n",
    "#         self._input_sizes_for_error = self._get_input_sizes_dict()  # Get sizes for all streams\n",
    "#         self._load_pose_data()\n",
    "#         self._generate_sequence_list()\n",
    "#         if not self.sequences:\n",
    "#             raise ValueError(f\"Dataset init failed: No sequences for {self.set_names}\")\n",
    "\n",
    "#     def _get_input_sizes_dict(self):\n",
    "#         input_sizes = {}\n",
    "#         special_cases = {\n",
    "#             'TRAFFIC_LIGHT': 'TL_STATE',\n",
    "#             'STATIC_CONTEXT': 'STATIC',\n",
    "#             'EGO_SPEED': 'EGO_SPEED',\n",
    "#             'EGO_ACC': 'EGO_ACC',\n",
    "#             'EGO_GYRO': 'EGO_GYRO',\n",
    "#             'PED_ACTION': 'PED_ACTION',\n",
    "#             'PED_LOOK': 'PED_LOOK',\n",
    "#             'PED_OCCLUSION': 'PED_OCC'\n",
    "#         }\n",
    "#         for stream in self.active_streams:\n",
    "#             stream_upper_key = stream.upper()\n",
    "#             if stream_upper_key in special_cases:\n",
    "#                 size_constant_name = f\"INPUT_SIZE_{special_cases[stream_upper_key]}\"\n",
    "#             elif stream == 'bbox':\n",
    "#                 size_constant_name = 'INPUT_SIZE_BBOX'\n",
    "#             elif stream == 'pose':\n",
    "#                 size_constant_name = 'INPUT_SIZE_POSE'\n",
    "#             else:\n",
    "#                 size_constant_name = f\"INPUT_SIZE_{stream.upper()}\"\n",
    "#             if size_constant_name in globals():\n",
    "#                 input_sizes[stream] = globals()[size_constant_name]\n",
    "#             else:\n",
    "#                 input_sizes[stream] = 1\n",
    "#         return input_sizes\n",
    "\n",
    "#     def _load_pose_data(self):\n",
    "#         print(f\"\\nLoading pose data for sets: {self.set_names} from {self.pose_data_dir}\")\n",
    "#         sets_loaded_count = 0\n",
    "#         for set_id in tqdm(self.set_names, desc=\"Loading Pose Sets\"):\n",
    "#             self.all_pose_data[set_id] = {}\n",
    "#             pose_set_path = os.path.join(self.pose_data_dir, set_id)\n",
    "#             if not os.path.isdir(pose_set_path):\n",
    "#                 print(f\"Warn: Pose dir missing for {set_id} at {pose_set_path}\")\n",
    "#                 continue\n",
    "#             pkl_files_in_set = [f for f in os.listdir(pose_set_path)\n",
    "#                                 if f.startswith(f\"{set_id}_\") and f.endswith(\"_poses.pkl\")]\n",
    "#             if not pkl_files_in_set:\n",
    "#                 continue\n",
    "#             loaded_video_count = 0\n",
    "#             for pkl_filename in tqdm(pkl_files_in_set, desc=f\"Loading PKLs for {set_id}\", leave=False):\n",
    "#                 pkl_file_path = os.path.join(pose_set_path, pkl_filename)\n",
    "#                 try:\n",
    "#                     with open(pkl_file_path, 'rb') as f:\n",
    "#                         loaded_pkl_content = pickle.load(f)\n",
    "#                     if len(loaded_pkl_content) != 1:\n",
    "#                         continue\n",
    "#                     unique_video_key, video_data = list(loaded_pkl_content.items())[0]\n",
    "#                     video_id = \"_\".join(unique_video_key.split('_')[1:])\n",
    "#                     self.all_pose_data[set_id][video_id] = video_data\n",
    "#                     loaded_video_count += 1\n",
    "#                 except FileNotFoundError:\n",
    "#                     pass\n",
    "#                 except Exception as e:\n",
    "#                     print(f\"Error loading pose PKL {pkl_file_path}: {e}\")\n",
    "#             if loaded_video_count > 0:\n",
    "#                 sets_loaded_count += 1\n",
    "#         print(f\"Finished loading pose data for {sets_loaded_count} sets.\")\n",
    "\n",
    "#     def _generate_sequence_list(self):\n",
    "#         print(f\"Generating sequence list from PIE database for sets: {self.set_names}\")\n",
    "#         sequence_count = 0\n",
    "#         ped_count = 0\n",
    "#         for set_id in tqdm(self.set_names, desc=\"Generating Sequences\"):\n",
    "#             if set_id not in self.pie_db:\n",
    "#                 continue\n",
    "#             for video_id, video_data in self.pie_db[set_id].items():\n",
    "#                 if 'ped_annotations' not in video_data:\n",
    "#                     continue\n",
    "#                 for ped_id, ped_data in video_data['ped_annotations'].items():\n",
    "#                     ped_count += 1\n",
    "#                     if 'frames' not in ped_data or len(ped_data['frames']) < self.seq_len + self.pred_len:\n",
    "#                         continue\n",
    "#                     sorted_frames = sorted(ped_data['frames'])\n",
    "#                     for i in range(len(sorted_frames) - self.seq_len - self.pred_len + 1):\n",
    "#                         start_frame = sorted_frames[i]\n",
    "#                         end_frame_observe = sorted_frames[i + self.seq_len - 1]\n",
    "#                         if end_frame_observe - start_frame != self.seq_len - 1:\n",
    "#                             continue\n",
    "#                         target_frame_actual_idx = i + self.seq_len + self.pred_len - 1\n",
    "#                         if target_frame_actual_idx >= len(sorted_frames):\n",
    "#                             continue\n",
    "#                         target_frame = sorted_frames[target_frame_actual_idx]\n",
    "#                         if target_frame - end_frame_observe != self.pred_len:\n",
    "#                             continue\n",
    "#                         self.sequences.append((set_id, video_id, ped_id, start_frame))\n",
    "#                         sequence_count += 1\n",
    "#         print(f\"Found {sequence_count} valid sequences from {ped_count} pedestrian tracks.\")\n",
    "\n",
    "#     def __len__(self):\n",
    "#         return len(self.sequences)\n",
    "\n",
    "#     def __getitem__(self, idx):\n",
    "#         # Get sequence identifiers\n",
    "#         set_id, video_id, ped_id, start_frame = self.sequences[idx]\n",
    "#         frame_nums = list(range(start_frame, start_frame + self.seq_len))\n",
    "#         target_frame_num = start_frame + self.seq_len + self.pred_len - 1\n",
    "\n",
    "#         video_db = self.pie_db.get(set_id, {}).get(video_id, {})\n",
    "#         ped_db = video_db.get('ped_annotations', {}).get(ped_id, {})\n",
    "#         ego_db = video_db.get('vehicle_annotations', {})\n",
    "#         traffic_db = video_db.get('traffic_annotations', {})\n",
    "#         ped_attributes = ped_db.get('attributes', {})\n",
    "\n",
    "#         # Initialize feature sequences and label\n",
    "#         feature_sequences = {stream: [] for stream in self.active_streams}\n",
    "#         label = 0\n",
    "\n",
    "#         # Determine target label (default is 0 if not found)\n",
    "#         if 'frames' in ped_db and 'behavior' in ped_db and 'cross' in ped_db['behavior']:\n",
    "#             try:\n",
    "#                 target_frame_db_idx = ped_db['frames'].index(target_frame_num)\n",
    "#                 label = ped_db['behavior']['cross'][target_frame_db_idx]\n",
    "#                 if label == -1:\n",
    "#                     label = 0\n",
    "#             except (ValueError, IndexError):\n",
    "#                 pass\n",
    "\n",
    "#         # Static features\n",
    "#         static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "#         if 'static_context' in self.active_streams:\n",
    "#             sig_idx = ped_attributes.get('signalized', 0)\n",
    "#             int_idx = ped_attributes.get('intersection', 0)\n",
    "#             age_idx = ped_attributes.get('age', 2)\n",
    "#             gen_idx = ped_attributes.get('gender', 0)\n",
    "#             static_vec = np.concatenate([\n",
    "#                 to_one_hot(sig_idx, NUM_SIGNALIZED_CATS),\n",
    "#                 to_one_hot(int_idx, NUM_INTERSECTION_CATS),\n",
    "#                 to_one_hot(age_idx, NUM_AGE_CATS),\n",
    "#                 to_one_hot(gen_idx, NUM_GENDER_CATS)\n",
    "#             ])\n",
    "#             if static_vec.shape[0] != INPUT_SIZE_STATIC:\n",
    "#                 static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "\n",
    "#         # Loop over each frame in the sequence\n",
    "#         for frame_num in frame_nums:\n",
    "#             frame_db_idx = -1\n",
    "#             if 'frames' in ped_db:\n",
    "#                 try:\n",
    "#                     frame_db_idx = ped_db['frames'].index(frame_num)\n",
    "#                 except ValueError:\n",
    "#                     pass\n",
    "#             ego_frame_data = ego_db.get(frame_num, {})\n",
    "\n",
    "#             # 'bbox' stream\n",
    "#             if 'bbox' in self.active_streams:\n",
    "#                 bbox_norm = np.zeros(INPUT_SIZE_BBOX, dtype=np.float32)\n",
    "#                 if frame_db_idx != -1 and 'bbox' in ped_db and len(ped_db['bbox']) > frame_db_idx:\n",
    "#                     try:\n",
    "#                         x1, y1, x2, y2 = ped_db['bbox'][frame_db_idx]\n",
    "#                         img_w = video_db.get('width', 1920)\n",
    "#                         img_h = video_db.get('height', 1080)\n",
    "#                         if img_w > 0 and img_h > 0:\n",
    "#                             cx = ((x1 + x2) / 2) / img_w\n",
    "#                             cy = ((y1 + y2) / 2) / img_h\n",
    "#                             w = (x2 - x1) / img_w\n",
    "#                             h = (y2 - y1) / img_h\n",
    "#                             if w > 0 and h > 0 and 0 <= cx <= 1 and 0 <= cy <= 1:\n",
    "#                                 bbox_norm = np.array([cx, cy, w, h], dtype=np.float32)\n",
    "#                     except Exception:\n",
    "#                         pass\n",
    "#                 feature_sequences['bbox'].append(bbox_norm)\n",
    "\n",
    "#             # 'pose' stream\n",
    "#             if 'pose' in self.active_streams:\n",
    "#                 pose_vector = np.zeros(INPUT_SIZE_POSE, dtype=np.float32)\n",
    "#                 vid_pose_data = self.all_pose_data.get(set_id, {}).get(video_id, {})\n",
    "#                 frame_pose_data = vid_pose_data.get(frame_num, {})\n",
    "#                 loaded_pose = frame_pose_data.get(ped_id)\n",
    "#                 if loaded_pose is not None and isinstance(loaded_pose, np.ndarray) and loaded_pose.shape == (INPUT_SIZE_POSE,):\n",
    "#                     pose_vector = loaded_pose\n",
    "#                 feature_sequences['pose'].append(pose_vector)\n",
    "\n",
    "#             # 'ego_speed' stream\n",
    "#             if 'ego_speed' in self.active_streams:\n",
    "#                 speed = ego_frame_data.get('OBD_speed', 0.0)\n",
    "#                 if speed == 0.0:\n",
    "#                     speed = ego_frame_data.get('GPS_speed', 0.0)\n",
    "#                 speed_scaled = (speed - self.scalers.get('ego_speed_mean', 0.0)) / self.scalers.get('ego_speed_std', 1.0)\n",
    "#                 feature_sequences['ego_speed'].append([speed_scaled])\n",
    "\n",
    "#             # 'ego_acc' stream\n",
    "#             if 'ego_acc' in self.active_streams:\n",
    "#                 accX = ego_frame_data.get('accX', 0.0)\n",
    "#                 accY = ego_frame_data.get('accY', 0.0)\n",
    "#                 accX_scaled = (accX - self.scalers.get('accX_mean', 0.0)) / self.scalers.get('accX_std', 1.0)\n",
    "#                 accY_scaled = (accY - self.scalers.get('accY_mean', 0.0)) / self.scalers.get('accY_std', 1.0)\n",
    "#                 feature_sequences['ego_acc'].append([accX_scaled, accY_scaled])\n",
    "\n",
    "#             # 'ego_gyro' stream\n",
    "#             if 'ego_gyro' in self.active_streams:\n",
    "#                 gyroZ = ego_frame_data.get('gyroZ', 0.0)\n",
    "#                 gyroZ_scaled = (gyroZ - self.scalers.get('gyroZ_mean', 0.0)) / self.scalers.get('gyroZ_std', 1.0)\n",
    "#                 feature_sequences['ego_gyro'].append([gyroZ_scaled])\n",
    "\n",
    "#             # 'ped_action' stream\n",
    "#             if 'ped_action' in self.active_streams:\n",
    "#                 action = 0\n",
    "#                 if frame_db_idx != -1 and 'behavior' in ped_db and 'action' in ped_db['behavior'] and len(ped_db['behavior']['action']) > frame_db_idx:\n",
    "#                     action = ped_db['behavior']['action'][frame_db_idx]\n",
    "#                 feature_sequences['ped_action'].append([float(action)])\n",
    "\n",
    "#             # 'ped_look' stream\n",
    "#             if 'ped_look' in self.active_streams:\n",
    "#                 look = 0\n",
    "#                 if frame_db_idx != -1 and 'behavior' in ped_db and 'look' in ped_db['behavior'] and len(ped_db['behavior']['look']) > frame_db_idx:\n",
    "#                     look = ped_db['behavior']['look'][frame_db_idx]\n",
    "#                 feature_sequences['ped_look'].append([float(look)])\n",
    "\n",
    "#             # 'ped_occlusion' stream\n",
    "#             if 'ped_occlusion' in self.active_streams:\n",
    "#                 occ = 0.0\n",
    "#                 if frame_db_idx != -1 and 'occlusion' in ped_db and len(ped_db['occlusion']) > frame_db_idx:\n",
    "#                     occ_val = ped_db['occlusion'][frame_db_idx]\n",
    "#                     occ = float(occ_val) / 2.0\n",
    "#                 feature_sequences['ped_occlusion'].append([occ])\n",
    "\n",
    "#             # 'traffic_light' stream\n",
    "#             if 'traffic_light' in self.active_streams:\n",
    "#                 state_int = 0\n",
    "#                 for obj_id, obj_data in traffic_db.items():\n",
    "#                     if obj_data.get('obj_class') == 'traffic_light' and 'frames' in obj_data and 'state' in obj_data:\n",
    "#                         try:\n",
    "#                             tl_frame_idx = obj_data['frames'].index(frame_num)\n",
    "#                             state_val = obj_data['state'][tl_frame_idx]\n",
    "#                             if state_val != 0:\n",
    "#                                 state_int = state_val\n",
    "#                                 break\n",
    "#                         except (ValueError, IndexError):\n",
    "#                             continue\n",
    "#                 feature_sequences['traffic_light'].append(to_one_hot(state_int, NUM_TL_STATES))\n",
    "\n",
    "#             # 'static_context' stream\n",
    "#             if 'static_context' in self.active_streams:\n",
    "#                 feature_sequences['static_context'].append(static_vec)\n",
    "\n",
    "#         features = {}\n",
    "#         try:\n",
    "#             for stream_name in self.active_streams:\n",
    "#                 features[stream_name] = torch.tensor(\n",
    "#                     np.array(feature_sequences[stream_name], dtype=np.float32),\n",
    "#                     dtype=torch.float32\n",
    "#                 )\n",
    "#         except Exception as e:\n",
    "#             print(f\"Error converting features idx {idx}: {e}. Return dummy.\")\n",
    "#             features = {\n",
    "#                 name: torch.zeros((self.seq_len, self._input_sizes_for_error.get(name, 1)), dtype=torch.float32)\n",
    "#                 for name in self.active_streams\n",
    "#             }\n",
    "#         return features, torch.tensor(label, dtype=torch.long)\n",
    "\n",
    "# # --- Main Data Prep Execution Block ---\n",
    "# if __name__ == '__main__':\n",
    "\n",
    "#     # --- Generate/Load PIE Database ---\n",
    "#     print(f\"Checking for PIE database cache at: {PIE_DATABASE_CACHE_PATH}\")\n",
    "#     if not os.path.exists(PIE_DATABASE_CACHE_PATH):\n",
    "#         if PIE is None:\n",
    "#             raise ImportError(\"PIE class not imported, cannot generate database.\")\n",
    "#         print(\"PIE database cache not found. Generating...\")\n",
    "#         pie_dataset_interface = PIE(data_path=PIE_ROOT_PATH, regen_database=True)\n",
    "#         pie_database = pie_dataset_interface.generate_database()\n",
    "#         if not pie_database:\n",
    "#             raise RuntimeError(\"Failed to generate PIE database.\")\n",
    "#         print(\"PIE database generated successfully.\")\n",
    "#     else:\n",
    "#         print(\"Loading PIE database from cache...\")\n",
    "#         try:\n",
    "#             with open(PIE_DATABASE_CACHE_PATH, 'rb') as f:\n",
    "#                 pie_database = pickle.load(f)\n",
    "#             print(\"PIE database loaded successfully.\")\n",
    "#         except Exception as e:\n",
    "#             raise RuntimeError(f\"Failed to load PIE database: {e}\")\n",
    "\n",
    "#     # --- Calculate Standardization Parameters ---\n",
    "#     print(\"\\nCalculating standardization parameters from training set...\")\n",
    "#     all_train_ego_speeds = []\n",
    "#     all_train_accX = []\n",
    "#     all_train_accY = []\n",
    "#     all_train_gyroZ = []\n",
    "#     for set_id in TRAIN_SETS_STR:\n",
    "#         if set_id in pie_database:\n",
    "#             for video_id, video_data in pie_database[set_id].items():\n",
    "#                 if 'vehicle_annotations' in video_data:\n",
    "#                     for frame_num, ego_frame_data in video_data['vehicle_annotations'].items():\n",
    "#                         speed = ego_frame_data.get('OBD_speed', 0.0)\n",
    "#                         if speed == 0.0:\n",
    "#                             speed = ego_frame_data.get('GPS_speed', 0.0)\n",
    "#                         all_train_ego_speeds.append(speed)\n",
    "#                         all_train_accX.append(ego_frame_data.get('accX', 0.0))\n",
    "#                         all_train_accY.append(ego_frame_data.get('accY', 0.0))\n",
    "#                         all_train_gyroZ.append(ego_frame_data.get('gyroZ', 0.0))\n",
    "#     scalers = {}\n",
    "#     if all_train_ego_speeds:\n",
    "#         scalers['ego_speed_mean'] = np.mean(all_train_ego_speeds)\n",
    "#         scalers['ego_speed_std'] = np.std(all_train_ego_speeds) if np.std(all_train_ego_speeds) > 1e-6 else 1.0\n",
    "#         print(f\"  Ego Speed: Mean={scalers['ego_speed_mean']:.2f}, Std={scalers['ego_speed_std']:.2f}\")\n",
    "#     if all_train_accX:\n",
    "#         scalers['accX_mean'] = np.mean(all_train_accX)\n",
    "#         scalers['accX_std'] = np.std(all_train_accX) if np.std(all_train_accX) > 1e-6 else 1.0\n",
    "#         scalers['accY_mean'] = np.mean(all_train_accY)\n",
    "#         scalers['accY_std'] = np.std(all_train_accY) if np.std(all_train_accY) > 1e-6 else 1.0\n",
    "#         print(f\"  Ego AccX: Mean={scalers['accX_mean']:.2f}, Std={scalers['accX_std']:.2f}\")\n",
    "#         print(f\"  Ego AccY: Mean={scalers['accY_mean']:.2f}, Std={scalers['accY_std']:.2f}\")\n",
    "#     if all_train_gyroZ:\n",
    "#         scalers['gyroZ_mean'] = np.mean(all_train_gyroZ)\n",
    "#         scalers['gyroZ_std'] = np.std(all_train_gyroZ) if np.std(all_train_gyroZ) > 1e-6 else 1.0\n",
    "#         print(f\"  Ego GyroZ: Mean={scalers['gyroZ_mean']:.2f}, Std={scalers['gyroZ_std']:.2f}\")\n",
    "#     print(\"Standardization parameters calculated.\")\n",
    "\n",
    "#     # --- Initialize FULL Training Dataset ---\n",
    "#     print(\"\\nInitializing full training dataset (for extraction)...\")\n",
    "#     full_train_dataset = PIEDataset(\n",
    "#         pie_database,\n",
    "#         TRAIN_SETS_STR,\n",
    "#         POSE_DATA_DIR,\n",
    "#         SEQ_LEN,\n",
    "#         PRED_LEN,\n",
    "#         scalers,\n",
    "#         ALL_POSSIBLE_STREAMS\n",
    "#     )\n",
    "#     if len(full_train_dataset) == 0:\n",
    "#         raise ValueError(\"Full Train Dataset loading failed.\")\n",
    "\n",
    "#     # --- Prepare and Balance Training Data ---\n",
    "#     print(\"\\nExtracting ALL stream data from training set for balancing...\")\n",
    "#     training_data_dict = {stream: [] for stream in ALL_POSSIBLE_STREAMS}\n",
    "#     training_data_dict['label'] = []\n",
    "#     for i in tqdm(range(len(full_train_dataset)), desc=\"Extracting data\"):\n",
    "#         features, label = full_train_dataset[i]\n",
    "#         for stream_name in ALL_POSSIBLE_STREAMS:\n",
    "#             if stream_name in features:\n",
    "#                 training_data_dict[stream_name].append(features[stream_name].numpy())\n",
    "#             else:\n",
    "#                 print(f\"Warning: Stream {stream_name} missing from dataset output index {i}.\")\n",
    "#                 # Append zeros of correct shape as placeholder\n",
    "#                 size_const = f\"INPUT_SIZE_{stream_name.upper()}\"\n",
    "#                 special_cases = {\n",
    "#                     'TRAFFIC_LIGHT': 'TL_STATE',\n",
    "#                     'STATIC_CONTEXT': 'STATIC',\n",
    "#                     'EGO_SPEED': 'EGO_SPEED',\n",
    "#                     'EGO_ACC': 'EGO_ACC',\n",
    "#                     'EGO_GYRO': 'EGO_GYRO',\n",
    "#                     'PED_ACTION': 'PED_ACTION',\n",
    "#                     'PED_LOOK': 'PED_LOOK',\n",
    "#                     'PED_OCCLUSION': 'PED_OCC'\n",
    "#                 }\n",
    "#                 if stream_name.upper() in special_cases:\n",
    "#                     size_const = f\"INPUT_SIZE_{special_cases[stream_name.upper()]}\"\n",
    "#                 elif stream_name == 'bbox':\n",
    "#                     size_const = 'INPUT_SIZE_BBOX'\n",
    "#                 elif stream_name == 'pose':\n",
    "#                     size_const = 'INPUT_SIZE_POSE'\n",
    "#                 stream_size = globals().get(size_const, 1)\n",
    "#                 training_data_dict[stream_name].append(np.zeros((SEQ_LEN, stream_size), dtype=np.float32))\n",
    "#         training_data_dict['label'].append([label.item()])\n",
    "#     print(f\"Original training samples: {len(training_data_dict['label'])}\")\n",
    "#     del full_train_dataset  # Free memory\n",
    "\n",
    "#     label_key_for_balancing = 'label'\n",
    "#     balanced_train_data_dict = balance_samples_count(training_data_dict, label_type=label_key_for_balancing)\n",
    "#     del training_data_dict  # Free up memory\n",
    "\n",
    "#     # --- Save Balanced Data and Scalers ---\n",
    "#     print(f\"\\nSaving balanced training data to: {BALANCED_DATA_PKL_PATH}\")\n",
    "#     try:\n",
    "#         with open(BALANCED_DATA_PKL_PATH, 'wb') as f:\n",
    "#             pickle.dump(balanced_train_data_dict, f, pickle.HIGHEST_PROTOCOL)\n",
    "#         print(\" -> Balanced data saved.\")\n",
    "#     except Exception as e:\n",
    "#         print(f\"  Error saving balanced data: {e}\")\n",
    "\n",
    "#     print(f\"\\nSaving scalers to: {SCALERS_PKL_PATH}\")\n",
    "#     try:\n",
    "#         with open(SCALERS_PKL_PATH, 'wb') as f:\n",
    "#             pickle.dump(scalers, f, pickle.HIGHEST_PROTOCOL)\n",
    "#         print(\" -> Scalers saved.\")\n",
    "#     except Exception as e:\n",
    "#         print(f\"  Error saving scalers: {e}\")\n",
    "\n",
    "#     # --- Prepare and Save Validation Sequence Info ---\n",
    "#     print(\"\\nInitializing validation dataset (for sequence info)...\")\n",
    "#     # Pass an empty list for streams if only sequence identifiers are needed.\n",
    "#     val_dataset = PIEDataset(pie_database, VAL_SETS_STR, POSE_DATA_DIR, SEQ_LEN, PRED_LEN, scalers, [])\n",
    "#     val_sequences_info = val_dataset.sequences\n",
    "#     del val_dataset\n",
    "\n",
    "#     print(f\"Saving validation sequence info ({len(val_sequences_info)} sequences) to: {VAL_SEQUENCES_PKL_PATH}\")\n",
    "#     try:\n",
    "#         with open(VAL_SEQUENCES_PKL_PATH, 'wb') as f:\n",
    "#             pickle.dump(val_sequences_info, f, pickle.HIGHEST_PROTOCOL)\n",
    "#         print(\" -> Validation sequence info saved.\")\n",
    "#     except Exception as e:\n",
    "#         print(f\" Error saving validation sequence info: {e}\")\n",
    "\n",
    "#     print(\"\\n--- Data Preparation and Balancing Cell Finished ---\")\n",
    "#     print(\"You can now run the next cell for training and evaluation.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "bd0313d0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T15:19:43.253739Z",
     "iopub.status.busy": "2025-05-01T15:19:43.253491Z",
     "iopub.status.idle": "2025-05-01T15:19:43.258619Z",
     "shell.execute_reply": "2025-05-01T15:19:43.257838Z"
    },
    "papermill": {
     "duration": 0.015988,
     "end_time": "2025-05-01T15:19:43.259902",
     "exception": false,
     "start_time": "2025-05-01T15:19:43.243914",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # --- CELL 2: ABLATION STUDY - MODEL TRAINING AND EVALUATION ---\n",
    "\n",
    "# import torch\n",
    "# import torch.nn as nn\n",
    "# import torch.optim as optim\n",
    "# from torch.utils.data import Dataset, DataLoader\n",
    "# import os\n",
    "# import sys\n",
    "# import numpy as np\n",
    "# import pandas as pd\n",
    "# import pickle\n",
    "# import time\n",
    "# from tqdm.notebook import tqdm\n",
    "# from sklearn.metrics import (\n",
    "#     accuracy_score,\n",
    "#     precision_recall_fscore_support,\n",
    "#     roc_auc_score,\n",
    "#     confusion_matrix,\n",
    "#     ConfusionMatrixDisplay\n",
    "# )\n",
    "# import matplotlib.pyplot as plt\n",
    "# import seaborn as sns\n",
    "\n",
    "# # --- Add PIE utilities path if necessary ---\n",
    "# pie_utilities_path = '/kaggle/working/PIE/utilities'\n",
    "# if pie_utilities_path not in sys.path:\n",
    "#     sys.path.insert(0, pie_utilities_path)\n",
    "\n",
    "# try:\n",
    "#     from pie_data import PIE\n",
    "# except ImportError as e:\n",
    "#     print(f\"Warn: Could not import PIE class: {e}\")\n",
    "#     PIE = None\n",
    "\n",
    "# # --- Configuration ---\n",
    "# PIE_DATABASE_CACHE_PATH = '/kaggle/input/pie-database/pie_database.pkl'\n",
    "# POSE_DATA_DIR = '/kaggle/input/pose-data/extracted_poses2'\n",
    "# VAL_SETS_STR = ['set05', 'set06']\n",
    "\n",
    "# # --- Experiment settings ---\n",
    "# ALL_POSSIBLE_STREAMS = [\n",
    "#     'bbox', 'pose', 'ego_speed', 'ego_acc', 'ego_gyro',\n",
    "#     'ped_action', 'ped_look', 'ped_occlusion', 'traffic_light', 'static_context'\n",
    "# ]\n",
    "\n",
    "# STREAM_COMBINATIONS_TO_TEST = [\n",
    "#     ['bbox'],\n",
    "#     ['bbox', 'ped_action'],\n",
    "#     ['bbox', 'ped_look'],\n",
    "#     ['bbox', 'ego_speed'],\n",
    "#     ['bbox', 'ego_acc'],\n",
    "#     ['bbox', 'ped_action', 'ped_look'],\n",
    "#     ['bbox', 'ego_speed', 'ego_acc'],\n",
    "#     ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc'],\n",
    "#     ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'traffic_light', 'static_context']\n",
    "# ]\n",
    "\n",
    "# # --- Hyperparameters ---\n",
    "# SEQ_LEN = 30\n",
    "# PRED_LEN = 1\n",
    "\n",
    "# INPUT_SIZE_BBOX = 4\n",
    "# INPUT_SIZE_POSE = 34\n",
    "# INPUT_SIZE_EGO_SPEED = 1\n",
    "# INPUT_SIZE_EGO_ACC = 2\n",
    "# INPUT_SIZE_EGO_GYRO = 1\n",
    "# INPUT_SIZE_PED_ACTION = 1\n",
    "# INPUT_SIZE_PED_LOOK = 1\n",
    "# INPUT_SIZE_PED_OCC = 1\n",
    "# INPUT_SIZE_TL_STATE = 4\n",
    "\n",
    "# NUM_SIGNALIZED_CATS = 4\n",
    "# NUM_INTERSECTION_CATS = 5\n",
    "# NUM_AGE_CATS = 4\n",
    "# NUM_GENDER_CATS = 3\n",
    "# NUM_TRAFFIC_DIR_CATS = 2\n",
    "# LANE_CATEGORIES = {1:0,2:1,3:2,4:3,5:4,6:4,7:4,8:4}\n",
    "# NUM_LANE_CATS = len(set(LANE_CATEGORIES.values()))\n",
    "\n",
    "# INPUT_SIZE_STATIC = (\n",
    "#     NUM_SIGNALIZED_CATS +\n",
    "#     NUM_INTERSECTION_CATS +\n",
    "#     NUM_AGE_CATS +\n",
    "#     NUM_GENDER_CATS +\n",
    "#     NUM_TRAFFIC_DIR_CATS +\n",
    "#     NUM_LANE_CATS\n",
    "# )\n",
    "\n",
    "# LSTM_HIDDEN_SIZE = 256\n",
    "# NUM_LSTM_LAYERS = 2\n",
    "# DROPOUT_RATE = 0.3\n",
    "# NUM_CLASSES = 2\n",
    "# ATTENTION_DIM = 128\n",
    "\n",
    "# LEARNING_RATE = 1e-4\n",
    "# BATCH_SIZE = 32\n",
    "# NUM_EPOCHS = 10\n",
    "# DEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "\n",
    "# print(f\"Using device: {DEVICE}\")\n",
    "\n",
    "# # --- Paths for data ---\n",
    "# BALANCED_DATA_PKL_PATH = \"/kaggle/working/balanced_train_data.pkl\"\n",
    "# SCALERS_PKL_PATH = \"/kaggle/working/scalers.pkl\"\n",
    "\n",
    "# # --- Helpers, Dataset & Model definitions ---\n",
    "# # (Use the fully corrected versions from Cell 1 and Cell 2 above,\n",
    "# # ensuring no inline semicolons remain and each block is properly indented.)\n",
    "\n",
    "# def to_one_hot(index, num_classes):\n",
    "#     vec = np.zeros(num_classes, dtype=np.float32)\n",
    "#     idx = int(np.clip(index, 0, num_classes - 1))\n",
    "#     vec[idx] = 1.0\n",
    "#     return vec\n",
    "\n",
    "# # ... Paste full corrected definitions for:\n",
    "# #   PIEDataset, BalancedDataset,\n",
    "# #   Attention, MultiStreamAdaptiveLSTM,\n",
    "# #   train_epoch, evaluate_epoch, get_predictions_and_labels ...\n",
    "\n",
    "# # --- Main Ablation Loop ---\n",
    "# if __name__ == '__main__':\n",
    "#     # Load balanced training data and scalers\n",
    "#     try:\n",
    "#         with open(BALANCED_DATA_PKL_PATH, 'rb') as f:\n",
    "#             balanced_train_data_dict = pickle.load(f)\n",
    "#         with open(SCALERS_PKL_PATH, 'rb') as f:\n",
    "#             scalers = pickle.load(f)\n",
    "#     except Exception as e:\n",
    "#         print(f\"Error loading pre-processed data: {e}\")\n",
    "#         sys.exit(1)\n",
    "\n",
    "#     # Load PIE database\n",
    "#     if not os.path.exists(PIE_DATABASE_CACHE_PATH):\n",
    "#         raise FileNotFoundError(\"PIE database cache not found.\")\n",
    "#     with open(PIE_DATABASE_CACHE_PATH, 'rb') as f:\n",
    "#         pie_database = pickle.load(f)\n",
    "\n",
    "#     # Prepare validation dataset once\n",
    "#     val_dataset = PIEDataset(\n",
    "#         pie_database, VAL_SETS_STR, POSE_DATA_DIR,\n",
    "#         SEQ_LEN, PRED_LEN, scalers,\n",
    "#         ALL_POSSIBLE_STREAMS\n",
    "#     )\n",
    "#     val_loader = DataLoader(\n",
    "#         val_dataset, batch_size=BATCH_SIZE,\n",
    "#         shuffle=False, num_workers=2, pin_memory=True\n",
    "#     )\n",
    "\n",
    "#     results_summary = {}\n",
    "\n",
    "#     for streams in STREAM_COMBINATIONS_TO_TEST:\n",
    "#         print(f\"\\n=== Streams: {streams} ===\")\n",
    "#         # Create train dataset for this combo\n",
    "#         train_ds = BalancedDataset(\n",
    "#             balanced_train_data_dict, streams, label_key='label'\n",
    "#         )\n",
    "#         train_loader = DataLoader(\n",
    "#             train_ds, batch_size=BATCH_SIZE,\n",
    "#             shuffle=True, num_workers=2, pin_memory=True\n",
    "#         )\n",
    "\n",
    "#         # Model, optimizer, loss\n",
    "#         input_sizes = {\n",
    "#             s: globals()[f\"INPUT_SIZE_{s.upper()}\"] for s in streams\n",
    "#         }\n",
    "#         model = MultiStreamAdaptiveLSTM(\n",
    "#             input_sizes, LSTM_HIDDEN_SIZE, NUM_LSTM_LAYERS,\n",
    "#             NUM_CLASSES, ATTENTION_DIM, DROPOUT_RATE, streams\n",
    "#         ).to(DEVICE)\n",
    "\n",
    "#         # Class weights\n",
    "#         labels = train_ds.labels.tolist()\n",
    "#         c0 = labels.count(0)\n",
    "#         c1 = labels.count(1)\n",
    "#         tot = len(labels)\n",
    "#         if tot > 0 and c0 and c1:\n",
    "#             w0 = tot / (2*c0)\n",
    "#             w1 = tot / (2*c1)\n",
    "#         else:\n",
    "#             w0 = w1 = 1.0\n",
    "#         criterion = nn.CrossEntropyLoss(weight=torch.tensor([w0,w1]).to(DEVICE))\n",
    "#         optimizer = optim.Adam(model.parameters(), lr=LEARNING_RATE)\n",
    "\n",
    "#         best_val_f1 = -1.0\n",
    "#         best_model_path = None\n",
    "\n",
    "#         for ep in range(NUM_EPOCHS):\n",
    "#             train_epoch(model, train_loader, optimizer, criterion, DEVICE)\n",
    "#             m = evaluate_epoch(model, val_loader, criterion, DEVICE)\n",
    "#             if m['f1'] > best_val_f1:\n",
    "#                 best_val_f1 = m['f1']\n",
    "#                 best_model_path = f\"best_{'_'.join(streams)}_ep{ep+1}.pth\"\n",
    "#                 torch.save(model.state_dict(), best_model_path)\n",
    "\n",
    "#         if best_model_path:\n",
    "#             model.load_state_dict(torch.load(best_model_path, map_location=DEVICE))\n",
    "#         final_m = evaluate_epoch(model, val_loader, criterion, DEVICE)\n",
    "#         results_summary[tuple(streams)] = final_m\n",
    "\n",
    "#     # Print summary\n",
    "#     df = pd.DataFrame.from_dict(results_summary, orient='index')\n",
    "#     df.index = ['+'.join(k) for k in df.index]\n",
    "#     df = df.sort_values('f1', ascending=False)\n",
    "#     print(\"\\nAblation Results:\")\n",
    "#     print(df.to_markdown(floatfmt=\".4f\"))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "4da1326e",
   "metadata": {
    "_kg_hide-input": true,
    "execution": {
     "iopub.execute_input": "2025-05-01T15:19:43.279612Z",
     "iopub.status.busy": "2025-05-01T15:19:43.279378Z",
     "iopub.status.idle": "2025-05-01T15:19:43.291754Z",
     "shell.execute_reply": "2025-05-01T15:19:43.291147Z"
    },
    "papermill": {
     "duration": 0.024251,
     "end_time": "2025-05-01T15:19:43.292984",
     "exception": false,
     "start_time": "2025-05-01T15:19:43.268733",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # --- IMPORTS ---\n",
    "# import torch\n",
    "# import torch.nn as nn\n",
    "# import torch.optim as optim\n",
    "# from torch.utils.data import Dataset, DataLoader\n",
    "# import xml.etree.ElementTree as ET\n",
    "# import os\n",
    "# import numpy as np\n",
    "# from sklearn.metrics import (\n",
    "#     accuracy_score,\n",
    "#     precision_recall_fscore_support,\n",
    "#     roc_auc_score,\n",
    "#     confusion_matrix,\n",
    "#     ConfusionMatrixDisplay,\n",
    "# )\n",
    "# from sklearn.preprocessing import StandardScaler\n",
    "# from tqdm.notebook import tqdm\n",
    "# import random\n",
    "# import math\n",
    "# import zipfile\n",
    "# import cv2\n",
    "# import pandas as pd\n",
    "# import matplotlib.pyplot as plt\n",
    "# import seaborn as sns\n",
    "# import pickle\n",
    "# import time\n",
    "# import sys\n",
    "# import gc  # garbage collector for cleanup calls\n",
    "\n",
    "# # --- Add PIE utilities path if necessary (adjust path) ---\n",
    "# pie_utilities_path = '/kaggle/working/PIE/utilities'\n",
    "# if pie_utilities_path not in sys.path:\n",
    "#     sys.path.insert(0, pie_utilities_path)\n",
    "# try:\n",
    "#     from pie_data import PIE\n",
    "# except ImportError as e:\n",
    "#     print(f\"Warning: Could not import PIE class from {pie_utilities_path}. Database must already exist. Error: {e}\")\n",
    "#     PIE = None\n",
    "\n",
    "# # --- Configuration ---\n",
    "# PIE_ROOT_PATH = '/kaggle/working/PIE'\n",
    "# VIDEO_INPUT_DIR = '/kaggle/input'\n",
    "# POSE_DATA_DIR = '/kaggle/input/pose-data/extracted_poses2'\n",
    "# PIE_DATABASE_CACHE_PATH = '/kaggle/input/pie-database/pie_database.pkl'\n",
    "\n",
    "# # --- Define ALL possible streams (used by Dataset class) ---\n",
    "# ALL_POSSIBLE_STREAMS = [\n",
    "#     'bbox', 'pose', 'ego_speed', 'ego_acc', 'ego_gyro',\n",
    "#     'ped_action', 'ped_look', 'ped_occlusion', 'traffic_light', 'static_context'\n",
    "# ]\n",
    "# print(f\"All possible streams: {ALL_POSSIBLE_STREAMS}\")\n",
    "\n",
    "# # --- STREAM COMBINATIONS TO TEST FOR ABLATION STUDY ---\n",
    "\n",
    "# STREAM_COMBINATIONS_TO_TEST = [\n",
    "#     ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc'], \n",
    "#     ['traffic_light', 'bbox', 'pose', 'ped_action'],\n",
    "#     ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'traffic_light'],\n",
    "#     ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'static_context'],\n",
    "#     ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'ego_gyro'],\n",
    "#     ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'ped_occlusion'],\n",
    "#     ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'pose'],\n",
    "#     ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'traffic_light', 'static_context'],\n",
    "#     ['bbox', 'ped_action', 'ped_look'], \n",
    "# ]\n",
    "\n",
    "# print(f\"Stream combinations to test: {STREAM_COMBINATIONS_TO_TEST}\")\n",
    "\n",
    "# # --- Model Hyperparameters ---\n",
    "# SEQ_LEN = 30\n",
    "# PRED_LEN = 1\n",
    "\n",
    "# # --- Input Sizes ---\n",
    "# INPUT_SIZE_BBOX = 4\n",
    "# INPUT_SIZE_POSE = 34\n",
    "# INPUT_SIZE_EGO_SPEED = 1\n",
    "# INPUT_SIZE_EGO_ACC = 2\n",
    "# INPUT_SIZE_EGO_GYRO = 1\n",
    "# INPUT_SIZE_PED_ACTION = 1\n",
    "# INPUT_SIZE_PED_LOOK = 1\n",
    "# INPUT_SIZE_PED_OCC = 1\n",
    "# INPUT_SIZE_TL_STATE = 4\n",
    "# NUM_SIGNALIZED_CATS = 4\n",
    "# NUM_INTERSECTION_CATS = 5\n",
    "# NUM_AGE_CATS = 4\n",
    "# NUM_GENDER_CATS = 3\n",
    "# NUM_TRAFFIC_DIR_CATS = 2\n",
    "# LANE_CATEGORIES = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 4, 7: 4, 8: 4}\n",
    "# NUM_LANE_CATS = len(set(LANE_CATEGORIES.values()))\n",
    "# INPUT_SIZE_STATIC = (\n",
    "#     NUM_SIGNALIZED_CATS\n",
    "#     + NUM_INTERSECTION_CATS\n",
    "#     + NUM_AGE_CATS\n",
    "#     + NUM_GENDER_CATS\n",
    "#     + NUM_TRAFFIC_DIR_CATS\n",
    "#     + NUM_LANE_CATS\n",
    "# )\n",
    "\n",
    "# LSTM_HIDDEN_SIZE = 256\n",
    "# NUM_LSTM_LAYERS = 2\n",
    "# DROPOUT_RATE = 0.3\n",
    "# NUM_CLASSES = 2\n",
    "# ATTENTION_DIM = 128\n",
    "\n",
    "# # --- Training Hyperparameters ---\n",
    "# LEARNING_RATE = 1e-4\n",
    "# BATCH_SIZE = 32\n",
    "# NUM_EPOCHS = 10\n",
    "# DEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# print(f\"Using device: {DEVICE}\")\n",
    "\n",
    "# # --- Dataset Splits ---\n",
    "# TRAIN_SETS_STR = ['set01', 'set02', 'set04']\n",
    "# VAL_SETS_STR = ['set05', 'set06']\n",
    "\n",
    "# # --- Mappings ---\n",
    "# TL_STATE_MAP = {'__undefined__': 0, 'red': 1, 'yellow': 2, 'green': 3}\n",
    "# NUM_TL_STATES = len(TL_STATE_MAP)\n",
    "# SIGNALIZED_MAP = {'n/a': 0, 'C': 1, 'S': 2, 'CS': 3}\n",
    "# INTERSECTION_MAP = {'midblock': 0, 'T': 1, 'T-left': 2, 'T-right': 3, 'four-way': 4}\n",
    "# AGE_MAP = {'child': 0, 'young': 1, 'adult': 2, 'senior': 3}\n",
    "# GENDER_MAP = {'n/a': 0, 'female': 1, 'male': 2}\n",
    "# TRAFFIC_DIR_MAP = {'OW': 0, 'TW': 1}\n",
    "\n",
    "# # --- Output Files (for intermediate balanced data/scalers) ---\n",
    "# BALANCED_DATA_PKL_PATH = \"/kaggle/working/balanced_train_data.pkl\"\n",
    "# SCALERS_PKL_PATH = \"/kaggle/working/scalers.pkl\"\n",
    "\n",
    "\n",
    "# # --- Helper: One-Hot Encoding ---\n",
    "# def to_one_hot(index, num_classes):\n",
    "#     vec = np.zeros(num_classes, dtype=np.float32)\n",
    "#     safe_index = int(np.clip(index, 0, num_classes - 1))\n",
    "#     vec[safe_index] = 1.0\n",
    "#     return vec\n",
    "\n",
    "\n",
    "# # --- Balancing Function ---\n",
    "# def balance_samples_count(seq_data, label_type, random_seed=42):\n",
    "#     print('---------------------------------------------------------')\n",
    "#     print(f\"Balancing samples based on '{label_type}' key\")\n",
    "#     if label_type not in seq_data:\n",
    "#         raise KeyError(f\"Label type '{label_type}' not found.\")\n",
    "#     try:\n",
    "#         gt_labels = [lbl[0] for lbl in seq_data[label_type]]\n",
    "#     except (IndexError, TypeError):\n",
    "#         raise ValueError(f\"Labels under '{label_type}' not in expected format [[label_val]].\")\n",
    "\n",
    "#     if not all(l in [0, 1] for l in gt_labels):\n",
    "#         print(f\"Warning: Labels for balancing contain values other than 0 or 1.\")\n",
    "\n",
    "#     num_pos_samples = np.count_nonzero(np.array(gt_labels))\n",
    "#     num_neg_samples = len(gt_labels) - num_pos_samples\n",
    "#     new_seq_data = {}\n",
    "\n",
    "#     if num_neg_samples == num_pos_samples:\n",
    "#         print('Samples already balanced.')\n",
    "#         return seq_data.copy()\n",
    "#     else:\n",
    "#         print(f'Unbalanced: Positive (1): {num_pos_samples} | Negative (0): {num_neg_samples}')\n",
    "#         majority_label = 0 if num_neg_samples > num_pos_samples else 1\n",
    "#         minority_count = min(num_neg_samples, num_pos_samples)\n",
    "#         print(f\"Undersampling majority class ({majority_label}) to match count ({minority_count}).\")\n",
    "\n",
    "#         majority_indices = np.where(np.array(gt_labels) == majority_label)[0]\n",
    "#         minority_indices = np.where(np.array(gt_labels) != majority_label)[0]\n",
    "#         np.random.seed(random_seed)\n",
    "#         keep_majority_indices = np.random.choice(\n",
    "#             majority_indices, size=minority_count, replace=False\n",
    "#         )\n",
    "#         final_indices = np.concatenate((minority_indices, keep_majority_indices))\n",
    "#         np.random.shuffle(final_indices)\n",
    "\n",
    "#         for k, v_list in seq_data.items():\n",
    "#             if isinstance(v_list, list) and len(v_list) == len(gt_labels):\n",
    "#                 try:\n",
    "#                     if v_list and isinstance(v_list[0], np.ndarray):\n",
    "#                         v_array = np.array(v_list)\n",
    "#                         new_seq_data[k] = list(v_array[final_indices])\n",
    "#                     else:\n",
    "#                         new_seq_data[k] = [v_list[i] for i in final_indices]\n",
    "#                 except Exception as e:\n",
    "#                     print(f\"Error processing key '{k}' during balancing: {e}. Skip.\")\n",
    "#                     new_seq_data[k] = []\n",
    "#             else:\n",
    "#                 print(f\"Warn: Skipping key '{k}' in balancing (not list or len mismatch).\")\n",
    "#                 new_seq_data[k] = v_list\n",
    "\n",
    "#         if label_type in new_seq_data:\n",
    "#             new_gt_labels = [lbl[0] for lbl in new_seq_data[label_type]]\n",
    "#             final_pos = np.count_nonzero(np.array(new_gt_labels))\n",
    "#             final_neg = len(new_gt_labels) - final_pos\n",
    "#             print(f'Balanced:   Positive (1): {final_pos} | Negative (0): {final_neg}')\n",
    "#         else:\n",
    "#             print(\"Error: Label key was lost during balancing process.\")\n",
    "\n",
    "#         print('---------------------------------------------------------')\n",
    "#         return new_seq_data\n",
    "\n",
    "\n",
    "# # --- Dataset Class ---\n",
    "# class PIEDataset(Dataset):\n",
    "#     def __init__(\n",
    "#         self,\n",
    "#         pie_database,\n",
    "#         set_names,\n",
    "#         pose_data_dir,\n",
    "#         seq_len,\n",
    "#         pred_len,\n",
    "#         scalers=None,\n",
    "#         streams_to_generate=None,\n",
    "#     ):\n",
    "#         self.pie_db = pie_database\n",
    "#         self.set_names = set_names\n",
    "#         self.pose_data_dir = pose_data_dir\n",
    "#         self.seq_len = seq_len\n",
    "#         self.pred_len = pred_len\n",
    "#         self.scalers = scalers or {}\n",
    "#         self.streams_to_generate = (\n",
    "#             streams_to_generate or ALL_POSSIBLE_STREAMS\n",
    "#         )  # Streams this instance CAN generate\n",
    "#         self.sequences = []\n",
    "#         self.all_pose_data = {}\n",
    "#         self._input_sizes_for_error = self._get_input_sizes_dict()\n",
    "#         if 'pose' in self.streams_to_generate:\n",
    "#             self._load_pose_data()\n",
    "#         self._generate_sequence_list()\n",
    "#         if not self.sequences:\n",
    "#             raise ValueError(f\"Dataset init failed: No sequences for {self.set_names}\")\n",
    "\n",
    "#     def _get_input_sizes_dict(self):\n",
    "#         input_sizes = {}\n",
    "#         special_cases = {\n",
    "#             'TRAFFIC_LIGHT': 'TL_STATE',\n",
    "#             'STATIC_CONTEXT': 'STATIC',\n",
    "#             'EGO_SPEED': 'EGO_SPEED',\n",
    "#             'EGO_ACC': 'EGO_ACC',\n",
    "#             'EGO_GYRO': 'EGO_GYRO',\n",
    "#             'PED_ACTION': 'PED_ACTION',\n",
    "#             'PED_LOOK': 'PED_LOOK',\n",
    "#             'PED_OCCLUSION': 'PED_OCC',\n",
    "#         }\n",
    "#         for stream in ALL_POSSIBLE_STREAMS:\n",
    "#             size_constant_name = f'INPUT_SIZE_{stream.upper()}'\n",
    "#             stream_upper_key = stream.upper()\n",
    "#             suffix = special_cases.get(stream_upper_key)\n",
    "#             if suffix:\n",
    "#                 size_constant_name = f'INPUT_SIZE_{suffix}'\n",
    "#             elif stream == 'bbox':\n",
    "#                 size_constant_name = 'INPUT_SIZE_BBOX'\n",
    "#             elif stream == 'pose':\n",
    "#                 size_constant_name = 'INPUT_SIZE_POSE'\n",
    "\n",
    "#             input_sizes[stream] = globals().get(size_constant_name, 1)\n",
    "#         return input_sizes\n",
    "\n",
    "#     def _load_pose_data(self):\n",
    "#         print(f\"\\nLoading pose data for sets: {self.set_names} from {self.pose_data_dir}\")\n",
    "#         sets_loaded_count = 0\n",
    "#         for set_id in self.set_names:\n",
    "#             self.all_pose_data[set_id] = {}\n",
    "#             pose_set_path = os.path.join(self.pose_data_dir, set_id)\n",
    "#             if not os.path.isdir(pose_set_path):\n",
    "#                 continue\n",
    "#             pkl_files_in_set = [\n",
    "#                 f\n",
    "#                 for f in os.listdir(pose_set_path)\n",
    "#                 if f.startswith(f\"{set_id}_\") and f.endswith(\"_poses.pkl\")\n",
    "#             ]\n",
    "#             if not pkl_files_in_set:\n",
    "#                 continue\n",
    "#             loaded_video_count = 0\n",
    "#             for pkl_filename in pkl_files_in_set:\n",
    "#                 pkl_file_path = os.path.join(pose_set_path, pkl_filename)\n",
    "#                 try:\n",
    "#                     with open(pkl_file_path, 'rb') as f:\n",
    "#                         loaded_pkl_content = pickle.load(f)\n",
    "#                     if len(loaded_pkl_content) != 1:\n",
    "#                         continue\n",
    "#                     unique_video_key, video_data = list(loaded_pkl_content.items())[0]\n",
    "#                     video_id = \"_\".join(unique_video_key.split(\"_\")[1:])\n",
    "#                     if video_id in self.pie_db.get(set_id, {}):\n",
    "#                         self.all_pose_data[set_id][video_id] = video_data\n",
    "#                         loaded_video_count += 1\n",
    "#                 except FileNotFoundError:\n",
    "#                     pass\n",
    "#                 except Exception as e:\n",
    "#                     print(f\"Error loading pose PKL {pkl_file_path}: {e}\")\n",
    "#             if loaded_video_count > 0:\n",
    "#                 sets_loaded_count += 1\n",
    "#         print(f\"Finished loading pose data for {sets_loaded_count} sets for this Dataset instance.\")\n",
    "\n",
    "#     def _generate_sequence_list(self):\n",
    "#         sequence_count = 0\n",
    "#         for set_id in self.set_names:\n",
    "#             if set_id not in self.pie_db:\n",
    "#                 continue\n",
    "#             for video_id, video_data in self.pie_db[set_id].items():\n",
    "#                 if \"ped_annotations\" not in video_data:\n",
    "#                     continue\n",
    "#                 for ped_id, ped_data in video_data[\"ped_annotations\"].items():\n",
    "#                     if \"frames\" not in ped_data or len(ped_data[\"frames\"]) < self.seq_len + self.pred_len:\n",
    "#                         continue\n",
    "#                     sorted_frames = sorted(ped_data[\"frames\"])\n",
    "#                     for i in range(len(sorted_frames) - self.seq_len - self.pred_len + 1):\n",
    "#                         start_frame = sorted_frames[i]\n",
    "#                         end_frame_observe = sorted_frames[i + self.seq_len - 1]\n",
    "#                         if end_frame_observe - start_frame != self.seq_len - 1:\n",
    "#                             continue\n",
    "#                         target_frame_actual_idx = i + self.seq_len + self.pred_len - 1\n",
    "#                         if target_frame_actual_idx >= len(sorted_frames):\n",
    "#                             continue\n",
    "#                         target_frame = sorted_frames[target_frame_actual_idx]\n",
    "#                         if target_frame - end_frame_observe != self.pred_len:\n",
    "#                             continue\n",
    "#                         self.sequences.append((set_id, video_id, ped_id, start_frame))\n",
    "#                         sequence_count += 1\n",
    "#         print(f\"Dataset initialized with {sequence_count} sequences for sets {self.set_names}.\")\n",
    "\n",
    "#     def __len__(self):\n",
    "#         return len(self.sequences)\n",
    "\n",
    "#     def __getitem__(self, idx):\n",
    "#         set_id, video_id, ped_id, start_frame = self.sequences[idx]\n",
    "#         frame_nums = list(range(start_frame, start_frame + self.seq_len))\n",
    "#         target_frame_num = start_frame + self.seq_len + self.pred_len - 1\n",
    "\n",
    "#         video_db = self.pie_db.get(set_id, {}).get(video_id, {})\n",
    "#         ped_db = video_db.get(\"ped_annotations\", {}).get(ped_id, {})\n",
    "#         ego_db = video_db.get(\"vehicle_annotations\", {})\n",
    "#         traffic_db = video_db.get(\"traffic_annotations\", {})\n",
    "#         ped_attributes = ped_db.get(\"attributes\", {})\n",
    "\n",
    "#         feature_sequences = {s: [] for s in self.streams_to_generate}\n",
    "#         label = 0\n",
    "#         if \"frames\" in ped_db and \"behavior\" in ped_db and \"cross\" in ped_db[\"behavior\"]:\n",
    "#             try:\n",
    "#                 tf_idx = ped_db[\"frames\"].index(target_frame_num)\n",
    "#                 label = ped_db[\"behavior\"][\"cross\"][tf_idx]\n",
    "#                 if label == -1:\n",
    "#                     label = 0\n",
    "#             except (ValueError, IndexError):\n",
    "#                 pass\n",
    "\n",
    "#         static_vec = None\n",
    "#         if \"static_context\" in self.streams_to_generate:\n",
    "#             sig = ped_attributes.get(\"signalized\", 0)\n",
    "#             inter = ped_attributes.get(\"intersection\", 0)\n",
    "#             age = ped_attributes.get(\"age\", 2)\n",
    "#             gen = ped_attributes.get(\"gender\", 0)\n",
    "#             td = int(ped_attributes.get(\"traffic_direction\", 0))\n",
    "#             nl = ped_attributes.get(\"num_lanes\", 2)\n",
    "#             nl_idx = LANE_CATEGORIES.get(nl, list(LANE_CATEGORIES.values())[-1])\n",
    "#             static_features = [\n",
    "#                 to_one_hot(sig, NUM_SIGNALIZED_CATS),\n",
    "#                 to_one_hot(inter, NUM_INTERSECTION_CATS),\n",
    "#                 to_one_hot(age, NUM_AGE_CATS),\n",
    "#                 to_one_hot(gen, NUM_GENDER_CATS),\n",
    "#                 to_one_hot(td, NUM_TRAFFIC_DIR_CATS),\n",
    "#                 to_one_hot(nl_idx, NUM_LANE_CATS),\n",
    "#             ]\n",
    "#             static_vec = np.concatenate(static_features)\n",
    "#             if static_vec.shape[0] != INPUT_SIZE_STATIC:\n",
    "#                 static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "\n",
    "#         for frame_num in frame_nums:\n",
    "#             idx_in = -1\n",
    "#             if \"frames\" in ped_db:\n",
    "#                 try:\n",
    "#                     idx_in = ped_db[\"frames\"].index(frame_num)\n",
    "#                 except ValueError:\n",
    "#                     pass\n",
    "#             ego_f = ego_db.get(frame_num, {})\n",
    "\n",
    "#             if \"bbox\" in self.streams_to_generate:\n",
    "#                 bbox_norm = np.zeros(INPUT_SIZE_BBOX, dtype=np.float32)\n",
    "#                 if idx_in != -1 and \"bbox\" in ped_db and len(ped_db[\"bbox\"]) > idx_in:\n",
    "#                     try:\n",
    "#                         x1, y1, x2, y2 = ped_db[\"bbox\"][idx_in]\n",
    "#                         w_img = video_db.get(\"width\", 1920)\n",
    "#                         h_img = video_db.get(\"height\", 1080)\n",
    "#                         if w_img > 0 and h_img > 0:\n",
    "#                             cx = ((x1 + x2) / 2) / w_img\n",
    "#                             cy = ((y1 + y2) / 2) / h_img\n",
    "#                             w = (x2 - x1) / w_img\n",
    "#                             h = (y2 - y1) / h_img\n",
    "#                             if 0 <= cx <= 1 and 0 <= cy <= 1 and w > 0 and h > 0:\n",
    "#                                 bbox_norm = np.array([cx, cy, w, h], dtype=np.float32)\n",
    "#                     except Exception:\n",
    "#                         pass\n",
    "#                 feature_sequences[\"bbox\"].append(bbox_norm)\n",
    "\n",
    "#             if \"pose\" in self.streams_to_generate:\n",
    "#                 pose_v = np.zeros(INPUT_SIZE_POSE, dtype=np.float32)\n",
    "#                 if set_id in self.all_pose_data and video_id in self.all_pose_data[set_id]:\n",
    "#                     pdict = self.all_pose_data[set_id][video_id].get(frame_num, {})\n",
    "#                     lp = pdict.get(ped_id)\n",
    "#                     if isinstance(lp, np.ndarray) and lp.shape == (INPUT_SIZE_POSE,):\n",
    "#                         pose_v = lp\n",
    "#                 feature_sequences[\"pose\"].append(pose_v)\n",
    "\n",
    "#             if \"ego_speed\" in self.streams_to_generate:\n",
    "#                 sp = ego_f.get(\"OBD_speed\", 0.0) or ego_f.get(\"GPS_speed\", 0.0) or 0.0\n",
    "#                 sp_s = (sp - self.scalers.get(\"ego_speed_mean\", 0.0)) / self.scalers.get(\"ego_speed_std\", 1.0)\n",
    "#                 feature_sequences[\"ego_speed\"].append([sp_s])\n",
    "\n",
    "#             if \"ego_acc\" in self.streams_to_generate:\n",
    "#                 ax = ego_f.get(\"accX\", 0.0)\n",
    "#                 ay = ego_f.get(\"accY\", 0.0)\n",
    "#                 ax_s = (ax - self.scalers.get(\"accX_mean\", 0.0)) / self.scalers.get(\"accX_std\", 1.0)\n",
    "#                 ay_s = (ay - self.scalers.get(\"accY_mean\", 0.0)) / self.scalers.get(\"accY_std\", 1.0)\n",
    "#                 feature_sequences[\"ego_acc\"].append([ax_s, ay_s])\n",
    "\n",
    "#             if \"ego_gyro\" in self.streams_to_generate:\n",
    "#                 gz = ego_f.get(\"gyroZ\", 0.0)\n",
    "#                 gz_s = (gz - self.scalers.get(\"gyroZ_mean\", 0.0)) / self.scalers.get(\"gyroZ_std\", 1.0)\n",
    "#                 feature_sequences[\"ego_gyro\"].append([gz_s])\n",
    "\n",
    "#             if \"ped_action\" in self.streams_to_generate:\n",
    "#                 ac = 0\n",
    "#                 if idx_in != -1 and \"behavior\" in ped_db and \"action\" in ped_db[\"behavior\"]:\n",
    "#                     arr = ped_db[\"behavior\"][\"action\"]\n",
    "#                     if len(arr) > idx_in:\n",
    "#                         ac = arr[idx_in]\n",
    "#                 feature_sequences[\"ped_action\"].append([float(ac)])\n",
    "\n",
    "#             if \"ped_look\" in self.streams_to_generate:\n",
    "#                 lk = 0\n",
    "#                 if idx_in != -1 and \"behavior\" in ped_db and \"look\" in ped_db[\"behavior\"]:\n",
    "#                     arr = ped_db[\"behavior\"][\"look\"]\n",
    "#                     if len(arr) > idx_in:\n",
    "#                         lk = arr[idx_in]\n",
    "#                 feature_sequences[\"ped_look\"].append([float(lk)])\n",
    "\n",
    "#             if \"ped_occlusion\" in self.streams_to_generate:\n",
    "#                 oc = 0.0\n",
    "#                 if idx_in != -1 and \"occlusion\" in ped_db:\n",
    "#                     arr = ped_db[\"occlusion\"]\n",
    "#                     if len(arr) > idx_in:\n",
    "#                         oc = float(arr[idx_in]) / 2.0\n",
    "#                 feature_sequences[\"ped_occlusion\"].append([oc])\n",
    "\n",
    "#             if \"traffic_light\" in self.streams_to_generate:\n",
    "#                 st = 0\n",
    "#                 for obj_id, od in traffic_db.items():\n",
    "#                     if od.get(\"obj_class\") == \"traffic_light\" and \"frames\" in od and \"state\" in od:\n",
    "#                         try:\n",
    "#                             fi = od[\"frames\"].index(frame_num)\n",
    "#                             sv = od[\"state\"][fi]\n",
    "#                             if sv != 0:\n",
    "#                                 st = sv\n",
    "#                                 break\n",
    "#                         except (ValueError, IndexError):\n",
    "#                             continue\n",
    "#                 feature_sequences[\"traffic_light\"].append(to_one_hot(st, NUM_TL_STATES))\n",
    "\n",
    "#             if \"static_context\" in self.streams_to_generate:\n",
    "#                 feature_sequences[\"static_context\"].append(\n",
    "#                     static_vec\n",
    "#                     if static_vec is not None\n",
    "#                     else np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "#                 )\n",
    "\n",
    "#         # Convert lists to tensors\n",
    "#         features = {}\n",
    "#         try:\n",
    "#             for sn in self.streams_to_generate:\n",
    "#                 arr = np.array(feature_sequences[sn], dtype=np.float32)\n",
    "#                 features[sn] = torch.tensor(arr, dtype=torch.float32)\n",
    "#         except Exception as e:\n",
    "#             print(f\"Error converting features idx {idx}: {e}. Return dummy.\")\n",
    "#             features = {\n",
    "#                 name: torch.zeros(\n",
    "#                     (self.seq_len, self._input_sizes_for_error.get(name, 1)),\n",
    "#                     dtype=torch.float32,\n",
    "#                 )\n",
    "#                 for name in self.streams_to_generate\n",
    "#             }\n",
    "\n",
    "#         return features, torch.tensor(label, dtype=torch.long)\n",
    "\n",
    "\n",
    "# # --- Wrapper Dataset for Balanced Data ---\n",
    "# class BalancedDataset(Dataset):\n",
    "#     def __init__(self, data_dict, active_streams, label_key='label'):\n",
    "#         self.active_streams = active_streams\n",
    "#         self.label_key = label_key\n",
    "#         if label_key not in data_dict or not data_dict[label_key]:\n",
    "#             raise ValueError(f\"Label key '{label_key}' missing/empty.\")\n",
    "#         self.num_samples = len(data_dict[label_key])\n",
    "#         if self.num_samples == 0:\n",
    "#             print(\"Warning: BalancedDataset initialized with zero samples.\")\n",
    "#         self.features = {}\n",
    "#         for s in active_streams:\n",
    "#             if s in data_dict and data_dict[s]:\n",
    "#                 self.features[s] = torch.tensor(\n",
    "#                     np.array(data_dict[s]), dtype=torch.float32\n",
    "#                 )\n",
    "#             else:\n",
    "#                 raise KeyError(f\"Stream '{s}' requested but missing/empty in balanced data.\")\n",
    "#         try:\n",
    "#             self.labels = torch.tensor(\n",
    "#                 [lbl[0] for lbl in data_dict[label_key]], dtype=torch.long\n",
    "#             )\n",
    "#         except (IndexError, TypeError) as e:\n",
    "#             raise ValueError(f\"Error converting labels: {e}\")\n",
    "#         for s in active_streams:\n",
    "#             if len(self.features[s]) != self.num_samples:\n",
    "#                 raise ValueError(f\"Len mismatch: Stream '{s}' vs Labels\")\n",
    "\n",
    "#     def __len__(self):\n",
    "#         return self.num_samples\n",
    "\n",
    "#     def __getitem__(self, idx):\n",
    "#         fd = {s: self.features[s][idx] for s in self.active_streams}\n",
    "#         return fd, self.labels[idx]\n",
    "\n",
    "\n",
    "# # --- Model Architecture ---\n",
    "# class Attention(nn.Module):\n",
    "#     def __init__(self, hidden_dim, attention_dim):\n",
    "#         super(Attention, self).__init__()\n",
    "#         self.attention_net = nn.Sequential(\n",
    "#             nn.Linear(hidden_dim, attention_dim),\n",
    "#             nn.Tanh(),\n",
    "#             nn.Linear(attention_dim, 1),\n",
    "#         )\n",
    "\n",
    "#     def forward(self, lstm_output):\n",
    "#         scores = self.attention_net(lstm_output).squeeze(2)\n",
    "#         weights = torch.softmax(scores, dim=1)\n",
    "#         context = torch.sum(lstm_output * weights.unsqueeze(2), dim=1)\n",
    "#         return context, weights\n",
    "\n",
    "\n",
    "# class MultiStreamAdaptiveLSTM(nn.Module):\n",
    "#     def __init__(\n",
    "#         self,\n",
    "#         input_sizes,\n",
    "#         lstm_hidden_size,\n",
    "#         num_lstm_layers,\n",
    "#         num_classes,\n",
    "#         attention_dim,\n",
    "#         dropout_rate,\n",
    "#         stream_names=['bbox', 'pose'],\n",
    "#     ):\n",
    "#         super(MultiStreamAdaptiveLSTM, self).__init__()\n",
    "#         if not stream_names:\n",
    "#             raise ValueError(\"stream_names cannot be empty.\")\n",
    "#         self.stream_names = stream_names\n",
    "#         self.lstms = nn.ModuleDict()\n",
    "#         self.attentions = nn.ModuleDict()\n",
    "#         print(f\"Initializing model with streams: {self.stream_names}\")\n",
    "#         for name in stream_names:\n",
    "#             if name not in input_sizes:\n",
    "#                 raise KeyError(f\"Input size for stream '{name}' not provided.\")\n",
    "#             insize = input_sizes[name]\n",
    "#             print(f\"  - Adding stream '{name}' with input size {insize}\")\n",
    "#             self.lstms[name] = nn.LSTM(\n",
    "#                 insize,\n",
    "#                 lstm_hidden_size,\n",
    "#                 num_lstm_layers,\n",
    "#                 batch_first=True,\n",
    "#                 dropout=dropout_rate if num_lstm_layers > 1 else 0,\n",
    "#                 bidirectional=True,\n",
    "#             )\n",
    "#             self.attentions[name] = Attention(lstm_hidden_size * 2, attention_dim)\n",
    "#         nf = lstm_hidden_size * 2 * len(stream_names)\n",
    "#         print(f\"  Combined feature dimension: {nf}\")\n",
    "#         self.dropout = nn.Dropout(dropout_rate)\n",
    "#         interm = max(num_classes * 4, nf // 2)\n",
    "#         self.fc1 = nn.Linear(nf, interm)\n",
    "#         self.relu = nn.ReLU()\n",
    "#         self.fc2 = nn.Linear(interm, num_classes)\n",
    "\n",
    "#     def forward(self, x):\n",
    "#         ctxs = []\n",
    "#         for name in self.stream_names:\n",
    "#             if name not in x:\n",
    "#                 print(f\"Warning: Stream '{name}' expected but missing.\")\n",
    "#                 continue\n",
    "#             out, _ = self.lstms[name](x[name])\n",
    "#             ctx, _ = self.attentions[name](out)\n",
    "#             ctxs.append(ctx)\n",
    "#         if not ctxs:\n",
    "#             raise RuntimeError(\"No stream outputs generated.\")\n",
    "#         f = torch.cat(ctxs, dim=1)\n",
    "#         y = self.dropout(f)\n",
    "#         y = self.relu(self.fc1(y))\n",
    "#         y = self.dropout(y)\n",
    "#         return self.fc2(y)\n",
    "\n",
    "\n",
    "# # --- Training and Evaluation Functions ---\n",
    "# def train_epoch(model, loader, optim, crit, device):\n",
    "#     model.train()\n",
    "#     total, allp, allg = 0.0, [], []\n",
    "#     for feats, labs in tqdm(loader, desc=\"Training\", leave=False):\n",
    "#         inp = {n: feats[n].to(device) for n in model.stream_names if n in feats}\n",
    "#         labs = labs.to(device)\n",
    "#         optim.zero_grad()\n",
    "#         out = model(inp)\n",
    "#         loss = crit(out, labs)\n",
    "#         loss.backward()\n",
    "#         optim.step()\n",
    "#         total += loss.item()\n",
    "#         preds = out.argmax(1).cpu().numpy()\n",
    "#         allp.extend(preds)\n",
    "#         allg.extend(labs.cpu().numpy())\n",
    "#     return total / max(1, len(loader)), accuracy_score(allg, allp)\n",
    "\n",
    "\n",
    "# def evaluate_epoch(model, loader, crit, device):\n",
    "#     model.eval()\n",
    "#     total, allg, allp, allpr = 0.0, [], [], []\n",
    "#     with torch.no_grad():\n",
    "#         for feats, labs in tqdm(loader, desc=\"Evaluating\", leave=False):\n",
    "#             inp = {n: feats[n].to(device) for n in model.stream_names if n in feats}\n",
    "#             labs = labs.to(device)\n",
    "#             out = model(inp)\n",
    "#             loss = crit(out, labs)\n",
    "#             total += loss.item()\n",
    "#             probs = torch.softmax(out, 1).cpu().numpy()\n",
    "#             preds = probs.argmax(1)\n",
    "#             allg.extend(labs.cpu().numpy())\n",
    "#             allp.extend(preds)\n",
    "#             allpr.extend(probs)\n",
    "#     allg = np.array(allg)\n",
    "#     allp = np.array(allp)\n",
    "#     allpr = np.array(allpr)\n",
    "#     acc = accuracy_score(allg, allp)\n",
    "#     prec, rec, f1, _ = precision_recall_fscore_support(\n",
    "#         allg, allp, average='binary', pos_label=1, zero_division=0\n",
    "#     )\n",
    "#     auc = roc_auc_score(allg, allpr[:, 1]) if len(np.unique(allg)) > 1 else float('nan')\n",
    "#     return {'loss': total / max(1, len(loader)), 'accuracy': acc,\n",
    "#             'precision': prec, 'recall': rec, 'f1': f1, 'auc': auc}\n",
    "\n",
    "\n",
    "# def get_predictions_and_labels(model, loader, device):\n",
    "#     model.eval()\n",
    "#     allg, allp = [], []\n",
    "#     with torch.no_grad():\n",
    "#         for feats, labs in tqdm(loader, desc=\"Generating CM Data\", leave=False):\n",
    "#             inp = {n: feats[n].to(device) for n in model.stream_names if n in feats}\n",
    "#             labs = labs.to(device)\n",
    "#             out = model(inp)\n",
    "#             preds = out.argmax(1)\n",
    "#             allg.extend(labs.cpu().numpy())\n",
    "#             allp.extend(preds.cpu().numpy())\n",
    "#     return np.array(allg), np.array(allp)\n",
    "\n",
    "\n",
    "# # --- Main Execution Block ---\n",
    "# if __name__ == '__main__':\n",
    "#     # --- Step 1: Data Preparation ---\n",
    "#     print(\"--- Running Data Preparation ---\")\n",
    "#     print(f\"Checking for PIE database cache at: {PIE_DATABASE_CACHE_PATH}\")\n",
    "#     if not os.path.exists(PIE_DATABASE_CACHE_PATH):\n",
    "#         if PIE is None:\n",
    "#             raise ImportError(\"PIE class not imported, cannot generate database.\")\n",
    "#         print(\"PIE database cache not found. Generating...\")\n",
    "#         pie_interface = PIE(data_path=PIE_ROOT_PATH, regen_database=True)\n",
    "#         pie_database = pie_interface.generate_database()\n",
    "#         if not pie_database:\n",
    "#             raise RuntimeError(\"Failed to generate PIE database.\")\n",
    "#         print(\"PIE database generated successfully.\")\n",
    "#     else:\n",
    "#         print(\"Loading PIE database from cache...\")\n",
    "#         try:\n",
    "#             with open(PIE_DATABASE_CACHE_PATH, 'rb') as f:\n",
    "#                 pie_database = pickle.load(f)\n",
    "#             print(\"PIE database loaded successfully.\")\n",
    "#         except Exception as e:\n",
    "#             raise RuntimeError(f\"Failed to load PIE database: {e}\")\n",
    "\n",
    "#     # --- Calculate Standardization Parameters ---\n",
    "#     print(\"\\nCalculating standardization parameters from training set...\")\n",
    "#     all_train_ego_speeds, all_train_accX, all_train_accY, all_train_gyroZ = [], [], [], []\n",
    "#     for sid in TRAIN_SETS_STR:\n",
    "#         if sid in pie_database:\n",
    "#             for vid, vdata in pie_database[sid].items():\n",
    "#                 va = vdata.get('vehicle_annotations', {})\n",
    "#                 for fn, ed in va.items():\n",
    "#                     sp = ed.get('OBD_speed', 0.0) or ed.get('GPS_speed', 0.0) or 0.0\n",
    "#                     all_train_ego_speeds.append(sp)\n",
    "#                     all_train_accX.append(ed.get('accX', 0.0))\n",
    "#                     all_train_accY.append(ed.get('accY', 0.0))\n",
    "#                     all_train_gyroZ.append(ed.get('gyroZ', 0.0))\n",
    "#     scalers = {}\n",
    "#     if all_train_ego_speeds:\n",
    "#         scalers['ego_speed_mean'] = np.mean(all_train_ego_speeds)\n",
    "#         scalers['ego_speed_std'] = np.std(all_train_ego_speeds) or 1.0\n",
    "#         print(f\"  Ego Speed: Mean={scalers['ego_speed_mean']:.2f}, Std={scalers['ego_speed_std']:.2f}\")\n",
    "#     if all_train_accX:\n",
    "#         scalers['accX_mean'] = np.mean(all_train_accX)\n",
    "#         scalers['accX_std'] = np.std(all_train_accX) or 1.0\n",
    "#         scalers['accY_mean'] = np.mean(all_train_accY)\n",
    "#         scalers['accY_std'] = np.std(all_train_accY) or 1.0\n",
    "#         print(f\"  Ego AccX: Mean={scalers['accX_mean']:.2f}, Std={scalers['accX_std']:.2f}\")\n",
    "#         print(f\"  Ego AccY: Mean={scalers['accY_mean']:.2f}, Std={scalers['accY_std']:.2f}\")\n",
    "#     if all_train_gyroZ:\n",
    "#         scalers['gyroZ_mean'] = np.mean(all_train_gyroZ)\n",
    "#         scalers['gyroZ_std'] = np.std(all_train_gyroZ) or 1.0\n",
    "#         print(f\"  Ego GyroZ: Mean={scalers['gyroZ_mean']:.2f}, Std={scalers['gyroZ_std']:.2f}\")\n",
    "#     print(\"Standardization parameters calculated.\")\n",
    "\n",
    "#     # --- Initialize FULL Training Dataset ---\n",
    "#     print(\"\\nInitializing full training dataset (for extraction)...\")\n",
    "#     full_train_dataset = PIEDataset(\n",
    "#         pie_database, TRAIN_SETS_STR, POSE_DATA_DIR, SEQ_LEN, PRED_LEN, scalers, ALL_POSSIBLE_STREAMS\n",
    "#     )\n",
    "#     if len(full_train_dataset) == 0:\n",
    "#         raise ValueError(\"Full Train Dataset loading failed.\")\n",
    "\n",
    "#     # --- Prepare and Balance Training Data ---\n",
    "#     print(\"\\nExtracting ALL stream data from training set for balancing...\")\n",
    "#     training_data_dict = {s: [] for s in ALL_POSSIBLE_STREAMS}\n",
    "#     training_data_dict['label'] = []\n",
    "#     for i in tqdm(range(len(full_train_dataset)), desc=\"Extracting data\"):\n",
    "#         feats, lab = full_train_dataset[i]\n",
    "#         for s in ALL_POSSIBLE_STREAMS:\n",
    "#             arr = feats.get(s)\n",
    "#             if arr is not None:\n",
    "#                 training_data_dict[s].append(arr.numpy())\n",
    "#             else:\n",
    "#                 size = full_train_dataset._input_sizes_for_error.get(s, 1)\n",
    "#                 training_data_dict[s].append(np.zeros((SEQ_LEN, size), dtype=np.float32))\n",
    "#         training_data_dict['label'].append([lab.item()])\n",
    "#     print(f\"Original training samples: {len(training_data_dict['label'])}\")\n",
    "#     del full_train_dataset\n",
    "#     gc.collect()\n",
    "\n",
    "#     balanced_train_data_dict = balance_samples_count(\n",
    "#         training_data_dict, label_type='label'\n",
    "#     )\n",
    "#     del training_data_dict\n",
    "#     gc.collect()\n",
    "\n",
    "#     print(f\"\\nSaving balanced training data to: {BALANCED_DATA_PKL_PATH}\")\n",
    "#     with open(BALANCED_DATA_PKL_PATH, 'wb') as f:\n",
    "#         pickle.dump(balanced_train_data_dict, f, pickle.HIGHEST_PROTOCOL)\n",
    "#     print(\" -> Balanced data saved.\")\n",
    "\n",
    "#     print(f\"\\nSaving scalers to: {SCALERS_PKL_PATH}\")\n",
    "#     with open(SCALERS_PKL_PATH, 'wb') as f:\n",
    "#         pickle.dump(scalers, f, pickle.HIGHEST_PROTOCOL)\n",
    "#     print(\" -> Scalers saved.\")\n",
    "\n",
    "#     # --- Clean up and start Step 2 ---\n",
    "#     del pie_database\n",
    "#     gc.collect()\n",
    "\n",
    "#     print(\"\\n--- Data Preparation and Balancing Completed ---\")\n",
    "#     print(\"--- Ablation Study Starting Below ---\")\n",
    "#     print(\"-\" * 70)\n",
    "\n",
    "#     # --- Step 2: Ablation Study ---\n",
    "#     print(f\"\\nLoading balanced training data from: {BALANCED_DATA_PKL_PATH}\")\n",
    "#     print(f\"Loading scalers from: {SCALERS_PKL_PATH}\")\n",
    "#     with open(BALANCED_DATA_PKL_PATH, 'rb') as f:\n",
    "#         balanced_train_data_dict = pickle.load(f)\n",
    "#     with open(SCALERS_PKL_PATH, 'rb') as f:\n",
    "#         scalers = pickle.load(f)\n",
    "#     print(\" -> Pre-processed data loaded successfully.\")\n",
    "\n",
    "#     print(\"\\nLoading PIE database cache for Validation...\")\n",
    "#     with open(PIE_DATABASE_CACHE_PATH, 'rb') as f:\n",
    "#         pie_database = pickle.load(f)\n",
    "#     print(\" -> PIE database loaded successfully.\")\n",
    "\n",
    "#     print(\"\\nInitializing validation dataset...\")\n",
    "#     val_dataset = PIEDataset(\n",
    "#         pie_database, VAL_SETS_STR, POSE_DATA_DIR, SEQ_LEN, PRED_LEN, scalers, ALL_POSSIBLE_STREAMS\n",
    "#     )\n",
    "#     val_loader = DataLoader(\n",
    "#         val_dataset, batch_size=BATCH_SIZE, shuffle=False, num_workers=2, pin_memory=True\n",
    "#     )\n",
    "#     print(\"Validation dataset and loader created.\")\n",
    "#     del pie_database\n",
    "#     gc.collect()\n",
    "\n",
    "#     # --- Ablation Study Loop ---\n",
    "#     results_summary = {}\n",
    "\n",
    "#     for streams in STREAM_COMBINATIONS_TO_TEST:\n",
    "#         key = tuple(sorted(streams))\n",
    "#         print(f\"\\n===== Experiment: Active Streams: {streams} =====\")\n",
    "\n",
    "#         try:\n",
    "#             curr_ds = BalancedDataset(balanced_train_data_dict, streams, label_key='label')\n",
    "#         except Exception as e:\n",
    "#             print(f\"Error creating BalancedDataset: {e}. Skipping.\")\n",
    "#             continue\n",
    "#         train_loader = DataLoader(\n",
    "#             curr_ds, batch_size=BATCH_SIZE, shuffle=True, num_workers=2, pin_memory=True\n",
    "#         )\n",
    "\n",
    "#         print(\"Initializing model...\")\n",
    "#         curr_ins = {}\n",
    "#         special = {\n",
    "#             'TRAFFIC_LIGHT': 'TL_STATE',\n",
    "#             'STATIC_CONTEXT': 'STATIC',\n",
    "#             'EGO_SPEED': 'EGO_SPEED',\n",
    "#             'EGO_ACC': 'EGO_ACC',\n",
    "#             'EGO_GYRO': 'EGO_GYRO',\n",
    "#             'PED_ACTION': 'PED_ACTION',\n",
    "#             'PED_LOOK': 'PED_LOOK',\n",
    "#             'PED_OCCLUSION': 'PED_OCC',\n",
    "#         }\n",
    "#         for s in streams:\n",
    "#             name = f'INPUT_SIZE_{s.upper()}'\n",
    "#             suf = special.get(s.upper(), None)\n",
    "#             if suf:\n",
    "#                 name = f'INPUT_SIZE_{suf}'\n",
    "#             elif s == 'bbox':\n",
    "#                 name = 'INPUT_SIZE_BBOX'\n",
    "#             elif s == 'pose':\n",
    "#                 name = 'INPUT_SIZE_POSE'\n",
    "#             curr_ins[s] = globals()[name]\n",
    "\n",
    "#         model = MultiStreamAdaptiveLSTM(\n",
    "#             input_sizes=curr_ins,\n",
    "#             lstm_hidden_size=LSTM_HIDDEN_SIZE,\n",
    "#             num_lstm_layers=NUM_LSTM_LAYERS,\n",
    "#             num_classes=NUM_CLASSES,\n",
    "#             attention_dim=ATTENTION_DIM,\n",
    "#             dropout_rate=DROPOUT_RATE,\n",
    "#             stream_names=streams,\n",
    "#         ).to(DEVICE)\n",
    "#         print(\n",
    "#             f\"Model Initialized. Trainable Parameters: \"\n",
    "#             f\"{sum(p.numel() for p in model.parameters() if p.requires_grad):,}\"\n",
    "#         )\n",
    "\n",
    "#         labs = curr_ds.labels.tolist()\n",
    "#         c0, c1 = labs.count(0), labs.count(1)\n",
    "#         tot = len(labs)\n",
    "#         if tot == 0:\n",
    "#             w0 = w1 = 1.0\n",
    "#         elif c0 == 0:\n",
    "#             w0, w1 = 0.0, 1.0\n",
    "#         elif c1 == 0:\n",
    "#             w0, w1 = 1.0, 0.0\n",
    "#         else:\n",
    "#             w0, w1 = tot / (2 * c0), tot / (2 * c1)\n",
    "#         cw = torch.tensor([w0, w1], dtype=torch.float32).to(DEVICE)\n",
    "#         crit = nn.CrossEntropyLoss(weight=cw)\n",
    "#         opt = optim.Adam(model.parameters(), lr=LEARNING_RATE)\n",
    "\n",
    "#         best_f1 = -1.0\n",
    "#         best_path = None\n",
    "\n",
    "#         for ep in range(NUM_EPOCHS):\n",
    "#             t_loss, t_acc = train_epoch(model, train_loader, opt, crit, DEVICE)\n",
    "#             vmet = evaluate_epoch(model, val_loader, crit, DEVICE)\n",
    "#             print(\n",
    "#                 f\"Epoch {ep+1}/{NUM_EPOCHS}: \"\n",
    "#                 f\"Train Loss={t_loss:.4f}, Train Acc={t_acc:.4f} | \"\n",
    "#                 f\"Val Loss={vmet['loss']:.4f}, Val Acc={vmet['accuracy']:.4f}, F1={vmet['f1']:.4f}\"\n",
    "#             )\n",
    "#             if vmet['f1'] > best_f1:\n",
    "#                 best_f1 = vmet['f1']\n",
    "#                 path = f\"best_model_{'_'.join(sorted(streams))}_ep{ep+1}.pth\"\n",
    "#                 torch.save(model.state_dict(), path)\n",
    "#                 best_path = path\n",
    "#                 print(f\"  → New best F1, saved to {path}\")\n",
    "\n",
    "#         # final eval\n",
    "#         if best_path:\n",
    "#             model.load_state_dict(torch.load(best_path, map_location=DEVICE))\n",
    "#             final_met = evaluate_epoch(model, val_loader, crit, DEVICE)\n",
    "#         else:\n",
    "#             final_met = vmet\n",
    "\n",
    "#         results_summary[key] = {\n",
    "#             'Best Val F1': best_f1,\n",
    "#             'Final F1': final_met['f1'],\n",
    "#             'Final Precision': final_met['precision'],\n",
    "#             'Final Recall': final_met['recall'],\n",
    "#             'Final Accuracy': final_met['accuracy'],\n",
    "#             'Final AUC': final_met['auc'],\n",
    "#             'Final Loss': final_met['loss'],\n",
    "#         }\n",
    "#         print(f\"Results for {streams}: {results_summary[key]}\")\n",
    "\n",
    "#         del model, opt, crit, train_loader, curr_ds\n",
    "#         gc.collect()\n",
    "#         torch.cuda.empty_cache()\n",
    "#         time.sleep(1)\n",
    "\n",
    "#     # --- Print Summary Table ---\n",
    "#     print(\"\\n--- Ablation Study Summary ---\")\n",
    "#     if results_summary:\n",
    "#         # Filter out keys that are not tuples before creating DataFrame\n",
    "#         valid_results = {k: v for k, v in results_summary.items() if isinstance(k, tuple)}\n",
    "#         if not valid_results:\n",
    "#              print(\"No valid experiment results found in summary dictionary.\")\n",
    "#         else:\n",
    "#             summary_df = pd.DataFrame.from_dict(valid_results, orient='index')\n",
    "#             # Format index - ensure keys are tuples of strings before joining\n",
    "#             summary_df.index = [\", \".join(map(str, k)) for k in summary_df.index]\n",
    "#             cols_order = ['Best Val F1', 'Final F1', 'Final Recall', 'Final Precision', 'Final Accuracy', 'Final AUC', 'Final Loss']\n",
    "#             summary_df = summary_df[[col for col in cols_order if col in summary_df.columns]]\n",
    "#             summary_df = summary_df.sort_values(by='Best Val F1', ascending=False)\n",
    "#             print(summary_df.to_markdown(floatfmt=\".4f\"))\n",
    "#     else:\n",
    "#         print(\"No experiments were completed successfully.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "1f0c0831",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T15:19:43.312240Z",
     "iopub.status.busy": "2025-05-01T15:19:43.312012Z",
     "iopub.status.idle": "2025-05-01T15:19:43.321335Z",
     "shell.execute_reply": "2025-05-01T15:19:43.320741Z"
    },
    "papermill": {
     "duration": 0.020606,
     "end_time": "2025-05-01T15:19:43.322534",
     "exception": false,
     "start_time": "2025-05-01T15:19:43.301928",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # --- IMPORTS ---------------------------------------------------------------\n",
    "# import torch\n",
    "# import torch.nn as nn\n",
    "# import torch.optim as optim\n",
    "# from torch.utils.data import Dataset, DataLoader        # keep DataLoader around\n",
    "# import xml.etree.ElementTree as ET\n",
    "# import os\n",
    "# import numpy as np\n",
    "# from tqdm.notebook import tqdm                         # progress-bar\n",
    "# import random, math, zipfile, cv2, pandas as pd\n",
    "# import matplotlib.pyplot as plt, seaborn as sns\n",
    "# import pickle, time, sys, gc\n",
    "\n",
    "# # ---------------------------------------------------------------------------\n",
    "# # Optional PIE utilities path (not required for visualisation-only script)\n",
    "# # pie_utilities_path = '/kaggle/working/PIE/utilities'\n",
    "# # if pie_utilities_path not in sys.path:\n",
    "# #     sys.path.insert(0, pie_utilities_path)\n",
    "# # try:\n",
    "# #     from pie_data import PIE\n",
    "# # except ImportError:\n",
    "# #     PIE = None\n",
    "# # ---------------------------------------------------------------------------\n",
    "\n",
    "# # ------------------------------- Configuration -----------------------------\n",
    "# VIDEO_ID_TO_PROCESS = \"video_0001\"\n",
    "# SET_ID_TO_PROCESS   = \"set01\"\n",
    "\n",
    "# # ------------------------------- Paths ------------------------------------\n",
    "# IMAGE_FRAME_DIR         = \"/kaggle/input/sample-images2/Frames\"\n",
    "# PIE_DATABASE_CACHE_PATH = \"/kaggle/input/pie-database/pie_database.pkl\"\n",
    "# SCALERS_PKL_PATH        = \"/kaggle/working/scalers.pkl\"\n",
    "# MODEL_PATH              = (\"/kaggle/input/best_model_ablation/pytorch/default/1/\"\n",
    "#                            \"best_model_bbox_ego_acc_ego_speed_ped_action_ped_look_static_context_ep1.pth\")\n",
    "# OUTPUT_VIDEO_PATH       = f\"/kaggle/working/{SET_ID_TO_PROCESS}_{VIDEO_ID_TO_PROCESS}_predictions.mp4\"\n",
    "\n",
    "# POSE_DATA_DIR = \"/kaggle/input/sample-poses\"   # <-- NEW: required for pose loading\n",
    "# # ---------------------------------------------------------------------------\n",
    "\n",
    "# # *** Define the streams this specific model was trained with ***\n",
    "# MODEL_ACTIVE_STREAMS = [\n",
    "#     \"bbox\",\n",
    "#     \"ego_speed\",\n",
    "#     \"ego_acc\",\n",
    "#     \"ped_action\",\n",
    "#     \"ped_look\",\n",
    "#     \"static_context\",\n",
    "# ]\n",
    "# print(f\"Model uses Active Streams: {MODEL_ACTIVE_STREAMS}\")\n",
    "\n",
    "# # -------------------- Model & dataset hyper-parameters --------------------\n",
    "# SEQ_LEN = 30\n",
    "# PRED_LEN = 1          # prediction at end of sequence\n",
    "\n",
    "# INPUT_SIZE_BBOX       = 4\n",
    "# INPUT_SIZE_POSE       = 34\n",
    "# INPUT_SIZE_EGO_SPEED  = 1\n",
    "# INPUT_SIZE_EGO_ACC    = 2\n",
    "# INPUT_SIZE_EGO_GYRO   = 1\n",
    "# INPUT_SIZE_PED_ACTION = 1\n",
    "# INPUT_SIZE_PED_LOOK   = 1\n",
    "# INPUT_SIZE_PED_OCC    = 1\n",
    "# INPUT_SIZE_TL_STATE   = 4\n",
    "\n",
    "# NUM_SIGNALIZED_CATS   = 4\n",
    "# NUM_INTERSECTION_CATS = 5\n",
    "# NUM_AGE_CATS          = 4\n",
    "# NUM_GENDER_CATS       = 3\n",
    "# NUM_TRAFFIC_DIR_CATS  = 2\n",
    "# LANE_CATEGORIES       = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 4, 7: 4, 8: 4}\n",
    "# NUM_LANE_CATS         = len(set(LANE_CATEGORIES.values()))\n",
    "# INPUT_SIZE_STATIC     = (NUM_SIGNALIZED_CATS + NUM_INTERSECTION_CATS + NUM_AGE_CATS\n",
    "#                          + NUM_GENDER_CATS + NUM_TRAFFIC_DIR_CATS + NUM_LANE_CATS)\n",
    "\n",
    "# LSTM_HIDDEN_SIZE = 256\n",
    "# NUM_LSTM_LAYERS  = 2\n",
    "# DROPOUT_RATE     = 0.3\n",
    "# NUM_CLASSES      = 2\n",
    "# ATTENTION_DIM    = 128\n",
    "\n",
    "# DEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# print(f\"Using device: {DEVICE}\")\n",
    "\n",
    "# # ----------------------------- label maps ---------------------------------\n",
    "# TL_STATE_MAP    = {\"__undefined__\": 0, \"red\": 1, \"yellow\": 2, \"green\": 3}\n",
    "# NUM_TL_STATES   = len(TL_STATE_MAP)\n",
    "# SIGNALIZED_MAP  = {\"n/a\": 0, \"C\": 1, \"S\": 2, \"CS\": 3}\n",
    "# INTERSECTION_MAP= {\"midblock\": 0, \"T\": 1, \"T-left\": 2, \"T-right\": 3, \"four-way\": 4}\n",
    "# AGE_MAP         = {\"child\": 0, \"young\": 1, \"adult\": 2, \"senior\": 3}\n",
    "# GENDER_MAP      = {\"n/a\": 0, \"female\": 1, \"male\": 2}\n",
    "# TRAFFIC_DIR_MAP = {\"OW\": 0, \"TW\": 1}\n",
    "\n",
    "# # ----------------------------- utilities ----------------------------------\n",
    "# def to_one_hot(index: int, num_classes: int) -> np.ndarray:\n",
    "#     vec = np.zeros(num_classes, dtype=np.float32)\n",
    "#     vec[int(np.clip(index, 0, num_classes - 1))] = 1.0\n",
    "#     return vec\n",
    "\n",
    "# ALL_POSSIBLE_STREAMS = [\n",
    "#     \"bbox\", \"pose\", \"ego_speed\", \"ego_acc\", \"ego_gyro\",\n",
    "#     \"ped_action\", \"ped_look\", \"ped_occlusion\", \"traffic_light\", \"static_context\",\n",
    "# ]\n",
    "\n",
    "# # ==========================================================================#\n",
    "# #                                DATASET                                    #\n",
    "# # ==========================================================================#\n",
    "# class PIEDatasetInference:\n",
    "#     def __init__(self, pie_database: dict, set_names: list[str],\n",
    "#                  pose_data_dir: str, scalers: dict | None = None):\n",
    "#         self.pie_db    = pie_database\n",
    "#         self.set_names = set_names\n",
    "#         self.pose_data_dir = pose_data_dir\n",
    "#         self.scalers   = scalers or {}\n",
    "#         self.all_pose_data = {}\n",
    "#         self._input_sizes_for_error = self._get_input_sizes_dict()\n",
    "#         self._load_pose_data()\n",
    "\n",
    "#     # ----------------------------------------------------------------------\n",
    "#     def _get_input_sizes_dict(self) -> dict[str, int]:\n",
    "#         input_sizes, special = {}, {\n",
    "#             \"TRAFFIC_LIGHT\": \"TL_STATE\",\n",
    "#             \"STATIC_CONTEXT\": \"STATIC\",\n",
    "#             \"EGO_SPEED\": \"EGO_SPEED\",\n",
    "#             \"EGO_ACC\": \"EGO_ACC\",\n",
    "#             \"EGO_GYRO\": \"EGO_GYRO\",\n",
    "#             \"PED_ACTION\": \"PED_ACTION\",\n",
    "#             \"PED_LOOK\": \"PED_LOOK\",\n",
    "#             \"PED_OCCLUSION\": \"PED_OCC\",\n",
    "#         }\n",
    "#         for stream in ALL_POSSIBLE_STREAMS:\n",
    "#             const_name = f\"INPUT_SIZE_{stream.upper()}\"\n",
    "#             suffix     = special.get(stream.upper())\n",
    "#             if suffix:\n",
    "#                 const_name = f\"INPUT_SIZE_{suffix}\"\n",
    "#             elif stream == \"bbox\":\n",
    "#                 const_name = \"INPUT_SIZE_BBOX\"\n",
    "#             elif stream == \"pose\":\n",
    "#                 const_name = \"INPUT_SIZE_POSE\"\n",
    "#             input_sizes[stream] = globals().get(const_name, 1)\n",
    "#         return input_sizes\n",
    "\n",
    "#     # ----------------------------------------------------------------------\n",
    "#     def _load_pose_data(self):\n",
    "#         print(\"Loading pose data (if available)...\")\n",
    "#         sets_loaded = 0\n",
    "#         for set_id in self.set_names:\n",
    "#             self.all_pose_data[set_id] = {}\n",
    "#             pose_set_path = os.path.join(self.pose_data_dir, set_id)\n",
    "#             if not os.path.isdir(pose_set_path):\n",
    "#                 continue\n",
    "\n",
    "#             pkl_files = [f for f in os.listdir(pose_set_path)\n",
    "#                          if f.startswith(f\"{set_id}_\") and f.endswith(\"_poses.pkl\")]\n",
    "\n",
    "#             loaded = 0\n",
    "#             for pkl_name in pkl_files:\n",
    "#                 pkl_path = os.path.join(pose_set_path, pkl_name)\n",
    "#                 try:\n",
    "#                     with open(pkl_path, \"rb\") as f:\n",
    "#                         loaded_pkl = pickle.load(f)\n",
    "#                     if len(loaded_pkl) != 1:\n",
    "#                         continue\n",
    "#                     video_key, video_data = list(loaded_pkl.items())[0]\n",
    "#                     video_id = \"_\".join(video_key.split(\"_\")[1:])\n",
    "#                     if video_id in self.pie_db.get(set_id, {}):\n",
    "#                         self.all_pose_data[set_id][video_id] = video_data\n",
    "#                         loaded += 1\n",
    "#                 except Exception as e:\n",
    "#                     print(f\"Pose load error {pkl_path}: {e}\")\n",
    "#             if loaded:\n",
    "#                 sets_loaded += 1\n",
    "#         print(f\"Finished loading pose data for {sets_loaded} set(s).\")\n",
    "\n",
    "#     # ----------------------------------------------------------------------\n",
    "#     def get_feature_sequence(\n",
    "#         self,\n",
    "#         set_id: str,\n",
    "#         video_id: str,\n",
    "#         ped_id: str,\n",
    "#         end_frame_num: int,\n",
    "#         seq_len: int,\n",
    "#         streams_needed: list[str],\n",
    "#     ):\n",
    "#         \"\"\"Return {stream: tensor[1, seq_len, dim]} or None if invalid.\"\"\"\n",
    "#         frames = list(range(end_frame_num - seq_len + 1, end_frame_num + 1))\n",
    "#         if frames[0] < 0:\n",
    "#             return None\n",
    "\n",
    "#         video_db   = self.pie_db.get(set_id, {}).get(video_id, {})\n",
    "#         ped_db     = video_db.get(\"ped_annotations\", {}).get(ped_id, {})\n",
    "#         ego_db     = video_db.get(\"vehicle_annotations\", {})\n",
    "#         traffic_db = video_db.get(\"traffic_annotations\", {})\n",
    "#         ped_attr   = ped_db.get(\"attributes\", {})\n",
    "\n",
    "#         feats = {s: [] for s in streams_needed}\n",
    "#         valid = True\n",
    "\n",
    "#         # static-context vector (once per sequence)\n",
    "#         static_vec = None\n",
    "#         if \"static_context\" in streams_needed:\n",
    "#             sig_idx = ped_attr.get(\"signalized\", 0)\n",
    "#             int_idx = ped_attr.get(\"intersection\", 0)\n",
    "#             age_idx = ped_attr.get(\"age\", 2)\n",
    "#             gen_idx = ped_attr.get(\"gender\", 0)\n",
    "#             td_idx  = int(ped_attr.get(\"traffic_direction\", 0))\n",
    "#             nl_cat  = LANE_CATEGORIES.get(\n",
    "#                 ped_attr.get(\"num_lanes\", 2),\n",
    "#                 LANE_CATEGORIES[max(LANE_CATEGORIES)],\n",
    "#             )\n",
    "#             static_vec = np.concatenate([\n",
    "#                 to_one_hot(sig_idx, NUM_SIGNALIZED_CATS),\n",
    "#                 to_one_hot(int_idx, NUM_INTERSECTION_CATS),\n",
    "#                 to_one_hot(age_idx, NUM_AGE_CATS),\n",
    "#                 to_one_hot(gen_idx, NUM_GENDER_CATS),\n",
    "#                 to_one_hot(td_idx, NUM_TRAFFIC_DIR_CATS),\n",
    "#                 to_one_hot(nl_cat, NUM_LANE_CATS),\n",
    "#             ])\n",
    "#             if static_vec.size != INPUT_SIZE_STATIC:\n",
    "#                 static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "\n",
    "#         # ----------------------- per-frame extraction ----------------------\n",
    "#         for f in frames:\n",
    "#             # index of this frame in pedestrian’s annotation list\n",
    "#             if \"frames\" in ped_db:\n",
    "#                 try:\n",
    "#                     frame_db_idx = ped_db[\"frames\"].index(f)\n",
    "#                 except ValueError:\n",
    "#                     valid = False\n",
    "#                     break\n",
    "#             else:\n",
    "#                 valid = False\n",
    "#                 break\n",
    "\n",
    "#             ego_frame = ego_db.get(f)\n",
    "\n",
    "#             if ego_frame is None and any(s in streams_needed\n",
    "#                                          for s in (\"ego_speed\", \"ego_acc\", \"ego_gyro\")):\n",
    "#                 valid = False\n",
    "#                 break\n",
    "\n",
    "#             # ---------- bbox ----------\n",
    "#             if \"bbox\" in streams_needed:\n",
    "#                 bbox_norm = np.zeros(INPUT_SIZE_BBOX, dtype=np.float32)\n",
    "#                 if \"bbox\" in ped_db and len(ped_db[\"bbox\"]) > frame_db_idx:\n",
    "#                     try:\n",
    "#                         x1, y1, x2, y2 = ped_db[\"bbox\"][frame_db_idx]\n",
    "#                         img_w = video_db.get(\"width\", 1920)\n",
    "#                         img_h = video_db.get(\"height\", 1080)\n",
    "#                         if img_w > 0 and img_h > 0:\n",
    "#                             cx = (x1 + x2) / 2 / img_w\n",
    "#                             cy = (y1 + y2) / 2 / img_h\n",
    "#                             w  = (x2 - x1) / img_w\n",
    "#                             h  = (y2 - y1) / img_h\n",
    "#                             if (\n",
    "#                                 w > 0\n",
    "#                                 and h > 0\n",
    "#                                 and 0 <= cx <= 1\n",
    "#                                 and 0 <= cy <= 1\n",
    "#                             ):\n",
    "#                                 bbox_norm = np.array([cx, cy, w, h], np.float32)\n",
    "#                     except Exception:\n",
    "#                         pass\n",
    "#                 feats[\"bbox\"].append(bbox_norm)\n",
    "\n",
    "#             # ---------- pose ----------\n",
    "#             if \"pose\" in streams_needed:\n",
    "#                 pose_vec = np.zeros(INPUT_SIZE_POSE, dtype=np.float32)\n",
    "#                 vid_pose = self.all_pose_data.get(set_id, {}).get(video_id, {})\n",
    "#                 frame_pose = vid_pose.get(f, {})\n",
    "#                 loaded_pose = frame_pose.get(ped_id)\n",
    "#                 if (loaded_pose is not None\n",
    "#                         and isinstance(loaded_pose, np.ndarray)\n",
    "#                         and loaded_pose.shape == (INPUT_SIZE_POSE,)):\n",
    "#                     pose_vec = loaded_pose\n",
    "#                 feats[\"pose\"].append(pose_vec)\n",
    "\n",
    "#             # ---------- ego streams ----------\n",
    "#             if \"ego_speed\" in streams_needed:\n",
    "#                 speed = ego_frame.get(\"OBD_speed\", 0.0)\n",
    "#                 if speed == 0.0:\n",
    "#                     speed = ego_frame.get(\"GPS_speed\", 0.0)\n",
    "#                 speed_scaled = ((speed - self.scalers.get(\"ego_speed_mean\", 0.0))\n",
    "#                                 / self.scalers.get(\"ego_speed_std\", 1.0))\n",
    "#                 feats[\"ego_speed\"].append([speed_scaled])\n",
    "\n",
    "#             if \"ego_acc\" in streams_needed:\n",
    "#                 acc_x = ego_frame.get(\"accX\", 0.0)\n",
    "#                 acc_y = ego_frame.get(\"accY\", 0.0)\n",
    "#                 feats[\"ego_acc\"].append([\n",
    "#                     (acc_x - self.scalers.get(\"accX_mean\", 0.0))\n",
    "#                     / self.scalers.get(\"accX_std\", 1.0),\n",
    "#                     (acc_y - self.scalers.get(\"accY_mean\", 0.0))\n",
    "#                     / self.scalers.get(\"accY_std\", 1.0),\n",
    "#                 ])\n",
    "\n",
    "#             if \"ego_gyro\" in streams_needed:\n",
    "#                 gyro_z = ego_frame.get(\"gyroZ\", 0.0)\n",
    "#                 gyro_z_scaled = ((gyro_z - self.scalers.get(\"gyroZ_mean\", 0.0))\n",
    "#                                  / self.scalers.get(\"gyroZ_std\", 1.0))\n",
    "#                 feats[\"ego_gyro\"].append([gyro_z_scaled])\n",
    "\n",
    "#             # ---------- pedestrian behaviour ----------\n",
    "#             if \"ped_action\" in streams_needed:\n",
    "#                 action_val = 0\n",
    "#                 if (\n",
    "#                     \"behavior\" in ped_db\n",
    "#                     and \"action\" in ped_db[\"behavior\"]\n",
    "#                     and len(ped_db[\"behavior\"][\"action\"]) > frame_db_idx\n",
    "#                 ):\n",
    "#                     action_val = ped_db[\"behavior\"][\"action\"][frame_db_idx]\n",
    "#                 feats[\"ped_action\"].append([float(action_val)])\n",
    "\n",
    "#             if \"ped_look\" in streams_needed:\n",
    "#                 look_val = 0\n",
    "#                 if (\n",
    "#                     \"behavior\" in ped_db\n",
    "#                     and \"look\" in ped_db[\"behavior\"]\n",
    "#                     and len(ped_db[\"behavior\"][\"look\"]) > frame_db_idx\n",
    "#                 ):\n",
    "#                     look_val = ped_db[\"behavior\"][\"look\"][frame_db_idx]\n",
    "#                 feats[\"ped_look\"].append([float(look_val)])\n",
    "\n",
    "#             if \"ped_occlusion\" in streams_needed:\n",
    "#                 occ = 0.0\n",
    "#                 if \"occlusion\" in ped_db and len(ped_db[\"occlusion\"]) > frame_db_idx:\n",
    "#                     occ_val = ped_db[\"occlusion\"][frame_db_idx]\n",
    "#                     occ = float(occ_val) / 2.0\n",
    "#                 feats[\"ped_occlusion\"].append([occ])\n",
    "\n",
    "#             # ---------- traffic light ----------\n",
    "#             if \"traffic_light\" in streams_needed:\n",
    "#                 state_int = 0\n",
    "#                 for obj_id, obj_data in traffic_db.items():\n",
    "#                     if (\n",
    "#                         obj_data.get(\"obj_class\") == \"traffic_light\"\n",
    "#                         and \"frames\" in obj_data\n",
    "#                         and \"state\" in obj_data\n",
    "#                     ):\n",
    "#                         try:\n",
    "#                             tl_idx   = obj_data[\"frames\"].index(f)\n",
    "#                             state_val = obj_data[\"state\"][tl_idx]\n",
    "#                             if state_val != 0:\n",
    "#                                 state_int = state_val\n",
    "#                                 break\n",
    "#                         except (ValueError, IndexError):\n",
    "#                             continue\n",
    "#                 feats[\"traffic_light\"].append(to_one_hot(state_int, NUM_TL_STATES))\n",
    "\n",
    "#             # ---------- static context ----------\n",
    "#             if \"static_context\" in streams_needed:\n",
    "#                 feats[\"static_context\"].append(\n",
    "#                     static_vec if static_vec is not None\n",
    "#                     else np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "#                 )\n",
    "\n",
    "#         # ------------------------------------------------------------------\n",
    "#         if not valid:\n",
    "#             return None\n",
    "\n",
    "#         try:\n",
    "#             out = {}\n",
    "#             for name in streams_needed:\n",
    "#                 tensor = torch.tensor(\n",
    "#                     np.array(feats[name], dtype=np.float32),\n",
    "#                     dtype=torch.float32,\n",
    "#                 ).unsqueeze(0)                           # add batch dim\n",
    "#                 exp_shape = (1, seq_len,\n",
    "#                              self._input_sizes_for_error.get(name, 1))\n",
    "#                 if tensor.shape != exp_shape:\n",
    "#                     print(f\"Shape mismatch {name}: {tensor.shape} vs {exp_shape}\")\n",
    "#                     return None\n",
    "#                 out[name] = tensor\n",
    "#             return out\n",
    "#         except Exception as e:\n",
    "#             print(f\"Sequence→tensor error: {e}\")\n",
    "#             return None\n",
    "\n",
    "# # ==========================================================================#\n",
    "# #                          MODEL ARCHITECTURE                               #\n",
    "# # ==========================================================================#\n",
    "# class Attention(nn.Module):\n",
    "#     def __init__(self, hidden_dim: int, att_dim: int):\n",
    "#         super().__init__()\n",
    "#         # must be called attention_net so the saved keys match:\n",
    "#         self.attention_net = nn.Sequential(\n",
    "#             nn.Linear(hidden_dim, att_dim),\n",
    "#             nn.Tanh(),\n",
    "#             nn.Linear(att_dim, 1),\n",
    "#         )\n",
    "\n",
    "#     def forward(self, lstm_out: torch.Tensor):\n",
    "#         # lstm_out: [B, T, 2H]\n",
    "#         att_scores  = self.attention_net(lstm_out).squeeze(2)   # [B, T]\n",
    "#         att_weights = torch.softmax(att_scores, dim=1)          # [B, T]\n",
    "#         ctx         = torch.sum(lstm_out * att_weights.unsqueeze(2), dim=1)\n",
    "#         return ctx, att_weights\n",
    "\n",
    "\n",
    "# class MultiStreamAdaptiveLSTM(nn.Module):\n",
    "#     def __init__(\n",
    "#         self,\n",
    "#         input_sizes: dict[str, int],\n",
    "#         lstm_hidden_size: int,\n",
    "#         num_lstm_layers: int,\n",
    "#         num_classes: int,\n",
    "#         attention_dim: int,\n",
    "#         dropout_rate: float,\n",
    "#         stream_names: list[str] | None = None,\n",
    "#     ):\n",
    "#         super().__init__()\n",
    "#         if not stream_names:\n",
    "#             raise ValueError(\"stream_names cannot be empty\")\n",
    "\n",
    "#         self.stream_names = list(stream_names)\n",
    "#         self.lstms       = nn.ModuleDict()\n",
    "#         self.attentions  = nn.ModuleDict()\n",
    "\n",
    "#         for name in self.stream_names:\n",
    "#             if name not in input_sizes:\n",
    "#                 raise KeyError(f\"Missing input size for stream '{name}'\")\n",
    "#             self.lstms[name] = nn.LSTM(\n",
    "#                 input_sizes[name],\n",
    "#                 lstm_hidden_size,\n",
    "#                 num_lstm_layers,\n",
    "#                 batch_first=True,\n",
    "#                 dropout=dropout_rate if num_lstm_layers > 1 else 0.0,\n",
    "#                 bidirectional=True,\n",
    "#             )\n",
    "#             self.attentions[name] = Attention(lstm_hidden_size * 2, attention_dim)\n",
    "\n",
    "#         combined_dim = lstm_hidden_size * 2 * len(self.stream_names)\n",
    "#         inter_dim    = max(num_classes * 4, combined_dim // 2)\n",
    "\n",
    "#         self.dropout = nn.Dropout(dropout_rate)\n",
    "#         self.fc1     = nn.Linear(combined_dim, inter_dim)\n",
    "#         self.relu    = nn.ReLU()\n",
    "#         self.fc2     = nn.Linear(inter_dim, num_classes)\n",
    "\n",
    "#     def forward(self, x_dict: dict[str, torch.Tensor]):\n",
    "#         ctx_list = []\n",
    "#         for name in self.stream_names:\n",
    "#             if name not in x_dict:\n",
    "#                 print(f\"Warning: missing stream '{name}' in forward()\")\n",
    "#                 continue\n",
    "#             lstm_out, _ = self.lstms[name](x_dict[name])\n",
    "#             ctx, _      = self.attentions[name](lstm_out)\n",
    "#             ctx_list.append(ctx)\n",
    "\n",
    "#         if not ctx_list:\n",
    "#             raise RuntimeError(\"No stream outputs generated\")\n",
    "\n",
    "#         fused = torch.cat(ctx_list, dim=1)\n",
    "#         out   = self.dropout(fused)\n",
    "#         out   = self.relu(self.fc1(out))\n",
    "#         out   = self.dropout(out)\n",
    "#         logits= self.fc2(out)\n",
    "#         return logits\n",
    "\n",
    "# # ==========================================================================#\n",
    "# #                              MAIN SCRIPT                                  #\n",
    "# # ==========================================================================#\n",
    "# if __name__ == \"__main__\":\n",
    "\n",
    "#     # --------------------- load PIE database ------------------------------\n",
    "#     print(\"\\nLoading PIE database cache …\")\n",
    "#     if not os.path.exists(PIE_DATABASE_CACHE_PATH):\n",
    "#         raise FileNotFoundError(\"PIE database cache not found.\")\n",
    "#     with open(PIE_DATABASE_CACHE_PATH, \"rb\") as f:\n",
    "#         pie_database = pickle.load(f)\n",
    "#     print(\" -> database loaded.\")\n",
    "\n",
    "#     # --------------------- load scalers -----------------------------------\n",
    "#     print(f\"\\nLoading scalers from {SCALERS_PKL_PATH}\")\n",
    "#     try:\n",
    "#         with open(SCALERS_PKL_PATH, \"rb\") as f:\n",
    "#             scalers = pickle.load(f)\n",
    "#         print(\" -> scalers loaded.\")\n",
    "#     except FileNotFoundError:\n",
    "#         sys.exit(f\"ERROR: Scalers file not found at {SCALERS_PKL_PATH}\")\n",
    "\n",
    "#     # --------------------- helper dataset ---------------------------------\n",
    "#     print(\"\\nInitialising dataset helper …\")\n",
    "#     dataset_helper = PIEDatasetInference(\n",
    "#         pie_database, [SET_ID_TO_PROCESS], POSE_DATA_DIR, scalers\n",
    "#     )\n",
    "#     print(\"Helper dataset ready.\")\n",
    "\n",
    "#     # --------------------- build model ------------------------------------\n",
    "#     print(\"\\nBuilding model …\")\n",
    "#     input_sizes = {}\n",
    "#     special = {\n",
    "#         \"TRAFFIC_LIGHT\": \"TL_STATE\",\n",
    "#         \"STATIC_CONTEXT\": \"STATIC\",\n",
    "#         \"EGO_SPEED\": \"EGO_SPEED\",\n",
    "#         \"EGO_ACC\": \"EGO_ACC\",\n",
    "#         \"EGO_GYRO\": \"EGO_GYRO\",\n",
    "#         \"PED_ACTION\": \"PED_ACTION\",\n",
    "#         \"PED_LOOK\": \"PED_LOOK\",\n",
    "#         \"PED_OCCLUSION\": \"PED_OCC\",\n",
    "#     }\n",
    "#     for s in MODEL_ACTIVE_STREAMS:\n",
    "#         cname = f\"INPUT_SIZE_{s.upper()}\"\n",
    "#         suff  = special.get(s.upper())\n",
    "#         if suff:\n",
    "#             cname = f\"INPUT_SIZE_{suff}\"\n",
    "#         elif s == \"bbox\":\n",
    "#             cname = \"INPUT_SIZE_BBOX\"\n",
    "#         elif s == \"pose\":\n",
    "#             cname = \"INPUT_SIZE_POSE\"\n",
    "#         if cname not in globals():\n",
    "#             raise ValueError(f\"Missing constant {cname}\")\n",
    "#         input_sizes[s] = globals()[cname]\n",
    "\n",
    "#     model = MultiStreamAdaptiveLSTM(\n",
    "#         input_sizes,\n",
    "#         LSTM_HIDDEN_SIZE,\n",
    "#         NUM_LSTM_LAYERS,\n",
    "#         NUM_CLASSES,\n",
    "#         ATTENTION_DIM,\n",
    "#         DROPOUT_RATE,\n",
    "#         MODEL_ACTIVE_STREAMS,\n",
    "#     ).to(DEVICE)\n",
    "\n",
    "#     # --------------------- load weights -----------------------------------\n",
    "#     print(f\"\\nLoading weights from {MODEL_PATH}\")\n",
    "#     if not os.path.exists(MODEL_PATH):\n",
    "#         raise FileNotFoundError(f\"Model file not found: {MODEL_PATH}\")\n",
    "#     model.load_state_dict(torch.load(MODEL_PATH, map_location=DEVICE))\n",
    "#     model.eval()\n",
    "#     print(\" -> model ready.\")\n",
    "\n",
    "#     # --------------------- collect annotated frames -----------------------\n",
    "#     print(f\"\\nScanning annotations for {SET_ID_TO_PROCESS}/{VIDEO_ID_TO_PROCESS} …\")\n",
    "#     ped_ann = (pie_database\n",
    "#                .get(SET_ID_TO_PROCESS, {})\n",
    "#                .get(VIDEO_ID_TO_PROCESS, {})\n",
    "#                .get(\"ped_annotations\", {}))\n",
    "#     if not ped_ann:\n",
    "#         raise ValueError(\"No pedestrian annotations found.\")\n",
    "\n",
    "#     annotated = set()\n",
    "#     for ped_data in ped_ann.values():\n",
    "#         annotated.update(ped_data.get(\"frames\", []))\n",
    "#     frames_sorted = sorted(annotated)\n",
    "#     if not frames_sorted:\n",
    "#         raise ValueError(\"No annotated frames found.\")\n",
    "#     print(f\" -> found {len(frames_sorted)} frames.\")\n",
    "\n",
    "#     # --------------------- inference --------------------------------------\n",
    "#     print(\"\\nRunning inference on annotated frames …\")\n",
    "#     preds_per_frame, error_frames = {}, 0\n",
    "\n",
    "#     with torch.no_grad():\n",
    "#         for fnum in tqdm(frames_sorted, desc=\"Predicting\"):\n",
    "#             preds_per_frame[fnum] = {}\n",
    "#             peds_here = [\n",
    "#                 pid for pid, pdata in ped_ann.items()\n",
    "#                 if fnum in pdata.get(\"frames\", [])\n",
    "#             ]\n",
    "#             for pid in peds_here:\n",
    "#                 seq = dataset_helper.get_feature_sequence(\n",
    "#                     SET_ID_TO_PROCESS,\n",
    "#                     VIDEO_ID_TO_PROCESS,\n",
    "#                     pid,\n",
    "#                     fnum,\n",
    "#                     SEQ_LEN,\n",
    "#                     MODEL_ACTIVE_STREAMS,\n",
    "#                 )\n",
    "#                 if seq is None:\n",
    "#                     preds_per_frame[fnum][pid] = -1\n",
    "#                     continue\n",
    "#                 try:\n",
    "#                     seq = {k: v.to(DEVICE) for k, v in seq.items()}\n",
    "#                     logits = model(seq)\n",
    "#                     prob   = torch.softmax(logits, dim=1)\n",
    "#                     pred   = torch.argmax(prob, dim=1).item()\n",
    "#                     preds_per_frame[fnum][pid] = pred\n",
    "#                 except Exception as e:\n",
    "#                     print(f\"Inference error F{fnum} P{pid}: {e}\")\n",
    "#                     preds_per_frame[fnum][pid] = -1\n",
    "#                     error_frames += 1\n",
    "\n",
    "#     print(f\"Predictions complete. Errors on {error_frames} instances.\")\n",
    "\n",
    "# # -------------------------------------------------------------------------\n",
    "# # ------- Create & write the *annotated-only* video  -----------------------\n",
    "# print(f\"\\nCreating video with annotated frames only → {OUTPUT_VIDEO_PATH}\")\n",
    "\n",
    "# # Use the first annotated frame to get size\n",
    "# first_annotated_idx = frames_sorted[0] - 1        # convert 1-based → 0-based file index\n",
    "# first_frame_path    = os.path.join(\n",
    "#     IMAGE_FRAME_DIR, f\"frame_{first_annotated_idx:05d}.jpg\"\n",
    "# )\n",
    "# sample_img = cv2.imread(first_frame_path)\n",
    "# if sample_img is None:\n",
    "#     raise IOError(f\"Could not read first annotated frame: {first_frame_path}\")\n",
    "# height, width, _ = sample_img.shape\n",
    "# print(f\" -> video size {width}×{height}, total annotated frames {len(frames_sorted)}\")\n",
    "\n",
    "# fourcc = cv2.VideoWriter_fourcc(*\"mp4v\")\n",
    "# fps    = 30                                   # keep whatever FPS you prefer\n",
    "# writer = cv2.VideoWriter(OUTPUT_VIDEO_PATH, fourcc, fps, (width, height))\n",
    "# if not writer.isOpened():\n",
    "#     raise IOError(\"Could not open cv2 VideoWriter\")\n",
    "\n",
    "# # colours\n",
    "# col_nc, col_cr, col_un = (0,255,0), (0,0,255), (255,255,0)\n",
    "\n",
    "# for lookup in tqdm(frames_sorted, desc=\"Writing video\"):\n",
    "#     idx = lookup - 1                          # image file index (0-based)\n",
    "#     img_path = os.path.join(IMAGE_FRAME_DIR, f\"frame_{idx:05d}.jpg\")\n",
    "\n",
    "#     frame = cv2.imread(img_path)\n",
    "#     if frame is None:\n",
    "#         frame = np.zeros((height, width, 3), np.uint8)\n",
    "\n",
    "#     # draw predictions\n",
    "#     preds_here = preds_per_frame.get(lookup, {})\n",
    "#     for pid, bbox in [\n",
    "#         (pid, pdata[\"bbox\"][pdata[\"frames\"].index(lookup)])\n",
    "#         for pid, pdata in ped_ann.items()\n",
    "#         if lookup in pdata.get(\"frames\", [])\n",
    "#     ]:\n",
    "#         pred = preds_here.get(pid, -1)\n",
    "#         colour, label = (col_un, \"Unknown\")\n",
    "#         if pred == 0:\n",
    "#             colour, label = (col_nc, \"Not Crossing\")\n",
    "#         elif pred == 1:\n",
    "#             colour, label = (col_cr, \"Crossing\")\n",
    "\n",
    "#         try:\n",
    "#             x1, y1, x2, y2 = map(int, bbox)\n",
    "#             cv2.rectangle(frame, (x1, y1), (x2, y2), colour, 2)\n",
    "#             cv2.putText(frame, label, (x1, y1 - 10),\n",
    "#                         cv2.FONT_HERSHEY_SIMPLEX, 0.6, colour, 2)\n",
    "#         except Exception:\n",
    "#             pass\n",
    "\n",
    "#     writer.write(frame)\n",
    "\n",
    "# writer.release()\n",
    "# print(f\"\\nAnnotated-only video saved to: {OUTPUT_VIDEO_PATH}\")\n",
    "# # -------------------------------------------------------------------------\n",
    "\n",
    "# print(\"\\n--- Visualisation script finished ---\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "0c3c046e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T15:19:43.342030Z",
     "iopub.status.busy": "2025-05-01T15:19:43.341732Z",
     "iopub.status.idle": "2025-05-01T15:32:11.324278Z",
     "shell.execute_reply": "2025-05-01T15:32:11.323202Z"
    },
    "papermill": {
     "duration": 747.994503,
     "end_time": "2025-05-01T15:32:11.326122",
     "exception": false,
     "start_time": "2025-05-01T15:19:43.331619",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- DATA PREPARATION ---\n",
      "Loading PIE database cache …\n",
      "✓ PIE DB loaded.\n",
      "\n",
      "Computing scalers …\n",
      "Scalers: {'ego_speed_mean': 13.428368358531902, 'ego_speed_std': 13.306451814881573, 'accX_mean': -0.028068299916188515, 'accX_std': 0.07827638994593288, 'accY_mean': -0.5235171297788667, 'accY_std': 0.8514409917161664, 'gyroZ_mean': -0.037905654051963104, 'gyroZ_std': 4.475510697376237}\n",
      "\n",
      "Extracting training sequences (all streams) …\n",
      "Loading pose PKLs …\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c2ae60a3312846dda0dc324e96ebdd51",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "792d83e4f0b24248b9a8aab2f2ba307e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f43e5199fa074479a0f76ae41e0aebc1",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "0it [00:00, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enumerating sequences …\n",
      "Total sequences: 307538\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "de30cc76caea41fa8273ddc6f9523c31",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "seq:   0%|          | 0/307538 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Raw training samples: 307538\n",
      "Balanced: 1s=53762 | 0s=53762\n",
      "\n",
      "Saving balanced data …\n",
      "✓ /kaggle/working/balanced_train_data.pkl\n",
      "Saving scalers …\n",
      "✓ /kaggle/working/scalers.pkl\n",
      "\n",
      "--- DATA PREPARATION COMPLETE ---\n"
     ]
    }
   ],
   "source": [
    "# -----------------------------------------------------------------------------\n",
    "# CELL 1: DATA PREPARATION & BALANCING  (run once before training)\n",
    "# -----------------------------------------------------------------------------\n",
    "#  This cell:\n",
    "#    1. Loads (or regenerates) the PIE database\n",
    "#    2. Computes per-signal standardisation scalers\n",
    "#    3. Extracts ALL training sequences for every stream\n",
    "#    4. Balances the dataset 50 / 50 on the crossing label\n",
    "#    5. Writes two pickles:\n",
    "#         - /kaggle/working/balanced_train_data.pkl\n",
    "#         - /kaggle/working/scalers.pkl\n",
    "# -----------------------------------------------------------------------------\n",
    "\n",
    "import os\n",
    "import sys\n",
    "import time\n",
    "import pickle\n",
    "import gc\n",
    "from pathlib import Path\n",
    "\n",
    "import cv2                               # used internally by PIE utilities\n",
    "import numpy as np\n",
    "import torch\n",
    "from torch.utils.data import Dataset\n",
    "from tqdm.notebook import tqdm\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                                PIE utilities                                 #\n",
    "# -----------------------------------------------------------------------------#\n",
    "pie_utilities_path = \"/kaggle/working/PIE/utilities\"\n",
    "if pie_utilities_path not in sys.path:\n",
    "    sys.path.insert(0, pie_utilities_path)\n",
    "\n",
    "try:\n",
    "    from pie_data import PIE\n",
    "except ImportError as e:\n",
    "    print(\n",
    "        f\"[WARN] Could not import PIE from {pie_utilities_path}. \"\n",
    "        f\"If the DB cache already exists this is fine.\\n→ {e}\"\n",
    "    )\n",
    "    PIE = None\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                              configuration                                   #\n",
    "# -----------------------------------------------------------------------------#\n",
    "PIE_ROOT_PATH           = \"/kaggle/working/PIE\"\n",
    "POSE_DATA_DIR           = \"/kaggle/input/pose-data/extracted_poses2\"\n",
    "PIE_DATABASE_CACHE_PATH = \"/kaggle/input/pie-database/pie_database.pkl\"\n",
    "\n",
    "TRAIN_SETS_STR = [\"set01\", \"set02\", \"set04\"]\n",
    "\n",
    "BALANCED_DATA_PKL_PATH  = \"/kaggle/working/balanced_train_data.pkl\"\n",
    "SCALERS_PKL_PATH        = \"/kaggle/working/scalers.pkl\"\n",
    "\n",
    "# Streams used throughout the project ----------------------------------------\n",
    "ALL_POSSIBLE_STREAMS = [\n",
    "    \"bbox\",\n",
    "    \"pose\",\n",
    "    \"ego_speed\",\n",
    "    \"ego_acc\",\n",
    "    \"ego_gyro\",\n",
    "    \"ped_action\",\n",
    "    \"ped_look\",\n",
    "    \"ped_occlusion\",\n",
    "    \"traffic_light\",\n",
    "    \"static_context\",\n",
    "]\n",
    "\n",
    "# Feature sizes & categorical constants --------------------------------------\n",
    "SEQ_LEN, PRED_LEN = 30, 30\n",
    "\n",
    "INPUT_SIZE_BBOX       = 4\n",
    "INPUT_SIZE_POSE       = 34\n",
    "INPUT_SIZE_EGO_SPEED  = 1\n",
    "INPUT_SIZE_EGO_ACC    = 2\n",
    "INPUT_SIZE_EGO_GYRO   = 1\n",
    "INPUT_SIZE_PED_ACTION = 1\n",
    "INPUT_SIZE_PED_LOOK   = 1\n",
    "INPUT_SIZE_PED_OCC    = 1\n",
    "INPUT_SIZE_TL_STATE   = 4\n",
    "\n",
    "NUM_SIGNALIZED_CATS   = 4\n",
    "NUM_INTERSECTION_CATS = 5\n",
    "NUM_AGE_CATS          = 4\n",
    "NUM_GENDER_CATS       = 3\n",
    "NUM_TRAFFIC_DIR_CATS  = 2\n",
    "\n",
    "LANE_CATEGORIES = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 4, 7: 4, 8: 4}\n",
    "NUM_LANE_CATS   = len(set(LANE_CATEGORIES.values()))\n",
    "\n",
    "INPUT_SIZE_STATIC = (\n",
    "    NUM_SIGNALIZED_CATS\n",
    "    + NUM_INTERSECTION_CATS\n",
    "    + NUM_AGE_CATS\n",
    "    + NUM_GENDER_CATS\n",
    "    + NUM_TRAFFIC_DIR_CATS\n",
    "    + NUM_LANE_CATS\n",
    ")  # → 23\n",
    "\n",
    "TL_STATE_MAP = {\"__undefined__\": 0, \"red\": 1, \"yellow\": 2, \"green\": 3}\n",
    "NUM_TL_STATES = len(TL_STATE_MAP)\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                               helper utils                                   #\n",
    "# -----------------------------------------------------------------------------#\n",
    "\n",
    "\n",
    "def to_one_hot(index: int, num_classes: int) -> np.ndarray:\n",
    "    vec = np.zeros(num_classes, dtype=np.float32)\n",
    "    vec[int(np.clip(index, 0, num_classes - 1))] = 1.0\n",
    "    return vec\n",
    "\n",
    "\n",
    "def balance_samples_count(seq_data: dict, label_key: str, seed: int = 42) -> dict:\n",
    "    \"\"\"Undersample majority class so positive and negative labels are equal.\"\"\"\n",
    "    labels = [lbl[0] for lbl in seq_data[label_key]]\n",
    "    n_pos  = int(np.sum(labels))\n",
    "    n_neg  = len(labels) - n_pos\n",
    "\n",
    "    if n_pos == n_neg:\n",
    "        print(\"Dataset already balanced.\")\n",
    "        return seq_data.copy()\n",
    "\n",
    "    majority_label    = 0 if n_neg > n_pos else 1\n",
    "    minority_count    = min(n_pos, n_neg)\n",
    "    majority_indices  = np.where(np.array(labels) == majority_label)[0]\n",
    "    minority_indices  = np.where(np.array(labels) != majority_label)[0]\n",
    "\n",
    "    rng = np.random.default_rng(seed)\n",
    "    keep_majority = rng.choice(majority_indices, size=minority_count, replace=False)\n",
    "    final_indices = np.concatenate([minority_indices, keep_majority])\n",
    "    rng.shuffle(final_indices)\n",
    "\n",
    "    balanced = {}\n",
    "    for k, v in seq_data.items():\n",
    "        balanced[k] = [v[i] for i in final_indices]\n",
    "\n",
    "    print(f\"Balanced: 1s={minority_count} | 0s={minority_count}\")\n",
    "    return balanced\n",
    "\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                                PIEDataset                                    #\n",
    "# -----------------------------------------------------------------------------#\n",
    "class PIEDataset(Dataset):\n",
    "    \"\"\"\n",
    "    Lightweight dataset that can generate any subset of the PIE feature streams.\n",
    "    \"\"\"\n",
    "\n",
    "    def __init__(\n",
    "        self,\n",
    "        pie_db: dict,\n",
    "        set_names: list[str],\n",
    "        pose_dir: str,\n",
    "        seq_len: int,\n",
    "        pred_len: int,\n",
    "        scalers: dict,\n",
    "        streams_to_generate: list[str],\n",
    "    ):\n",
    "        self.pie_db            = pie_db\n",
    "        self.set_names         = set_names\n",
    "        self.pose_dir          = pose_dir\n",
    "        self.seq_len           = seq_len\n",
    "        self.pred_len          = pred_len\n",
    "        self.scalers           = scalers\n",
    "        self.streams           = streams_to_generate\n",
    "        self._input_sizes      = self._build_input_size_map()\n",
    "        self.all_pose_data     = {}\n",
    "        self.sequences         = []\n",
    "\n",
    "        if \"pose\" in self.streams:\n",
    "            self._load_pose_pkls()\n",
    "        self._enumerate_sequences()\n",
    "\n",
    "    # ------------------------ internal helpers -------------------------------\n",
    "    def _build_input_size_map(self) -> dict:\n",
    "        special = {\n",
    "            \"TRAFFIC_LIGHT\": \"TL_STATE\",\n",
    "            \"STATIC_CONTEXT\": \"STATIC\",\n",
    "            \"EGO_SPEED\": \"EGO_SPEED\",\n",
    "            \"EGO_ACC\": \"EGO_ACC\",\n",
    "            \"EGO_GYRO\": \"EGO_GYRO\",\n",
    "            \"PED_ACTION\": \"PED_ACTION\",\n",
    "            \"PED_LOOK\": \"PED_LOOK\",\n",
    "            \"PED_OCCLUSION\": \"PED_OCC\",\n",
    "        }\n",
    "        sizes = {}\n",
    "        for s in ALL_POSSIBLE_STREAMS:\n",
    "            const = f\"INPUT_SIZE_{special.get(s.upper(), s.upper())}\"\n",
    "            if s == \"bbox\":\n",
    "                const = \"INPUT_SIZE_BBOX\"\n",
    "            elif s == \"pose\":\n",
    "                const = \"INPUT_SIZE_POSE\"\n",
    "            sizes[s] = globals().get(const, 1)\n",
    "        return sizes\n",
    "\n",
    "    def _load_pose_pkls(self):\n",
    "        print(\"Loading pose PKLs …\")\n",
    "        for set_id in self.set_names:\n",
    "            set_dir = Path(self.pose_dir) / set_id\n",
    "            if not set_dir.is_dir():\n",
    "                continue\n",
    "            self.all_pose_data[set_id] = {}\n",
    "            for pkl_path in tqdm(set_dir.glob(f\"{set_id}_*_poses.pkl\"), leave=False):\n",
    "                try:\n",
    "                    with open(pkl_path, \"rb\") as fp:\n",
    "                        loaded = pickle.load(fp)\n",
    "                except Exception as e:\n",
    "                    print(f\"[pose load] {pkl_path}: {e}\")\n",
    "                    continue\n",
    "\n",
    "                if len(loaded) != 1:\n",
    "                    continue\n",
    "                (key, data), *_ = loaded.items()\n",
    "                vid = \"_\".join(key.split(\"_\")[1:])\n",
    "                if vid in self.pie_db.get(set_id, {}):\n",
    "                    self.all_pose_data[set_id][vid] = data\n",
    "\n",
    "    def _enumerate_sequences(self):\n",
    "        print(\"Enumerating sequences …\")\n",
    "        for set_id in self.set_names:\n",
    "            for vid, vdb in self.pie_db.get(set_id, {}).items():\n",
    "                for pid, pdb in vdb.get(\"ped_annotations\", {}).items():\n",
    "                    frames = pdb.get(\"frames\", [])\n",
    "                    if len(frames) < self.seq_len + self.pred_len:\n",
    "                        continue\n",
    "                    frames = sorted(frames)\n",
    "                    for i in range(len(frames) - self.seq_len - self.pred_len + 1):\n",
    "                        start = frames[i]\n",
    "                        obs_end = frames[i + self.seq_len - 1]\n",
    "                        if obs_end - start != self.seq_len - 1:\n",
    "                            continue\n",
    "                        target = frames[i + self.seq_len + self.pred_len - 1]\n",
    "                        if target - obs_end != self.pred_len:\n",
    "                            continue\n",
    "                        self.sequences.append((set_id, vid, pid, start))\n",
    "        print(f\"Total sequences: {len(self.sequences)}\")\n",
    "\n",
    "    # ------------------ Dataset API ------------------------------------------\n",
    "    def __len__(self):\n",
    "        return len(self.sequences)\n",
    "\n",
    "    def __getitem__(self, idx: int):\n",
    "        set_id, vid, pid, start = self.sequences[idx]\n",
    "        vdb  = self.pie_db[set_id][vid]\n",
    "        pdb  = vdb[\"ped_annotations\"][pid]\n",
    "        ego  = vdb.get(\"vehicle_annotations\", {})\n",
    "        tldb = vdb.get(\"traffic_annotations\", {})\n",
    "\n",
    "        frame_nums = list(range(start, start + self.seq_len))\n",
    "        target_f   = start + self.seq_len + self.pred_len - 1\n",
    "\n",
    "        # label ---------------------------------------------------------------\n",
    "        label = 0\n",
    "        if (\n",
    "            \"frames\" in pdb\n",
    "            and \"behavior\" in pdb\n",
    "            and \"cross\" in pdb[\"behavior\"]\n",
    "            and target_f in pdb[\"frames\"]\n",
    "        ):\n",
    "            try:\n",
    "                j = pdb[\"frames\"].index(target_f)\n",
    "                label = pdb[\"behavior\"][\"cross\"][j]\n",
    "                if label == -1:\n",
    "                    label = 0\n",
    "            except (ValueError, IndexError):\n",
    "                pass\n",
    "\n",
    "        # static context ------------------------------------------------------\n",
    "        static_vec = np.zeros(INPUT_SIZE_STATIC, np.float32)\n",
    "        if \"static_context\" in self.streams:\n",
    "            attr  = pdb.get(\"attributes\", {})\n",
    "            sig   = attr.get(\"signalized\", 0)\n",
    "            intr  = attr.get(\"intersection\", 0)\n",
    "            age   = attr.get(\"age\", 2)\n",
    "            gen   = attr.get(\"gender\", 0)\n",
    "            tdir  = int(attr.get(\"traffic_direction\", 0))\n",
    "            ln    = attr.get(\"num_lanes\", 2)\n",
    "            lncat = LANE_CATEGORIES.get(ln, LANE_CATEGORIES[max(LANE_CATEGORIES)])\n",
    "            static_vec = np.concatenate(\n",
    "                [\n",
    "                    to_one_hot(sig,  NUM_SIGNALIZED_CATS),\n",
    "                    to_one_hot(intr, NUM_INTERSECTION_CATS),\n",
    "                    to_one_hot(age,  NUM_AGE_CATS),\n",
    "                    to_one_hot(gen,  NUM_GENDER_CATS),\n",
    "                    to_one_hot(tdir, NUM_TRAFFIC_DIR_CATS),\n",
    "                    to_one_hot(lncat, NUM_LANE_CATS),\n",
    "                ]\n",
    "            ).astype(np.float32)\n",
    "\n",
    "        # per-frame feature assembly -----------------------------------------\n",
    "        feats = {s: [] for s in self.streams}\n",
    "\n",
    "        for fn in frame_nums:\n",
    "            fidx = -1\n",
    "            if \"frames\" in pdb:\n",
    "                try:\n",
    "                    fidx = pdb[\"frames\"].index(fn)\n",
    "                except ValueError:\n",
    "                    pass\n",
    "\n",
    "            ego_f = ego.get(fn, {})\n",
    "\n",
    "            # bbox ----------------------------------------------------------\n",
    "            if \"bbox\" in self.streams:\n",
    "                bb = np.zeros(INPUT_SIZE_BBOX, np.float32)\n",
    "                if (\n",
    "                    fidx != -1\n",
    "                    and \"bbox\" in pdb\n",
    "                    and len(pdb[\"bbox\"]) > fidx\n",
    "                ):\n",
    "                    try:\n",
    "                        x1, y1, x2, y2 = pdb[\"bbox\"][fidx]\n",
    "                        w_img = vdb.get(\"width\", 1920)\n",
    "                        h_img = vdb.get(\"height\", 1080)\n",
    "                        if w_img > 0 and h_img > 0:\n",
    "                            cx = ((x1 + x2) / 2) / w_img\n",
    "                            cy = ((y1 + y2) / 2) / h_img\n",
    "                            w  = (x2 - x1) / w_img\n",
    "                            h  = (y2 - y1) / h_img\n",
    "                            if 0 < w and 0 < h and 0 <= cx <= 1 and 0 <= cy <= 1:\n",
    "                                bb = np.array([cx, cy, w, h], np.float32)\n",
    "                    except Exception:\n",
    "                        pass\n",
    "                feats[\"bbox\"].append(bb)\n",
    "\n",
    "            # pose ----------------------------------------------------------\n",
    "            if \"pose\" in self.streams:\n",
    "                pvec = np.zeros(INPUT_SIZE_POSE, np.float32)\n",
    "                pose_set = self.all_pose_data.get(set_id, {}).get(vid, {})\n",
    "                p_loaded = pose_set.get(fn, {}).get(pid)\n",
    "                if (\n",
    "                    isinstance(p_loaded, np.ndarray)\n",
    "                    and p_loaded.shape == (INPUT_SIZE_POSE,)\n",
    "                ):\n",
    "                    pvec = p_loaded\n",
    "                feats[\"pose\"].append(pvec)\n",
    "\n",
    "            # ego signals ---------------------------------------------------\n",
    "            if \"ego_speed\" in self.streams:\n",
    "                s = ego_f.get(\"OBD_speed\", 0.0) or ego_f.get(\"GPS_speed\", 0.0)\n",
    "                s = (s - self.scalers.get(\"ego_speed_mean\", 0.0)) / self.scalers.get(\n",
    "                    \"ego_speed_std\", 1.0\n",
    "                )\n",
    "                feats[\"ego_speed\"].append([s])\n",
    "\n",
    "            if \"ego_acc\" in self.streams:\n",
    "                ax = ego_f.get(\"accX\", 0.0)\n",
    "                ay = ego_f.get(\"accY\", 0.0)\n",
    "                ax = (ax - self.scalers.get(\"accX_mean\", 0.0)) / self.scalers.get(\n",
    "                    \"accX_std\", 1.0\n",
    "                )\n",
    "                ay = (ay - self.scalers.get(\"accY_mean\", 0.0)) / self.scalers.get(\n",
    "                    \"accY_std\", 1.0\n",
    "                )\n",
    "                feats[\"ego_acc\"].append([ax, ay])\n",
    "\n",
    "            if \"ego_gyro\" in self.streams:\n",
    "                gz = ego_f.get(\"gyroZ\", 0.0)\n",
    "                gz = (gz - self.scalers.get(\"gyroZ_mean\", 0.0)) / self.scalers.get(\n",
    "                    \"gyroZ_std\", 1.0\n",
    "                )\n",
    "                feats[\"ego_gyro\"].append([gz])\n",
    "\n",
    "            # pedestrian behaviour -----------------------------------------\n",
    "            if \"ped_action\" in self.streams:\n",
    "                action = (\n",
    "                    pdb[\"behavior\"][\"action\"][fidx]\n",
    "                    if fidx != -1\n",
    "                    and \"behavior\" in pdb\n",
    "                    and \"action\" in pdb[\"behavior\"]\n",
    "                    and len(pdb[\"behavior\"][\"action\"]) > fidx\n",
    "                    else 0\n",
    "                )\n",
    "                feats[\"ped_action\"].append([float(action)])\n",
    "\n",
    "            if \"ped_look\" in self.streams:\n",
    "                look = (\n",
    "                    pdb[\"behavior\"][\"look\"][fidx]\n",
    "                    if fidx != -1\n",
    "                    and \"behavior\" in pdb\n",
    "                    and \"look\" in pdb[\"behavior\"]\n",
    "                    and len(pdb[\"behavior\"][\"look\"]) > fidx\n",
    "                    else 0\n",
    "                )\n",
    "                feats[\"ped_look\"].append([float(look)])\n",
    "\n",
    "            if \"ped_occlusion\" in self.streams:\n",
    "                occ = (\n",
    "                    float(pdb[\"occlusion\"][fidx]) / 2.0\n",
    "                    if fidx != -1\n",
    "                    and \"occlusion\" in pdb\n",
    "                    and len(pdb[\"occlusion\"]) > fidx\n",
    "                    else 0.0\n",
    "                )\n",
    "                feats[\"ped_occlusion\"].append([occ])\n",
    "\n",
    "            # traffic light -------------------------------------------------\n",
    "            if \"traffic_light\" in self.streams:\n",
    "                tl_state = 0\n",
    "                for obj in tldb.values():\n",
    "                    if obj.get(\"obj_class\") != \"traffic_light\":\n",
    "                        continue\n",
    "                    if \"frames\" not in obj or \"state\" not in obj:\n",
    "                        continue\n",
    "                    try:\n",
    "                        j = obj[\"frames\"].index(fn)\n",
    "                        if obj[\"state\"][j] != 0:\n",
    "                            tl_state = obj[\"state\"][j]\n",
    "                            break\n",
    "                    except (ValueError, IndexError):\n",
    "                        continue\n",
    "                feats[\"traffic_light\"].append(to_one_hot(tl_state, NUM_TL_STATES))\n",
    "\n",
    "            # static context -----------------------------------------------\n",
    "            if \"static_context\" in self.streams:\n",
    "                feats[\"static_context\"].append(static_vec)\n",
    "\n",
    "        # numpy → torch ------------------------------------------------------\n",
    "        out = {\n",
    "            s: torch.tensor(np.asarray(feats[s], np.float32), dtype=torch.float32)\n",
    "            for s in self.streams\n",
    "        }\n",
    "        return out, torch.tensor(label, dtype=torch.long)\n",
    "\n",
    "\n",
    "# =============================================================================\n",
    "#                       MAIN: build balanced training set\n",
    "# =============================================================================\n",
    "if __name__ == \"__main__\":\n",
    "    print(\"\\n--- DATA PREPARATION ---\")\n",
    "\n",
    "    # 1) load / regenerate PIE DB -------------------------------------------\n",
    "    cache = Path(PIE_DATABASE_CACHE_PATH)\n",
    "    if cache.is_file():\n",
    "        print(\"Loading PIE database cache …\")\n",
    "        with cache.open(\"rb\") as fp:\n",
    "            pie_db = pickle.load(fp)\n",
    "        print(\"✓ PIE DB loaded.\")\n",
    "    else:\n",
    "        if PIE is None:\n",
    "            raise RuntimeError(\"PIE class unavailable: cannot rebuild database.\")\n",
    "        print(\"Cache not found – regenerating PIE DB …\")\n",
    "        pie_db = PIE(data_path=PIE_ROOT_PATH, regen_database=True).generate_database()\n",
    "        if not pie_db:\n",
    "            raise RuntimeError(\"PIE DB generation failed.\")\n",
    "        print(\"✓ PIE DB generated.\")\n",
    "\n",
    "    # 2) compute scalers -----------------------------------------------------\n",
    "    print(\"\\nComputing scalers …\")\n",
    "    spd, accx, accy, gyz = [], [], [], []\n",
    "    for sid in TRAIN_SETS_STR:\n",
    "        for vid, vdb in pie_db.get(sid, {}).items():\n",
    "            for frame, e in vdb.get(\"vehicle_annotations\", {}).items():\n",
    "                s  = e.get(\"OBD_speed\", 0.0) or e.get(\"GPS_speed\", 0.0)\n",
    "                spd.append(s)\n",
    "                accx.append(e.get(\"accX\", 0.0))\n",
    "                accy.append(e.get(\"accY\", 0.0))\n",
    "                gyz.append(e.get(\"gyroZ\", 0.0))\n",
    "\n",
    "    scalers = {}\n",
    "    if spd:\n",
    "        scalers[\"ego_speed_mean\"] = float(np.mean(spd))\n",
    "        scalers[\"ego_speed_std\"]  = float(max(np.std(spd), 1e-6))\n",
    "    if accx:\n",
    "        scalers[\"accX_mean\"] = float(np.mean(accx))\n",
    "        scalers[\"accX_std\"]  = float(max(np.std(accx), 1e-6))\n",
    "        scalers[\"accY_mean\"] = float(np.mean(accy))\n",
    "        scalers[\"accY_std\"]  = float(max(np.std(accy), 1e-6))\n",
    "    if gyz:\n",
    "        scalers[\"gyroZ_mean\"] = float(np.mean(gyz))\n",
    "        scalers[\"gyroZ_std\"]  = float(max(np.std(gyz), 1e-6))\n",
    "\n",
    "    print(\"Scalers:\", scalers)\n",
    "\n",
    "    # 3) extract full training dataset --------------------------------------\n",
    "    print(\"\\nExtracting training sequences (all streams) …\")\n",
    "    full_ds = PIEDataset(\n",
    "        pie_db,\n",
    "        TRAIN_SETS_STR,\n",
    "        POSE_DATA_DIR,\n",
    "        SEQ_LEN,\n",
    "        PRED_LEN,\n",
    "        scalers,\n",
    "        ALL_POSSIBLE_STREAMS,\n",
    "    )\n",
    "\n",
    "    train_dict = {s: [] for s in ALL_POSSIBLE_STREAMS}\n",
    "    train_dict[\"label\"] = []\n",
    "\n",
    "    for i in tqdm(range(len(full_ds)), desc=\"seq\"):\n",
    "        feat, lbl = full_ds[i]\n",
    "        for s in ALL_POSSIBLE_STREAMS:\n",
    "            train_dict[s].append(feat[s].numpy())\n",
    "        train_dict[\"label\"].append([lbl.item()])\n",
    "\n",
    "    print(f\"Raw training samples: {len(train_dict['label'])}\")\n",
    "\n",
    "    # 4) balance -------------------------------------------------------------\n",
    "    balanced = balance_samples_count(train_dict, \"label\")\n",
    "    del train_dict, full_ds\n",
    "    gc.collect()\n",
    "\n",
    "    # 5) write pickles -------------------------------------------------------\n",
    "    print(\"\\nSaving balanced data …\")\n",
    "    with open(BALANCED_DATA_PKL_PATH, \"wb\") as fp:\n",
    "        pickle.dump(balanced, fp, pickle.HIGHEST_PROTOCOL)\n",
    "    print(f\"✓ {BALANCED_DATA_PKL_PATH}\")\n",
    "\n",
    "    print(\"Saving scalers …\")\n",
    "    with open(SCALERS_PKL_PATH, \"wb\") as fp:\n",
    "        pickle.dump(scalers, fp, pickle.HIGHEST_PROTOCOL)\n",
    "    print(f\"✓ {SCALERS_PKL_PATH}\")\n",
    "\n",
    "    del pie_db\n",
    "    gc.collect()\n",
    "\n",
    "    print(\"\\n--- DATA PREPARATION COMPLETE ---\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "e7671cf6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T15:32:11.441799Z",
     "iopub.status.busy": "2025-05-01T15:32:11.441332Z",
     "iopub.status.idle": "2025-05-01T16:26:50.521441Z",
     "shell.execute_reply": "2025-05-01T16:26:50.520620Z"
    },
    "papermill": {
     "duration": 3279.144106,
     "end_time": "2025-05-01T16:26:50.522748",
     "exception": false,
     "start_time": "2025-05-01T15:32:11.378642",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Running Weighted Average Fusion With Active Streams: ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'static_context'] ---\n",
      "Using device: cuda\n",
      "--- Running Model Training/Evaluation with Weighted Fusion ---\n",
      "Active Streams: ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'static_context']\n",
      "\n",
      "Loading balanced training data …\n",
      "   ✓ pre-processed data loaded.\n",
      "\n",
      "Loading PIE database cache for validation …\n",
      "   ✓ PIE database loaded.\n",
      "\n",
      "Creating Datasets and DataLoaders …\n",
      "Dataset initialized with 69898 sequences for sets ['set05', 'set06'].\n",
      "   ✓ DataLoaders ready.\n",
      "\n",
      "Initialising model …\n",
      "Initializing Weighted-Avg model with streams: ['bbox', 'ped_action', 'ped_look', 'ego_speed', 'ego_acc', 'static_context']\n",
      "  – Adding stream 'bbox' (input 4)\n",
      "  – Adding stream 'ped_action' (input 1)\n",
      "  – Adding stream 'ped_look' (input 1)\n",
      "  – Adding stream 'ego_speed' (input 1)\n",
      "  – Adding stream 'ego_acc' (input 2)\n",
      "  – Adding stream 'static_context' (input 23)\n",
      "\n",
      "--- Model architecture ---\n",
      "MultiStreamWeightedAvgLSTM(\n",
      "  (lstms): ModuleDict(\n",
      "    (bbox): LSTM(4, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "    (ped_action): LSTM(1, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "    (ped_look): LSTM(1, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "    (ego_speed): LSTM(1, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "    (ego_acc): LSTM(2, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "    (static_context): LSTM(23, 256, num_layers=2, batch_first=True, dropout=0.3, bidirectional=True)\n",
      "  )\n",
      "  (attentions): ModuleDict(\n",
      "    (bbox): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "    (ped_action): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "    (ped_look): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "    (ego_speed): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "    (ego_acc): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "    (static_context): Attention(\n",
      "      (attention_net): Sequential(\n",
      "        (0): Linear(in_features=512, out_features=128, bias=True)\n",
      "        (1): Tanh()\n",
      "        (2): Linear(in_features=128, out_features=1, bias=True)\n",
      "      )\n",
      "    )\n",
      "  )\n",
      "  (dropout): Dropout(p=0.3, inplace=False)\n",
      "  (fc1): Linear(in_features=512, out_features=256, bias=True)\n",
      "  (relu): ReLU()\n",
      "  (fc2): Linear(in_features=256, out_features=2, bias=True)\n",
      ")\n",
      "Trainable parameters: 13,224,206\n",
      "------------------------------\n",
      "\n",
      "Calculating class weights …\n",
      "Loss weights → 0: 1.00, 1: 1.00\n",
      "\n",
      "--- Starting training ---\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2767a5f27cbf488aa67acb8091b6c52d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3361 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "cd679059145a4a02974e547cc02a5ed5",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2185 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 01/10 – 305.9s\n",
      "  train loss 0.3280 | acc 0.8616\n",
      "  val   loss 0.2498 | acc 0.9014\n",
      "           prec 0.6412 | rec 0.8955 | f1 0.7473 | auc 0.9593\n",
      "  ✓ new best model saved → best_model_weighted_bbox_ego_acc_ego_speed_ped_action_ped_look_static_context_ep1.pth (F1 0.7473)\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "81070302d0e54be8a168af717bae89ee",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3361 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7a3f1b88c0e7426ebb56201b0e15ff93",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2185 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 02/10 – 306.3s\n",
      "  train loss 0.2698 | acc 0.8884\n",
      "  val   loss 0.2287 | acc 0.9199\n",
      "           prec 0.7171 | rec 0.8388 | f1 0.7732 | auc 0.9543\n",
      "  ✓ new best model saved → best_model_weighted_bbox_ego_acc_ego_speed_ped_action_ped_look_static_context_ep2.pth (F1 0.7732)\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0a0d9fcb538845aaa6d325dab8bd93b5",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3361 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ab9ecd0d9bd94b2a86a0ede43263d616",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2185 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 03/10 – 305.6s\n",
      "  train loss 0.2393 | acc 0.9039\n",
      "  val   loss 0.2422 | acc 0.9211\n",
      "           prec 0.7187 | rec 0.8463 | f1 0.7773 | auc 0.9498\n",
      "  ✓ new best model saved → best_model_weighted_bbox_ego_acc_ego_speed_ped_action_ped_look_static_context_ep3.pth (F1 0.7773)\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1b6643d3b6784730a203c278a95ff2e7",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3361 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ce6d8229f630477aa5226a688e413178",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2185 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 04/10 – 306.2s\n",
      "  train loss 0.2181 | acc 0.9135\n",
      "  val   loss 0.2805 | acc 0.9123\n",
      "           prec 0.7148 | rec 0.7666 | f1 0.7398 | auc 0.9338\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "248340508de74957a331a4062c11aad8",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3361 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "025f4ebfd4e74a189f7748707fb3dc03",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2185 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 05/10 – 304.2s\n",
      "  train loss 0.1931 | acc 0.9248\n",
      "  val   loss 0.3556 | acc 0.9044\n",
      "           prec 0.6742 | rec 0.7988 | f1 0.7312 | auc 0.9243\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e61c67a8b1d9476594c6d95d556239b8",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3361 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0d54a935024744b0a0c12065829c2b0c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2185 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 06/10 – 306.0s\n",
      "  train loss 0.1766 | acc 0.9320\n",
      "  val   loss 0.3168 | acc 0.9062\n",
      "           prec 0.7248 | rec 0.6829 | f1 0.7032 | auc 0.9291\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7a994e1fde0f400090d112d4363a39c8",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3361 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b921f3262df8451891aafb727f9b8759",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2185 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 07/10 – 306.4s\n",
      "  train loss 0.1607 | acc 0.9390\n",
      "  val   loss 0.3805 | acc 0.8972\n",
      "           prec 0.6979 | rec 0.6496 | f1 0.6729 | auc 0.9115\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "837ead0274a04d74bcf06ee51bd12725",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3361 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "5f9399f4131549aaa9c314369957363a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2185 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 08/10 – 305.0s\n",
      "  train loss 0.1491 | acc 0.9440\n",
      "  val   loss 0.4045 | acc 0.8868\n",
      "           prec 0.6496 | rec 0.6610 | f1 0.6552 | auc 0.9048\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "8d5e48264926403aa036d4f5c81b4c76",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3361 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "879d30222689414398a6e3639962eeff",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2185 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 09/10 – 304.0s\n",
      "  train loss 0.1420 | acc 0.9463\n",
      "  val   loss 0.3929 | acc 0.8936\n",
      "           prec 0.6722 | rec 0.6756 | f1 0.6739 | auc 0.9112\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "734db0a7aa2a47fbb9dcb8463f5ca80d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/3361 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "bf45ea0dfdf54de68978f97e9d952481",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2185 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 10/10 – 303.2s\n",
      "  train loss 0.1304 | acc 0.9514\n",
      "  val   loss 0.5292 | acc 0.8922\n",
      "           prec 0.6979 | rec 0.5948 | f1 0.6422 | auc 0.9087\n",
      "\n",
      "--- Training finished ---\n",
      "\n",
      "Plotting training curves …\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Final Evaluation on Validation set ---\n",
      "Loaded best model: best_model_weighted_bbox_ego_acc_ego_speed_ped_action_ped_look_static_context_ep3.pth\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b269ec2ffa674a3eae4de09c6e84a33c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/2185 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "11f5eff8ba5147038933cd1e18e454e9",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Generating CM Data:   0%|          | 0/2185 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Final metrics (Weighted Avg Fusion) ---\n",
      "loss      : 0.2422\n",
      "accuracy  : 0.9211\n",
      "precision : 0.7187\n",
      "recall    : 0.8463\n",
      "f1        : 0.7773\n",
      "auc       : 0.9498\n",
      "(Best validation F1 during training: 0.7773)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Learned fusion weights ---\n",
      "bbox           : 0.1714\n",
      "ped_action     : 0.1660\n",
      "ped_look       : 0.1614\n",
      "ego_speed      : 0.1643\n",
      "ego_acc        : 0.1652\n",
      "static_context : 0.1717\n",
      "------------------------------\n",
      "\n",
      "--- Script complete ---\n"
     ]
    }
   ],
   "source": [
    "# --- CELL 2: ABLATION STUDY – MODEL TRAINING AND EVALUATION (with Weighted Average Fusion) ---\n",
    "\n",
    "import os\n",
    "import sys\n",
    "import gc\n",
    "import time\n",
    "import math\n",
    "import random\n",
    "import pickle\n",
    "import torch\n",
    "import numpy as np\n",
    "import pandas as pd                      # results-summary table\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from tqdm.notebook import tqdm\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "from sklearn.metrics import (\n",
    "    accuracy_score,\n",
    "    precision_recall_fscore_support,\n",
    "    roc_auc_score,\n",
    "    confusion_matrix,\n",
    "    ConfusionMatrixDisplay,\n",
    ")\n",
    "\n",
    "# --- Add PIE utilities path if necessary (adjust path) ------------------------\n",
    "pie_utilities_path = \"/kaggle/working/PIE/utilities\"\n",
    "if pie_utilities_path not in sys.path:\n",
    "    sys.path.insert(0, pie_utilities_path)\n",
    "\n",
    "try:\n",
    "    from pie_data import PIE\n",
    "except ImportError as e:\n",
    "    print(f\"Warn: Could not import PIE class: {e}\")\n",
    "    PIE = None\n",
    "\n",
    "# --- Configuration ------------------------------------------------------------\n",
    "PIE_ROOT_PATH = \"/kaggle/working/PIE\"\n",
    "POSE_DATA_DIR = \"/kaggle/input/pose-data/extracted_poses2\"\n",
    "PIE_DATABASE_CACHE_PATH = \"/kaggle/input/pie-database/pie_database.pkl\"\n",
    "\n",
    "# --- Define ALL possible streams (used by Dataset class) ----------------------\n",
    "ALL_POSSIBLE_STREAMS = [\n",
    "    \"bbox\",\n",
    "    \"pose\",\n",
    "    \"ego_speed\",\n",
    "    \"ego_acc\",\n",
    "    \"ego_gyro\",\n",
    "    \"ped_action\",\n",
    "    \"ped_look\",\n",
    "    \"ped_occlusion\",\n",
    "    \"traffic_light\",\n",
    "    \"static_context\",\n",
    "]\n",
    "\n",
    "# --- *** CHOOSE ACTIVE STREAMS FOR THIS EXPERIMENT *** ------------------------\n",
    "ACTIVE_STREAMS = [\n",
    "    \"bbox\",\n",
    "    \"ped_action\",\n",
    "    \"ped_look\",\n",
    "    \"ego_speed\",\n",
    "    \"ego_acc\",\n",
    "    \"static_context\",\n",
    "]\n",
    "# ------------------------------------------------------------------------------\n",
    "\n",
    "print(f\"--- Running Weighted Average Fusion With Active Streams: {ACTIVE_STREAMS} ---\")\n",
    "\n",
    "# --- Model Hyper-parameters ---------------------------------------------------\n",
    "SEQ_LEN, PRED_LEN = 30, 30\n",
    "INPUT_SIZE_BBOX = 4\n",
    "INPUT_SIZE_POSE = 34\n",
    "INPUT_SIZE_EGO_SPEED = 1\n",
    "INPUT_SIZE_EGO_ACC = 2\n",
    "INPUT_SIZE_EGO_GYRO = 1\n",
    "INPUT_SIZE_PED_ACTION = 1\n",
    "INPUT_SIZE_PED_LOOK = 1\n",
    "INPUT_SIZE_PED_OCC = 1\n",
    "INPUT_SIZE_TL_STATE = 4\n",
    "NUM_SIGNALIZED_CATS = 4\n",
    "NUM_INTERSECTION_CATS = 5\n",
    "NUM_AGE_CATS = 4\n",
    "NUM_GENDER_CATS = 3\n",
    "NUM_TRAFFIC_DIR_CATS = 2\n",
    "LANE_CATEGORIES = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 4, 7: 4, 8: 4}\n",
    "NUM_LANE_CATS = len(set(LANE_CATEGORIES.values()))\n",
    "INPUT_SIZE_STATIC = (\n",
    "    NUM_SIGNALIZED_CATS\n",
    "    + NUM_INTERSECTION_CATS\n",
    "    + NUM_AGE_CATS\n",
    "    + NUM_GENDER_CATS\n",
    "    + NUM_TRAFFIC_DIR_CATS\n",
    "    + NUM_LANE_CATS\n",
    ")\n",
    "\n",
    "LSTM_HIDDEN_SIZE = 256\n",
    "NUM_LSTM_LAYERS = 2\n",
    "DROPOUT_RATE = 0.3\n",
    "NUM_CLASSES = 2\n",
    "ATTENTION_DIM = 128\n",
    "\n",
    "# --- Training Hyper-parameters ------------------------------------------------\n",
    "LEARNING_RATE = 1e-4\n",
    "BATCH_SIZE = 32\n",
    "NUM_EPOCHS = 10\n",
    "DEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "print(f\"Using device: {DEVICE}\")\n",
    "\n",
    "# --- Dataset splits -----------------------------------------------------------\n",
    "VAL_SETS_STR = [\"set05\", \"set06\"]\n",
    "\n",
    "# --- Paths for pre-processed data --------------------------------------------\n",
    "BALANCED_DATA_PKL_PATH = \"/kaggle/working/balanced_train_data.pkl\"\n",
    "SCALERS_PKL_PATH = \"/kaggle/working/scalers.pkl\"\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                               Helper classes                                #\n",
    "# -----------------------------------------------------------------------------\n",
    "\n",
    "\n",
    "def to_one_hot(index, num_classes):\n",
    "    vec = np.zeros(num_classes, dtype=np.float32)\n",
    "    safe_index = int(np.clip(index, 0, num_classes - 1))\n",
    "    vec[safe_index] = 1.0\n",
    "    return vec\n",
    "\n",
    "\n",
    "class PIEDataset(Dataset):\n",
    "    \"\"\"\n",
    "    Dataset that can dynamically enable/disable streams.\n",
    "    \"\"\"\n",
    "\n",
    "    def __init__(\n",
    "        self,\n",
    "        pie_database,\n",
    "        set_names,\n",
    "        pose_data_dir,\n",
    "        seq_len,\n",
    "        pred_len,\n",
    "        scalers=None,\n",
    "        active_streams=None,\n",
    "    ):\n",
    "        self.pie_db = pie_database\n",
    "        self.set_names = set_names\n",
    "        self.pose_data_dir = pose_data_dir\n",
    "        self.seq_len = seq_len\n",
    "        self.pred_len = pred_len\n",
    "        self.scalers = scalers or {}\n",
    "        self.active_streams = active_streams or ALL_POSSIBLE_STREAMS\n",
    "        self.sequences = []\n",
    "        self.all_pose_data = {}\n",
    "\n",
    "        self._input_sizes_for_error = self._get_input_sizes_dict()\n",
    "\n",
    "        if \"pose\" in self.active_streams:\n",
    "            self._load_pose_data()\n",
    "\n",
    "        self._generate_sequence_list()\n",
    "        if not self.sequences:\n",
    "            raise ValueError(f\"Dataset init failed: No sequences for {self.set_names}\")\n",
    "\n",
    "    # --------------------------------------------------------------------- #\n",
    "    #                        internal helper methods                        #\n",
    "    # --------------------------------------------------------------------- #\n",
    "\n",
    "    def _get_input_sizes_dict(self):\n",
    "        \"\"\"\n",
    "        Build a dict {stream_name: feature_size}.\n",
    "        \"\"\"\n",
    "        input_sizes = {}\n",
    "        special_cases = {\n",
    "            \"TRAFFIC_LIGHT\": \"TL_STATE\",\n",
    "            \"STATIC_CONTEXT\": \"STATIC\",\n",
    "            \"EGO_SPEED\": \"EGO_SPEED\",\n",
    "            \"EGO_ACC\": \"EGO_ACC\",\n",
    "            \"EGO_GYRO\": \"EGO_GYRO\",\n",
    "            \"PED_ACTION\": \"PED_ACTION\",\n",
    "            \"PED_LOOK\": \"PED_LOOK\",\n",
    "            \"PED_OCCLUSION\": \"PED_OCC\",\n",
    "        }\n",
    "\n",
    "        for stream in ALL_POSSIBLE_STREAMS:\n",
    "            size_constant_name = f\"INPUT_SIZE_{stream.upper()}\"\n",
    "            stream_upper_key = stream.upper()\n",
    "            suffix = special_cases.get(stream_upper_key)\n",
    "\n",
    "            if suffix:\n",
    "                size_constant_name = f\"INPUT_SIZE_{suffix}\"\n",
    "            elif stream == \"bbox\":\n",
    "                size_constant_name = \"INPUT_SIZE_BBOX\"\n",
    "            elif stream == \"pose\":\n",
    "                size_constant_name = \"INPUT_SIZE_POSE\"\n",
    "\n",
    "            input_sizes[stream] = globals().get(size_constant_name, 1)\n",
    "\n",
    "        return input_sizes\n",
    "\n",
    "    def _load_pose_data(self):\n",
    "        \"\"\"\n",
    "        Load pose dictionaries once per dataset instance.\n",
    "        \"\"\"\n",
    "        sets_loaded_count = 0\n",
    "        for set_id in self.set_names:\n",
    "            self.all_pose_data[set_id] = {}\n",
    "            pose_set_path = os.path.join(self.pose_data_dir, set_id)\n",
    "            if not os.path.isdir(pose_set_path):\n",
    "                continue\n",
    "\n",
    "            pkl_files_in_set = [\n",
    "                f\n",
    "                for f in os.listdir(pose_set_path)\n",
    "                if f.startswith(f\"{set_id}_\") and f.endswith(\"_poses.pkl\")\n",
    "            ]\n",
    "            if not pkl_files_in_set:\n",
    "                continue\n",
    "\n",
    "            loaded_video_count = 0\n",
    "            for pkl_filename in pkl_files_in_set:\n",
    "                pkl_file_path = os.path.join(pose_set_path, pkl_filename)\n",
    "                try:\n",
    "                    with open(pkl_file_path, \"rb\") as f:\n",
    "                        loaded_pkl_content = pickle.load(f)\n",
    "                except FileNotFoundError:\n",
    "                    continue\n",
    "                except Exception as e:\n",
    "                    print(f\"Error loading pose PKL {pkl_file_path}: {e}\")\n",
    "                    continue\n",
    "\n",
    "                # Every pose-PKL contains a single key (video), by convention\n",
    "                if len(loaded_pkl_content) != 1:\n",
    "                    continue\n",
    "\n",
    "                unique_video_key, video_data = list(loaded_pkl_content.items())[0]\n",
    "                video_id = \"_\".join(unique_video_key.split(\"_\")[1:])\n",
    "                if video_id in self.pie_db.get(set_id, {}):\n",
    "                    self.all_pose_data[set_id][video_id] = video_data\n",
    "                    loaded_video_count += 1\n",
    "\n",
    "            if loaded_video_count > 0:\n",
    "                sets_loaded_count += 1\n",
    "\n",
    "    def _generate_sequence_list(self):\n",
    "        \"\"\"\n",
    "        Enumerate every sliding window that satisfies length + prediction horizon.\n",
    "        \"\"\"\n",
    "        sequence_count = 0\n",
    "        for set_id in self.set_names:\n",
    "            if set_id not in self.pie_db:\n",
    "                continue\n",
    "            for video_id, video_data in self.pie_db[set_id].items():\n",
    "                if \"ped_annotations\" not in video_data:\n",
    "                    continue\n",
    "                for ped_id, ped_data in video_data[\"ped_annotations\"].items():\n",
    "                    frames = ped_data.get(\"frames\", [])\n",
    "                    if len(frames) < self.seq_len + self.pred_len:\n",
    "                        continue\n",
    "\n",
    "                    frames_sorted = sorted(frames)\n",
    "                    for i in range(len(frames_sorted) - self.seq_len - self.pred_len + 1):\n",
    "                        start_f = frames_sorted[i]\n",
    "                        obs_end_f = frames_sorted[i + self.seq_len - 1]\n",
    "\n",
    "                        # consecutiveness check\n",
    "                        if obs_end_f - start_f != self.seq_len - 1:\n",
    "                            continue\n",
    "\n",
    "                        target_idx = i + self.seq_len + self.pred_len - 1\n",
    "                        if target_idx >= len(frames_sorted):\n",
    "                            continue\n",
    "\n",
    "                        target_f = frames_sorted[target_idx]\n",
    "                        if target_f - obs_end_f != self.pred_len:\n",
    "                            continue\n",
    "\n",
    "                        self.sequences.append((set_id, video_id, ped_id, start_f))\n",
    "                        sequence_count += 1\n",
    "\n",
    "        print(f\"Dataset initialized with {sequence_count} sequences for sets {self.set_names}.\")\n",
    "\n",
    "    # --------------------------------------------------------------------- #\n",
    "    #                              overrides                                #\n",
    "    # --------------------------------------------------------------------- #\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.sequences)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        \"\"\"\n",
    "        Returns:\n",
    "            features_dict   {stream_name: Tensor(seq_len, feat_dim)}\n",
    "            label_tensor    Tensor([])\n",
    "        \"\"\"\n",
    "        set_id, video_id, ped_id, start_frame = self.sequences[idx]\n",
    "        frame_nums = list(range(start_frame, start_frame + self.seq_len))\n",
    "        target_frame_num = start_frame + self.seq_len + self.pred_len - 1\n",
    "\n",
    "        # convenient aliases\n",
    "        video_db = self.pie_db.get(set_id, {}).get(video_id, {})\n",
    "        ped_db = video_db.get(\"ped_annotations\", {}).get(ped_id, {})\n",
    "        ego_db = video_db.get(\"vehicle_annotations\", {})\n",
    "        traffic_db = video_db.get(\"traffic_annotations\", {})\n",
    "        ped_attributes = ped_db.get(\"attributes\", {})\n",
    "\n",
    "        feature_sequences = {s: [] for s in self.active_streams}\n",
    "        label = 0\n",
    "\n",
    "        if (\n",
    "            \"frames\" in ped_db\n",
    "            and \"behavior\" in ped_db\n",
    "            and \"cross\" in ped_db[\"behavior\"]\n",
    "        ):\n",
    "            try:\n",
    "                target_idx = ped_db[\"frames\"].index(target_frame_num)\n",
    "                label = ped_db[\"behavior\"][\"cross\"][target_idx]\n",
    "                if label == -1:\n",
    "                    label = 0\n",
    "            except (ValueError, IndexError):\n",
    "                pass\n",
    "\n",
    "        # --- static context ------------------------------------------------\n",
    "        static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "        if \"static_context\" in self.active_streams:\n",
    "            sig_idx = ped_attributes.get(\"signalized\", 0)\n",
    "            int_idx = ped_attributes.get(\"intersection\", 0)\n",
    "            age_idx = ped_attributes.get(\"age\", 2)\n",
    "            gen_idx = ped_attributes.get(\"gender\", 0)\n",
    "            td_idx = int(ped_attributes.get(\"traffic_direction\", 0))\n",
    "            nl_val = ped_attributes.get(\"num_lanes\", 2)\n",
    "            nl_cat_idx = LANE_CATEGORIES.get(\n",
    "                nl_val, LANE_CATEGORIES[max(LANE_CATEGORIES.keys())]\n",
    "            )\n",
    "\n",
    "            static_vec = np.concatenate(\n",
    "                [\n",
    "                    to_one_hot(sig_idx, NUM_SIGNALIZED_CATS),\n",
    "                    to_one_hot(int_idx, NUM_INTERSECTION_CATS),\n",
    "                    to_one_hot(age_idx, NUM_AGE_CATS),\n",
    "                    to_one_hot(gen_idx, NUM_GENDER_CATS),\n",
    "                    to_one_hot(td_idx, NUM_TRAFFIC_DIR_CATS),\n",
    "                    to_one_hot(nl_cat_idx, NUM_LANE_CATS),\n",
    "                ]\n",
    "            )\n",
    "\n",
    "            if static_vec.shape[0] != INPUT_SIZE_STATIC:\n",
    "                static_vec = np.zeros(INPUT_SIZE_STATIC, dtype=np.float32)\n",
    "\n",
    "        # -------------------------------------------------------------------\n",
    "        #                    per-frame feature extraction                    #\n",
    "        # -------------------------------------------------------------------\n",
    "        for frame_num in frame_nums:\n",
    "            frame_db_idx = -1\n",
    "            if \"frames\" in ped_db:\n",
    "                try:\n",
    "                    frame_db_idx = ped_db[\"frames\"].index(frame_num)\n",
    "                except ValueError:\n",
    "                    pass\n",
    "\n",
    "            ego_frame_data = ego_db.get(frame_num, {})\n",
    "\n",
    "            # ---------- bbox ------------------------------------------------\n",
    "            if \"bbox\" in self.active_streams:\n",
    "                bbox_norm = np.zeros(INPUT_SIZE_BBOX, dtype=np.float32)\n",
    "                if (\n",
    "                    frame_db_idx != -1\n",
    "                    and \"bbox\" in ped_db\n",
    "                    and len(ped_db[\"bbox\"]) > frame_db_idx\n",
    "                ):\n",
    "                    try:\n",
    "                        x1, y1, x2, y2 = ped_db[\"bbox\"][frame_db_idx]\n",
    "                        img_w = video_db.get(\"width\", 1920)\n",
    "                        img_h = video_db.get(\"height\", 1080)\n",
    "                        if img_w > 0 and img_h > 0:\n",
    "                            cx = ((x1 + x2) / 2) / img_w\n",
    "                            cy = ((y1 + y2) / 2) / img_h\n",
    "                            w = (x2 - x1) / img_w\n",
    "                            h = (y2 - y1) / img_h\n",
    "                            if 0 < w and 0 < h and 0 <= cx <= 1 and 0 <= cy <= 1:\n",
    "                                bbox_norm = np.array([cx, cy, w, h], dtype=np.float32)\n",
    "                    except Exception:\n",
    "                        pass\n",
    "\n",
    "                feature_sequences[\"bbox\"].append(bbox_norm)\n",
    "\n",
    "            # ---------- pose -----------------------------------------------\n",
    "            if \"pose\" in self.active_streams:\n",
    "                pose_vector = np.zeros(INPUT_SIZE_POSE, dtype=np.float32)\n",
    "                vid_pose = self.all_pose_data.get(set_id, {}).get(video_id, {})\n",
    "                frame_pose = vid_pose.get(frame_num, {})\n",
    "                loaded_pose = frame_pose.get(ped_id)\n",
    "\n",
    "                if (\n",
    "                    loaded_pose is not None\n",
    "                    and isinstance(loaded_pose, np.ndarray)\n",
    "                    and loaded_pose.shape == (INPUT_SIZE_POSE,)\n",
    "                ):\n",
    "                    pose_vector = loaded_pose\n",
    "\n",
    "                feature_sequences[\"pose\"].append(pose_vector)\n",
    "\n",
    "            # ---------- ego-speed ------------------------------------------\n",
    "            if \"ego_speed\" in self.active_streams:\n",
    "                speed = ego_frame_data.get(\"OBD_speed\", 0.0)\n",
    "                if speed == 0.0:\n",
    "                    speed = ego_frame_data.get(\"GPS_speed\", 0.0)\n",
    "\n",
    "                speed_scaled = (\n",
    "                    speed - self.scalers.get(\"ego_speed_mean\", 0.0)\n",
    "                ) / self.scalers.get(\"ego_speed_std\", 1.0)\n",
    "                feature_sequences[\"ego_speed\"].append([speed_scaled])\n",
    "\n",
    "            # ---------- ego-acc --------------------------------------------\n",
    "            if \"ego_acc\" in self.active_streams:\n",
    "                acc_x = ego_frame_data.get(\"accX\", 0.0)\n",
    "                acc_y = ego_frame_data.get(\"accY\", 0.0)\n",
    "                acc_x_scaled = (\n",
    "                    acc_x - self.scalers.get(\"accX_mean\", 0.0)\n",
    "                ) / self.scalers.get(\"accX_std\", 1.0)\n",
    "                acc_y_scaled = (\n",
    "                    acc_y - self.scalers.get(\"accY_mean\", 0.0)\n",
    "                ) / self.scalers.get(\"accY_std\", 1.0)\n",
    "                feature_sequences[\"ego_acc\"].append([acc_x_scaled, acc_y_scaled])\n",
    "\n",
    "            # ---------- ego-gyro -------------------------------------------\n",
    "            if \"ego_gyro\" in self.active_streams:\n",
    "                gyro_z = ego_frame_data.get(\"gyroZ\", 0.0)\n",
    "                gyro_z_scaled = (\n",
    "                    gyro_z - self.scalers.get(\"gyroZ_mean\", 0.0)\n",
    "                ) / self.scalers.get(\"gyroZ_std\", 1.0)\n",
    "                feature_sequences[\"ego_gyro\"].append([gyro_z_scaled])\n",
    "\n",
    "            # ---------- ped_action -----------------------------------------\n",
    "            if \"ped_action\" in self.active_streams:\n",
    "                action = 0\n",
    "                if (\n",
    "                    frame_db_idx != -1\n",
    "                    and \"behavior\" in ped_db\n",
    "                    and \"action\" in ped_db[\"behavior\"]\n",
    "                    and len(ped_db[\"behavior\"][\"action\"]) > frame_db_idx\n",
    "                ):\n",
    "                    action = ped_db[\"behavior\"][\"action\"][frame_db_idx]\n",
    "                feature_sequences[\"ped_action\"].append([float(action)])\n",
    "\n",
    "            # ---------- ped_look -------------------------------------------\n",
    "            if \"ped_look\" in self.active_streams:\n",
    "                look = 0\n",
    "                if (\n",
    "                    frame_db_idx != -1\n",
    "                    and \"behavior\" in ped_db\n",
    "                    and \"look\" in ped_db[\"behavior\"]\n",
    "                    and len(ped_db[\"behavior\"][\"look\"]) > frame_db_idx\n",
    "                ):\n",
    "                    look = ped_db[\"behavior\"][\"look\"][frame_db_idx]\n",
    "                feature_sequences[\"ped_look\"].append([float(look)])\n",
    "\n",
    "            # ---------- ped_occlusion --------------------------------------\n",
    "            if \"ped_occlusion\" in self.active_streams:\n",
    "                occ = 0.0\n",
    "                if (\n",
    "                    frame_db_idx != -1\n",
    "                    and \"occlusion\" in ped_db\n",
    "                    and len(ped_db[\"occlusion\"]) > frame_db_idx\n",
    "                ):\n",
    "                    occ_val = ped_db[\"occlusion\"][frame_db_idx]\n",
    "                    occ = float(occ_val) / 2.0\n",
    "                feature_sequences[\"ped_occlusion\"].append([occ])\n",
    "\n",
    "            # ---------- traffic_light --------------------------------------\n",
    "            if \"traffic_light\" in self.active_streams:\n",
    "                state_int = 0\n",
    "                for obj_id, obj_data in traffic_db.items():\n",
    "                    if (\n",
    "                        obj_data.get(\"obj_class\") == \"traffic_light\"\n",
    "                        and \"frames\" in obj_data\n",
    "                        and \"state\" in obj_data\n",
    "                    ):\n",
    "                        try:\n",
    "                            tl_idx = obj_data[\"frames\"].index(frame_num)\n",
    "                            state_val = obj_data[\"state\"][tl_idx]\n",
    "                            if state_val != 0:\n",
    "                                state_int = state_val\n",
    "                                break\n",
    "                        except (ValueError, IndexError):\n",
    "                            continue\n",
    "                feature_sequences[\"traffic_light\"].append(\n",
    "                    to_one_hot(state_int, INPUT_SIZE_TL_STATE)\n",
    "                )\n",
    "\n",
    "            # ---------- static_context (per-frame replicate) ---------------\n",
    "            if \"static_context\" in self.active_streams:\n",
    "                feature_sequences[\"static_context\"].append(static_vec)\n",
    "\n",
    "        # -------------------------------------------------------------------\n",
    "        # convert to tensors / safe fallback\n",
    "        # -------------------------------------------------------------------\n",
    "        features = {}\n",
    "        try:\n",
    "            for name in self.active_streams:\n",
    "                features[name] = torch.tensor(\n",
    "                    np.asarray(feature_sequences[name], dtype=np.float32),\n",
    "                    dtype=torch.float32,\n",
    "                )\n",
    "        except Exception as e:\n",
    "            print(f\"Error converting features idx {idx}: {e}. Returning zeros.\")\n",
    "            features = {\n",
    "                name: torch.zeros(\n",
    "                    (self.seq_len, self._input_sizes_for_error.get(name, 1)),\n",
    "                    dtype=torch.float32,\n",
    "                )\n",
    "                for name in self.active_streams\n",
    "            }\n",
    "\n",
    "        return features, torch.tensor(label, dtype=torch.long)\n",
    "\n",
    "\n",
    "class BalancedDataset(Dataset):\n",
    "    \"\"\"\n",
    "    Memory-based balanced dataset generated by the prep notebook cell.\n",
    "    \"\"\"\n",
    "\n",
    "    def __init__(self, data_dict, active_streams, label_key=\"label\"):\n",
    "        self.active_streams = active_streams\n",
    "        self.label_key = label_key\n",
    "\n",
    "        if self.label_key not in data_dict or not data_dict[self.label_key]:\n",
    "            raise ValueError(f\"Label key '{self.label_key}' missing/empty.\")\n",
    "\n",
    "        self.num_samples = len(data_dict[self.label_key])\n",
    "        if self.num_samples == 0:\n",
    "            print(\"Warning: BalancedDataset initialized with zero samples.\")\n",
    "\n",
    "        # convert every requested stream to tensor\n",
    "        self.features = {}\n",
    "        for stream in self.active_streams:\n",
    "            if stream in data_dict and data_dict[stream]:\n",
    "                try:\n",
    "                    self.features[stream] = torch.tensor(\n",
    "                        np.asarray(data_dict[stream]), dtype=torch.float32\n",
    "                    )\n",
    "                except ValueError as e:\n",
    "                    raise ValueError(f\"Error converting stream '{stream}': {e}\")\n",
    "            else:\n",
    "                raise KeyError(f\"Stream '{stream}' missing or empty in data.\")\n",
    "\n",
    "        try:\n",
    "            self.labels = torch.tensor(\n",
    "                [lbl[0] for lbl in data_dict[self.label_key]], dtype=torch.long\n",
    "            )\n",
    "        except (IndexError, TypeError) as e:\n",
    "            raise ValueError(f\"Error converting labels: {e}\")\n",
    "\n",
    "        for stream in self.active_streams:\n",
    "            if len(self.features[stream]) != self.num_samples:\n",
    "                raise ValueError(\n",
    "                    f\"Len mismatch: '{stream}' ({len(self.features[stream])}) vs labels ({self.num_samples})\"\n",
    "                )\n",
    "\n",
    "    def __len__(self):\n",
    "        return self.num_samples\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        feature_dict = {s: self.features[s][idx] for s in self.active_streams}\n",
    "        label = self.labels[idx]\n",
    "        return feature_dict, label\n",
    "\n",
    "\n",
    "class Attention(nn.Module):\n",
    "    def __init__(self, hidden_dim, attention_dim):\n",
    "        super().__init__()\n",
    "        self.attention_net = nn.Sequential(\n",
    "            nn.Linear(hidden_dim, attention_dim),\n",
    "            nn.Tanh(),\n",
    "            nn.Linear(attention_dim, 1),\n",
    "        )\n",
    "\n",
    "    def forward(self, lstm_output):\n",
    "        att_scores = self.attention_net(lstm_output).squeeze(2)\n",
    "        att_weights = torch.softmax(att_scores, dim=1)\n",
    "        context_vector = torch.sum(lstm_output * att_weights.unsqueeze(2), dim=1)\n",
    "        return context_vector, att_weights\n",
    "\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                  ***  MODEL WITH WEIGHTED AVERAGE FUSION  ***                #\n",
    "# -----------------------------------------------------------------------------\n",
    "\n",
    "\n",
    "class MultiStreamWeightedAvgLSTM(nn.Module):\n",
    "    def __init__(\n",
    "        self,\n",
    "        input_sizes,\n",
    "        lstm_hidden_size,\n",
    "        num_lstm_layers,\n",
    "        num_classes,\n",
    "        attention_dim,\n",
    "        dropout_rate,\n",
    "        stream_names=None,\n",
    "    ):\n",
    "        super().__init__()\n",
    "\n",
    "        if not stream_names:\n",
    "            raise ValueError(\"stream_names cannot be empty.\")\n",
    "        self.stream_names = stream_names\n",
    "        self.num_active_streams = len(stream_names)\n",
    "        self.lstm_output_dim = lstm_hidden_size * 2  # Bi-LSTM doubles hidden\n",
    "\n",
    "        self.lstms = nn.ModuleDict()\n",
    "        self.attentions = nn.ModuleDict()\n",
    "\n",
    "        print(f\"Initializing Weighted-Avg model with streams: {self.stream_names}\")\n",
    "\n",
    "        for name in self.stream_names:\n",
    "            if name not in input_sizes:\n",
    "                raise KeyError(f\"Input size for stream '{name}' not provided.\")\n",
    "\n",
    "            in_size = input_sizes[name]\n",
    "            print(f\"  – Adding stream '{name}' (input {in_size})\")\n",
    "\n",
    "            self.lstms[name] = nn.LSTM(\n",
    "                in_size,\n",
    "                lstm_hidden_size,\n",
    "                num_lstm_layers,\n",
    "                batch_first=True,\n",
    "                dropout=dropout_rate if num_lstm_layers > 1 else 0,\n",
    "                bidirectional=True,\n",
    "            )\n",
    "            self.attentions[name] = Attention(self.lstm_output_dim, attention_dim)\n",
    "\n",
    "        # learnable fusion weights (one per stream)\n",
    "        self.fusion_weights = nn.Parameter(torch.ones(self.num_active_streams))\n",
    "\n",
    "        # classification head\n",
    "        fused_dim = self.lstm_output_dim\n",
    "        self.dropout = nn.Dropout(dropout_rate)\n",
    "        inter_dim = max(num_classes * 4, fused_dim // 2)\n",
    "        self.fc1 = nn.Linear(fused_dim, inter_dim)\n",
    "        self.relu = nn.ReLU()\n",
    "        self.fc2 = nn.Linear(inter_dim, num_classes)\n",
    "\n",
    "    # --------------------------------------------------------------------- #\n",
    "\n",
    "    def forward(self, x):\n",
    "        # gather context vectors ------------------------------------------------\n",
    "        ctx_vecs = []\n",
    "        for name in self.stream_names:\n",
    "            if name not in x:\n",
    "                # gracefully handle a missing stream during inference\n",
    "                zero_ctx = torch.zeros(\n",
    "                    x[next(iter(x))].shape[0],\n",
    "                    self.lstm_output_dim,\n",
    "                    device=x[next(iter(x))].device,\n",
    "                )\n",
    "                ctx_vecs.append(zero_ctx)\n",
    "                continue\n",
    "\n",
    "            lstm_out, _ = self.lstms[name](x[name])\n",
    "            context_vector, _ = self.attentions[name](lstm_out)\n",
    "            ctx_vecs.append(context_vector)\n",
    "\n",
    "        if len(ctx_vecs) != self.num_active_streams:\n",
    "            raise RuntimeError(\n",
    "                f\"context_vectors({len(ctx_vecs)}) != num_streams({self.num_active_streams})\"\n",
    "            )\n",
    "\n",
    "        # weighted average fusion ---------------------------------------------\n",
    "        stacked = torch.stack(ctx_vecs, dim=1)  # (B, N, D)\n",
    "        weights = torch.softmax(self.fusion_weights, dim=0).view(1, -1, 1)\n",
    "        fused = torch.sum(stacked * weights, dim=1)\n",
    "\n",
    "        # classification head --------------------------------------------------\n",
    "        out = self.dropout(fused)\n",
    "        out = self.relu(self.fc1(out))\n",
    "        out = self.dropout(out)\n",
    "        logits = self.fc2(out)\n",
    "        return logits\n",
    "\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                       Training / evaluation helpers                          #\n",
    "# -----------------------------------------------------------------------------\n",
    "\n",
    "\n",
    "def train_epoch(model, dataloader, optimizer, criterion, device):\n",
    "    model.train()\n",
    "    total_loss = 0.0\n",
    "    all_preds, all_labels = [], []\n",
    "    active = model.stream_names\n",
    "\n",
    "    for feats, labels in tqdm(dataloader, desc=\"Training\", leave=False):\n",
    "        inputs = {n: feats[n].to(device) for n in active if n in feats}\n",
    "        labels = labels.to(device)\n",
    "\n",
    "        optimizer.zero_grad()\n",
    "        outputs = model(inputs)\n",
    "        loss = criterion(outputs, labels)\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "\n",
    "        total_loss += loss.item()\n",
    "        all_preds.extend(torch.argmax(outputs, 1).cpu().numpy())\n",
    "        all_labels.extend(labels.cpu().numpy())\n",
    "\n",
    "    return total_loss / max(1, len(dataloader)), accuracy_score(all_labels, all_preds)\n",
    "\n",
    "\n",
    "def evaluate_epoch(model, dataloader, criterion, device):\n",
    "    model.eval()\n",
    "    total_loss = 0.0\n",
    "    all_labels, all_preds, all_probs = [], [], []\n",
    "    active = model.stream_names\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for feats, labels in tqdm(dataloader, desc=\"Evaluating\", leave=False):\n",
    "            inputs = {n: feats[n].to(device) for n in active if n in feats}\n",
    "            labels = labels.to(device)\n",
    "\n",
    "            outputs = model(inputs)\n",
    "            loss = criterion(outputs, labels)\n",
    "            total_loss += loss.item()\n",
    "\n",
    "            probs = torch.softmax(outputs, 1)\n",
    "            preds = torch.argmax(probs, 1)\n",
    "\n",
    "            all_labels.extend(labels.cpu().numpy())\n",
    "            all_preds.extend(preds.cpu().numpy())\n",
    "            all_probs.extend(probs.cpu().numpy())\n",
    "\n",
    "    avg_loss = total_loss / max(1, len(dataloader))\n",
    "    all_probs = np.asarray(all_probs)\n",
    "    all_labels = np.asarray(all_labels)\n",
    "    all_preds = np.asarray(all_preds)\n",
    "\n",
    "    acc = accuracy_score(all_labels, all_preds)\n",
    "    prec, rec, f1, _ = precision_recall_fscore_support(\n",
    "        all_labels, all_preds, average=\"binary\", pos_label=1, zero_division=0\n",
    "    )\n",
    "    auc = (\n",
    "        roc_auc_score(all_labels, all_probs[:, 1])\n",
    "        if len(np.unique(all_labels)) > 1\n",
    "        else float(\"nan\")\n",
    "    )\n",
    "\n",
    "    return {\n",
    "        \"loss\": avg_loss,\n",
    "        \"accuracy\": acc,\n",
    "        \"precision\": prec,\n",
    "        \"recall\": rec,\n",
    "        \"f1\": f1,\n",
    "        \"auc\": auc,\n",
    "    }\n",
    "\n",
    "\n",
    "def get_predictions_and_labels(model, dataloader, device):\n",
    "    model.eval()\n",
    "    labels_all, preds_all = [], []\n",
    "    active = model.stream_names\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for feats, labels in tqdm(dataloader, desc=\"Generating CM Data\", leave=False):\n",
    "            inputs = {n: feats[n].to(device) for n in active if n in feats}\n",
    "            outputs = model(inputs)\n",
    "            preds = torch.argmax(outputs, 1)\n",
    "            labels_all.extend(labels.cpu().numpy())\n",
    "            preds_all.extend(preds.cpu().numpy())\n",
    "\n",
    "    return np.asarray(labels_all), np.asarray(preds_all)\n",
    "\n",
    "\n",
    "# -----------------------------------------------------------------------------#\n",
    "#                            Main execution block                              #\n",
    "# -----------------------------------------------------------------------------\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    print(\"--- Running Model Training/Evaluation with Weighted Fusion ---\")\n",
    "    print(f\"Active Streams: {ACTIVE_STREAMS}\")\n",
    "\n",
    "    # ------------------ load balanced data & scalers -------------------------\n",
    "    print(\"\\nLoading balanced training data …\")\n",
    "    try:\n",
    "        with open(BALANCED_DATA_PKL_PATH, \"rb\") as f:\n",
    "            balanced_train_data_dict = pickle.load(f)\n",
    "        with open(SCALERS_PKL_PATH, \"rb\") as f:\n",
    "            scalers = pickle.load(f)\n",
    "        print(\"   ✓ pre-processed data loaded.\")\n",
    "    except FileNotFoundError as e:\n",
    "        print(f\"ERROR: {e}.  Run the preprocessing cell first.\")\n",
    "        sys.exit(1)\n",
    "    except Exception as e:\n",
    "        print(f\"Error loading pre-processed data: {e}\")\n",
    "        sys.exit(1)\n",
    "\n",
    "    # -------------------------- load PIE database ----------------------------\n",
    "    print(\"\\nLoading PIE database cache for validation …\")\n",
    "    if not os.path.exists(PIE_DATABASE_CACHE_PATH):\n",
    "        raise FileNotFoundError(\"PIE database cache not found.\")\n",
    "\n",
    "    try:\n",
    "        with open(PIE_DATABASE_CACHE_PATH, \"rb\") as f:\n",
    "            pie_database = pickle.load(f)\n",
    "    except Exception as e:\n",
    "        raise RuntimeError(f\"Failed to load PIE database: {e}\")\n",
    "    print(\"   ✓ PIE database loaded.\")\n",
    "\n",
    "    # ------------------- create datasets / dataloaders -----------------------\n",
    "    print(\"\\nCreating Datasets and DataLoaders …\")\n",
    "    try:\n",
    "        train_dataset = BalancedDataset(\n",
    "            balanced_train_data_dict, ACTIVE_STREAMS, label_key=\"label\"\n",
    "        )\n",
    "        del balanced_train_data_dict\n",
    "\n",
    "        val_dataset = PIEDataset(\n",
    "            pie_database,\n",
    "            VAL_SETS_STR,\n",
    "            POSE_DATA_DIR,\n",
    "            SEQ_LEN,\n",
    "            PRED_LEN,\n",
    "            scalers,\n",
    "            ALL_POSSIBLE_STREAMS,  # provide all streams for val\n",
    "        )\n",
    "    except Exception as e:\n",
    "        print(f\"Error creating datasets: {e}\")\n",
    "        raise\n",
    "\n",
    "    if len(train_dataset) == 0 or len(val_dataset) == 0:\n",
    "        raise ValueError(\"One of the datasets is empty!\")\n",
    "\n",
    "    train_loader = DataLoader(\n",
    "        train_dataset,\n",
    "        batch_size=BATCH_SIZE,\n",
    "        shuffle=True,\n",
    "        num_workers=2,\n",
    "        pin_memory=True,\n",
    "    )\n",
    "    val_loader = DataLoader(\n",
    "        val_dataset,\n",
    "        batch_size=BATCH_SIZE,\n",
    "        shuffle=False,\n",
    "        num_workers=2,\n",
    "        pin_memory=True,\n",
    "    )\n",
    "    print(\"   ✓ DataLoaders ready.\")\n",
    "    del pie_database\n",
    "    gc.collect()\n",
    "\n",
    "    # ------------------------- initialise the model --------------------------\n",
    "    print(\"\\nInitialising model …\")\n",
    "    current_input_sizes = {}\n",
    "    SPECIAL = {\n",
    "        \"TRAFFIC_LIGHT\": \"TL_STATE\",\n",
    "        \"STATIC_CONTEXT\": \"STATIC\",\n",
    "        \"EGO_SPEED\": \"EGO_SPEED\",\n",
    "        \"EGO_ACC\": \"EGO_ACC\",\n",
    "        \"EGO_GYRO\": \"EGO_GYRO\",\n",
    "        \"PED_ACTION\": \"PED_ACTION\",\n",
    "        \"PED_LOOK\": \"PED_LOOK\",\n",
    "        \"PED_OCCLUSION\": \"PED_OCC\",\n",
    "    }\n",
    "\n",
    "    for s in ACTIVE_STREAMS:\n",
    "        name = f\"INPUT_SIZE_{SPECIAL.get(s.upper(), s.upper())}\"\n",
    "        if s == \"bbox\":\n",
    "            name = \"INPUT_SIZE_BBOX\"\n",
    "        elif s == \"pose\":\n",
    "            name = \"INPUT_SIZE_POSE\"\n",
    "\n",
    "        if name not in globals():\n",
    "            raise ValueError(f\"Input-size constant {name} not found.\")\n",
    "\n",
    "        current_input_sizes[s] = globals()[name]\n",
    "\n",
    "    model = MultiStreamWeightedAvgLSTM(\n",
    "        current_input_sizes,\n",
    "        LSTM_HIDDEN_SIZE,\n",
    "        NUM_LSTM_LAYERS,\n",
    "        NUM_CLASSES,\n",
    "        ATTENTION_DIM,\n",
    "        DROPOUT_RATE,\n",
    "        stream_names=ACTIVE_STREAMS,\n",
    "    ).to(DEVICE)\n",
    "\n",
    "    print(\"\\n--- Model architecture ---\")\n",
    "    print(model)\n",
    "    total_params = sum(p.numel() for p in model.parameters() if p.requires_grad)\n",
    "    print(f\"Trainable parameters: {total_params:,}\")\n",
    "    print(\"-\" * 30)\n",
    "\n",
    "    # ---------------- loss / optimiser --------------------------------------\n",
    "    print(\"\\nCalculating class weights …\")\n",
    "    train_labels = train_dataset.labels.tolist()\n",
    "    n0, n1 = train_labels.count(0), train_labels.count(1)\n",
    "    total = len(train_labels)\n",
    "    if total == 0:\n",
    "        w0, w1 = 1.0, 1.0\n",
    "    elif n0 == 0:\n",
    "        w0, w1 = 0.0, 1.0\n",
    "    elif n1 == 0:\n",
    "        w0, w1 = 1.0, 0.0\n",
    "    else:\n",
    "        w0, w1 = total / (2.0 * n0), total / (2.0 * n1)\n",
    "\n",
    "    class_weights = torch.tensor([w0, w1], dtype=torch.float32).to(DEVICE)\n",
    "    print(f\"Loss weights → 0: {w0:.2f}, 1: {w1:.2f}\")\n",
    "\n",
    "    criterion = nn.CrossEntropyLoss(weight=class_weights)\n",
    "    optimizer = optim.Adam(model.parameters(), lr=LEARNING_RATE)\n",
    "\n",
    "    best_val_f1 = -1.0\n",
    "    history = {\"train_loss\": [], \"val_loss\": [], \"train_acc\": [], \"val_acc\": [], \"val_f1\": []}\n",
    "    best_model_path = \"\"\n",
    "\n",
    "    # --------------------------- training loop -------------------------------\n",
    "    print(\"\\n--- Starting training ---\")\n",
    "    for epoch in range(NUM_EPOCHS):\n",
    "        t0 = time.time()\n",
    "\n",
    "        train_loss, train_acc = train_epoch(model, train_loader, optimizer, criterion, DEVICE)\n",
    "        metrics = evaluate_epoch(model, val_loader, criterion, DEVICE)\n",
    "\n",
    "        history[\"train_loss\"].append(train_loss)\n",
    "        history[\"val_loss\"].append(metrics[\"loss\"])\n",
    "        history[\"train_acc\"].append(train_acc)\n",
    "        history[\"val_acc\"].append(metrics[\"accuracy\"])\n",
    "        history[\"val_f1\"].append(metrics[\"f1\"])\n",
    "\n",
    "        print(f\"\\nEpoch {epoch + 1:02d}/{NUM_EPOCHS} – {time.time() - t0:.1f}s\")\n",
    "        print(f\"  train loss {train_loss:.4f} | acc {train_acc:.4f}\")\n",
    "        print(f\"  val   loss {metrics['loss']:.4f} | acc {metrics['accuracy']:.4f}\")\n",
    "        print(\n",
    "            f\"           prec {metrics['precision']:.4f} | rec {metrics['recall']:.4f} | f1 {metrics['f1']:.4f} | auc {metrics['auc']:.4f}\"\n",
    "        )\n",
    "\n",
    "        if metrics[\"f1\"] > best_val_f1:\n",
    "            best_val_f1 = metrics[\"f1\"]\n",
    "            best_model_path = f\"best_model_weighted_{'_'.join(sorted(ACTIVE_STREAMS))}_ep{epoch + 1}.pth\"\n",
    "            torch.save(model.state_dict(), best_model_path)\n",
    "            print(f\"  ✓ new best model saved → {best_model_path} (F1 {best_val_f1:.4f})\")\n",
    "\n",
    "    print(\"\\n--- Training finished ---\")\n",
    "\n",
    "    # --------------------------- plots ---------------------------------------\n",
    "    print(\"\\nPlotting training curves …\")\n",
    "    fig, ax = plt.subplots(1, 2, figsize=(12, 5))\n",
    "\n",
    "    ax[0].plot(range(1, NUM_EPOCHS + 1), history[\"train_loss\"], label=\"Train\")\n",
    "    ax[0].plot(range(1, NUM_EPOCHS + 1), history[\"val_loss\"], label=\"Val\")\n",
    "    ax[0].set_xlabel(\"Epoch\")\n",
    "    ax[0].set_ylabel(\"Loss\")\n",
    "    ax[0].set_title(\"Loss curve\")\n",
    "    ax[0].legend()\n",
    "    ax[0].grid(True)\n",
    "\n",
    "    ax[1].plot(range(1, NUM_EPOCHS + 1), history[\"train_acc\"], label=\"Train Acc\")\n",
    "    ax[1].plot(range(1, NUM_EPOCHS + 1), history[\"val_acc\"], label=\"Val Acc\")\n",
    "    ax[1].plot(range(1, NUM_EPOCHS + 1), history[\"val_f1\"], \"--\", label=\"Val F1\")\n",
    "    ax[1].set_xlabel(\"Epoch\")\n",
    "    ax[1].set_ylabel(\"Metric\")\n",
    "    ax[1].set_title(\"Accuracy & F1\")\n",
    "    ax[1].legend()\n",
    "    ax[1].grid(True)\n",
    "\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "    # ------------------- final evaluation (best model) -----------------------\n",
    "    print(\"\\n--- Final Evaluation on Validation set ---\")\n",
    "    if best_model_path and os.path.exists(best_model_path):\n",
    "        try:\n",
    "            model.load_state_dict(torch.load(best_model_path, map_location=DEVICE))\n",
    "            print(f\"Loaded best model: {best_model_path}\")\n",
    "        except Exception as e:\n",
    "            print(f\"Warning: could not load best model ({e}).  Using last epoch params.\")\n",
    "    else:\n",
    "        print(\"Warning: best model not found, using last epoch parameters.\")\n",
    "\n",
    "    final_metrics = evaluate_epoch(model, val_loader, criterion, DEVICE)\n",
    "    y_true, y_pred = get_predictions_and_labels(model, val_loader, DEVICE)\n",
    "    cm = confusion_matrix(y_true, y_pred, labels=[0, 1])\n",
    "\n",
    "    print(\"\\n--- Final metrics (Weighted Avg Fusion) ---\")\n",
    "    for k, v in final_metrics.items():\n",
    "        print(f\"{k:<10}: {v:.4f}\")\n",
    "\n",
    "    print(f\"(Best validation F1 during training: {best_val_f1:.4f})\")\n",
    "\n",
    "    ConfusionMatrixDisplay(cm, display_labels=[\"Not Crossing\", \"Crossing\"]).plot(\n",
    "        cmap=plt.cm.Blues\n",
    "    )\n",
    "    plt.title(\"Confusion Matrix\")\n",
    "    plt.show()\n",
    "\n",
    "    # ------------------- inspect learned fusion weights ----------------------\n",
    "    if hasattr(model, \"fusion_weights\"):\n",
    "        w = torch.softmax(model.fusion_weights, 0).detach().cpu().numpy()\n",
    "        print(\"\\n--- Learned fusion weights ---\")\n",
    "        for stream, weight in zip(model.stream_names, w):\n",
    "            print(f\"{stream:<15}: {weight:.4f}\")\n",
    "        print(\"-\" * 30)\n",
    "\n",
    "    print(\"\\n--- Script complete ---\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f7fd7b84",
   "metadata": {
    "papermill": {
     "duration": 0.015958,
     "end_time": "2025-05-01T16:26:50.555611",
     "exception": false,
     "start_time": "2025-05-01T16:26:50.539653",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 6993690,
     "sourceId": 11201333,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6993708,
     "sourceId": 11201362,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6993722,
     "sourceId": 11201388,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6993740,
     "sourceId": 11201422,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6993794,
     "sourceId": 11201506,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6993809,
     "sourceId": 11201543,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7034191,
     "sourceId": 11255589,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7127490,
     "sourceId": 11382982,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7142036,
     "sourceId": 11402679,
     "sourceType": "datasetVersion"
    },
    {
     "modelId": 279383,
     "modelInstanceId": 258142,
     "sourceId": 302300,
     "sourceType": "modelInstanceVersion"
    },
    {
     "modelId": 283333,
     "modelInstanceId": 262207,
     "sourceId": 307831,
     "sourceType": "modelInstanceVersion"
    },
    {
     "modelId": 288527,
     "modelInstanceId": 267476,
     "sourceId": 316944,
     "sourceType": "modelInstanceVersion"
    },
    {
     "modelId": 297682,
     "modelInstanceId": 276781,
     "sourceId": 329886,
     "sourceType": "modelInstanceVersion"
    },
    {
     "modelId": 297702,
     "modelInstanceId": 276800,
     "sourceId": 329908,
     "sourceType": "modelInstanceVersion"
    },
    {
     "isSourceIdPinned": true,
     "modelId": 314775,
     "modelInstanceId": 294156,
     "sourceId": 352620,
     "sourceType": "modelInstanceVersion"
    }
   ],
   "dockerImageVersionId": 30918,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4059.899122,
   "end_time": "2025-05-01T16:26:54.010430",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-01T15:19:14.111308",
   "version": "2.6.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "009ca791c25a449f8ba11f333cd7c6cc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_99ee50ea522b420ebbf3cdb3a88807b5",
       "max": 3361.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_43a1b81359b7445ba4a5c251551a4d50",
       "tabbable": null,
       "tooltip": null,
       "value": 3361.0
      }
     },
     "025f4ebfd4e74a189f7748707fb3dc03": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_ca194937c472448db385137cfc371c91",
        "IPY_MODEL_f815e63e4a80487c911b423ece901d79",
        "IPY_MODEL_64731c0eb4124dc3982318a7c9effaf4"
       ],
       "layout": "IPY_MODEL_068d0d45e5e84ac99c2c5cb0c2547586",
       "tabbable": null,
       "tooltip": null
      }
     },
     "033002f81e164c9eaf5688fbceb35af0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "048d0d70c8354bf8bf16c48eb0a05fd6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "04ca002edd3b4174b2c034d28b66f9bb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f1546dfd3c674b6cb2550100ec081887",
       "placeholder": "​",
       "style": "IPY_MODEL_af70dca36c264b77947206f73656bb1d",
       "tabbable": null,
       "tooltip": null,
       "value": " 2185/2185 [01:43&lt;00:00, 14.47it/s]"
      }
     },
     "068d0d45e5e84ac99c2c5cb0c2547586": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "06afaf88f9114b78a0a302a8b2750b26": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_b906d0af3c464096983e8d5f2d7d8b4a",
       "placeholder": "​",
       "style": "IPY_MODEL_258abbbe61164f6daf3da3d3aee4de8d",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "07aa2b32e5ee48dcba9f23b4d11f889a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "07e0e349b03e487e932fdfb816651d77": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5f6662bdd1244f13a5896394861ece7a",
       "placeholder": "​",
       "style": "IPY_MODEL_a2a9847ad42242df8d68ef56989e961c",
       "tabbable": null,
       "tooltip": null,
       "value": " 2183/2185 [01:44&lt;00:00, 12.76it/s]"
      }
     },
     "084466f97e5c4673b9353a377935cef4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "0a0d9fcb538845aaa6d325dab8bd93b5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_ecc6d2a703304940b4fee1decaaf2bae",
        "IPY_MODEL_25e8d9421f8f428787ba956fffdb5ba9",
        "IPY_MODEL_f51ff8851f86493a83d782c0f18e7ca0"
       ],
       "layout": "IPY_MODEL_85d93527275e4b3a8593fd13ba0d701b",
       "tabbable": null,
       "tooltip": null
      }
     },
     "0a598e6d4c5c44dd99dc55cf3a15707d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "0ab53be7b12a464992a63707668e751c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0d54a935024744b0a0c12065829c2b0c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_9aaf42fe69804de2a27a2a7b79e4e604",
        "IPY_MODEL_846759294bed4ce79607b99154c6e2c5",
        "IPY_MODEL_888d260778a84d86bc0ded64a77eeeba"
       ],
       "layout": "IPY_MODEL_9b24d276f61e4e9db0f3052817f7d217",
       "tabbable": null,
       "tooltip": null
      }
     },
     "0eb6d5b773f44ce5aaf49fb757541fab": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "0f34cd5b315642c094a88a66e5e77408": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "107da8b1d61f4b62b2ba46464e2da9bb": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "1091fc12c71b4710a24a666d7d6ba08b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "111e629df14343a88ff38f6711ccb771": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_36bcae50bb0e404d9d969c7d527d956c",
       "max": 2185.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_495aab0c52df4994ac819b1d9e3f09bf",
       "tabbable": null,
       "tooltip": null,
       "value": 2185.0
      }
     },
     "11f5eff8ba5147038933cd1e18e454e9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_7872d1cb5f2c4a578b242eebadb22a5e",
        "IPY_MODEL_8c8cb7ac67f3491a80ad13305efe2742",
        "IPY_MODEL_1bccfb20fe3446a8bfc55b0328a2223d"
       ],
       "layout": "IPY_MODEL_ab83843b880d4aa3a7eb017b31916f02",
       "tabbable": null,
       "tooltip": null
      }
     },
     "1269aff214dd47be92b7bb776db3d80b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3950ed38306848368b950332ac1414f4",
       "placeholder": "​",
       "style": "IPY_MODEL_83486d92cb4b4417b15d71a43a8d4f58",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "12f02d37973b4db29c58a360f1e23aa3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1395551675674572956c5513b229f03c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "158bc85b554c41e39921c7c5977e3d05": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "164a90490ec54d19960e94914734f3f3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "16bddf9961e943f9887f636a9358560e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_6ddc4364eb394a10be52809fc49c0c19",
       "placeholder": "​",
       "style": "IPY_MODEL_e5346c322c3f430a923e0b21badd936b",
       "tabbable": null,
       "tooltip": null,
       "value": " 307538/307538 [12:02&lt;00:00, 426.68it/s]"
      }
     },
     "1846467da36444489c4dd640166e6469": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "18e44510314a460d9fbea4e4207db092": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "18f8eb86d37d42548c1c07a4147dca82": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "197f347067ea4ddb97bd01bbf7a355b6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "19df40c71dbd4788b0ffdf53a19a2fe8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_798d3278ab2a46a0b1f4cebee253be6c",
       "max": 2185.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_1395551675674572956c5513b229f03c",
       "tabbable": null,
       "tooltip": null,
       "value": 2185.0
      }
     },
     "1a1536bf1f5b4f4e8faa61124470b01c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1a3b4436f54c47f78058e5c5afc85b84": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "1b6643d3b6784730a203c278a95ff2e7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_2db48d71e0454d24b0cfdf6fe2930d98",
        "IPY_MODEL_009ca791c25a449f8ba11f333cd7c6cc",
        "IPY_MODEL_1d6f0c979caf4563a9dd126a0b134d80"
       ],
       "layout": "IPY_MODEL_18f8eb86d37d42548c1c07a4147dca82",
       "tabbable": null,
       "tooltip": null
      }
     },
     "1ba89dd9e63247d78d9084d281f234b0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "1bccfb20fe3446a8bfc55b0328a2223d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_585d3810fcba498389e80ab52d71cb19",
       "placeholder": "​",
       "style": "IPY_MODEL_1a3b4436f54c47f78058e5c5afc85b84",
       "tabbable": null,
       "tooltip": null,
       "value": " 2183/2185 [01:43&lt;00:00, 11.43it/s]"
      }
     },
     "1c0182bee6e246cfaaff1232e60f32a5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1c98514114bb4a0784a07b37cec3e864": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1d6f0c979caf4563a9dd126a0b134d80": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_45b3f4e3cd344c2987930f09e2a5c505",
       "placeholder": "​",
       "style": "IPY_MODEL_fe46732dea4643b59afc86a3659e10e1",
       "tabbable": null,
       "tooltip": null,
       "value": " 3359/3361 [03:19&lt;00:00, 16.33it/s]"
      }
     },
     "1dfc5c1f3820484cb928f19856930d81": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "1edd1e1dcfdb4fe29c3efd0edc522e81": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "1f305328065349fa9a4fdf8374a9e890": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "21279bca8ce8486eb262e2ddca6e951f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "22580c36c89848469d34cd59795740e1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "22b7a7a5fa1d46cf90481a22c735d68f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "230d5b53f74d45489fc84ba5afaf25b0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4c6d635d6a5f473c8bb5c05ee0123174",
       "placeholder": "​",
       "style": "IPY_MODEL_048d0d70c8354bf8bf16c48eb0a05fd6",
       "tabbable": null,
       "tooltip": null,
       "value": " 2183/2185 [01:43&lt;00:00, 12.99it/s]"
      }
     },
     "23d222f5410342bc84dbf637490df99c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "24754d36ef7e43b9aaf9a3381772304e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7e125e24dc1347c4ae58d93630bb9daa",
       "max": 3361.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_508d524f7c9546d2b0d2ea565d04fc54",
       "tabbable": null,
       "tooltip": null,
       "value": 3361.0
      }
     },
     "248340508de74957a331a4062c11aad8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_ad9f6fad9f8b4d5fbb7a90449046304a",
        "IPY_MODEL_9b46c92c993a4c0585cecab8f482d049",
        "IPY_MODEL_8a5c4a4ceacd41cba030a5ce68d96e0f"
       ],
       "layout": "IPY_MODEL_2b06a56bb0ed403c95a9456ee5847260",
       "tabbable": null,
       "tooltip": null
      }
     },
     "2585cffe7a5a4ef29d7b627a74a70b10": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "258abbbe61164f6daf3da3d3aee4de8d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "25b92dd8c9464e4bbbb1ae37c3d55c22": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "25e8d9421f8f428787ba956fffdb5ba9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e64bc2aad8c34a47abb70ef313967b9a",
       "max": 3361.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_1ba89dd9e63247d78d9084d281f234b0",
       "tabbable": null,
       "tooltip": null,
       "value": 3361.0
      }
     },
     "2767a5f27cbf488aa67acb8091b6c52d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_06afaf88f9114b78a0a302a8b2750b26",
        "IPY_MODEL_79a3af3d71a3402d8d214f81ad190460",
        "IPY_MODEL_c43a494a61bf4127a47e58baf7493728"
       ],
       "layout": "IPY_MODEL_59530c8bb5374311a4d2fb52478abf5d",
       "tabbable": null,
       "tooltip": null
      }
     },
     "29860800d44b4d93a6620f90c016f00f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "29bc6dc76c8f476983f54f997458011b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "2b06a56bb0ed403c95a9456ee5847260": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "2b927aef714e46a384df365dac4843c9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0f34cd5b315642c094a88a66e5e77408",
       "placeholder": "​",
       "style": "IPY_MODEL_5f056c263b9247c0a183014ffdf28687",
       "tabbable": null,
       "tooltip": null,
       "value": " 3359/3361 [03:19&lt;00:00, 16.32it/s]"
      }
     },
     "2db48d71e0454d24b0cfdf6fe2930d98": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9517105c195e48f382669d03b13c8d44",
       "placeholder": "​",
       "style": "IPY_MODEL_68cf128d0d0a4f3d9ddf2ac28048834a",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "2e8ce1fbbeb64332ad0cbb38c60b786a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "30c1f54cd2f34baeae48000e406426ae": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "34670bf2bc854f2f90941bdaa203a47f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_21279bca8ce8486eb262e2ddca6e951f",
       "max": 2185.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_0a598e6d4c5c44dd99dc55cf3a15707d",
       "tabbable": null,
       "tooltip": null,
       "value": 2185.0
      }
     },
     "357000740a3e400199a3b00ab5384645": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_a91117eaf4c847f89ab3be155779e037",
       "placeholder": "​",
       "style": "IPY_MODEL_807f59e9bd76441280242f72bea83561",
       "tabbable": null,
       "tooltip": null,
       "value": ""
      }
     },
     "36bcae50bb0e404d9d969c7d527d956c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "36f29310953a4d8a98033ba5715efaf0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "36f9a9f1a3094094a7f77bc84e7f0db6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "36fae483abe14cce898b03b2bc10210f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "37010e8d36bf420996209d901b3d8868": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4e49a378c3d949838bcfc1a38dbce79f",
       "placeholder": "​",
       "style": "IPY_MODEL_de5e43ff95124bdcaaccc7dd3cc00725",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "3720f76e61f945a9b5c446d52cf87648": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "392190c753c94a8d82de3492bf9421d0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3950ed38306848368b950332ac1414f4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "397df02c213243a292f64ee51d03a932": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3b51be98b4544c63a12440e6130f17ef": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "3c513163b7ef403bbc250bf87ffef811": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_761a344f9d414a2eb34cdd2944407aa4",
       "placeholder": "​",
       "style": "IPY_MODEL_033002f81e164c9eaf5688fbceb35af0",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "3ef01da262cc4b9887306e4b05852b98": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4007cfec77dc4a95b6ddd6480599d466": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "4010262a25e5450f835726ee0fa06e41": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "401ec22e62f74cb7b9029ac8306fe92f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "40fa6eec424440a3a35de6e335b11cfb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_cc7bbb8a4e9b4918afb9e16f2dc57c40",
       "placeholder": "​",
       "style": "IPY_MODEL_2e8ce1fbbeb64332ad0cbb38c60b786a",
       "tabbable": null,
       "tooltip": null,
       "value": " 3359/3361 [03:19&lt;00:00, 16.40it/s]"
      }
     },
     "4111fcfa3dd946febce7ec1c8d7c0f26": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9c4431442c134c2db2c42679ba532fd9",
       "max": 2185.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_cfe6306f3a22401297c952fabd48b4a9",
       "tabbable": null,
       "tooltip": null,
       "value": 2185.0
      }
     },
     "43a1b81359b7445ba4a5c251551a4d50": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "43a2ddc41258473793490d77f15a264a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "453c1f887ae741f9b551cd20a32bf4d1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "45b3f4e3cd344c2987930f09e2a5c505": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "461bbf496fb94b9289c55ef7e5dffca6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "info",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_59163e4d297544ba9067e5a446357dd2",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_25b92dd8c9464e4bbbb1ae37c3d55c22",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "495aab0c52df4994ac819b1d9e3f09bf": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "4a4bb9f4121e4c0e93481937f85c1430": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_a645fdd172894f5a9e0392b5158c210a",
       "placeholder": "​",
       "style": "IPY_MODEL_857bd92311f340d79401d7a42b995612",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "4ab5da3585d047918cbafb61f027752b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4c0fdd71c5e64b5b91aeeb2a0a4737db": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4c6d635d6a5f473c8bb5c05ee0123174": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4ccc4b4fe295484cb786ddc58deb6173": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "4e28f375a0694cf29ee002b5318e6310": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7a0d56d5981648ce81425a4d63a048df",
       "placeholder": "​",
       "style": "IPY_MODEL_6fb1b9fc1ac04f229e3c0f6270855c6e",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "4e49a378c3d949838bcfc1a38dbce79f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4f324dbc3ca34d9aba6fac67f1929cbc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "4f492aa787b6411595dd044c95d7cec3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_30c1f54cd2f34baeae48000e406426ae",
       "placeholder": "​",
       "style": "IPY_MODEL_d28baf9151924a54a452f608d7c973e4",
       "tabbable": null,
       "tooltip": null,
       "value": " 3359/3361 [03:19&lt;00:00, 16.08it/s]"
      }
     },
     "508d524f7c9546d2b0d2ea565d04fc54": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "53c70979188c46a99eb99cc0e19dfb93": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3ef01da262cc4b9887306e4b05852b98",
       "placeholder": "​",
       "style": "IPY_MODEL_4ccc4b4fe295484cb786ddc58deb6173",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "562d2b7eb41c47c5b60d0b01c339e0bd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_29860800d44b4d93a6620f90c016f00f",
       "placeholder": "​",
       "style": "IPY_MODEL_bd5d80b9ebac4c67b6da783a060e33e4",
       "tabbable": null,
       "tooltip": null,
       "value": " 2184/2185 [01:45&lt;00:00, 13.60it/s]"
      }
     },
     "566ed58b0ee048808872fe3123fa8009": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "57953731938c48c1bfd44503354dedc7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_43a2ddc41258473793490d77f15a264a",
       "placeholder": "​",
       "style": "IPY_MODEL_693777daa6ad4115a9a868279c9c46e0",
       "tabbable": null,
       "tooltip": null,
       "value": " 3/? [00:00&lt;00:00, 14.49it/s]"
      }
     },
     "585d3810fcba498389e80ab52d71cb19": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "587ba4a1e58b4d18b8dbee33fe65e850": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "58f81d05b5334cc4ba3df7cbf43242f5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_cf70f23a79c6409da8ebcec0c002a597",
       "placeholder": "​",
       "style": "IPY_MODEL_ddbd4b16be3a435995d36ec0430312cd",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "59163e4d297544ba9067e5a446357dd2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "594db41ff8544ad29b47c07af10fcdf8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_96df948ceaea44e9a11f1fc731bff2f0",
       "placeholder": "​",
       "style": "IPY_MODEL_e2439b1b76a24a07a357598a5afff735",
       "tabbable": null,
       "tooltip": null,
       "value": " 4/? [00:00&lt;00:00, 16.41it/s]"
      }
     },
     "59530c8bb5374311a4d2fb52478abf5d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "59a440da7ac04bc38d3cea53c0530c79": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_18e44510314a460d9fbea4e4207db092",
       "placeholder": "​",
       "style": "IPY_MODEL_e23661724db847d5b35259dc299ae400",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "5cb30e6d76304390946c9d783356475a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5d8764d6914148458f025c48a3e423b9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5f056c263b9247c0a183014ffdf28687": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "5f6662bdd1244f13a5896394861ece7a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5f9399f4131549aaa9c314369957363a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_741a9ac757314e1f8840664fead8a398",
        "IPY_MODEL_111e629df14343a88ff38f6711ccb771",
        "IPY_MODEL_07e0e349b03e487e932fdfb816651d77"
       ],
       "layout": "IPY_MODEL_0eb6d5b773f44ce5aaf49fb757541fab",
       "tabbable": null,
       "tooltip": null
      }
     },
     "628ca90905584ff1a8ccb8eb0dd33923": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "630819aab2ca4fb186c9bfee3d82c7d7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "63ab4f6906544ac09714b99a69861640": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "64731c0eb4124dc3982318a7c9effaf4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_566ed58b0ee048808872fe3123fa8009",
       "placeholder": "​",
       "style": "IPY_MODEL_79d746d6a10948c3b8246a02877dea8e",
       "tabbable": null,
       "tooltip": null,
       "value": " 2183/2185 [01:44&lt;00:00, 12.93it/s]"
      }
     },
     "658ef058986a4428afcd742102819faa": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "65cd199626fd4aedbc49a9c1cd6bff65": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "689f2760584a4a769dd274a0a49432dd": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "68cf128d0d0a4f3d9ddf2ac28048834a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "693777daa6ad4115a9a868279c9c46e0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "69de4a4610234e78a4b18cd07577c403": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "6a33742141574f2f9bb3f14dfc60c524": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "6a6810ede54c467e8640036f76e92e1b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ec12de4586c1431f934c623eb0dfe0bc",
       "placeholder": "​",
       "style": "IPY_MODEL_fc4498704156410eb09a538cd81f0c08",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "6ddc4364eb394a10be52809fc49c0c19": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6fb1b9fc1ac04f229e3c0f6270855c6e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "71bea7d4ce11461188ba9808b68e6ac9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4c0fdd71c5e64b5b91aeeb2a0a4737db",
       "max": 2185.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_1edd1e1dcfdb4fe29c3efd0edc522e81",
       "tabbable": null,
       "tooltip": null,
       "value": 2185.0
      }
     },
     "733a1302a18d4898a901fc7f13397642": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "734db0a7aa2a47fbb9dcb8463f5ca80d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_842a233128994981b91fc6bc9564d5d5",
        "IPY_MODEL_24754d36ef7e43b9aaf9a3381772304e",
        "IPY_MODEL_ddf9c327efb54960ac416634be6c4375"
       ],
       "layout": "IPY_MODEL_aa7a7fddbd504c9b99aba81708d88df9",
       "tabbable": null,
       "tooltip": null
      }
     },
     "73e9f6cb5ffd4cfcafe5c333d7c82a00": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "740f6ff8af0143c4a58f7d4c8bb434fe": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_1a1536bf1f5b4f4e8faa61124470b01c",
       "max": 3361.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_7ba4739a49bd45c88cf6a3352bc6f428",
       "tabbable": null,
       "tooltip": null,
       "value": 3361.0
      }
     },
     "741a9ac757314e1f8840664fead8a398": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_cd5a0f7c28be42388379d074bcebf45c",
       "placeholder": "​",
       "style": "IPY_MODEL_cc6a90d02f58438c82efb0405363b821",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "75cf7fbf8c214075999ce3d2d2f45aa8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "761a344f9d414a2eb34cdd2944407aa4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "767b2f43ac1e4eac9fadc8f5587a5d26": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "info",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_cc9690fc0aa64baa863303fe6e375df2",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_bc9de5651e7f466aa7d1a2796336e3ac",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "7832cb145fcc484db21ce1074600d6a0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "7872d1cb5f2c4a578b242eebadb22a5e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_d7019e69336444618ceb247fb96ad715",
       "placeholder": "​",
       "style": "IPY_MODEL_7a463758bd04471d9e8430f2dda42dce",
       "tabbable": null,
       "tooltip": null,
       "value": "Generating CM Data: 100%"
      }
     },
     "792d83e4f0b24248b9a8aab2f2ba307e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_b55a5b0fef1c437587df2d43a5eae25a",
        "IPY_MODEL_461bbf496fb94b9289c55ef7e5dffca6",
        "IPY_MODEL_57953731938c48c1bfd44503354dedc7"
       ],
       "layout": "IPY_MODEL_107da8b1d61f4b62b2ba46464e2da9bb",
       "tabbable": null,
       "tooltip": null
      }
     },
     "7955155e46df43798e10be485814a623": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "798d3278ab2a46a0b1f4cebee253be6c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "79a3af3d71a3402d8d214f81ad190460": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_b8c2616ddcb642f4b4b2a97797bad4ca",
       "max": 3361.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_b751f40f46f4454199fb410b7acd43a1",
       "tabbable": null,
       "tooltip": null,
       "value": 3361.0
      }
     },
     "79d746d6a10948c3b8246a02877dea8e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "7a0d56d5981648ce81425a4d63a048df": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7a3f1b88c0e7426ebb56201b0e15ff93": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_59a440da7ac04bc38d3cea53c0530c79",
        "IPY_MODEL_7aaa4bb0c4b74c4bb7e5c81e7477f8b1",
        "IPY_MODEL_562d2b7eb41c47c5b60d0b01c339e0bd"
       ],
       "layout": "IPY_MODEL_1f305328065349fa9a4fdf8374a9e890",
       "tabbable": null,
       "tooltip": null
      }
     },
     "7a463758bd04471d9e8430f2dda42dce": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "7a994e1fde0f400090d112d4363a39c8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_6a6810ede54c467e8640036f76e92e1b",
        "IPY_MODEL_7d5debb5bbcc44c4b363f498ae19fafd",
        "IPY_MODEL_2b927aef714e46a384df365dac4843c9"
       ],
       "layout": "IPY_MODEL_c201f91581f541d6b1a09773d0880143",
       "tabbable": null,
       "tooltip": null
      }
     },
     "7aaa4bb0c4b74c4bb7e5c81e7477f8b1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_73e9f6cb5ffd4cfcafe5c333d7c82a00",
       "max": 2185.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_8943c82ef9884846b9f4b89c1b19c3cc",
       "tabbable": null,
       "tooltip": null,
       "value": 2185.0
      }
     },
     "7ad0765c12094b2ea8c17cb610d8470c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "7ba4739a49bd45c88cf6a3352bc6f428": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "7cc341d8c26a49608f1f55ea952faefc": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7d5debb5bbcc44c4b363f498ae19fafd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_1c0182bee6e246cfaaff1232e60f32a5",
       "max": 3361.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_658ef058986a4428afcd742102819faa",
       "tabbable": null,
       "tooltip": null,
       "value": 3361.0
      }
     },
     "7e125e24dc1347c4ae58d93630bb9daa": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7f22b94af3ee45d8afcb19ef11a88808": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "807f59e9bd76441280242f72bea83561": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "81070302d0e54be8a168af717bae89ee": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_53c70979188c46a99eb99cc0e19dfb93",
        "IPY_MODEL_f396cf16e607489aa1155a137c7cedb2",
        "IPY_MODEL_8cd585481efa41bfa30de51d90615969"
       ],
       "layout": "IPY_MODEL_7f22b94af3ee45d8afcb19ef11a88808",
       "tabbable": null,
       "tooltip": null
      }
     },
     "819a6f7465744174b9f8038f6d14422a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "830519de42c6434ead5aac0f890f1bf5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "83486d92cb4b4417b15d71a43a8d4f58": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "837ead0274a04d74bcf06ee51bd12725": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_e61c32a27f1b4f57a7d9101fc1db2cad",
        "IPY_MODEL_740f6ff8af0143c4a58f7d4c8bb434fe",
        "IPY_MODEL_862463878a914769a07df12056254f85"
       ],
       "layout": "IPY_MODEL_65cd199626fd4aedbc49a9c1cd6bff65",
       "tabbable": null,
       "tooltip": null
      }
     },
     "842a233128994981b91fc6bc9564d5d5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_36f29310953a4d8a98033ba5715efaf0",
       "placeholder": "​",
       "style": "IPY_MODEL_c8230b19ab8e42de8e3e279deb961ee1",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "846759294bed4ce79607b99154c6e2c5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7cc341d8c26a49608f1f55ea952faefc",
       "max": 2185.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_401ec22e62f74cb7b9029ac8306fe92f",
       "tabbable": null,
       "tooltip": null,
       "value": 2185.0
      }
     },
     "850afadc93944191a0215f04d613237c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_63ab4f6906544ac09714b99a69861640",
       "max": 3361.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_bc71a32c9bf941bdbaef38d94a2e20e0",
       "tabbable": null,
       "tooltip": null,
       "value": 3361.0
      }
     },
     "857bd92311f340d79401d7a42b995612": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "85d93527275e4b3a8593fd13ba0d701b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "862463878a914769a07df12056254f85": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5d8764d6914148458f025c48a3e423b9",
       "placeholder": "​",
       "style": "IPY_MODEL_084466f97e5c4673b9353a377935cef4",
       "tabbable": null,
       "tooltip": null,
       "value": " 3359/3361 [03:19&lt;00:00, 16.69it/s]"
      }
     },
     "86987dc4c060422c9c39588bcf418905": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "879d30222689414398a6e3639962eeff": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_1269aff214dd47be92b7bb776db3d80b",
        "IPY_MODEL_d5bb8c23a28f45628355be72232013af",
        "IPY_MODEL_230d5b53f74d45489fc84ba5afaf25b0"
       ],
       "layout": "IPY_MODEL_830519de42c6434ead5aac0f890f1bf5",
       "tabbable": null,
       "tooltip": null
      }
     },
     "888d260778a84d86bc0ded64a77eeeba": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c5aa00ab0dd64f1d8788dc9a1d200874",
       "placeholder": "​",
       "style": "IPY_MODEL_d8c24780c70e44038e61ee64fc710408",
       "tabbable": null,
       "tooltip": null,
       "value": " 2184/2185 [01:45&lt;00:00, 12.53it/s]"
      }
     },
     "892c9386aa6142948fe22621ca4b52f3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "8943c82ef9884846b9f4b89c1b19c3cc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "894830545bc04fb39ae99a2d9796ac5c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_628ca90905584ff1a8ccb8eb0dd33923",
       "placeholder": "​",
       "style": "IPY_MODEL_86987dc4c060422c9c39588bcf418905",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "8a5c4a4ceacd41cba030a5ce68d96e0f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5cb30e6d76304390946c9d783356475a",
       "placeholder": "​",
       "style": "IPY_MODEL_4f324dbc3ca34d9aba6fac67f1929cbc",
       "tabbable": null,
       "tooltip": null,
       "value": " 3359/3361 [03:18&lt;00:00, 16.46it/s]"
      }
     },
     "8bc09e391bd7486892c6f2c670611c86": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8c8cb7ac67f3491a80ad13305efe2742": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9c6dfbb35ac44d29a5d7d5466f65271a",
       "max": 2185.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_1846467da36444489c4dd640166e6469",
       "tabbable": null,
       "tooltip": null,
       "value": 2185.0
      }
     },
     "8cd585481efa41bfa30de51d90615969": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_397df02c213243a292f64ee51d03a932",
       "placeholder": "​",
       "style": "IPY_MODEL_3b51be98b4544c63a12440e6130f17ef",
       "tabbable": null,
       "tooltip": null,
       "value": " 3359/3361 [03:19&lt;00:00, 16.37it/s]"
      }
     },
     "8d5e48264926403aa036d4f5c81b4c76": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_4a4bb9f4121e4c0e93481937f85c1430",
        "IPY_MODEL_850afadc93944191a0215f04d613237c",
        "IPY_MODEL_4f492aa787b6411595dd044c95d7cec3"
       ],
       "layout": "IPY_MODEL_4007cfec77dc4a95b6ddd6480599d466",
       "tabbable": null,
       "tooltip": null
      }
     },
     "9003448f655f4c05a0a2863d160df855": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "90ab9e0c222541aa99bd29df59b6af7b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_158bc85b554c41e39921c7c5977e3d05",
       "placeholder": "​",
       "style": "IPY_MODEL_df8a6541d42e48bd8c99616c0adb8fdc",
       "tabbable": null,
       "tooltip": null,
       "value": " 2184/2185 [01:45&lt;00:00, 12.48it/s]"
      }
     },
     "9517105c195e48f382669d03b13c8d44": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "96df948ceaea44e9a11f1fc731bff2f0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "971708c8af9b4300ae377e9e7ac65ad7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "99ee50ea522b420ebbf3cdb3a88807b5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9a65ca3510ce4a0f9688e700eb23cb42": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_8bc09e391bd7486892c6f2c670611c86",
       "max": 3361.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_587ba4a1e58b4d18b8dbee33fe65e850",
       "tabbable": null,
       "tooltip": null,
       "value": 3361.0
      }
     },
     "9aaf42fe69804de2a27a2a7b79e4e604": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_caee0f2fe5ab4e9d9134655899887582",
       "placeholder": "​",
       "style": "IPY_MODEL_9003448f655f4c05a0a2863d160df855",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "9b24d276f61e4e9db0f3052817f7d217": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "9b46c92c993a4c0585cecab8f482d049": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c5468def019749e683c72111bc040613",
       "max": 3361.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_1dfc5c1f3820484cb928f19856930d81",
       "tabbable": null,
       "tooltip": null,
       "value": 3361.0
      }
     },
     "9c4431442c134c2db2c42679ba532fd9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9c6dfbb35ac44d29a5d7d5466f65271a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9f2e4a3a87284b3082160fd6c0250d74": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_689f2760584a4a769dd274a0a49432dd",
       "placeholder": "​",
       "style": "IPY_MODEL_733a1302a18d4898a901fc7f13397642",
       "tabbable": null,
       "tooltip": null,
       "value": " 2183/2185 [01:45&lt;00:00, 11.92it/s]"
      }
     },
     "a1730898d7b74721bc498aa6d8cc357e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "a2a9847ad42242df8d68ef56989e961c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "a4d62a2cd3eb427cbfd09d57efc81ccd": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a50b8a235dfc4030af33074fad478f40": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a645fdd172894f5a9e0392b5158c210a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a70558162ab64c39a7bebad4a08ec90e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a91117eaf4c847f89ab3be155779e037": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "aa7a7fddbd504c9b99aba81708d88df9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "ab83843b880d4aa3a7eb017b31916f02": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "ab9ecd0d9bd94b2a86a0ede43263d616": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_37010e8d36bf420996209d901b3d8868",
        "IPY_MODEL_4111fcfa3dd946febce7ec1c8d7c0f26",
        "IPY_MODEL_d603cc2eb3f84b6bb3400ebcb533dce9"
       ],
       "layout": "IPY_MODEL_c7185b55a86546898978fd0347f9f6ae",
       "tabbable": null,
       "tooltip": null
      }
     },
     "ac20a71677224b5cadac477f6c301ab8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3720f76e61f945a9b5c446d52cf87648",
       "placeholder": "​",
       "style": "IPY_MODEL_75cf7fbf8c214075999ce3d2d2f45aa8",
       "tabbable": null,
       "tooltip": null,
       "value": ""
      }
     },
     "ac2a092158154d9b81ace4c3f14a54fe": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "ad9f6fad9f8b4d5fbb7a90449046304a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_392190c753c94a8d82de3492bf9421d0",
       "placeholder": "​",
       "style": "IPY_MODEL_d4508e9be3344f1da817b5a6b66bd6bb",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "af70dca36c264b77947206f73656bb1d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "b269ec2ffa674a3eae4de09c6e84a33c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_e274f7d495a945ca981bfef19d46a54d",
        "IPY_MODEL_f89eb3c3e687479b8b561a1c5006c8a3",
        "IPY_MODEL_04ca002edd3b4174b2c034d28b66f9bb"
       ],
       "layout": "IPY_MODEL_df6b685bcfd2445d96d053c0c920cb82",
       "tabbable": null,
       "tooltip": null
      }
     },
     "b2ffe38e9e2c47eaaf8da1834f49f389": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "b55a5b0fef1c437587df2d43a5eae25a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c7506b181ec948cca23d54cc1964c2a0",
       "placeholder": "​",
       "style": "IPY_MODEL_1091fc12c71b4710a24a666d7d6ba08b",
       "tabbable": null,
       "tooltip": null,
       "value": ""
      }
     },
     "b751f40f46f4454199fb410b7acd43a1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "b8c2616ddcb642f4b4b2a97797bad4ca": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b906d0af3c464096983e8d5f2d7d8b4a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b921f3262df8451891aafb727f9b8759": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_894830545bc04fb39ae99a2d9796ac5c",
        "IPY_MODEL_19df40c71dbd4788b0ffdf53a19a2fe8",
        "IPY_MODEL_9f2e4a3a87284b3082160fd6c0250d74"
       ],
       "layout": "IPY_MODEL_c7bbb47a3aaf4ed48bc3f78365fa2f07",
       "tabbable": null,
       "tooltip": null
      }
     },
     "bbcdd29a25f84664ae53baf1e5188d08": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "info",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4010262a25e5450f835726ee0fa06e41",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_6a33742141574f2f9bb3f14dfc60c524",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "bc71a32c9bf941bdbaef38d94a2e20e0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "bc9de5651e7f466aa7d1a2796336e3ac": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "bd5d80b9ebac4c67b6da783a060e33e4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "be433fae986844c3aee7d17af767fee3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "bf45ea0dfdf54de68978f97e9d952481": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_4e28f375a0694cf29ee002b5318e6310",
        "IPY_MODEL_71bea7d4ce11461188ba9808b68e6ac9",
        "IPY_MODEL_cf749dba29c948dc963e6d1fef0fb1ba"
       ],
       "layout": "IPY_MODEL_69de4a4610234e78a4b18cd07577c403",
       "tabbable": null,
       "tooltip": null
      }
     },
     "c0de311d1890410d92471604b1fe21d8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e39ed503db6b4d0d87ae200b81385fdc",
       "placeholder": "​",
       "style": "IPY_MODEL_29bc6dc76c8f476983f54f997458011b",
       "tabbable": null,
       "tooltip": null,
       "value": "seq: 100%"
      }
     },
     "c18c25aa29434f4ab3f738ae9a0b587b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c201f91581f541d6b1a09773d0880143": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "c2ae60a3312846dda0dc324e96ebdd51": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_357000740a3e400199a3b00ab5384645",
        "IPY_MODEL_bbcdd29a25f84664ae53baf1e5188d08",
        "IPY_MODEL_594db41ff8544ad29b47c07af10fcdf8"
       ],
       "layout": "IPY_MODEL_7832cb145fcc484db21ce1074600d6a0",
       "tabbable": null,
       "tooltip": null
      }
     },
     "c2b4b35a9b1f40018307da918893dc1d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "c43a494a61bf4127a47e58baf7493728": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_23d222f5410342bc84dbf637490df99c",
       "placeholder": "​",
       "style": "IPY_MODEL_197f347067ea4ddb97bd01bbf7a355b6",
       "tabbable": null,
       "tooltip": null,
       "value": " 3361/3361 [03:19&lt;00:00, 16.82it/s]"
      }
     },
     "c5468def019749e683c72111bc040613": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c5aa00ab0dd64f1d8788dc9a1d200874": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c7185b55a86546898978fd0347f9f6ae": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "c748b9ad4dda48e299e64aad230ed4a9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "c7506b181ec948cca23d54cc1964c2a0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c7bbb47a3aaf4ed48bc3f78365fa2f07": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "c8230b19ab8e42de8e3e279deb961ee1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "ca194937c472448db385137cfc371c91": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0ab53be7b12a464992a63707668e751c",
       "placeholder": "​",
       "style": "IPY_MODEL_630819aab2ca4fb186c9bfee3d82c7d7",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "caee0f2fe5ab4e9d9134655899887582": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "cc6a90d02f58438c82efb0405363b821": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "cc7bbb8a4e9b4918afb9e16f2dc57c40": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "cc9690fc0aa64baa863303fe6e375df2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "cd5a0f7c28be42388379d074bcebf45c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "cd679059145a4a02974e547cc02a5ed5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_3c513163b7ef403bbc250bf87ffef811",
        "IPY_MODEL_d2584894daa44a97bfe94cf8d56c47e0",
        "IPY_MODEL_d29f52e0cf2a47b88d298fea5dcaaa39"
       ],
       "layout": "IPY_MODEL_ac2a092158154d9b81ace4c3f14a54fe",
       "tabbable": null,
       "tooltip": null
      }
     },
     "ce6d8229f630477aa5226a688e413178": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_58f81d05b5334cc4ba3df7cbf43242f5",
        "IPY_MODEL_34670bf2bc854f2f90941bdaa203a47f",
        "IPY_MODEL_90ab9e0c222541aa99bd29df59b6af7b"
       ],
       "layout": "IPY_MODEL_c748b9ad4dda48e299e64aad230ed4a9",
       "tabbable": null,
       "tooltip": null
      }
     },
     "cf70f23a79c6409da8ebcec0c002a597": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "cf749dba29c948dc963e6d1fef0fb1ba": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_a4d62a2cd3eb427cbfd09d57efc81ccd",
       "placeholder": "​",
       "style": "IPY_MODEL_ea2ad5d3e0244efb990e2b343c25c983",
       "tabbable": null,
       "tooltip": null,
       "value": " 2184/2185 [01:43&lt;00:00, 12.41it/s]"
      }
     },
     "cfe6306f3a22401297c952fabd48b4a9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "d043b4e5ecb94921b01f6ab46d54f73c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4ab5da3585d047918cbafb61f027752b",
       "max": 307538.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_b2ffe38e9e2c47eaaf8da1834f49f389",
       "tabbable": null,
       "tooltip": null,
       "value": 307538.0
      }
     },
     "d2584894daa44a97bfe94cf8d56c47e0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_db884621c86f43abbe6fa51251afa65f",
       "max": 2185.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_07aa2b32e5ee48dcba9f23b4d11f889a",
       "tabbable": null,
       "tooltip": null,
       "value": 2185.0
      }
     },
     "d28baf9151924a54a452f608d7c973e4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "d29f52e0cf2a47b88d298fea5dcaaa39": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_a70558162ab64c39a7bebad4a08ec90e",
       "placeholder": "​",
       "style": "IPY_MODEL_e837d22ce55549fb9268d7c2bad8e4f9",
       "tabbable": null,
       "tooltip": null,
       "value": " 2183/2185 [01:45&lt;00:00, 11.77it/s]"
      }
     },
     "d4508e9be3344f1da817b5a6b66bd6bb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "d5bb8c23a28f45628355be72232013af": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_36fae483abe14cce898b03b2bc10210f",
       "max": 2185.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_c2b4b35a9b1f40018307da918893dc1d",
       "tabbable": null,
       "tooltip": null,
       "value": 2185.0
      }
     },
     "d603cc2eb3f84b6bb3400ebcb533dce9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_22580c36c89848469d34cd59795740e1",
       "placeholder": "​",
       "style": "IPY_MODEL_453c1f887ae741f9b551cd20a32bf4d1",
       "tabbable": null,
       "tooltip": null,
       "value": " 2185/2185 [01:45&lt;00:00, 15.34it/s]"
      }
     },
     "d7019e69336444618ceb247fb96ad715": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d8471f2f8b654a94b769838ebbf00b2b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "d8c24780c70e44038e61ee64fc710408": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "db884621c86f43abbe6fa51251afa65f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ddbd4b16be3a435995d36ec0430312cd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "ddf9c327efb54960ac416634be6c4375": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_efe38d074a4a4a639e276075c0410a07",
       "placeholder": "​",
       "style": "IPY_MODEL_7ad0765c12094b2ea8c17cb610d8470c",
       "tabbable": null,
       "tooltip": null,
       "value": " 3360/3361 [03:18&lt;00:00, 16.32it/s]"
      }
     },
     "de30cc76caea41fa8273ddc6f9523c31": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_c0de311d1890410d92471604b1fe21d8",
        "IPY_MODEL_d043b4e5ecb94921b01f6ab46d54f73c",
        "IPY_MODEL_16bddf9961e943f9887f636a9358560e"
       ],
       "layout": "IPY_MODEL_12f02d37973b4db29c58a360f1e23aa3",
       "tabbable": null,
       "tooltip": null
      }
     },
     "de5e43ff95124bdcaaccc7dd3cc00725": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "df6b685bcfd2445d96d053c0c920cb82": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "df8a6541d42e48bd8c99616c0adb8fdc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "e23661724db847d5b35259dc299ae400": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "e2439b1b76a24a07a357598a5afff735": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "e274f7d495a945ca981bfef19d46a54d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_971708c8af9b4300ae377e9e7ac65ad7",
       "placeholder": "​",
       "style": "IPY_MODEL_2585cffe7a5a4ef29d7b627a74a70b10",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating: 100%"
      }
     },
     "e3051db915c44652ac6d47157bd6a721": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e39ed503db6b4d0d87ae200b81385fdc": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e5346c322c3f430a923e0b21badd936b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "e61c32a27f1b4f57a7d9101fc1db2cad": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_a50b8a235dfc4030af33074fad478f40",
       "placeholder": "​",
       "style": "IPY_MODEL_22b7a7a5fa1d46cf90481a22c735d68f",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "e61c67a8b1d9476594c6d95d556239b8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_ecc12ae2226743329a2d263516197082",
        "IPY_MODEL_9a65ca3510ce4a0f9688e700eb23cb42",
        "IPY_MODEL_40fa6eec424440a3a35de6e335b11cfb"
       ],
       "layout": "IPY_MODEL_ecf693387d8b4ab0bc7d8d5da89aa8cc",
       "tabbable": null,
       "tooltip": null
      }
     },
     "e64bc2aad8c34a47abb70ef313967b9a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e73979ff58314f6a90d42c661d13e9f8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e3051db915c44652ac6d47157bd6a721",
       "placeholder": "​",
       "style": "IPY_MODEL_892c9386aa6142948fe22621ca4b52f3",
       "tabbable": null,
       "tooltip": null,
       "value": " 15/? [00:00&lt;00:00, 24.41it/s]"
      }
     },
     "e837d22ce55549fb9268d7c2bad8e4f9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "ea2ad5d3e0244efb990e2b343c25c983": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "ea5f6effc4864290ab27765961f23f62": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "eb0c4276b1f94085a6c498906342f5b3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ec12de4586c1431f934c623eb0dfe0bc": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ecc12ae2226743329a2d263516197082": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_1c98514114bb4a0784a07b37cec3e864",
       "placeholder": "​",
       "style": "IPY_MODEL_164a90490ec54d19960e94914734f3f3",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "ecc6d2a703304940b4fee1decaaf2bae": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_fd440deb0d244b80a8126d08362c955d",
       "placeholder": "​",
       "style": "IPY_MODEL_feb91b4773814eee92262712cf873d8e",
       "tabbable": null,
       "tooltip": null,
       "value": "Training: 100%"
      }
     },
     "ecf693387d8b4ab0bc7d8d5da89aa8cc": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "efe38d074a4a4a639e276075c0410a07": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f1546dfd3c674b6cb2550100ec081887": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f396cf16e607489aa1155a137c7cedb2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ea5f6effc4864290ab27765961f23f62",
       "max": 3361.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_36f9a9f1a3094094a7f77bc84e7f0db6",
       "tabbable": null,
       "tooltip": null,
       "value": 3361.0
      }
     },
     "f43e5199fa074479a0f76ae41e0aebc1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_ac20a71677224b5cadac477f6c301ab8",
        "IPY_MODEL_767b2f43ac1e4eac9fadc8f5587a5d26",
        "IPY_MODEL_e73979ff58314f6a90d42c661d13e9f8"
       ],
       "layout": "IPY_MODEL_a1730898d7b74721bc498aa6d8cc357e",
       "tabbable": null,
       "tooltip": null
      }
     },
     "f51ff8851f86493a83d782c0f18e7ca0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_eb0c4276b1f94085a6c498906342f5b3",
       "placeholder": "​",
       "style": "IPY_MODEL_d8471f2f8b654a94b769838ebbf00b2b",
       "tabbable": null,
       "tooltip": null,
       "value": " 3359/3361 [03:19&lt;00:00, 16.39it/s]"
      }
     },
     "f815e63e4a80487c911b423ece901d79": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_be433fae986844c3aee7d17af767fee3",
       "max": 2185.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_7955155e46df43798e10be485814a623",
       "tabbable": null,
       "tooltip": null,
       "value": 2185.0
      }
     },
     "f89eb3c3e687479b8b561a1c5006c8a3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c18c25aa29434f4ab3f738ae9a0b587b",
       "max": 2185.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_819a6f7465744174b9f8038f6d14422a",
       "tabbable": null,
       "tooltip": null,
       "value": 2185.0
      }
     },
     "fc4498704156410eb09a538cd81f0c08": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "fd440deb0d244b80a8126d08362c955d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "fe46732dea4643b59afc86a3659e10e1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "feb91b4773814eee92262712cf873d8e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
