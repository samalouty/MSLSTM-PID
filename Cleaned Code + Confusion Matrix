{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":11201333,"sourceType":"datasetVersion","datasetId":6993690},{"sourceId":11201362,"sourceType":"datasetVersion","datasetId":6993708},{"sourceId":11201388,"sourceType":"datasetVersion","datasetId":6993722},{"sourceId":11201422,"sourceType":"datasetVersion","datasetId":6993740},{"sourceId":11201506,"sourceType":"datasetVersion","datasetId":6993794},{"sourceId":11201543,"sourceType":"datasetVersion","datasetId":6993809},{"sourceId":302300,"sourceType":"modelInstanceVersion","isSourceIdPinned":true,"modelInstanceId":258142,"modelId":279383}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!git clone https://github.com/aras62/PIE.git\n!unzip /content/PIE/annotations/annotations.zip -d /content/PIE\n!unzip /content/PIE/annotations/annotations_vehicle.zip -d /content/PIE\n# !git clone https://github.com/hustvl/YOLOP.git\n!mkdir /kaggle/working/PIE/content","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-30T00:12:16.827458Z","iopub.execute_input":"2025-03-30T00:12:16.827747Z","iopub.status.idle":"2025-03-30T00:12:24.169254Z","shell.execute_reply.started":"2025-03-30T00:12:16.827716Z","shell.execute_reply":"2025-03-30T00:12:24.168280Z"}},"outputs":[{"name":"stdout","text":"Cloning into 'PIE'...\nremote: Enumerating objects: 178, done.\u001b[K\nremote: Counting objects: 100% (93/93), done.\u001b[K\nremote: Compressing objects: 100% (73/73), done.\u001b[K\nremote: Total 178 (delta 33), reused 75 (delta 18), pack-reused 85 (from 1)\u001b[K\nReceiving objects: 100% (178/178), 144.63 MiB | 34.20 MiB/s, done.\nResolving deltas: 100% (74/74), done.\nUpdating files: 100% (41/41), done.\nunzip:  cannot find or open /content/PIE/annotations/annotations.zip, /content/PIE/annotations/annotations.zip.zip or /content/PIE/annotations/annotations.zip.ZIP.\nunzip:  cannot find or open /content/PIE/annotations/annotations_vehicle.zip, /content/PIE/annotations/annotations_vehicle.zip.zip or /content/PIE/annotations/annotations_vehicle.zip.ZIP.\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"!pip install -q ultralytics opencv-python-headless # ultralytics includes necessary dependencies","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-30T00:12:24.170314Z","iopub.execute_input":"2025-03-30T00:12:24.170639Z","iopub.status.idle":"2025-03-30T00:12:29.407200Z","shell.execute_reply.started":"2025-03-30T00:12:24.170606Z","shell.execute_reply":"2025-03-30T00:12:29.406130Z"}},"outputs":[{"name":"stdout","text":"\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m950.0/950.0 kB\u001b[0m \u001b[31m24.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m\n\u001b[?25h","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import Dataset, DataLoader\nimport xml.etree.ElementTree as ET\nimport os\nimport numpy as np\nfrom sklearn.metrics import accuracy_score, precision_recall_fscore_support, roc_auc_score, confusion_matrix, ConfusionMatrixDisplay\nfrom tqdm.notebook import tqdm\nimport random\nimport math\nimport zipfile\nimport cv2\nfrom ultralytics import YOLO\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-30T00:21:00.040419Z","iopub.execute_input":"2025-03-30T00:21:00.040811Z","iopub.status.idle":"2025-03-30T00:21:00.046502Z","shell.execute_reply.started":"2025-03-30T00:21:00.040781Z","shell.execute_reply":"2025-03-30T00:21:00.045478Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"zip_path = \"/kaggle/working/PIE/annotations/annotations.zip\"\nextract_to = \"/kaggle/working/PIE/annotations/\"\n\nwith zipfile.ZipFile(zip_path, 'r') as zip_ref:\n    zip_ref.extractall(extract_to)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-30T00:13:32.764524Z","iopub.execute_input":"2025-03-30T00:13:32.765105Z","iopub.status.idle":"2025-03-30T00:13:34.300772Z","shell.execute_reply.started":"2025-03-30T00:13:32.765072Z","shell.execute_reply":"2025-03-30T00:13:34.299853Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"import numpy as np \nimport pandas as pd \nimport os\nimport zipfile\nimport random\nimport math\nimport xml.etree.ElementTree as ET\nfrom tqdm.notebook import tqdm\n\n# Deep Learning libraries\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import Dataset, DataLoader\nfrom sklearn.metrics import accuracy_score, precision_recall_fscore_support, roc_auc_score, confusion_matrix\nimport cv2\nfrom ultralytics import YOLO\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n\n# --- Configuration ---\nBASE_DIR = '/kaggle/input'\nANNOTATION_DIR = '/kaggle/working/PIE/annotations/annotations'\n# CLIP_DIR = os.path.join(BASE_DIR, 'PIE_clips') # Not used directly in this version\n\n# Model Hyperparameters\nSEQ_LEN = 15        # Number of past frames to observe\nPRED_LEN = 1        # Predict state at the end of sequence (relative to seq_len)\nINPUT_SIZE_BBOX = 4 # (center_x, center_y, width, height) - normalized\nINPUT_SIZE_POSE = 34  \nLSTM_HIDDEN_SIZE = 128\nNUM_LSTM_LAYERS = 2\nDROPOUT_RATE = 0.3\nNUM_CLASSES = 2      # 0: not-crossing, 1: crossing\nATTENTION_DIM = 128  # Dimension for the attention mechanism\n\n# Training Hyperparameters\nLEARNING_RATE = 1e-4\nBATCH_SIZE = 64\nNUM_EPOCHS = 3 # Adjust as needed\nDEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(f\"Using device: {DEVICE}\")\n\nTRAIN_SETS = ['pie-set01', 'pie-set02', 'pie-set03', 'pie-set04', 'pie-set05']\nVAL_SETS = ['pie-set06']\n\n\n# --- Helper Function: Compute IOU ---\ndef compute_iou(boxA, boxB):\n    # boxA and boxB are in [x1, y1, x2, y2] format\n    xA = max(boxA[0], boxB[0])\n    yA = max(boxA[1], boxB[1])\n    xB = min(boxA[2], boxB[2])\n    yB = min(boxA[3], boxB[3])\n    interW = max(0, xB - xA)\n    interH = max(0, yB - yA)\n    interArea = interW * interH\n    boxAArea = (boxA[2] - boxA[0]) * (boxA[3] - boxA[1])\n    boxBArea = (boxB[2] - boxB[0]) * (boxB[3] - boxB[1])\n    iou = interArea / float(boxAArea + boxBArea - interArea + 1e-6)\n    return iou\n\n# --- Data Preprocessing Functions ---\n\ndef parse_annotations(xml_file):\n    \"\"\"Parses a PIE annotation XML file.\"\"\"\n    try:\n        tree = ET.parse(xml_file)\n        root = tree.getroot()\n    except ET.ParseError:\n        print(f\"Error parsing {xml_file}\")\n        return None, None\n\n    img_width = int(root.find('.//original_size/width').text)\n    img_height = int(root.find('.//original_size/height').text)\n\n    ped_tracks = {} # {ped_id: {frame: {'bbox': [xtl,ytl,xbr,ybr], 'cross': label}}}\n\n    for track in root.findall('.//track[@label=\"pedestrian\"]'):\n        for box in track.findall('.//box'):\n            frame = int(box.get('frame'))\n            ped_id = box.find('.//attribute[@name=\"id\"]').text\n            xtl = float(box.get('xtl'))\n            ytl = float(box.get('ytl'))\n            xbr = float(box.get('xbr'))\n            ybr = float(box.get('ybr'))\n            occluded = int(box.get('occluded', 0)) # Handle missing occluded tag\n\n            # Only process non-occluded boxes for simplicity\n            if occluded > 0:\n                continue\n\n            cross_status = box.find('.//attribute[@name=\"cross\"]').text\n            # Map labels: 1 for crossing, 0 otherwise\n            cross_label = 1 if cross_status == 'crossing' else 0\n\n            if ped_id not in ped_tracks:\n                ped_tracks[ped_id] = {}\n\n            # Normalize bounding box: [center_x, center_y, width, height]\n            center_x = ((xtl + xbr) / 2) / img_width\n            center_y = ((ytl + ybr) / 2) / img_height\n            width = (xbr - xtl) / img_width\n            height = (ybr - ytl) / img_height\n\n            # Basic check for valid bbox dimensions\n            if width <= 0 or height <= 0 or not (0 <= center_x <= 1) or not (0 <= center_y <= 1):\n                continue # Skip invalid boxes\n\n            ped_tracks[ped_id][frame] = {\n                'bbox': [center_x, center_y, width, height],\n                'cross': cross_label\n            }\n\n    return ped_tracks, (img_width, img_height)\n\ndef create_sequences(ped_tracks, seq_len, pred_len, set_folder):\n    \"\"\"Creates sequences of features and labels from pedestrian tracks.\n       Now also stores frame numbers and image dimensions for pose extraction.\"\"\"\n    sequences = []\n    for ped_id, frames_data in ped_tracks.items():\n        sorted_frames = sorted(frames_data.keys())\n\n        for i in range(len(sorted_frames) - seq_len - pred_len + 1):\n            seq_frames = sorted_frames[i : i + seq_len]\n            target_frame = sorted_frames[i + seq_len + pred_len - 1]\n\n            # Ensure frames are consecutive\n            is_continuous = all(seq_frames[j+1] - seq_frames[j] == 1 for j in range(len(seq_frames)-1))\n            is_target_continuous = (target_frame - seq_frames[-1] == pred_len)\n\n            if not (is_continuous and is_target_continuous):\n                continue\n\n            # Extract bbox features\n            bbox_seq = [frames_data[f]['bbox'] for f in seq_frames]\n            label = frames_data[target_frame]['cross']\n\n            # For pose extraction, store the frame numbers and image dimensions.\n            # (Assume all frames in the XML share the same image dimensions)\n            # Note: set_folder helps locate images in BASE_DIR.\n            sequence = {\n                'bbox': np.array(bbox_seq, dtype=np.float32),\n                'label': label,\n                'frames': seq_frames,\n                'set_folder': set_folder\n            }\n            # Also store image dimensions from the first frame\n            # (Assuming they are constant within a video)\n            # Here, we pick the first frame to get dims from the parsed annotation.\n            # You may adjust if different frames have different dims.\n            sequence['img_dims'] = None  # will be set outside if needed\n            sequences.append(sequence)\n    return sequences\n\n# --- Dataset Class ---\n\nclass PIEDataset(Dataset):\n    def __init__(self, annotation_dir, set_folders, seq_len, pred_len):\n        self.seq_len = seq_len\n        self.pred_len = pred_len\n        self.sequences = []\n        self.BASE_DIR = BASE_DIR  # Use global BASE_DIR for images\n\n        self.pose_model = YOLO('/kaggle/input/yolov11n/pytorch/default/1/yolo11n-pose.pt') \n        self.pose_model.to(DEVICE)\n\n\n        print(f\"Loading data from sets: {set_folders}\")\n        for set_folder in tqdm(set_folders):\n            annotation_set_folder = set_folder.replace('pie-', '')              \n            set_path = os.path.join(annotation_dir, annotation_set_folder)\n            if not os.path.isdir(set_path):\n                print(f\"Warning: Annotation directory not found for {annotation_set_folder}\")\n                continue\n\n            xml_files = [f for f in os.listdir(set_path) if f.endswith('.xml')]\n            for xml_file in tqdm(xml_files, desc=f\"Processing {annotation_set_folder}\", leave=False):\n                file_path = os.path.join(set_path, xml_file)\n                ped_tracks, dims = parse_annotations(file_path)\n                if dims is None:\n                    continue\n                img_width, img_height = dims\n                if ped_tracks:\n                    video_sequences = create_sequences(ped_tracks, seq_len, pred_len, annotation_set_folder)\n                    # Set image dimensions for each sequence\n                    for seq in video_sequences:\n                        seq['img_dims'] = (img_width, img_height)\n                    self.sequences.extend(video_sequences)\n\n        print(f\"Loaded {len(self.sequences)} sequences.\")\n        # Basic balancing (undersampling majority class if highly imbalanced)\n        labels = [s['label'] for s in self.sequences]\n        count_0 = labels.count(0)\n        count_1 = labels.count(1)\n        print(f\"Class distribution: 0={count_0}, 1={count_1}\")\n\n    def __len__(self):\n        return len(self.sequences)\n\n    def __getitem__(self, idx):\n        sequence_data = self.sequences[idx]\n\n        # --- Modality Extraction for BBox ---\n        bbox_features = torch.tensor(sequence_data['bbox'], dtype=torch.float32)\n\n        # For each frame in the sequence, load the image and extract keypoints\n        set_folder = sequence_data['set_folder']\n        img_dims = sequence_data['img_dims']  # (img_width, img_height)\n        img_width, img_height = img_dims\n        pose_seq = []\n\n        for frame in sequence_data['frames']:\n            # Assumption: images are stored in BASE_DIR/<set_folder> and named as \"<frame>.jpg\"\n            image_path = os.path.join(self.BASE_DIR, set_folder, f\"{frame}.jpg\")\n            # Load image using OpenCV\n            image = cv2.imread(image_path)\n            if image is None:\n                # If image is not found, use a zero vector\n                pose_seq.append(np.zeros(INPUT_SIZE_POSE, dtype=np.float32))\n                continue\n\n            # Convert BGR to RGB\n            image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n\n            results = self.pose_model(image_rgb, verbose=False)  # results is a list\n            keypoints_vector = np.zeros(INPUT_SIZE_POSE, dtype=np.float32)  # default if no match is found\n\n            # Convert annotation bbox from normalized (center_x, center_y, w, h) to pixel coordinates\n            ann_bbox = sequence_data['bbox'][sequence_data['frames'].index(frame)]\n            ann_cx, ann_cy, ann_w, ann_h = ann_bbox\n            ann_x1 = (ann_cx - ann_w/2) * img_width\n            ann_y1 = (ann_cy - ann_h/2) * img_height\n            ann_x2 = (ann_cx + ann_w/2) * img_width\n            ann_y2 = (ann_cy + ann_h/2) * img_height\n            ann_box_pixels = [ann_x1, ann_y1, ann_x2, ann_y2]\n\n            # Search for the detection with best IOU with the annotation bbox\n            best_iou = 0.0\n            best_keypoints = None\n            if results and len(results) > 0:\n                # Each result may contain multiple detections.\n                res = results[0]\n                # res.boxes.xyxy gives detections; res.keypoints.data gives keypoints if available.\n                if res.boxes is not None and res.keypoints is not None:\n                    boxes = res.boxes.xyxy.cpu().numpy()  # shape: (n, 4)\n                    kps = res.keypoints.cpu().numpy()       # shape: (n, 17, 3)\n                    for i in range(len(boxes)):\n                        det_box = boxes[i]\n                        iou = compute_iou(ann_box_pixels, det_box)\n                        if iou > best_iou:\n                            best_iou = iou\n                            best_keypoints = kps[i]\n\n            # If a detection with sufficient overlap is found, process its keypoints\n            if best_keypoints is not None and best_iou > 0.3:\n                # Extract x,y coordinates (ignoring confidence) and normalize them\n                norm_keypoints = []\n                for (x, y, conf) in best_keypoints:\n                    norm_keypoints.extend([x / img_width, y / img_height])\n                keypoints_vector = np.array(norm_keypoints, dtype=np.float32)\n                # Ensure it is of length 34\n                if keypoints_vector.shape[0] != INPUT_SIZE_POSE:\n                    keypoints_vector = np.zeros(INPUT_SIZE_POSE, dtype=np.float32)\n            # Else, keypoints_vector remains zeros\n\n            pose_seq.append(keypoints_vector)\n        pose_features = torch.tensor(np.array(pose_seq), dtype=torch.float32)\n\n        # --- Return combined modalities ---\n        features = {\n            'bbox': bbox_features,\n            'pose': pose_features\n        }\n        label = torch.tensor(sequence_data['label'], dtype=torch.long) # Use long for CrossEntropyLoss\n\n        return features, label\n    \n\n# --- Model Architecture ---\n\nclass Attention(nn.Module):\n    \"\"\" Simple Dot-Product Attention or Learned Attention\"\"\"\n    def __init__(self, hidden_dim, attention_dim):\n        super(Attention, self).__init__()\n        self.attention_net = nn.Sequential(\n            nn.Linear(hidden_dim, attention_dim),\n            nn.Tanh(),\n            nn.Linear(attention_dim, 1)\n        )\n\n    def forward(self, lstm_output):\n        attention_scores = self.attention_net(lstm_output).squeeze(2)\n        attention_weights = torch.softmax(attention_scores, dim=1)\n        context_vector = torch.sum(lstm_output * attention_weights.unsqueeze(2), dim=1)\n        return context_vector, attention_weights\n\nclass MultiStreamAdaptiveLSTM(nn.Module):\n    def __init__(self, input_sizes, lstm_hidden_size, num_lstm_layers, num_classes,\n                 attention_dim, dropout_rate, stream_names=['bbox', 'pose']):\n        super(MultiStreamAdaptiveLSTM, self).__init__()\n        self.stream_names = stream_names\n        self.lstms = nn.ModuleDict()\n        self.attentions = nn.ModuleDict()\n\n        for name in self.stream_names:\n            input_size = input_sizes[name]\n            self.lstms[name] = nn.LSTM(input_size, lstm_hidden_size, num_lstm_layers,\n                                       batch_first=True, dropout=dropout_rate if num_lstm_layers > 1 else 0,\n                                       bidirectional=False)\n            self.attentions[name] = Attention(lstm_hidden_size, attention_dim)\n\n        num_streams = len(self.stream_names)\n        combined_feature_dim = lstm_hidden_size * num_streams\n\n        self.dropout = nn.Dropout(dropout_rate)\n        self.fc1 = nn.Linear(combined_feature_dim, combined_feature_dim // 2)\n        self.relu = nn.ReLU()\n        self.fc2 = nn.Linear(combined_feature_dim // 2, num_classes)\n\n    def forward(self, x):\n        stream_context_vectors = []\n        stream_att_weights = {}\n\n        for name in self.stream_names:\n            lstm_input = x[name]\n            lstm_out, _ = self.lstms[name](lstm_input)\n            context_vector, attention_weights = self.attentions[name](lstm_out)\n            stream_context_vectors.append(context_vector)\n            stream_att_weights[name] = attention_weights\n\n        fused_features = torch.cat(stream_context_vectors, dim=1)\n        x = self.dropout(fused_features)\n        x = self.fc1(x)\n        x = self.relu(x)\n        x = self.dropout(x)\n        logits = self.fc2(x)\n        return logits\n\n# --- Training and Evaluation Functions ---\n\ndef train_epoch(model, dataloader, optimizer, criterion, device):\n    model.train()\n    total_loss = 0.0\n    all_preds = []\n    all_labels = []\n\n    for features, labels in tqdm(dataloader, desc=\"Training\", leave=False):\n        input_features = {name: features[name].to(device) for name in model.stream_names}\n        labels = labels.to(device)\n        optimizer.zero_grad()\n        outputs = model(input_features)\n        loss = criterion(outputs, labels)\n        loss.backward()\n        optimizer.step()\n        total_loss += loss.item()\n        preds = torch.argmax(outputs, dim=1)\n        all_preds.extend(preds.cpu().numpy())\n        all_labels.extend(labels.cpu().numpy())\n\n    avg_loss = total_loss / len(dataloader)\n    accuracy = accuracy_score(all_labels, all_preds)\n    return avg_loss, accuracy\n\ndef evaluate_epoch(model, dataloader, criterion, device):\n    model.eval()\n    total_loss = 0.0\n    all_labels = []\n    all_preds = []\n    all_probs = []\n\n    with torch.no_grad():\n        for features, labels in tqdm(dataloader, desc=\"Evaluating\", leave=False):\n            input_features = {name: features[name].to(device) for name in model.stream_names}\n            labels = labels.to(device)\n            outputs = model(input_features)\n            loss = criterion(outputs, labels)\n            total_loss += loss.item()\n            probs = torch.softmax(outputs, dim=1)\n            preds = torch.argmax(probs, dim=1)\n            all_labels.extend(labels.cpu().numpy())\n            all_preds.extend(preds.cpu().numpy())\n            all_probs.extend(probs.cpu().numpy())\n\n    avg_loss = total_loss / len(dataloader)\n    all_probs = np.array(all_probs)\n    all_labels = np.array(all_labels)\n    all_preds = np.array(all_preds)\n\n    accuracy = accuracy_score(all_labels, all_preds)\n    precision, recall, f1, _ = precision_recall_fscore_support(\n        all_labels, all_preds, average='binary', pos_label=1, zero_division=0\n    )\n    if len(np.unique(all_labels)) > 1:\n       auc = roc_auc_score(all_labels, all_probs[:, 1])\n    else:\n       auc = float('nan')\n    metrics = {\n        'loss': avg_loss,\n        'accuracy': accuracy,\n        'precision': precision,\n        'recall': recall,\n        'f1': f1,\n        'auc': auc\n    }\n    return metrics\n\ndef get_predictions_and_labels(model, dataloader, device):\n    model.eval()\n    all_labels = []\n    all_preds = []\n\n    with torch.no_grad():\n        for features, labels in tqdm(dataloader, desc=\"Generating Confusion Matrix\", leave=False):\n            input_features = {name: features[name].to(device) for name in model.stream_names}\n            labels = labels.to(device)\n            outputs = model(input_features)\n            preds = torch.argmax(outputs, dim=1)\n            all_labels.extend(labels.cpu().numpy())\n            all_preds.extend(preds.cpu().numpy())\n\n    return np.array(all_labels), np.array(all_preds)\n\n# --- Main Execution ---\n\nif __name__ == '__main__':\n    # Initialize Datasets and Dataloaders\n    train_dataset = PIEDataset(ANNOTATION_DIR, TRAIN_SETS, SEQ_LEN, PRED_LEN)\n    val_dataset = PIEDataset(ANNOTATION_DIR, VAL_SETS, SEQ_LEN, PRED_LEN)\n\n    if len(train_dataset) == 0 or len(val_dataset) == 0:\n         raise ValueError(\"Dataset loading failed or resulted in empty datasets. Check paths and parsing.\")\n\n    train_loader = DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True, num_workers=4, pin_memory=True)\n    val_loader = DataLoader(val_dataset, batch_size=BATCH_SIZE, shuffle=False, num_workers=4, pin_memory=True)\n\n    # Initialize Model, Loss, and Optimizer\n    input_sizes = {'bbox': INPUT_SIZE_BBOX, 'pose': INPUT_SIZE_POSE}\n    model = MultiStreamAdaptiveLSTM(\n        input_sizes=input_sizes,\n        lstm_hidden_size=LSTM_HIDDEN_SIZE,\n        num_lstm_layers=NUM_LSTM_LAYERS,\n        num_classes=NUM_CLASSES,\n        attention_dim=ATTENTION_DIM,\n        dropout_rate=DROPOUT_RATE,\n        stream_names=['bbox', 'pose']\n    ).to(DEVICE)\n\n    print(model)\n    criterion = nn.CrossEntropyLoss()\n    optimizer = optim.Adam(model.parameters(), lr=LEARNING_RATE)\n\n    # Training Loop\n    best_val_f1 = -1.0\n    print(\"\\n--- Starting Training ---\")\n    for epoch in range(NUM_EPOCHS):\n        train_loss, train_acc = train_epoch(model, train_loader, optimizer, criterion, DEVICE)\n        val_metrics = evaluate_epoch(model, val_loader, criterion, DEVICE)\n        print(f\"Epoch {epoch+1}/{NUM_EPOCHS}:\")\n        print(f\"  Train Loss: {train_loss:.4f}, Train Acc: {train_acc:.4f}\")\n        print(f\"  Val Loss:   {val_metrics['loss']:.4f}, Val Acc: {val_metrics['accuracy']:.4f}\")\n        print(f\"  Val Precision: {val_metrics['precision']:.4f}, Recall: {val_metrics['recall']:.4f}, F1: {val_metrics['f1']:.4f}\")\n        print(f\"  Val AUC: {val_metrics['auc']:.4f}\")\n\n        if val_metrics['f1'] > best_val_f1:\n            best_val_f1 = val_metrics['f1']\n            torch.save(model.state_dict(), 'best_model.pth')\n            print(f\"  Saved new best model with F1: {best_val_f1:.4f}\")\n        print(\"-\" * 20)\n\n    print(\"--- Training Finished ---\")\n\n    print(\"\\n--- Final Evaluation on Validation Set using Best Model ---\")\n    model.load_state_dict(torch.load('best_model.pth', map_location=DEVICE))\n    final_metrics = evaluate_epoch(model, val_loader, criterion, DEVICE)\n    true_labels, pred_labels = get_predictions_and_labels(model, val_loader, DEVICE)\n    cm = confusion_matrix(true_labels, pred_labels)\n\n    labels = ['Not Crossing', 'Crossing']\n    print(\"Final Performance Metrics:\")\n    print(f\"  Accuracy:  {final_metrics['accuracy']:.4f}\")\n    print(f\"  Precision: {final_metrics['precision']:.4f}\")\n    print(f\"  Recall:    {final_metrics['recall']:.4f}\")\n    print(f\"  F1 Score:  {final_metrics['f1']:.4f}\")\n    print(f\"  AUC:       {final_metrics['auc']:.4f}\")\n    print(f\"  Loss:      {final_metrics['loss']:.4f}\")\n\n    # Plot confusion matrix\n    plt.figure(figsize=(6, 5))\n    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=labels, yticklabels=labels)\n    plt.xlabel('Predicted')\n    plt.ylabel('Actual')\n    plt.title('Confusion Matrix')\n    plt.tight_layout()\n    plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-30T00:57:55.006543Z","iopub.execute_input":"2025-03-30T00:57:55.006868Z","iopub.status.idle":"2025-03-30T01:06:34.459082Z","shell.execute_reply.started":"2025-03-30T00:57:55.006842Z","shell.execute_reply":"2025-03-30T01:06:34.458151Z"}},"outputs":[{"name":"stdout","text":"Using device: cuda\nLoading data from sets: ['pie-set01', 'pie-set02', 'pie-set03', 'pie-set04', 'pie-set05']\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/5 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"3c5cc87f13584fc8aa7b29b2469f59de"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Processing set01:   0%|          | 0/4 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":""}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Processing set02:   0%|          | 0/3 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":""}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Processing set03:   0%|          | 0/19 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":""}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Processing set04:   0%|          | 0/16 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":""}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Processing set05:   0%|          | 0/2 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":""}},"metadata":{}},{"name":"stdout","text":"Loaded 396674 sequences.\nClass distribution: 0=318492, 1=78182\nLoading data from sets: ['pie-set06']\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/1 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"f25610ec00784faf932a4d6e74b363d2"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Processing set06:   0%|          | 0/9 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":""}},"metadata":{}},{"name":"stdout","text":"Loaded 46323 sequences.\nClass distribution: 0=37978, 1=8345\nMultiStreamAdaptiveLSTM(\n  (lstms): ModuleDict(\n    (bbox): LSTM(4, 128, num_layers=2, batch_first=True, dropout=0.3)\n    (pose): LSTM(34, 128, num_layers=2, batch_first=True, dropout=0.3)\n  )\n  (attentions): ModuleDict(\n    (bbox): Attention(\n      (attention_net): Sequential(\n        (0): Linear(in_features=128, out_features=128, bias=True)\n        (1): Tanh()\n        (2): Linear(in_features=128, out_features=1, bias=True)\n      )\n    )\n    (pose): Attention(\n      (attention_net): Sequential(\n        (0): Linear(in_features=128, out_features=128, bias=True)\n        (1): Tanh()\n        (2): Linear(in_features=128, out_features=1, bias=True)\n      )\n    )\n  )\n  (dropout): Dropout(p=0.3, inplace=False)\n  (fc1): Linear(in_features=256, out_features=128, bias=True)\n  (relu): ReLU()\n  (fc2): Linear(in_features=128, out_features=2, bias=True)\n)\n\n--- Starting Training ---\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Training:   0%|          | 0/6199 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":""}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Evaluating:   0%|          | 0/724 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":""}},"metadata":{}},{"name":"stdout","text":"Epoch 1/3:\n  Train Loss: 0.3695, Train Acc: 0.8359\n  Val Loss:   0.2825, Val Acc: 0.8779\n  Val Precision: 0.7371, Recall: 0.5005, F1: 0.5962\n  Val AUC: 0.9062\n  Saved new best model with F1: 0.5962\n--------------------\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Training:   0%|          | 0/6199 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":""}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Evaluating:   0%|          | 0/724 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":""}},"metadata":{}},{"name":"stdout","text":"Epoch 2/3:\n  Train Loss: 0.3244, Train Acc: 0.8660\n  Val Loss:   0.2863, Val Acc: 0.8841\n  Val Precision: 0.8431, Recall: 0.4380, F1: 0.5765\n  Val AUC: 0.9013\n--------------------\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Training:   0%|          | 0/6199 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":""}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Evaluating:   0%|          | 0/724 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":""}},"metadata":{}},{"name":"stdout","text":"Epoch 3/3:\n  Train Loss: 0.3185, Train Acc: 0.8672\n  Val Loss:   0.2946, Val Acc: 0.8841\n  Val Precision: 0.8887, Recall: 0.4078, F1: 0.5591\n  Val AUC: 0.8987\n--------------------\n--- Training Finished ---\n\n--- Final Evaluation on Validation Set using Best Model ---\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Evaluating:   0%|          | 0/724 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":""}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Generating Confusion Matrix:   0%|          | 0/724 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":""}},"metadata":{}},{"name":"stdout","text":"Final Performance Metrics:\n  Accuracy:  0.8779\n  Precision: 0.7371\n  Recall:    0.5005\n  F1 Score:  0.5962\n  AUC:       0.9062\n  Loss:      0.2825\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 600x500 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":14}]}